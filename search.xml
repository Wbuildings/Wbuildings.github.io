<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2023年春秋杯网络安全联赛冬季赛</title>
    <url>/Crypto/2023%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E5%86%AC%E5%AD%A3%E8%B5%9B/</url>
    <content><![CDATA[<p>冬季赛？真冷啊，刚好下雪哩！万幸没被零封</p>
<h2 id="not-wiener"><a href="#not-wiener" class="headerlink" title="not_wiener"></a>not_wiener</h2><span id="more"></span>
<p>源码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random, os</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha1</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line">flag=<span class="string">b&#x27;&#x27;</span></span><br><span class="line">x = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_key</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        q = getPrime(<span class="number">160</span>)</span><br><span class="line">        p = <span class="number">2</span> * getPrime(<span class="number">1024</span>-<span class="number">160</span>) * q+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(p):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    h = random.randint(<span class="number">1</span>, p - <span class="number">1</span>)</span><br><span class="line">    g = powmod(h,(p-<span class="number">1</span>)//q, p)</span><br><span class="line">    y=<span class="built_in">pow</span>(g,x,p)</span><br><span class="line">    <span class="keyword">return</span> p,q,g,y</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cry</span>():</span><br><span class="line">    a =</span><br><span class="line">    p = getPrime(<span class="number">512</span>)</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    d = getPrime(<span class="number">280</span>)</span><br><span class="line">    n = p * q</span><br><span class="line">    e = inverse(d, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">    c = <span class="built_in">pow</span>(a, e, n)</span><br><span class="line">    <span class="keyword">return</span> n,e,c</span><br><span class="line"></span><br><span class="line">p,q,g,y=gen_key()</span><br><span class="line">k1 = random.randint(<span class="number">1</span>, q-<span class="number">1</span>)</span><br><span class="line">h1 = bytes_to_long(sha1(os.urandom(<span class="number">20</span>)).digest())</span><br><span class="line">r1 = <span class="built_in">pow</span>(g, k1, p) % q</span><br><span class="line">s1 = ((h1 + x*r1) * invert(k1, q))% q</span><br><span class="line"></span><br><span class="line">n,e,c= cry()</span><br><span class="line"></span><br><span class="line">a=</span><br><span class="line">b= <span class="number">17474742587088593627</span></span><br><span class="line">k2 = a*k1 + b</span><br><span class="line">h2 = bytes_to_long(sha1(os.urandom(<span class="number">20</span>)).digest())</span><br><span class="line">r2 = <span class="built_in">pow</span>(g, k2, p) % q</span><br><span class="line">s2 = ((h2 + x*r2) * invert(k2, q)) % q</span><br><span class="line"><span class="built_in">print</span>(n,e,c)</span><br><span class="line"><span class="built_in">print</span>(p,q,g,y)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;h1:%s r1:%s s1:%s&quot;</span>%(h1,r1,s1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;h2:%s r2:%s s2:%s&quot;</span>%(h2,r2,s2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># n = 98871082998654651904594468693622517613869880791884929588100914778964766348914919202255397776583412976785216592924335179128220634848871563960167726280836726035489482233158897362166942091133366827965811201438682117312550600943385153640907629347663140487841016782054145413246763816202055243693289693996466579973</span></span><br><span class="line"><span class="comment"># e = 76794907644383980853714814867502708655721653834095293468287239735547303515225813724998992623067007382800348003887194379223500764768679311862929538017193078946067634221782978912767213553254272722105803768005680182504500278005295062173004098796746439445343896868825218704046110925243884449608326413259156482881</span></span><br><span class="line"><span class="comment"># c = 13847199761503953970544410090850216804358289955503229676987212195445226107828814170983735135692611175621170777484117542057117607579344112008580933900051471041224296342157618857321522682033260246480258856376097987259016643294843196752685340912823459403703609796624411954082410762846356541101561523204985391564</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># p= 161310487790785086482919800040790794252181955976860261806376528825054571226885460699399582301663712128659872558133023114896223014064381772944582265101778076462675402208451386747128794418362648706087358197370036248544508513485401475977401111270352593919906650855268709958151310928767086591887892397722958234379</span></span><br><span class="line"><span class="comment"># q= 1115861146902610160756777713087325311747309309771</span></span><br><span class="line"><span class="comment"># g= 61073566757714587321114447684333928353300944355112378054603585955730395524359123615359185275743626350773632555967063692889668342544616165017003197599818881844811647270423070958521148291118914198811187731689123176313367399492561288350530256722898205674043032421874788802819858438796795768177550638273020791962</span></span><br><span class="line"><span class="comment"># y= 23678147495254433946472657196764372220306841739888385605070426528738230369489739339976134564575544246606937803367113623097260181789372915552172469427842482448570540429192377881186772226796452797182435452490307834205012154495575570994963829345053331967442452842152258650027916313982835119514473311305158299360</span></span><br><span class="line"><span class="comment"># (h1, r1, s1) = 535874494834828755542711401117152397489711233142, 117859946800380767356190121030392492081340616512, 26966646740134065096660259687229179143947213779</span></span><br><span class="line"><span class="comment"># (h2, r2, s2) = 236574518096866758760287021848258048065293279716, 863199000523521111517835459866422731857447792677, 517924607931342012033031470185302567344725962419</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>not wiener？那就是 Boneh Durfee了？看看</p>
<p>d为280位，n为1024位，计算 <script type="math/tex">delta = \frac{280}{1024} \approx 0.274</script> ，符合</p>
<p>调参，m = 8   </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment">############################################</span></span><br><span class="line"><span class="comment"># Config</span></span><br><span class="line"><span class="comment">##########################################</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Setting debug to true will display more informations</span></span><br><span class="line"><span class="string">about the lattice, the bounds, the vectors...</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Setting strict to true will stop the algorithm (and</span></span><br><span class="line"><span class="string">return (-1, -1)) if we don&#x27;t have a correct</span></span><br><span class="line"><span class="string">upperbound on the determinant. Note that this</span></span><br><span class="line"><span class="string">doesn&#x27;t necesseraly mean that no solutions</span></span><br><span class="line"><span class="string">will be found since the theoretical upperbound is</span></span><br><span class="line"><span class="string">usualy far away from actual results. That is why</span></span><br><span class="line"><span class="string">you should probably use `strict = False`</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">strict = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">This is experimental, but has provided remarkable results</span></span><br><span class="line"><span class="string">so far. It tries to reduce the lattice as much as it can</span></span><br><span class="line"><span class="string">while keeping its efficiency. I see no reason not to use</span></span><br><span class="line"><span class="string">this option, but if things don&#x27;t work, you should try</span></span><br><span class="line"><span class="string">disabling it</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">helpful_only = <span class="literal">True</span></span><br><span class="line">dimension_min = <span class="number">7</span> <span class="comment"># stop removing if lattice reaches that dimension</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################################</span></span><br><span class="line"><span class="comment"># Functions</span></span><br><span class="line"><span class="comment">##########################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># display stats on helpful vectors</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">helpful_vectors</span>(<span class="params">BB, modulus</span>):</span><br><span class="line">    nothelpful = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">if</span> BB[ii,ii] &gt;= modulus:</span><br><span class="line">            nothelpful += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(nothelpful, <span class="string">&quot;/&quot;</span>, BB.dimensions()[<span class="number">0</span>], <span class="string">&quot; vectors are not helpful&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># display matrix picture with 0 and X</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix_overview</span>(<span class="params">BB, bound</span>):</span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">        a = (<span class="string">&#x27;%02d &#x27;</span> % ii)</span><br><span class="line">        <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">1</span>]):</span><br><span class="line">            a += <span class="string">&#x27;0&#x27;</span> <span class="keyword">if</span> BB[ii,jj] == <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;X&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> BB.dimensions()[<span class="number">0</span>] &lt; <span class="number">60</span>:</span><br><span class="line">                a += <span class="string">&#x27; &#x27;</span></span><br><span class="line">        <span class="keyword">if</span> BB[ii, ii] &gt;= bound:</span><br><span class="line">            a += <span class="string">&#x27;~&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tries to remove unhelpful vectors</span></span><br><span class="line"><span class="comment"># we start at current = n-1 (last vector)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_unhelpful</span>(<span class="params">BB, monomials, bound, current</span>):</span><br><span class="line">    <span class="comment"># end of our recursive function</span></span><br><span class="line">    <span class="keyword">if</span> current == -<span class="number">1</span> <span class="keyword">or</span> BB.dimensions()[<span class="number">0</span>] &lt;= dimension_min:</span><br><span class="line">        <span class="keyword">return</span> BB</span><br><span class="line"></span><br><span class="line">    <span class="comment"># we start by checking from the end</span></span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(current, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># if it is unhelpful:</span></span><br><span class="line">        <span class="keyword">if</span> BB[ii, ii] &gt;= bound:</span><br><span class="line">            affected_vectors = <span class="number">0</span></span><br><span class="line">            affected_vector_index = <span class="number">0</span></span><br><span class="line">            <span class="comment"># let&#x27;s check if it affects other vectors</span></span><br><span class="line">            <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(ii + <span class="number">1</span>, BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">                <span class="comment"># if another vector is affected:</span></span><br><span class="line">                <span class="comment"># we increase the count</span></span><br><span class="line">                <span class="keyword">if</span> BB[jj, ii] != <span class="number">0</span>:</span><br><span class="line">                    affected_vectors += <span class="number">1</span></span><br><span class="line">                    affected_vector_index = jj</span><br><span class="line"></span><br><span class="line">            <span class="comment"># level:0</span></span><br><span class="line">            <span class="comment"># if no other vectors end up affected</span></span><br><span class="line">            <span class="comment"># we remove it</span></span><br><span class="line">            <span class="keyword">if</span> affected_vectors == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;* removing unhelpful vector&quot;</span>, ii)</span><br><span class="line">                BB = BB.delete_columns([ii])</span><br><span class="line">                BB = BB.delete_rows([ii])</span><br><span class="line">                monomials.pop(ii)</span><br><span class="line">                BB = remove_unhelpful(BB, monomials, bound, ii-<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> BB</span><br><span class="line"></span><br><span class="line">            <span class="comment"># level:1</span></span><br><span class="line">            <span class="comment"># if just one was affected we check</span></span><br><span class="line">            <span class="comment"># if it is affecting someone else</span></span><br><span class="line">            <span class="keyword">elif</span> affected_vectors == <span class="number">1</span>:</span><br><span class="line">                affected_deeper = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(affected_vector_index + <span class="number">1</span>, BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">                    <span class="comment"># if it is affecting even one vector</span></span><br><span class="line">                    <span class="comment"># we give up on this one</span></span><br><span class="line">                    <span class="keyword">if</span> BB[kk, affected_vector_index] != <span class="number">0</span>:</span><br><span class="line">                        affected_deeper = <span class="literal">False</span></span><br><span class="line">                <span class="comment"># remove both it if no other vector was affected and</span></span><br><span class="line">                <span class="comment"># this helpful vector is not helpful enough</span></span><br><span class="line">                <span class="comment"># compared to our unhelpful one</span></span><br><span class="line">                <span class="keyword">if</span> affected_deeper <span class="keyword">and</span> <span class="built_in">abs</span>(bound - BB[affected_vector_index, affected_vector_index]) &lt; <span class="built_in">abs</span>(bound - BB[ii, ii]):</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;* removing unhelpful vectors&quot;</span>, ii, <span class="string">&quot;and&quot;</span>, affected_vector_index)</span><br><span class="line">                    BB = BB.delete_columns([affected_vector_index, ii])</span><br><span class="line">                    BB = BB.delete_rows([affected_vector_index, ii])</span><br><span class="line">                    monomials.pop(affected_vector_index)</span><br><span class="line">                    monomials.pop(ii)</span><br><span class="line">                    BB = remove_unhelpful(BB, monomials, bound, ii-<span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">return</span> BB</span><br><span class="line">    <span class="comment"># nothing happened</span></span><br><span class="line">    <span class="keyword">return</span> BB</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">Returns:</span></span><br><span class="line"><span class="string">* 0,0   if it fails</span></span><br><span class="line"><span class="string">* -1,-1 if `strict=true`, and determinant doesn&#x27;t bound</span></span><br><span class="line"><span class="string">* x0,y0 the solutions of `pol`</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">boneh_durfee</span>(<span class="params">pol, modulus, mm, tt, XX, YY</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Boneh and Durfee revisited by Herrmann and May</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    finds a solution if:</span></span><br><span class="line"><span class="string">    * d &lt; N^delta</span></span><br><span class="line"><span class="string">    * |x| &lt; e^delta</span></span><br><span class="line"><span class="string">    * |y| &lt; e^0.5</span></span><br><span class="line"><span class="string">    whenever delta &lt; 1 - sqrt(2)/2 ~ 0.292</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># substitution (Herrman and May)</span></span><br><span class="line">    PR.&lt;u, x, y&gt; = PolynomialRing(ZZ)</span><br><span class="line">    Q = PR.quotient(x*y + <span class="number">1</span> - u) <span class="comment"># u = xy + 1</span></span><br><span class="line">    polZ = Q(pol).lift()</span><br><span class="line"></span><br><span class="line">    UU = XX*YY + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># x-shifts</span></span><br><span class="line">    gg = []</span><br><span class="line">    <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(mm + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(mm - kk + <span class="number">1</span>):</span><br><span class="line">            xshift = x^ii * modulus^(mm - kk) * polZ(u, x, y)^kk</span><br><span class="line">            gg.append(xshift)</span><br><span class="line">    gg.sort()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># x-shifts list of monomials</span></span><br><span class="line">    monomials = []</span><br><span class="line">    <span class="keyword">for</span> polynomial <span class="keyword">in</span> gg:</span><br><span class="line">        <span class="keyword">for</span> monomial <span class="keyword">in</span> polynomial.monomials():</span><br><span class="line">            <span class="keyword">if</span> monomial <span class="keyword">not</span> <span class="keyword">in</span> monomials:</span><br><span class="line">                monomials.append(monomial)</span><br><span class="line">    monomials.sort()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># y-shifts (selected by Herrman and May)</span></span><br><span class="line">    <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, tt + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(floor(mm/tt) * jj, mm + <span class="number">1</span>):</span><br><span class="line">            yshift = y^jj * polZ(u, x, y)^kk * modulus^(mm - kk)</span><br><span class="line">            yshift = Q(yshift).lift()</span><br><span class="line">            gg.append(yshift) <span class="comment"># substitution</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># y-shifts list of monomials</span></span><br><span class="line">    <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, tt + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(floor(mm/tt) * jj, mm + <span class="number">1</span>):</span><br><span class="line">            monomials.append(u^kk * y^jj)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># construct lattice B</span></span><br><span class="line">    nn = <span class="built_in">len</span>(monomials)</span><br><span class="line">    BB = Matrix(ZZ, nn)</span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(nn):</span><br><span class="line">        BB[ii, <span class="number">0</span>] = gg[ii](<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, ii + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> monomials[jj] <span class="keyword">in</span> gg[ii].monomials():</span><br><span class="line">                BB[ii, jj] = gg[ii].monomial_coefficient(monomials[jj]) * monomials[jj](UU,XX,YY)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Prototype to reduce the lattice</span></span><br><span class="line">    <span class="keyword">if</span> helpful_only:</span><br><span class="line">        <span class="comment"># automatically remove</span></span><br><span class="line">        BB = remove_unhelpful(BB, monomials, modulus^mm, nn-<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># reset dimension</span></span><br><span class="line">        nn = BB.dimensions()[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> nn == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;failure&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>,<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># check if vectors are helpful</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        helpful_vectors(BB, modulus^mm)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># check if determinant is correctly bounded</span></span><br><span class="line">    det = BB.det()</span><br><span class="line">    bound = modulus^(mm*nn)</span><br><span class="line">    <span class="keyword">if</span> det &gt;= bound:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;We do not have det &lt; bound. Solutions might not be found.&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Try with highers m and t.&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> debug:</span><br><span class="line">            diff = (log(det) - log(bound)) / log(<span class="number">2</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;size det(L) - size e^(m*n) = &quot;</span>, floor(diff))</span><br><span class="line">        <span class="keyword">if</span> strict:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;det(L) &lt; e^(m*n) (good! If a solution exists &lt; N^delta, it will be found)&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># display the lattice basis</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        matrix_overview(BB, modulus^mm)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># LLL</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;optimizing basis of the lattice via LLL, this can take a long time&quot;</span>)</span><br><span class="line"></span><br><span class="line">    BB = BB.LLL()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;LLL is done!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># transform vector i &amp; j -&gt; polynomials 1 &amp; 2</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;looking for independent vectors in the lattice&quot;</span>)</span><br><span class="line">    found_polynomials = <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> pol1_idx <span class="keyword">in</span> <span class="built_in">range</span>(nn - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> pol2_idx <span class="keyword">in</span> <span class="built_in">range</span>(pol1_idx + <span class="number">1</span>, nn):</span><br><span class="line">            <span class="comment"># for i and j, create the two polynomials</span></span><br><span class="line">            PR.&lt;w,z&gt; = PolynomialRing(ZZ)</span><br><span class="line">            pol1 = pol2 = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(nn):</span><br><span class="line">                pol1 += monomials[jj](w*z+<span class="number">1</span>,w,z) * BB[pol1_idx, jj] / monomials[jj](UU,XX,YY)</span><br><span class="line">                pol2 += monomials[jj](w*z+<span class="number">1</span>,w,z) * BB[pol2_idx, jj] / monomials[jj](UU,XX,YY)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># resultant</span></span><br><span class="line">            PR.&lt;q&gt; = PolynomialRing(ZZ)</span><br><span class="line">            rr = pol1.resultant(pol2)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># are these good polynomials?</span></span><br><span class="line">            <span class="keyword">if</span> rr.is_zero() <span class="keyword">or</span> rr.monomials() == [<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;found them, using vectors&quot;</span>, pol1_idx, <span class="string">&quot;and&quot;</span>, pol2_idx)</span><br><span class="line">                found_polynomials = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> found_polynomials:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found_polynomials:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;no independant vectors could be found. This should very rarely happen...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    rr = rr(q, q)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># solutions</span></span><br><span class="line">    soly = rr.roots()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(soly) == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Your prediction (delta) is too small&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    soly = soly[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    ss = pol1(q, soly)</span><br><span class="line">    solx = ss.roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="keyword">return</span> solx, soly</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">example</span>():</span><br><span class="line">    <span class="comment">############################################</span></span><br><span class="line">    <span class="comment"># How To Use This Script</span></span><br><span class="line">    <span class="comment">##########################################</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># The problem to solve (edit the following values)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># the modulus</span></span><br><span class="line">    N = <span class="number">98871082998654651904594468693622517613869880791884929588100914778964766348914919202255397776583412976785216592924335179128220634848871563960167726280836726035489482233158897362166942091133366827965811201438682117312550600943385153640907629347663140487841016782054145413246763816202055243693289693996466579973</span></span><br><span class="line">    e = <span class="number">76794907644383980853714814867502708655721653834095293468287239735547303515225813724998992623067007382800348003887194379223500764768679311862929538017193078946067634221782978912767213553254272722105803768005680182504500278005295062173004098796746439445343896868825218704046110925243884449608326413259156482881</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># the hypothesis on the private exponent (the theoretical maximum is 0.292)</span></span><br><span class="line">    delta = <span class="number">0.274</span> <span class="comment"># this means that d &lt; N^delta</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Lattice (tweak those values)</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># you should tweak this (after a first run), (e.g. increment it until a solution is found)</span></span><br><span class="line">    m = <span class="number">8</span> <span class="comment"># size of the lattice (bigger the better/slower)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># you need to be a lattice master to tweak these</span></span><br><span class="line">    t = <span class="built_in">int</span>((<span class="number">1</span>-<span class="number">2</span>*delta) * m)  <span class="comment"># optimization from Herrmann and May</span></span><br><span class="line">    X = <span class="number">2</span>*floor(N^delta)  <span class="comment"># this _might_ be too much</span></span><br><span class="line">    Y = floor(N^(<span class="number">1</span>/<span class="number">2</span>))    <span class="comment"># correct if p, q are ~ same size</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Don&#x27;t touch anything below</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Problem put in equation</span></span><br><span class="line">    P.&lt;x,y&gt; = PolynomialRing(ZZ)</span><br><span class="line">    A = <span class="built_in">int</span>((N+<span class="number">1</span>)/<span class="number">2</span>)</span><br><span class="line">    pol = <span class="number">1</span> + x * (A + y)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Find the solutions!</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Checking bounds</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=== checking values ===&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;* delta:&quot;</span>, delta)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;* delta &lt; 0.292&quot;</span>, delta &lt; <span class="number">0.292</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;* size of e:&quot;</span>, <span class="built_in">int</span>(log(e)/log(<span class="number">2</span>)))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;* size of N:&quot;</span>, <span class="built_in">int</span>(log(N)/log(<span class="number">2</span>)))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;* m:&quot;</span>, m, <span class="string">&quot;, t:&quot;</span>, t)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># boneh_durfee</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=== running algorithm ===&quot;</span>)</span><br><span class="line">        start_time = time.time()</span><br><span class="line"></span><br><span class="line">    solx, soly = boneh_durfee(pol, e, m, t, X, Y)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># found a solution?</span></span><br><span class="line">    <span class="keyword">if</span> solx &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=== solution found ===&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="literal">False</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;x:&quot;</span>, solx)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;y:&quot;</span>, soly)</span><br><span class="line"></span><br><span class="line">        d = <span class="built_in">int</span>(pol(solx, soly) / e)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;private key found:&quot;</span>, d)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=== no solution was found ===&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span>((<span class="string">&quot;=== %s seconds ===&quot;</span> % (time.time() - start_time)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    example()</span><br></pre></td></tr></table></figure>
<p>求得 d，进而求出 a</p>
<p>后面两个式子：          (<script type="math/tex">k_2=a*k_1+b</script>)</p>
<p>1, <script type="math/tex">s_1=(h_1+r_1*x)*(k_1^{-1}\bmod q) \bmod q</script> </p>
<p>2, <script type="math/tex">s_2=(h_2+r_2*x)*(k_2^{-1}\bmod q) \bmod q</script> </p>
<p>1 乘以 <script type="math/tex">r_2</script> , 2 乘以 <script type="math/tex">r_1</script></p>
<p>通过 消去公共项 <script type="math/tex">r_1*r_2*x</script> ，</p>
<p>得到 <script type="math/tex">k_1 = \frac{h_2*r_1-h_1*r_2-s_2*b*r_1}{s_2*a*r_1-s_1*r_2} \bmod q</script> ，  所以 x可求</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">n = <span class="number">98871082998654651904594468693622517613869880791884929588100914778964766348914919202255397776583412976785216592924335179128220634848871563960167726280836726035489482233158897362166942091133366827965811201438682117312550600943385153640907629347663140487841016782054145413246763816202055243693289693996466579973</span></span><br><span class="line">e = <span class="number">76794907644383980853714814867502708655721653834095293468287239735547303515225813724998992623067007382800348003887194379223500764768679311862929538017193078946067634221782978912767213553254272722105803768005680182504500278005295062173004098796746439445343896868825218704046110925243884449608326413259156482881</span></span><br><span class="line">c = <span class="number">13847199761503953970544410090850216804358289955503229676987212195445226107828814170983735135692611175621170777484117542057117607579344112008580933900051471041224296342157618857321522682033260246480258856376097987259016643294843196752685340912823459403703609796624411954082410762846356541101561523204985391564</span></span><br><span class="line">d = <span class="number">1493519932573300884636712093929290985070801830526216141153447882450934993737739146621</span></span><br><span class="line"></span><br><span class="line">a = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">b= <span class="number">17474742587088593627</span></span><br><span class="line">p= <span class="number">161310487790785086482919800040790794252181955976860261806376528825054571226885460699399582301663712128659872558133023114896223014064381772944582265101778076462675402208451386747128794418362648706087358197370036248544508513485401475977401111270352593919906650855268709958151310928767086591887892397722958234379</span></span><br><span class="line">q= <span class="number">1115861146902610160756777713087325311747309309771</span></span><br><span class="line">g= <span class="number">61073566757714587321114447684333928353300944355112378054603585955730395524359123615359185275743626350773632555967063692889668342544616165017003197599818881844811647270423070958521148291118914198811187731689123176313367399492561288350530256722898205674043032421874788802819858438796795768177550638273020791962</span></span><br><span class="line">y= <span class="number">23678147495254433946472657196764372220306841739888385605070426528738230369489739339976134564575544246606937803367113623097260181789372915552172469427842482448570540429192377881186772226796452797182435452490307834205012154495575570994963829345053331967442452842152258650027916313982835119514473311305158299360</span></span><br><span class="line">(h1, r1, s1) = <span class="number">535874494834828755542711401117152397489711233142</span>, <span class="number">117859946800380767356190121030392492081340616512</span>, <span class="number">26966646740134065096660259687229179143947213779</span></span><br><span class="line">(h2, r2, s2) = <span class="number">236574518096866758760287021848258048065293279716</span>, <span class="number">863199000523521111517835459866422731857447792677</span>, <span class="number">517924607931342012033031470185302567344725962419</span></span><br><span class="line">k1 = (h2*r1 - h1*r2 - s2*b*r1) * inverse(s2*a*r1 - s1*r2,q)%q</span><br><span class="line">m = (s1*k1 - h1) * libnum.invmod(r1,q) % q</span><br><span class="line">flag = libnum.n2s(<span class="built_in">int</span>(m))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;l1near_k1s_unsafe&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>加密脚本分三部分，此处是通过 第二部分+第三部分 求，我隐隐记得见过类似第一部分求法的，给出很大的n，e，c，如此处是1024位的，但没有  <code>p = 2 * getPrime(1024-160) * q+1</code></p>
<p>路过的佬教教 😊😊</p>
<p>文献参考：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9oZW5neGlueWFuLmdpdGh1Yi5pby8yMDIzLzA4LzEwL0NyeXB0b+ezu+WIly0tW0RTQV0v">NSSCTF Crypto系列—DSA | hengxinyan’blog<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sYXp6emFyby5naXRodWIuaW8vMjAyMC8wNS8wNi9jcnlwdG8tUlNBL2luZGV4Lmh0bWwjQm9uZWgtYW5kLUR1cmZlZS1hdHRhY2s=">RSA | Lazzaro (lazzzaro.github.io)<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="CF-is-Crypto-Faker"><a href="#CF-is-Crypto-Faker" class="headerlink" title="CF is Crypto Faker"></a>CF is Crypto Faker</h2><p>描述：学过AI的都知道，这题不是“纯密码”，密码假面人要披上AI的战衣，但他永远不会卸下密码的假面。</p>
<p>Please firstly pay attention to the file named as “task.py”.<br>The real flag is a little strange.<br>However, there is no need to be messy in your mind just because of the “appearance” of the flag.<br>Just be self-confident!</p>
<p>附件：</p>
<p><strong>task.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> initialize</span><br><span class="line"><span class="keyword">import</span> train</span><br><span class="line"><span class="keyword">import</span> valid</span><br><span class="line"><span class="keyword">import</span> test</span><br><span class="line"><span class="keyword">import</span> rec</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> message, flag_point</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&quot;flag&#123;&quot;</span> + long_to_bytes(message) + long_to_bytes(flag_point) + <span class="string">b&quot;.&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The significant parameter n: %s&quot;</span> % <span class="built_in">hex</span>(n))</span><br><span class="line">phi0 = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">r = rec.rec(p, q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The unique parameter r: %s&quot;</span> % <span class="built_in">hex</span>(r))</span><br><span class="line"></span><br><span class="line">parameters = initialize.initialize(p, q)</span><br><span class="line">wild_phi = parameters[<span class="number">0</span>]</span><br><span class="line">wild_e = parameters[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Parameters are initialized to: \n  phi:%s\n&quot;</span> % <span class="built_in">hex</span>(wild_phi), <span class="string">&quot; e:%s&quot;</span> % <span class="built_in">hex</span>(wild_e))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;But they are wild and crazy!&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;We have to give them a lesson!&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;------&quot;</span>)</span><br><span class="line"></span><br><span class="line">parameters = train.train(wild_phi, wild_e, n, r, phi0)</span><br><span class="line">trained_phi = parameters[<span class="number">0</span>]</span><br><span class="line">trained_e = parameters[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Parameters are trained to: \n  phi:%s\n&quot;</span> % <span class="built_in">hex</span>(trained_phi), <span class="string">&quot; e:%s&quot;</span> % <span class="built_in">hex</span>(trained_e))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;After training, the two naughty parameters are more and more normal.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;It&#x27;s closer to your target!&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;------&quot;</span>)</span><br><span class="line"></span><br><span class="line">parameters = valid.valid(trained_phi, trained_e, n)</span><br><span class="line">y_valid = parameters[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The encrypted output in validation set is %s&quot;</span> % <span class="built_in">hex</span>(y_valid))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;After validation, the model is more and more stable.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;To test the real flag!&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;------&quot;</span>)</span><br><span class="line"></span><br><span class="line">parameters = test.test(trained_phi, trained_e, n)</span><br><span class="line">y_hat_cipher1 = parameters[<span class="number">0</span>]</span><br><span class="line">y_hat_cipher2 = parameters[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The final output is \n%s&quot;</span> % <span class="built_in">hex</span>(y_hat_cipher1), <span class="string">&quot;\n%s&quot;</span> % <span class="built_in">hex</span>(y_hat_cipher2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;------&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><strong>initialize.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">x, y</span>):</span><br><span class="line">    temp = []</span><br><span class="line">    tip = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> tip:</span><br><span class="line">            temp.append(<span class="number">2023</span> + (x - <span class="number">2023</span>) * y - x)</span><br><span class="line">            tip = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            temp.append(<span class="built_in">abs</span>(x - y))</span><br><span class="line">    <span class="keyword">return</span> temp</span><br></pre></td></tr></table></figure>
<p><strong>rec.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rec</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">2023</span> * a + b) // a * b</span><br></pre></td></tr></table></figure>
<p><strong>test.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> message, flag_point</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">x, y, z</span>):</span><br><span class="line">    d = inverse(y, x)</span><br><span class="line">    message = bytes_to_long(message)</span><br><span class="line">    flag_point = bytes_to_long(flag_point)</span><br><span class="line">    temp = []</span><br><span class="line">    c1 = <span class="built_in">pow</span>(message, y, z)</span><br><span class="line">    c2 = <span class="built_in">pow</span>(flag_point, y, z)</span><br><span class="line">    <span class="keyword">assert</span> message == <span class="built_in">pow</span>(c1, d, z)</span><br><span class="line">    <span class="keyword">assert</span> flag_point == <span class="built_in">pow</span>(c2, d, z)</span><br><span class="line">    temp.append(c1)</span><br><span class="line">    temp.append(c2)</span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>train.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> solvable_function</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">x, y, u, v, phi</span>):</span><br><span class="line">    temp = []</span><br><span class="line">    xx = solvable_function(x, u, v)</span><br><span class="line">    loss = phi - xx</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The loss is %s&quot;</span> % <span class="built_in">hex</span>(loss))</span><br><span class="line">    x = xx + loss</span><br><span class="line">    <span class="keyword">assert</span> x == phi</span><br><span class="line">    temp.append(x)</span><br><span class="line">    noise = getPrime(<span class="number">8</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> y &gt; noise:</span><br><span class="line">            y = y - noise * <span class="number">23</span></span><br><span class="line">            noise = noise * <span class="number">20</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    temp.append(y)</span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>valid.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">valid</span>(<span class="params">x, y, z</span>):</span><br><span class="line">    text = <span class="string">b&#x27;The algorithm of rsa is really a mystery in CTF.&#x27;</span></span><br><span class="line">    temp = []</span><br><span class="line">    d = inverse(y, x)</span><br><span class="line">    text = bytes_to_long(text)</span><br><span class="line">    cipher = <span class="built_in">pow</span>(text, y, z)</span><br><span class="line">    <span class="keyword">assert</span> long_to_bytes(text) == long_to_bytes(<span class="built_in">pow</span>(cipher, d, z))</span><br><span class="line">    temp.append(cipher)</span><br><span class="line">    <span class="keyword">return</span> temp</span><br></pre></td></tr></table></figure>
<p><strong>output.txt</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">The significant parameter n: <span class="number">0x81c5f040bfaea676120cd62c36ba7afb303561504bbf8609afa3da60fb6202ca875b0bd2a06143ebcd16fa615557ff159d97909160d68e1938b3ecaf57709b3d2698476b6dd203811b6a2ec6a6e2a7e213ab719bcd3ab49bb864b10e9c78ea3f501c0e2213dfe431043bb6f0cc2e8d77bfb43869b843af1a99ae81b87811e101</span></span><br><span class="line">The unique parameter r: <span class="number">0x4f37fe985d13ffde9867fa0063f68dea79196408b1404eadf03ea59297d629c2183a4a6a6647b6c4c99dd43bae8c4fa4691a608d20170fd42b18aef7efb3ae01cd3</span></span><br><span class="line">------</span><br><span class="line">Parameters are initialized to:</span><br><span class="line">  phi:<span class="number">0x81c5f040bfaea676120cd62c36ba7afb303561504bbf8609afa3da60fb6202ca875b0bd2a06143ebcd16fa615557ff159d97909160d68e1938b3ecaf57709648d78eb17edb46dda768a97d57e6bd1c48657393b7c0d9c574c38cc0a3545ce7d209ade33b8ac6b31a41fe9f4ed62b4ddd7b99859b74915f2031dd2f5f0499a2f8</span></span><br><span class="line">  e:<span class="number">0x2ebad696da6dda845bf03fdf34ee73d4849800de9267a5baa3c068e2d33a74727d00002fbfea775e5233087a9039d267130aa924a4f7fed3576f6ff7b8e1b2e8</span></span><br><span class="line">But they are wild <span class="keyword">and</span> crazy!</span><br><span class="line">We have to give them a lesson!</span><br><span class="line">------</span><br><span class="line">The loss <span class="keyword">is</span> -<span class="number">0x5144bdad7cc24f5348c5752dda0ff5fa7d72e36370d5af55eb6f590ac0764b843a06ee1a4651b8f3a6c878df56f1678454e58eaf0ede9a1eb0503dce6a1303b69e33bbaad112abb051a28d51a9fee629e89400a338bd02998568d044852f11e05572fc4a0ddacdf7342048295a4025394e77e973621a77ea5bbdb06af2cb72b2f8298e2cd16736454fd066d3d96a4f77cd094cd783ead17024de981df7ade84aa8c282b1ec6f8ec6ec4752727387ef637ba2a4eed8f83c77d5db14d297de8098</span></span><br><span class="line">Parameters are trained to:</span><br><span class="line">  phi:<span class="number">0x81c5f040bfaea676120cd62c36ba7afb303561504bbf8609afa3da60fb6202ca875b0bd2a06143ebcd16fa615557ff159d97909160d68e1938b3ecaf57709b3bb712fdcba325655f111918472d4353a66854ccda50b63a1047278c15a4b39cde898d054db87092958c7c05f8fa566dcd969b1ff4b7d1935c375a4af3bfc341b0</span></span><br><span class="line">  e:<span class="number">0x2c22193ad9abcca2f67552fc76dd07b3ef883f3d755c95119cdf82bb6a07c970fd37e582bb49250d8efaa29b8a59c82059165c654206a9d7261f6b45a90dc69</span></span><br><span class="line">After training, the two naughty parameters are more <span class="keyword">and</span> more normal.</span><br><span class="line">It<span class="string">&#x27;s closer to your target!</span></span><br><span class="line"><span class="string">------</span></span><br><span class="line"><span class="string">The encrypted output in validation set is 0x775cbee546e7579f0a69645b59f72f5c8ff0c538dd9a6e755969dee2ffb8748073c089557801dfb8bfae15baba9a909f3addac142ad928ac7cc453c72166dda235128de12965df4308997416e054ab1ab9af55c60533c7374096aa2d05339900b3e14f7148930bf083eb1eb9fa22b9a997f85b39501d3a9bdfa08e3389b8f2fe</span></span><br><span class="line"><span class="string">After validation, the model is more and more stable.</span></span><br><span class="line"><span class="string">To test the real flag!</span></span><br><span class="line"><span class="string">------</span></span><br><span class="line"><span class="string">The final output is</span></span><br><span class="line"><span class="string">0x29289e3d9275147b885b5061637564cbee3e4d9f48e52694e594f020e49da9b24d9246b2437fb2221fa86ca1a277f3fdd7ab5cad4738a02b66d47703ef816844a84c6c209c8251e8961c9ba2c791649e022627f86932d9700c3b1dc086e8b2747d0a5604955387a935464d3866dd4100b2f3d57603c728761d1d8ef7fdbdcbee</span></span><br><span class="line"><span class="string">0x2b0059f88454e0e36269c809b5d5b6b28e5bab3c87b20f9e55635239331100a0a582241e7a385034698b61ebf24b519e868617ff67974cc907cc61be38755737f9a6dbeb7890ff55550b1af1ecf635112fcaaa8b07a3972b3c6728cbcf2a3973a4d7bd92affec7e065e0ae83cd36858e6d983785a3668a8b82709d78a69796af</span></span><br><span class="line"><span class="string">------</span></span><br></pre></td></tr></table></figure>
<p>这题很简单的，就是代码长，附件多，花点时间看看就出了</p>
<p>读到最后你会发现e和phi都给了，直接求d，然后没说的了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">0x81c5f040bfaea676120cd62c36ba7afb303561504bbf8609afa3da60fb6202ca875b0bd2a06143ebcd16fa615557ff159d97909160d68e1938b3ecaf57709b3d2698476b6dd203811b6a2ec6a6e2a7e213ab719bcd3ab49bb864b10e9c78ea3f501c0e2213dfe431043bb6f0cc2e8d77bfb43869b843af1a99ae81b87811e101</span></span><br><span class="line">train_phi = <span class="number">0x81c5f040bfaea676120cd62c36ba7afb303561504bbf8609afa3da60fb6202ca875b0bd2a06143ebcd16fa615557ff159d97909160d68e1938b3ecaf57709b3bb712fdcba325655f111918472d4353a66854ccda50b63a1047278c15a4b39cde898d054db87092958c7c05f8fa566dcd969b1ff4b7d1935c375a4af3bfc341b0</span></span><br><span class="line">train_e = <span class="number">0x2c22193ad9abcca2f67552fc76dd07b3ef883f3d755c95119cdf82bb6a07c970fd37e582bb49250d8efaa29b8a59c82059165c654206a9d7261f6b45a90dc69</span></span><br><span class="line">c1 = <span class="number">0x29289e3d9275147b885b5061637564cbee3e4d9f48e52694e594f020e49da9b24d9246b2437fb2221fa86ca1a277f3fdd7ab5cad4738a02b66d47703ef816844a84c6c209c8251e8961c9ba2c791649e022627f86932d9700c3b1dc086e8b2747d0a5604955387a935464d3866dd4100b2f3d57603c728761d1d8ef7fdbdcbee</span></span><br><span class="line">c2 = <span class="number">0x2b0059f88454e0e36269c809b5d5b6b28e5bab3c87b20f9e55635239331100a0a582241e7a385034698b61ebf24b519e868617ff67974cc907cc61be38755737f9a6dbeb7890ff55550b1af1ecf635112fcaaa8b07a3972b3c6728cbcf2a3973a4d7bd92affec7e065e0ae83cd36858e6d983785a3668a8b82709d78a69796af</span></span><br><span class="line"></span><br><span class="line">d = libnum.invmod(train_e,train_phi)</span><br><span class="line">m1 = <span class="built_in">pow</span>(c1,d,n)</span><br><span class="line">m2 = <span class="built_in">pow</span>(c2,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m1)+long_to_bytes(m2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;With the method of machine learning, it is available for Crypto-er to develop the modern cryptography.Don&#x27;t give up learning crypto.&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="ez-ECC"><a href="#ez-ECC" class="headerlink" title="ez_ECC"></a>ez_ECC</h2><p>等复现了，待补充。。。</p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Wp</tag>
      </tags>
  </entry>
  <entry>
    <title>2023第六届安洵杯</title>
    <url>/Crypto/2023%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%AE%89%E6%B4%B5%E6%9D%AF/</url>
    <content><![CDATA[<p>远看山有色，近听水无声。</p>
<span id="more"></span>
<h2 id="010101"><a href="#010101" class="headerlink" title="010101"></a>010101</h2><blockquote>
<p>附件：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> isPrime, long_to_bytes, getStrongPrime, bytes_to_long</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&quot;D0g3&#123;******************************************&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyServer</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">proof</span>(<span class="params">self</span>):</span><br><span class="line">        random.seed(os.urandom(<span class="number">8</span>))</span><br><span class="line">        random_str = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters + string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">        str_sha256 = hashlib.sha256(random_str.encode()).hexdigest()</span><br><span class="line">        self.request.sendall((<span class="string">&#x27;SHA256(XXXX + %s):%s\n&#x27;</span> % (random_str[<span class="number">4</span>:], str_sha256)).encode())</span><br><span class="line">        self.request.sendall(<span class="string">&#x27;Give Me XXXX:\n&#x27;</span>.encode())</span><br><span class="line">        XXXX = self.request.recv(<span class="number">2048</span>).strip()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> hashlib.sha256((XXXX + random_str[<span class="number">4</span>:].encode())).hexdigest() != str_sha256:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getPQN</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            p = getStrongPrime(<span class="number">2048</span>)</span><br><span class="line">            q = getStrongPrime(<span class="number">2048</span>)</span><br><span class="line">            n = p * q</span><br><span class="line">            <span class="keyword">if</span> p.bit_length() == <span class="number">2048</span> <span class="keyword">and</span> q.bit_length() == <span class="number">2048</span> <span class="keyword">and</span> n.bit_length() == <span class="number">4096</span>:</span><br><span class="line">                <span class="keyword">return</span> p, q, n</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self</span>):</span><br><span class="line">        p, q, n = self.getPQN()</span><br><span class="line">        m = bytes_to_long(flag)</span><br><span class="line">        e = <span class="number">0x10001</span></span><br><span class="line">        c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">        p = <span class="built_in">bin</span>(p)[<span class="number">2</span>:]</span><br><span class="line">        p1 = <span class="built_in">list</span>(p[:<span class="number">1024</span>])</span><br><span class="line">        p2 = <span class="built_in">list</span>(p[<span class="number">1024</span>:])</span><br><span class="line">        p1[random.choice([i <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(p1) <span class="keyword">if</span> c == <span class="string">&#x27;1&#x27;</span>])] = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">        p2[random.choice([i <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(p1) <span class="keyword">if</span> c == <span class="string">&#x27;0&#x27;</span>])] = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> n, <span class="string">&#x27;&#x27;</span>.join(p1) + <span class="string">&#x27;&#x27;</span>.join(p2), c</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.proof():</span><br><span class="line">            self.request.sendall(<span class="string">b&#x27;Error Hash!&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        n, p, c = self.encrypt()</span><br><span class="line">        self.request.sendall(<span class="string">&#x27;Press 1 to get ciphertext\n&#x27;</span>.encode())</span><br><span class="line">        number = self.request.recv(<span class="number">512</span>).strip().decode()</span><br><span class="line">        <span class="keyword">if</span> number == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            self.request.sendall((<span class="built_in">str</span>(n) + <span class="string">&#x27;\n&#x27;</span>).encode())</span><br><span class="line">            self.request.sendall((<span class="built_in">str</span>(p) + <span class="string">&#x27;\n&#x27;</span>).encode())</span><br><span class="line">            self.request.sendall((<span class="built_in">str</span>(c) + <span class="string">&#x27;\n&#x27;</span>).encode())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.request.sendall(<span class="string">&#x27;Incorrect input!\n&#x27;</span>.encode())</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadedTCPServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sever = socketserver.ThreadingTCPServer((<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">10001</span>), MyServer)</span><br><span class="line">    ThreadedTCPServer.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    ThreadedTCPServer.allow_reuse_port = <span class="literal">True</span></span><br><span class="line">    sever.serve_forever()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>考点在这几行代码里：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p1 = <span class="built_in">list</span>(p[:<span class="number">1024</span>])</span><br><span class="line">p2 = <span class="built_in">list</span>(p[<span class="number">1024</span>:])</span><br><span class="line">p1[random.choice([i <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(p1) <span class="keyword">if</span> c == <span class="string">&#x27;1&#x27;</span>])] = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">p2[random.choice([i <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(p1) <span class="keyword">if</span> c == <span class="string">&#x27;0&#x27;</span>])] = <span class="string">&#x27;1&#x27;</span></span><br></pre></td></tr></table></figure>
<p><code>p1</code> 中随机选择一个值为 <code>1</code> 的元素并将其替换为 <code>0</code></p>
<p><code>p2</code> 中由于它<code>enumerate()</code> 的是 <code>p1</code> ，所以不确定<code>p2</code> 中该索引位置是 <code>0</code>还是<code>1</code> ，即 <code>p2</code> 存在两种状态，可能变，也可能不变</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">603929041261800903893255846837373435975689488156082111538579411971234122241475748036901372456410420191268918203740933624479627880138860787078343962957545877493495346831028915623609911739520855865598159115403599691845611787894864022849387193442196306247844978619825889396851220746270712372629345235420222076680115154790661980407543403831934888441296510749707016149742835334975569330963811702631399381154725473397239011407333239568323785920549918563058163802790187563167758518996273164519358725587751057556099683209931508156206102023550113078755175573231054144175740037978473444981801474458374782704295305402882601070280107624282520071733642472567932754610400320318631599250987727798785732693028629127928075161764000633755172649305820758541646921112640799416373141028867694424520169726284794592230472739528017824591893518858631575238481300188255385565135530781399021638113121796002810581237621059229401475373166398218013467690838657741784353265467188916419980824688886467277205321029087429010136873982224751707535560753990915173665180626848355707628545030678081326994468311753531184000767912265077615115921131730201921373353972239662406236256449307913217499123008959838210605102941439012579314919044679872148810171587616630982300997769</span></span><br><span class="line">p = <span class="string">&quotquot;</span></span><br><span class="line">c = <span class="number">86686439679874830246557653015232666024548117379353423678475364097072178826632356840355752060131181776717167764598857424931346233132869924918276685776350661070390576961130941951957979601769745016239304945501929062576701514720613007436301407348380329606694430576562909174904437860869521166636000289719433717305895080524202468368216882473127238573270504191177749274378107593390170231953722023523109786520395037511557586384515517033167064188185912051635528465308305202059386081496894767608262032863369259646855260874931901314784267182224186084544278686060811418808427473393401031779270067234650782676467179083936163361798893672177127354928129838729299397848748974202105320442165321749085841967661828478087899131573349766763269557239693467725757622240790567302886026262903788677893782986023554124746338684896334712802104286022426080359219997110717128626202867661389035295735029082783484639744693093659639224377233571685420055087016612362091684619532730540899821020173872616220719344374207934384262583860759996308412468708264575433904901696415884548016664119511545715549106666120050640487895135909555493016879887730329494392167451911914419832673885582817232756022767909864103483310200762274943174788555599167912909253375001595679099288103</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">p1 = <span class="built_in">list</span>(p[:<span class="number">1024</span>])</span><br><span class="line">p2 = <span class="built_in">list</span>(p[<span class="number">1024</span>:])</span><br><span class="line"></span><br><span class="line">a = [i <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(p1) <span class="keyword">if</span> c == <span class="string">&#x27;0&#x27;</span>]</span><br><span class="line">b = [i <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(p2) <span class="keyword">if</span> c == <span class="string">&#x27;1&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(a):</span><br><span class="line">    pp1 = <span class="built_in">list</span>(p[:<span class="number">1024</span>])</span><br><span class="line">    pp1[i] = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    pp = <span class="built_in">int</span>((<span class="string">&#x27;&#x27;</span>.join(pp1)+<span class="string">&#x27;&#x27;</span>.join(p2)),<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> isPrime(pp):</span><br><span class="line">        q = n//pp</span><br><span class="line">        d = libnum.invmod(e,(pp-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">        m = libnum.n2s(<span class="built_in">pow</span>(c,d,n))</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;D0g3&#x27;</span> <span class="keyword">in</span> m:</span><br><span class="line">            <span class="built_in">print</span>(m)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># D0g3&#123;sYuWzkFk12A1gcWxG9pymFcjJL7CqN4Cq8PAIACObJ&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="POA"><a href="#POA" class="headerlink" title="POA"></a>POA</h2><blockquote>
<p>附件</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> isPrime, long_to_bytes, getStrongPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"></span><br><span class="line">FLAG = <span class="string">&#x27;**********&#x27;</span></span><br><span class="line">KEY = <span class="string">b&#x27;****************&#x27;</span></span><br><span class="line">IV = <span class="string">b&#x27;****************&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cbc_decrypt</span>(<span class="params">c, iv</span>):</span><br><span class="line">    aes = AES.new(KEY, AES.MODE_CBC, iv=iv)</span><br><span class="line">    <span class="keyword">return</span> aes.decrypt(c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>():</span><br><span class="line">    plain_text = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]) + FLAG</span><br><span class="line">    aes = AES.new(KEY, AES.MODE_CBC, iv=IV)</span><br><span class="line">    plain_text = pad(plain_text.encode(), AES.block_size)</span><br><span class="line">    cipher = aes.encrypt(plain_text)</span><br><span class="line">    <span class="keyword">return</span> IV.<span class="built_in">hex</span>() + cipher.<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">asserts</span>(<span class="params">pt: <span class="built_in">bytes</span></span>):</span><br><span class="line">    num = pt[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(pt) == <span class="number">16</span>:</span><br><span class="line">        result = pt[::-<span class="number">1</span>]</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">            <span class="keyword">if</span> i == num:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> count == num:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">c</span>):</span><br><span class="line">    iv = c[:<span class="number">32</span>]</span><br><span class="line">    cipher = c[<span class="number">32</span>:]</span><br><span class="line">    plain_text = cbc_decrypt(binascii.unhexlify(cipher), binascii.unhexlify(iv))</span><br><span class="line">    <span class="keyword">if</span> asserts(plain_text):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyServer</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">proof</span>(<span class="params">self</span>):</span><br><span class="line">        random.seed(os.urandom(<span class="number">8</span>))</span><br><span class="line">        random_str = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters + string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">        str_sha256 = hashlib.sha256(random_str.encode()).hexdigest()</span><br><span class="line">        self.request.sendall((<span class="string">&#x27;SHA256(XXXX + %s):%s\n&#x27;</span> % (random_str[<span class="number">4</span>:], str_sha256)).encode())</span><br><span class="line">        self.request.sendall(<span class="string">&#x27;Give Me XXXX:\n&#x27;</span>.encode())</span><br><span class="line">        XXXX = self.request.recv(<span class="number">2048</span>).strip()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> hashlib.sha256((XXXX + random_str[<span class="number">4</span>:].encode())).hexdigest() != str_sha256:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.proof():</span><br><span class="line">            self.request.sendall(<span class="string">b&#x27;Error Hash!&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        cipher = encrypt()</span><br><span class="line">        self.request.sendall(<span class="string">&#x27;Welcome to AES System, please choose the following options:\n1. encrypt the flag\n2. decrypt the flag\n&#x27;</span>.encode())</span><br><span class="line">        n = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> n &lt; <span class="number">65536</span>:</span><br><span class="line">            options = self.request.recv(<span class="number">512</span>).strip().decode()</span><br><span class="line">            <span class="keyword">if</span> options == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                self.request.sendall((<span class="string">&#x27;This is your flag: %s\n&#x27;</span> % cipher).encode())</span><br><span class="line">            <span class="keyword">elif</span> options == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">                self.request.sendall(<span class="string">&#x27;Please enter ciphertext:\n&#x27;</span>.encode())</span><br><span class="line">                recv_cipher = self.request.recv(<span class="number">512</span>).strip().decode()</span><br><span class="line">                <span class="keyword">if</span> decrypt(recv_cipher):</span><br><span class="line">                    self.request.sendall(<span class="string">&#x27;True\n&#x27;</span>.encode())</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.request.sendall(<span class="string">&#x27;False\n&#x27;</span>.encode())</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.request.sendall(<span class="string">&#x27;Input wrong! Please re-enter\n&#x27;</span>.encode())</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadedTCPServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sever = socketserver.ThreadingTCPServer((<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">10010</span>), MyServer)</span><br><span class="line">    ThreadedTCPServer.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    ThreadedTCPServer.allow_reuse_port = <span class="literal">True</span></span><br><span class="line">    sever.serve_forever()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>填充预言机攻击是一种针对加密数据的攻击，能让攻击者在不知道密钥的情况下解密数据的内容。</p>
<p>具体分析移步  <a href="https://wbuildings.github.io/Crypto/CBC-Padding-Oracle-Attack/#more">CBC&amp;Padding Oracle Attack | W’Blog (wbuildings.github.io)</a></p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes, bytes_to_long</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof</span>(<span class="params">broke, Hash</span>):</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(broke) == <span class="number">16</span> <span class="keyword">and</span> <span class="built_in">len</span>(Hash) == <span class="number">64</span></span><br><span class="line">    shaTable = string.ascii_letters + string.digits</span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> itertools.permutations(shaTable, <span class="number">4</span>):</span><br><span class="line">        x = <span class="string">&#x27;&#x27;</span>.join(ii)</span><br><span class="line">        s = x + broke</span><br><span class="line">        <span class="keyword">if</span> sha256(s.encode()).hexdigest() == Hash:</span><br><span class="line">            <span class="built_in">print</span>(x)</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">con</span>():</span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    sock.connect((<span class="string">&#x27;124.71.177.14&#x27;</span>, <span class="number">10010</span>))</span><br><span class="line">    proof_data = sock.recv(<span class="number">2048</span>)</span><br><span class="line">    send_proof = (proof(proof_data[<span class="number">14</span>:<span class="number">30</span>].decode(), proof_data[<span class="number">32</span>:<span class="number">96</span>].decode())).encode()</span><br><span class="line">    sock.recv(<span class="number">2048</span>)</span><br><span class="line">    sock.send(send_proof)</span><br><span class="line">    data1 = sock.recv(<span class="number">2048</span>)</span><br><span class="line">    <span class="built_in">print</span>(data1.decode())</span><br><span class="line">    sock.send(<span class="string">&#x27;1\n&#x27;</span>.encode())</span><br><span class="line">    cipher = sock.recv(<span class="number">4096</span>).decode().split(<span class="string">&#x27; &#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(cipher)</span><br><span class="line">    guess_iv = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">    restore_midd = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]</span><br><span class="line">    index = <span class="number">1</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">256</span>):</span><br><span class="line">            sock.send(<span class="string">&#x27;2&#x27;</span>.encode())</span><br><span class="line">            txt = sock.recv(<span class="number">4096</span>).decode()</span><br><span class="line">            guess_iv[i] = j</span><br><span class="line">            mess = <span class="built_in">bytes</span>(guess_iv).<span class="built_in">hex</span>() + cipher[<span class="number">32</span>:]</span><br><span class="line">            sock.send((<span class="string">&#x27;%s\n&#x27;</span> % mess).encode())</span><br><span class="line">            result = sock.recv(<span class="number">4096</span>).strip().decode()</span><br><span class="line">            <span class="keyword">if</span> result == <span class="string">&#x27;True&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;find&#x27;</span>)</span><br><span class="line">                restore_midd[i] = index ^ j</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>, i - <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">                    guess_iv[k] = restore_midd[k] ^ (index + <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line"> </span><br><span class="line">    m = bytes_to_long(<span class="built_in">bytes</span>(restore_midd)) ^ <span class="built_in">int</span>(cipher[:<span class="number">32</span>], <span class="number">16</span>)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    con()</span><br></pre></td></tr></table></figure>
<h2 id="Rabin"><a href="#Rabin" class="headerlink" title="Rabin"></a>Rabin</h2><blockquote>
<p>附件</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> isPrime, long_to_bytes, getStrongPrime, bytes_to_long</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_flag</span>(<span class="params">head</span>):</span><br><span class="line">    table = string.printable</span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span>.join([random.choice(table) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)])</span><br><span class="line">    <span class="keyword">return</span> head + <span class="string">&#x27;&#123;&#x27;</span> + <span class="built_in">str</span>(uuid.uuid5(uuid.NAMESPACE_OID, name)) + <span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">relation</span>():</span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x - (<span class="number">2</span>**<span class="number">2</span> - <span class="number">1</span>)):</span><br><span class="line">        a += <span class="built_in">pow</span>(e1, i)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        b += <span class="built_in">pow</span>(e2, j)</span><br><span class="line">    <span class="keyword">if</span> a == b:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_pqr</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        p = getStrongPrime(<span class="number">1024</span>)</span><br><span class="line">        q = getStrongPrime(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> p % <span class="number">4</span> == <span class="number">3</span> <span class="keyword">and</span> q % <span class="number">4</span> == <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    r = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        r = r * x</span><br><span class="line">        <span class="keyword">if</span> r.bit_length() &gt; <span class="number">1024</span> <span class="keyword">and</span> isPrime(r - <span class="number">1</span>):</span><br><span class="line">            r = r - <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> p, q, r</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>():</span><br><span class="line">    <span class="keyword">if</span> relation():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;false&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    flag = get_flag(<span class="string">&#x27;D0g3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    m1 = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">234</span>)]) + <span class="string">&#x27; &#x27;</span> + flag[:<span class="number">21</span>]</span><br><span class="line">    m2 = flag[<span class="number">21</span>:] + <span class="string">&#x27; &#x27;</span> + <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">234</span>)])</span><br><span class="line"></span><br><span class="line">    p, q, r = get_pqr()</span><br><span class="line">    phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            d = gmpy2.invert(e2, phi)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            p, q, r = get_pqr()</span><br><span class="line"></span><br><span class="line">    n = p * q * r</span><br><span class="line">    inv_p = gmpy2.invert(p, q)</span><br><span class="line">    inv_q = gmpy2.invert(q, p)</span><br><span class="line"></span><br><span class="line">    c1 = <span class="built_in">pow</span>(bytes_to_long(m1.encode()), e1, n)</span><br><span class="line">    c2 = <span class="built_in">pow</span>(bytes_to_long(m2.encode()), e2, n)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> n, inv_p, inv_q, c1, c2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyServer</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">proof</span>(<span class="params">self</span>):</span><br><span class="line">        random.seed(os.urandom(<span class="number">8</span>))</span><br><span class="line">        random_str = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters + string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">        str_sha256 = hashlib.sha256(random_str.encode()).hexdigest()</span><br><span class="line">        self.request.sendall((<span class="string">&#x27;SHA256(XXXX + %s):%s\n&#x27;</span> % (random_str[<span class="number">4</span>:], str_sha256)).encode())</span><br><span class="line">        self.request.sendall(<span class="string">&#x27;Give Me XXXX:\n&#x27;</span>.encode())</span><br><span class="line">        XXXX = self.request.recv(<span class="number">2048</span>).strip()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> hashlib.sha256((XXXX + random_str[<span class="number">4</span>:].encode())).hexdigest() != str_sha256:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.proof():</span><br><span class="line">            self.request.sendall(<span class="string">b&#x27;Error Hash!&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        n, inv_p, inv_q, c1, c2 = encrypt()</span><br><span class="line">        self.request.sendall(<span class="string">&#x27;Press 1 to get ciphertext\n&#x27;</span>.encode())</span><br><span class="line">        number = self.request.recv(<span class="number">512</span>).strip().decode()</span><br><span class="line">        <span class="keyword">if</span> number == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            self.request.sendall((<span class="string">&quot;n = %d\n&quot;</span> % n).encode())</span><br><span class="line">            self.request.sendall((<span class="string">&quot;inv_p = %d\n&quot;</span> % inv_p).encode())</span><br><span class="line">            self.request.sendall((<span class="string">&quot;inv_q = %d\n&quot;</span> % inv_q).encode())</span><br><span class="line">            self.request.sendall((<span class="string">&quot;c1 = %d\n&quot;</span> % c1).encode())</span><br><span class="line">            self.request.sendall((<span class="string">&quot;c2 = %d\n&quot;</span> % c2).encode())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.request.sendall(<span class="string">&#x27;Incorrect input!\n&#x27;</span>.encode())</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadedTCPServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sever = socketserver.ThreadingTCPServer((<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">10100</span>), MyServer)</span><br><span class="line">    ThreadedTCPServer.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    ThreadedTCPServer.allow_reuse_port = <span class="literal">True</span></span><br><span class="line">    sever.serve_forever()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>因为是rabin，所以应该有个e=2，观察<code>relation()</code>方法，<code>e1</code> 应该比较小，猜测<code>e1=2</code></p>
<p><code>e2、x</code>简单点就是爆破，不必要花时间推</p>
<blockquote>
<p>test</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">relation</span>():</span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x - (<span class="number">2</span> ** <span class="number">2</span> - <span class="number">1</span>)):</span><br><span class="line">        a += <span class="built_in">pow</span>(e1, i)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        b += <span class="built_in">pow</span>(e2, j)</span><br><span class="line">    <span class="keyword">if</span> a == b:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">e1 =<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    x = i</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        e2 = j</span><br><span class="line">        <span class="keyword">if</span> relation():</span><br><span class="line">            <span class="built_in">print</span>(x)</span><br><span class="line">            <span class="built_in">print</span>(e2)</span><br><span class="line">            <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line"><span class="comment"># 0</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># 8</span></span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># 16</span></span><br><span class="line"><span class="comment"># 90</span></span><br></pre></td></tr></table></figure>
<p>最有可能<code>x=6，e2=5</code> （试下便知）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">inv_p = gmpy2.invert(p, q)</span><br><span class="line">inv_q = gmpy2.invert(q, p)</span><br></pre></td></tr></table></figure>
<p>$p*ip\equiv 1 \bmod q=1+k_1q$   </p>
<p>$q*iq\equiv 1 \bmod p=1+k_2p$</p>
<p>两式相乘得</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagesimage-20240302122028573.png" alt="image-20240302122028573"></p>
<p>两边同除以<code>pq</code>，得  $ip*iq=k_1k_2+\frac{k_1}{p}+\frac{k_2}{q}+\frac{1}{pq}$ </p>
<p>根据<code>p、q、k1、k2</code>的 相对大小 ，$\frac{1}{pq}无限接近于0，\frac{k_1}{p}&lt;1,\frac{k_2}{q}&lt;1$</p>
<p>所以，大约 $ip*iq=k_1k_2+1$</p>
<p>令 $\alpha=k_1q,\beta=k_2p$ </p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagesimage-20240302000910531.png" alt="image-20240302000910531"></p>
<p>$\alpha\beta=k_1k_2pq$</p>
<p><code>pq = n//r</code> 是已知的，所以$\alpha+\beta,\alpha\beta$ 是已知的，构造如下一元二次方程，在用求根公式</p>
<p>$(x-\alpha)(x-\beta)=x^2-(\alpha+\beta)x+\alpha\beta$ </p>
<p>$\Delta = (\alpha+\beta)^2-4\alpha\beta$ </p>
<p>$x=\frac{(\alpha+\beta)\pm\sqrt{\Delta}}{2}$ </p>
<p>求出<code>k1、k2</code> ，再分别和 <code>n gcd</code> 即可得到 <code>p、q</code> </p>
<p>也可以解方程，最前面两式相加 </p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagesimage-20240302000833039.png" alt="image-20240302000833039"></p>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">305742085102073958685058774990374612856503657611159209468741748564654591176180299818778135460948807176614281796016904753313757927457094861196369069821421681665875176139845644195736238144691839008758614457979812997005126606399842320648487994406393728514493129219688752202978501994811535834779889459729683428077498441713132964635907469366512175886337946124631196824508247375645971308484279007920881639616776491331812849657775358960227848680733861313065565269244274482334952541032707333167429562469558762781469669359057084779217532331399410333624558772093729396962312936037020992117478202860898927073068360026814644581294222733341428537874383052653054496502673372786144676806905626251642090622209277799682962538245425774337944285158783294880516595307576719556933669812074808919685419881388267486868941401975800053647291641426673593791774634377598637815942343627245274057532320854646240153245893536480745586533270387549779636700040935751519181245119278044454115223974366280075995685049945977835434961621019</span></span><br><span class="line">inv_p = <span class="number">80275679918090105134294823865673211657060049627413874971428297415355157707252877991145232186659935067961745973100698632943949790304190096567884607037119257848837354982500048978070619820510408650386626542338056277335180497955588848138448991963800265073331348097617541306117998857780109771194563339021595188562</span></span><br><span class="line">inv_q = <span class="number">91430270065720942392278749444269989843094838912787188266496611817766528132774187319335115624057615900976202412507879118712912101862728738204907877396022887953429108729897171677408597080700062032905675017013140349657979587207083820584906055634857776106802178757131724480934751871117394549988315719808677297400</span></span><br><span class="line">c1 = <span class="number">27982926262483311148784661440434049509041271145373939684263123722309350890886129800416935949757799004078048732281935770255739076672223113235604245680214981770721357810264502828783436566049916012826991722307971435988653591370445652627932863934280322586450541943726361669705223005256707033393323681199742226865639061796493744221386650671921408599281675072195109604944995246990117259752921959078570716019348911611821807743542202606017861680093899453962535751057029803212313708486252499961531916769339026243456254415795474566725045397580987945276292940425615563426872706612654673760957132954706561315315926583847756728581334589763622690426645925379033552965887091774261328484101677385760510308565939450969280431514193153901465147874994288888863961626533437546523090704677258271361008899424058968841403657808839941136606557821902221756903088734659178298942185013814206583151273573533540756898457572685280130826705824899847574123392575025182545331871707478881582060832153045557952057641871852784168481101647</span></span><br><span class="line">c2 = <span class="number">161619014853290061321220693856242384241899565606310997462914314289208211523608827698222734190386889612098570760765052452215805711014546122099647560430788381292730765852839847593053599250289125651012417026034998933486356540308165710913202176920168248765753912975464775516099366852853130484143941438754410599163284892652060800647319146257668079858962426955881454668916171211181142453679621166656675384626603665740562005722087726838877971126595828345860415781411146330129891129797182526922825440860137352029911523070206447988669663751215339049795213569586767141039747546364893768334626213397240105328357731197925663794385770706516043309955122745946633182399168534133436912290389494270925639788309351783493083085094045092781888997140679841389857851588928742292158429434570541383701331355804702559218884246423448924119442796513423570240629502315241227996438176424546368309332048747610392861954126660466095971227213870875955019656804172566974654412258429352773642042554134725696296293760333163865827998422748</span></span><br><span class="line">ip = <span class="number">80275679918090105134294823865673211657060049627413874971428297415355157707252877991145232186659935067961745973100698632943949790304190096567884607037119257848837354982500048978070619820510408650386626542338056277335180497955588848138448991963800265073331348097617541306117998857780109771194563339021595188562</span></span><br><span class="line">iq = <span class="number">91430270065720942392278749444269989843094838912787188266496611817766528132774187319335115624057615900976202412507879118712912101862728738204907877396022887953429108729897171677408597080700062032905675017013140349657979587207083820584906055634857776106802178757131724480934751871117394549988315719808677297400</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">8</span></span><br><span class="line">e2 = <span class="number">5</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getr</span>():</span><br><span class="line">    r = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        r = r * x</span><br><span class="line">        <span class="keyword">if</span> r.bit_length() &gt; <span class="number">1024</span> <span class="keyword">and</span> isPrime(r - <span class="number">1</span>):</span><br><span class="line">            r = r - <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">r = getr()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;r=&#x27;</span>,r)</span><br><span class="line">pq = n // r</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_p_q</span>():</span><br><span class="line"></span><br><span class="line">    k1k2 = inv_p*inv_q - <span class="number">1</span></span><br><span class="line">    alpha_beta = pq-<span class="number">1</span></span><br><span class="line">    alphabeta =k1k2*pq</span><br><span class="line">    Detla = (alpha_beta)**<span class="number">2</span> -<span class="number">4</span>*alphabeta</span><br><span class="line">    x1 = ((alpha_beta)+libnum.nroot(Detla,<span class="number">2</span>))//<span class="number">2</span></span><br><span class="line">    x2 = ((alpha_beta)-libnum.nroot(Detla,<span class="number">2</span>))//<span class="number">2</span></span><br><span class="line">    p = libnum.gcd(x1,pq)</span><br><span class="line">    q = libnum.gcd(x2,pq)</span><br><span class="line">    <span class="keyword">return</span> p,q</span><br><span class="line">    <span class="comment"># p, q = symbols(&quot;p q&quot;)</span></span><br><span class="line">    <span class="comment"># eq1 = ip * p + iq * q - pq - 1</span></span><br><span class="line">    <span class="comment"># eq2 = p * q- pq</span></span><br><span class="line">    <span class="comment"># sol = solve([eq1, eq2], [p, q])</span></span><br><span class="line">    <span class="comment"># return sol</span></span><br><span class="line"></span><br><span class="line">p,q = get_p_q()</span><br><span class="line"><span class="comment"># p,q = get_p_q()[0]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_rabin</span>(<span class="params">c,p,q,n</span>):</span><br><span class="line">    inv_p = libnum.invmod(p, q)</span><br><span class="line">    inv_q = libnum.invmod(q, p)</span><br><span class="line">    mp = <span class="built_in">pow</span>(Integer(c), (p + <span class="number">1</span>) // <span class="number">4</span>, p)</span><br><span class="line">    mq = <span class="built_in">pow</span>(Integer(c), (q + <span class="number">1</span>) // <span class="number">4</span>, q)</span><br><span class="line">    a = (inv_p * p * mq + inv_q * q * mp) % n</span><br><span class="line">    b = n - <span class="built_in">int</span>(a)</span><br><span class="line">    c = (inv_p * p * mq - inv_q * q * mp) % n</span><br><span class="line">    d = n - <span class="built_in">int</span>(c)</span><br><span class="line">    aa = [a, b, c, d]</span><br><span class="line">    <span class="built_in">print</span>(aa)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> aa:</span><br><span class="line">        flag = long_to_bytes(<span class="built_in">int</span>(i))</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&quot;D0g3&quot;</span> <span class="keyword">in</span> flag:</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">solve_rabin(c1,p,q,pq)</span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(r-<span class="number">1</span>)</span><br><span class="line">d = libnum.invmod(e2,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c2,<span class="built_in">int</span>(d),n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment"># D0g3&#123;82309bce-9db6-5340-a9e4-a67a9ba15345&#125;</span></span><br></pre></td></tr></table></figure>
<p><span class="exturl" data-url="aHR0cHM6Ly9zZWthaS50ZWFtL2Jsb2cvY3liZXItZ3JhYnMtY3RmLTB4MDMvdW5icjM0azRibDMv">Cyber Grabs CTF 0x03 – Unbr34k4bl3 (sekai.team)<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Wp</tag>
      </tags>
  </entry>
  <entry>
    <title>2024第一届VCTF纳新赛</title>
    <url>/Crypto/2024%E7%AC%AC%E4%B8%80%E5%B1%8AVCTF%E7%BA%B3%E6%96%B0%E8%B5%9B/</url>
    <content><![CDATA[<p><strong>明月随良缘，春潮夜夜深。</strong></p>
<span id="more"></span>
<h2 id="狂飙"><a href="#狂飙" class="headerlink" title="狂飙"></a>狂飙</h2><blockquote>
<p>题目</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line">m = <span class="number">88007513702424243702066490849596817304827839547007641526433597788800212065249</span></span><br><span class="line">key = os.urandom(<span class="number">24</span>)</span><br><span class="line">key = bytes_to_long(key)</span><br><span class="line">n=m % key</span><br><span class="line">flag += (<span class="number">16</span> - <span class="built_in">len</span>(flag) % <span class="number">16</span>) * <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">iv = os.urandom(<span class="number">16</span>)</span><br><span class="line">aes = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">enc_flag = aes.encrypt(flag)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(enc_flag)</span><br><span class="line"><span class="built_in">print</span>(iv)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#103560843006078708944833658339172896192389513625588</span></span><br><span class="line"><span class="comment">#b&#x27;\xfc\x87\xcb\x8e\x9d\x1a\x17\x86\xd9~\x16)\xbfU\x98D\xfe\x8f\xde\x9c\xb0\xd1\x9e\xe7\xa7\xefiY\x95C\x14\x13C@j1\x9d\x08\xd9\xe7W&gt;F2\x96cm\xeb&#x27;</span></span><br><span class="line"><span class="comment">#b&#x27;UN\x1d\xe2r&lt;\x1db\x00\xdb\x9a\x84\x1e\x82\xf0\x86&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>这题没细看，网上一搜<code>wp</code>就出来了，</p>
<p><code>n=m % key</code>，<code>n-m=k*key</code>，所以 <code>key是 n-m中的一个因数</code> </p>
<p><code>.divisors()</code>，sage中的一个函数，返回一个数的所有因子</p>
<p>附上官方解：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">n=<span class="number">103560843006078708944833658339172896192389513625588</span></span><br><span class="line">m=<span class="number">88007513702424243702066490849596817304827839547007641526433597788800212065249</span></span><br><span class="line">key=m-n</span><br><span class="line"></span><br><span class="line">enc=<span class="string">b&#x27;\xfc\x87\xcb\x8e\x9d\x1a\x17\x86\xd9~\x16)\xbfU\x98D\xfe\x8f\xde\x9c\xb0\xd1\x9e\xe7\xa7\xefiY\x95C\x14\x13C@j1\x9d\x08\xd9\xe7W&gt;F2\x96cm\xeb&#x27;</span></span><br><span class="line">iv=<span class="string">b&#x27;UN\x1d\xe2r&lt;\x1db\x00\xdb\x9a\x84\x1e\x82\xf0\x86&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> key.divisors():</span><br><span class="line">    i=long_to_bytes(i,<span class="number">24</span>)</span><br><span class="line">    aes=AES.new(i,AES.MODE_CBC,iv)</span><br><span class="line">    flag=aes.decrypt(enc)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;flag&#123;&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;cf735a4d-f9d9-5110-8a73-5017fc39b1b0&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="RRSA"><a href="#RRSA" class="headerlink" title="RRSA"></a>RRSA</h2><blockquote>
<p>题目</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genprime</span>():</span><br><span class="line">	o = getPrime(<span class="number">300</span>)</span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		r = random.randint(<span class="number">2</span>**<span class="number">211</span>,<span class="number">2</span>**<span class="number">212</span>)</span><br><span class="line">		<span class="keyword">if</span> isPrime(o*r+<span class="number">1</span>):</span><br><span class="line">			<span class="keyword">return</span> o,o*r+<span class="number">1</span></span><br><span class="line">o1,p = genprime()</span><br><span class="line">o2,q = genprime()</span><br><span class="line">n=p*q</span><br><span class="line">g = random.randint(<span class="number">2</span>,n)</span><br><span class="line">order = o1*o2</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">pow</span>(g, (p-<span class="number">1</span>)*(q-<span class="number">1</span>)//order, n)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">pow</span>(a,order,n)==<span class="number">1</span></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n=<span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c=<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;a=<span class="subst">&#123;a&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;o=<span class="subst">&#123;order&#125;</span>&#x27;</span>)</span><br><span class="line">n=<span class="number">44435425447782114838897637647733409614831121089064725526413247701631122523646623518523253532066782191116739274354991533158902831935676078270115998050827358178237970133151467497051097694866238654012042884894924846645692294679774577780414805605811029994570132760841672754334836945991390844881416693502552870759</span></span><br><span class="line">c=<span class="number">41355409695119524180275572228024314281790321005050664347253778436753663918879919757571129194249071204946415158483084730406579433518426895158142068246063333111438863836668823874266012696265984976829088976346775293102571794377818611709336242495598331872036489022428750111592728015245733975923531682859930386731</span></span><br><span class="line">a=<span class="number">39844923600973712577104437232871220768052114284995840460375902596405104689968610170336151307934820030811039502338683925817667771016288030594299464019664781911131177394369348831163266849069740191783143327911986419528382896919157135487360024877230254274474109707112110411601273850406237677432935818199348150470</span></span><br><span class="line">o=<span class="number">1745108106200960949680880500144134006212310627077303652648249235148621661187609612344828833696608872318217367008018829485062303972702933973340909520462917612611270028511222134076453</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h3><p>注意到 <code>o1 300bit，r1 212bit</code>，<code>p=o1*r1+1 ,512bit</code></p>
<p>所以 $n=p*q=o_1r_1o_2r_2+o_1r_1+o_2r_2+1，1024bit$   </p>
<p>我们已知 <code>o1o2 ,600bit</code> ， 看上式，<code>o1r1o2r2，1024bit，   o_1r_1+o_2r_2，512bit</code></p>
<p><code>python里 //</code> 是保留整数部分，所以 <code>n//o</code>  求出的是 <code>r1r2</code> 的准确值</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">n=<span class="number">44435425447782114838897637647733409614831121089064725526413247701631122523646623518523253532066782191116739274354991533158902831935676078270115998050827358178237970133151467497051097694866238654012042884894924846645692294679774577780414805605811029994570132760841672754334836945991390844881416693502552870759</span></span><br><span class="line">c=<span class="number">41355409695119524180275572228024314281790321005050664347253778436753663918879919757571129194249071204946415158483084730406579433518426895158142068246063333111438863836668823874266012696265984976829088976346775293102571794377818611709336242495598331872036489022428750111592728015245733975923531682859930386731</span></span><br><span class="line">a=<span class="number">39844923600973712577104437232871220768052114284995840460375902596405104689968610170336151307934820030811039502338683925817667771016288030594299464019664781911131177394369348831163266849069740191783143327911986419528382896919157135487360024877230254274474109707112110411601273850406237677432935818199348150470</span></span><br><span class="line">o=<span class="number">1745108106200960949680880500144134006212310627077303652648249235148621661187609612344828833696608872318217367008018829485062303972702933973340909520462917612611270028511222134076453</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">phi = n//o * o</span><br><span class="line"></span><br><span class="line">d = libnum.invmod(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">m = libnum.n2s(m)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment"># flag&#123;0228FC7F-C865-BD0F-F124-9F9860B3542B&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="造格"><a href="#造格" class="headerlink" title="造格"></a>造格</h3><p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagesimage-20240319205329862.png" alt="image-20240319205329862"></p>
<p>于是构造格子 <script type="math/tex">M = \begin{bmatrix} 2^{144}& -o\newline 0 &n+1 \end{bmatrix}</script> 规约一下即可得到 <code>r1r2</code> </p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagesimage-20240319210127305.png" alt="image-20240319210127305"></p>
<p>就能直接得到<code>r1r2</code>了</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">n=<span class="number">44435425447782114838897637647733409614831121089064725526413247701631122523646623518523253532066782191116739274354991533158902831935676078270115998050827358178237970133151467497051097694866238654012042884894924846645692294679774577780414805605811029994570132760841672754334836945991390844881416693502552870759</span></span><br><span class="line">c=<span class="number">41355409695119524180275572228024314281790321005050664347253778436753663918879919757571129194249071204946415158483084730406579433518426895158142068246063333111438863836668823874266012696265984976829088976346775293102571794377818611709336242495598331872036489022428750111592728015245733975923531682859930386731</span></span><br><span class="line">a=<span class="number">39844923600973712577104437232871220768052114284995840460375902596405104689968610170336151307934820030811039502338683925817667771016288030594299464019664781911131177394369348831163266849069740191783143327911986419528382896919157135487360024877230254274474109707112110411601273850406237677432935818199348150470</span></span><br><span class="line">o=<span class="number">1745108106200960949680880500144134006212310627077303652648249235148621661187609612344828833696608872318217367008018829485062303972702933973340909520462917612611270028511222134076453</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">B = matrix(ZZ,[[<span class="number">2</span>^<span class="number">88</span>,-o],[<span class="number">0</span>,n+<span class="number">1</span>]])</span><br><span class="line">L = B.LLL()</span><br><span class="line"><span class="built_in">print</span>(L)</span><br><span class="line">r = L[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">phi = o*(r&gt;&gt;<span class="number">88</span>)</span><br><span class="line">d = libnum.invmod(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br><span class="line"><span class="comment"># flag&#123;0228FC7F-C865-BD0F-F124-9F9860B3542B&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="Reference："><a href="#Reference：" class="headerlink" title="Reference："></a>Reference：</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0NoYU1kNVRlYW0vVmVub20tV1AvYmxvYi9tYWluLzIwMjRWZW5vbUNURi8yMDI0X3ZjdGZfY3J5cHRvX2t1YW5nYmlhby93cml0ZXVwL3JlYWRtZS5tZA==">Venom-WP/2024VenomCTF/2024_vctf_crypto_kuangbiao/writeup/readme.md at main · ChaMd5Team/Venom-WP (github.com)<i class="fa fa-external-link-alt"></i></span> </p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXh0ZXJqaWUuZ2l0aHViLmlvLzIwMjQvMDMvMTYv6LWb6aKY5aSN546wLzIwMjRWQ1RGLyNtb3Jl">2024VCTF | DexterJie’Blog<i class="fa fa-external-link-alt"></i></span> </p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Wp</tag>
      </tags>
  </entry>
  <entry>
    <title>2024羊城杯</title>
    <url>/Crypto/2024%E7%BE%8A%E5%9F%8E%E6%9D%AF/</url>
    <content><![CDATA[<p>本科组挺离谱的，睡醒被第二十名拉开一大截</p>
<span id="more"></span>
<h2 id="1-TH-Curve"><a href="#1-TH-Curve" class="headerlink" title="1.TH_Curve"></a>1.TH_Curve</h2><blockquote>
<p>题目</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_THcurve</span>(<span class="params">P, Q</span>):</span><br><span class="line">    <span class="keyword">if</span> P == (<span class="number">0</span>, <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> Q</span><br><span class="line">    <span class="keyword">if</span> Q == (<span class="number">0</span>, <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> P</span><br><span class="line">    x1, y1 = P</span><br><span class="line">    x2, y2 = Q</span><br><span class="line">    x3 = (x1 - y1 ** <span class="number">2</span> * x2 * y2) * <span class="built_in">pow</span>(a * x1 * y1 * x2 ** <span class="number">2</span> - y2, -<span class="number">1</span>, p) % p</span><br><span class="line">    y3 = (y1 * y2 ** <span class="number">2</span> - a * x1 ** <span class="number">2</span> * x2) * <span class="built_in">pow</span>(a * x1 * y1 * x2 ** <span class="number">2</span> - y2, -<span class="number">1</span>, p) % p</span><br><span class="line">    <span class="keyword">return</span> x3, y3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul_THcurve</span>(<span class="params">n, P</span>):</span><br><span class="line">    R = (<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            R = add_THcurve(R, P)</span><br><span class="line">        P = add_THcurve(P, P)</span><br><span class="line">        n = n // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> R</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = <span class="number">10297529403524403127640670200603184608844065065952536889</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">G = (<span class="number">8879931045098533901543131944615620692971716807984752065</span>, <span class="number">4106024239449946134453673742202491320614591684229547464</span>)</span><br><span class="line"></span><br><span class="line">FLAG = flag.lstrip(<span class="string">b&#x27;DASCTF&#123;&#x27;</span>).rstrip(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(FLAG) == <span class="number">15</span></span><br><span class="line">m = bytes_to_long(FLAG)</span><br><span class="line"><span class="keyword">assert</span> m &lt; p</span><br><span class="line">Q = mul_THcurve(m, G)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Q =&quot;</span>, Q)</span><br><span class="line"><span class="comment"># Q = (6784278627340957151283066249316785477882888190582875173, 6078603759966354224428976716568980670702790051879661797)</span></span><br></pre></td></tr></table></figure>
<p>对照点加的公式，是Twisted Hessian Curves</p>
<p>有一道 Hessian Curves 的例题</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLm1hcGxlMzE0Mi5uZXQvMjAyMy8wNy8wOS9jcnlwdG9jdGYtMjAyMy13cml0ZXVwcy8jYmFyYWs=">https://blog.maple3142.net/2023/07/09/cryptoctf-2023-writeups/#barak<i class="fa fa-external-link-alt"></i></span> </p>
<p>多了个 a</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># a*x^3+y^3+1 = d*x*y</span></span><br><span class="line"></span><br><span class="line">G = (<span class="number">8879931045098533901543131944615620692971716807984752065</span>, <span class="number">4106024239449946134453673742202491320614591684229547464</span>)</span><br><span class="line">p = <span class="number">10297529403524403127640670200603184608844065065952536889</span></span><br><span class="line">c = <span class="number">1</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">x = G[<span class="number">0</span>]</span><br><span class="line">y = G[<span class="number">1</span>]</span><br><span class="line">inv_xy = gmpy2.invert(x*y,p)</span><br><span class="line">d = (a*x^<span class="number">3</span>+y^<span class="number">3</span>+<span class="number">1</span>)*inv_xy % p</span><br><span class="line"></span><br><span class="line">x, y, z = QQ[<span class="string">&quot;x,y,z&quot;</span>].gens()</span><br><span class="line">eq = a * x ^ <span class="number">3</span> + y ^ <span class="number">3</span> + c * z ^ <span class="number">3</span> - d * x * y * z	<span class="comment"># 乘a</span></span><br><span class="line">phi = EllipticCurve_from_cubic(eq)</span><br><span class="line">E = phi.codomain().change_ring(GF(p))</span><br><span class="line">P = (<span class="number">8879931045098533901543131944615620692971716807984752065</span>, <span class="number">4106024239449946134453673742202491320614591684229547464</span>)</span><br><span class="line">Q = (<span class="number">6784278627340957151283066249316785477882888190582875173</span>, <span class="number">6078603759966354224428976716568980670702790051879661797</span>)</span><br><span class="line"></span><br><span class="line">fx, fy, fz = <span class="built_in">map</span>(<span class="keyword">lambda</span> f: f.change_ring(F), phi.defining_polynomials())</span><br><span class="line">phiP = <span class="keyword">lambda</span> x, y, z=<span class="number">1</span>: E(fx(x, y, z) / fz(x, y, z), fy(x, y, z) / fz(x, y, z))</span><br><span class="line">EP = phiP(*P)</span><br><span class="line">EQ = phiP(*Q)</span><br><span class="line">x = discrete_log(EQ, EP, operation=<span class="string">&quot;+&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line">od = EP.order()</span><br><span class="line"><span class="built_in">print</span>(</span><br><span class="line">    [</span><br><span class="line">        flag</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(E.order() // od)</span><br><span class="line">        <span class="keyword">if</span> (flag := long_to_bytes(<span class="built_in">int</span>(x + od * i))).isascii()</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># e@sy_cuRvL_c0o!</span></span><br></pre></td></tr></table></figure>
<hr>
<hr>
<h3 id="记"><a href="#记" class="headerlink" title="记"></a>记</h3><p>曲线本身是个多项式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = <span class="number">10297529403524403127640670200603184608844065065952536889</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">G = (<span class="number">8879931045098533901543131944615620692971716807984752065</span>, <span class="number">4106024239449946134453673742202491320614591684229547464</span>)</span><br><span class="line">gx,gy=G[<span class="number">0</span>],G[<span class="number">1</span>]</span><br><span class="line">PR.&lt;d&gt;=PolynomialRing(Zmod(p))</span><br><span class="line">f=a*gx^<span class="number">3</span>+gy^<span class="number">3</span>+<span class="number">1</span>-d*gx*gy</span><br><span class="line">ret=f.roots()</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br></pre></td></tr></table></figure>
<p><code>EllipticCurve_from_cubic</code>需要三个变量才能构造</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d=<span class="number">8817708809404273675545317762394593437543647288341187200</span></span><br><span class="line">Q = (<span class="number">6784278627340957151283066249316785477882888190582875173</span>, <span class="number">6078603759966354224428976716568980670702790051879661797</span>)</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p = <span class="number">10297529403524403127640670200603184608844065065952536889</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">P=(<span class="number">8879931045098533901543131944615620692971716807984752065</span>, <span class="number">4106024239449946134453673742202491320614591684229547464</span>)</span><br><span class="line"></span><br><span class="line">R.&lt;x,y,z&gt; = Zmod(p)[]</span><br><span class="line">cubic = a*x^<span class="number">3</span> + y^<span class="number">3</span> + z^<span class="number">3</span> - d*x*y*z</span><br><span class="line">E = EllipticCurve_from_cubic(cubic,morphism=<span class="literal">True</span>)</span><br><span class="line">P = E(P)</span><br><span class="line">Q = E(Q)</span><br><span class="line">m = P.discrete_log(Q)</span><br><span class="line">m=<span class="number">525729205728344257526560548008783649</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<p>曲线转换后再代入点：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">10297529403524403127640670200603184608844065065952536889</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">G = (<span class="number">8879931045098533901543131944615620692971716807984752065</span>, <span class="number">4106024239449946134453673742202491320614591684229547464</span>)</span><br><span class="line">d = <span class="number">8817708809404273675545317762394593437543647288341187200</span></span><br><span class="line">Q = (<span class="number">6784278627340957151283066249316785477882888190582875173</span>, <span class="number">6078603759966354224428976716568980670702790051879661797</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">THessian_to_Weierstrass</span>(<span class="params">P</span>):  </span><br><span class="line">    x, y = P  </span><br><span class="line">    A = (d ** <span class="number">3</span> - <span class="number">27</span> * a) * <span class="built_in">pow</span>(<span class="number">3</span> + <span class="number">3</span> * y + d * x, -<span class="number">1</span>, p)  </span><br><span class="line">    u = (x * A) * <span class="built_in">pow</span>(<span class="number">3</span>, -<span class="number">1</span>, p) - (d ** <span class="number">2</span>) * <span class="built_in">pow</span>(<span class="number">4</span>, -<span class="number">1</span>, p)  </span><br><span class="line">    v = A * (<span class="number">1</span> - y) * <span class="built_in">pow</span>(<span class="number">2</span>, -<span class="number">1</span>, p)  </span><br><span class="line">    <span class="keyword">return</span> (u, v)</span><br><span class="line"></span><br><span class="line">a4 = -(d ** <span class="number">4</span> + <span class="number">216</span> * d * a) * <span class="built_in">pow</span>(<span class="number">48</span>, -<span class="number">1</span>, p)  </span><br><span class="line">a6 = (d ** <span class="number">6</span> - <span class="number">540</span> * d ** <span class="number">3</span> * a - <span class="number">5832</span> * a ** <span class="number">2</span>) * <span class="built_in">pow</span>(<span class="number">864</span>, -<span class="number">1</span>, p)</span><br><span class="line"></span><br><span class="line">E = EllipticCurve(GF(p), [a4,a6])</span><br><span class="line"><span class="built_in">print</span>(E)</span><br><span class="line"></span><br><span class="line">G = E(THessian_to_Weierstrass(G))</span><br><span class="line">Q = E(THessian_to_Weierstrass(Q))</span><br><span class="line">m = Q.log(G)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;e@sy_cuRvL_c0o!&#x27;</span></span><br></pre></td></tr></table></figure>
<p>点在曲线中的转换：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">E = EllipticCurve(GF(p), [a4,a6])</span><br><span class="line"></span><br><span class="line">G = E(THessian_to_Weierstrass(G))</span><br></pre></td></tr></table></figure>
<h2 id="2-BabyCurve"><a href="#2-BabyCurve" class="headerlink" title="2.BabyCurve"></a>2.BabyCurve</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> c, b, key, FLAG</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_curve</span>(<span class="params">P, Q, K</span>):</span><br><span class="line">    a, d, p = K</span><br><span class="line">    <span class="keyword">if</span> P == (<span class="number">0</span>, <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> Q</span><br><span class="line">    <span class="keyword">if</span> Q == (<span class="number">0</span>, <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> P</span><br><span class="line">    x1, y1 = P</span><br><span class="line">    x2, y2 = Q</span><br><span class="line">    x3 = (x1 * y2 + y1 * x2) * <span class="built_in">pow</span>(<span class="number">1</span> - d * x1 ** <span class="number">2</span> * x2 ** <span class="number">2</span>, -<span class="number">1</span>, p) % p</span><br><span class="line">    y3 = ((y1 * y2 + <span class="number">2</span> * a * x1 * x2) * (<span class="number">1</span> + d * x1 ** <span class="number">2</span> * x2 ** <span class="number">2</span>) + <span class="number">2</span> * d * x1 * x2 * (x1 ** <span class="number">2</span> + x2 ** <span class="number">2</span>)) * <span class="built_in">pow</span>(</span><br><span class="line">        (<span class="number">1</span> - d * x1 ** <span class="number">2</span> * x2 ** <span class="number">2</span>) ** <span class="number">2</span>, -<span class="number">1</span>, p) % p</span><br><span class="line">    <span class="keyword">return</span> x3, y3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul_curve</span>(<span class="params">n, P, K</span>):</span><br><span class="line">    R = (<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            R = add_curve(R, P, K)</span><br><span class="line">        P = add_curve(P, P, K)</span><br><span class="line">        n = n // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> R</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AES_encrypt</span>(<span class="params">k</span>):</span><br><span class="line">    key = hashlib.sha256(<span class="built_in">str</span>(k).encode()).digest()[:<span class="number">16</span>]</span><br><span class="line">    iv = os.urandom(<span class="number">16</span>)</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    cipher = cipher.encrypt(pad(FLAG, <span class="number">16</span>))</span><br><span class="line">    data = &#123;&#125;</span><br><span class="line">    data[<span class="string">&quot;iv&quot;</span>] = iv.<span class="built_in">hex</span>()</span><br><span class="line">    data[<span class="string">&quot;cipher&quot;</span>] = cipher.<span class="built_in">hex</span>()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = <span class="number">46</span></span><br><span class="line">d = <span class="number">20</span></span><br><span class="line">p1 = <span class="number">826100030683243954408990060837</span></span><br><span class="line">K1 = (a, d, p1)</span><br><span class="line">G1 = (<span class="number">560766116033078013304693968735</span>, <span class="number">756416322956623525864568772142</span>)</span><br><span class="line">P1 = mul_curve(c, G1, K1)</span><br><span class="line">Q1 = mul_curve(b, G1, K1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;P1 =&quot;</span>, P1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Q1 =&quot;</span>, Q1)</span><br><span class="line"><span class="comment"># P1 = (528578510004630596855654721810, 639541632629313772609548040620)</span></span><br><span class="line"><span class="comment"># Q1 = (819520958411405887240280598475, 76906957256966244725924513645)</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">770311352827455849356512448287</span></span><br><span class="line">E = EllipticCurve(GF(p), [-c, b])</span><br><span class="line">G = E.gens()[<span class="number">0</span>]</span><br><span class="line">P = G * key</span><br><span class="line">data = AES_encrypt(key)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;G =&quot;</span>, G)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;P =&quot;</span>, P)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;data =&quot;</span>,data)</span><br><span class="line"><span class="comment"># G = (584273268656071313022845392380 : 105970580903682721429154563816 : 1)</span></span><br><span class="line"><span class="comment"># P = (401055814681171318348566474726 : 293186309252428491012795616690 : 1)</span></span><br><span class="line"><span class="comment"># data = &#123;&#x27;iv&#x27;: &#x27;bae1b42f174443d009c8d3a1576f07d6&#x27;, &#x27;cipher&#x27;: &#x27;ff34da7a65854ed75342fd4ad178bf577bd622df9850a24fd63e1da557b4b8a4&#x27;&#125;</span></span><br></pre></td></tr></table></figure>
<p>差点舍本逐末，因为a，b很小，直接在源码的基础上爆破c，d 就很方便，然后是ECC中的离散对数问题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="comment"># from secret import c, b, key, FLAG</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_curve</span>(<span class="params">P, Q, K</span>):</span><br><span class="line">    a, d, p = K</span><br><span class="line">    <span class="keyword">if</span> P == (<span class="number">0</span>, <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> Q</span><br><span class="line">    <span class="keyword">if</span> Q == (<span class="number">0</span>, <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> P</span><br><span class="line">    x1, y1 = P</span><br><span class="line">    x2, y2 = Q</span><br><span class="line">    x3 = (x1 * y2 + y1 * x2) * <span class="built_in">pow</span>(<span class="number">1</span> - d * x1 ** <span class="number">2</span> * x2 ** <span class="number">2</span>, -<span class="number">1</span>, p) % p</span><br><span class="line">    y3 = ((y1 * y2 + <span class="number">2</span> * a * x1 * x2) * (<span class="number">1</span> + d * x1 ** <span class="number">2</span> * x2 ** <span class="number">2</span>) + <span class="number">2</span> * d * x1 * x2 * (x1 ** <span class="number">2</span> + x2 ** <span class="number">2</span>)) * <span class="built_in">pow</span>(</span><br><span class="line">        (<span class="number">1</span> - d * x1 ** <span class="number">2</span> * x2 ** <span class="number">2</span>) ** <span class="number">2</span>, -<span class="number">1</span>, p) % p</span><br><span class="line">    <span class="keyword">return</span> x3, y3</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul_curve</span>(<span class="params">n, P, K</span>):</span><br><span class="line">    R = (<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            R = add_curve(R, P, K)</span><br><span class="line">        P = add_curve(P, P, K)</span><br><span class="line">        n = n // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> R</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AES_encrypt</span>(<span class="params">k</span>):</span><br><span class="line">    key = hashlib.sha256(<span class="built_in">str</span>(k).encode()).digest()[:<span class="number">16</span>]</span><br><span class="line">    iv = os.urandom(<span class="number">16</span>)</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    cipher = cipher.encrypt(pad(FLAG, <span class="number">16</span>))</span><br><span class="line">    data = &#123;&#125;</span><br><span class="line">    data[<span class="string">&quot;iv&quot;</span>] = iv.<span class="built_in">hex</span>()</span><br><span class="line">    data[<span class="string">&quot;cipher&quot;</span>] = cipher.<span class="built_in">hex</span>()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">a = <span class="number">46</span></span><br><span class="line">d = <span class="number">20</span></span><br><span class="line">p1 = <span class="number">826100030683243954408990060837</span></span><br><span class="line">K1 = (a, d, p1)</span><br><span class="line">G1 = (<span class="number">560766116033078013304693968735</span>, <span class="number">756416322956623525864568772142</span>)</span><br><span class="line">P1 = (<span class="number">528578510004630596855654721810</span>, <span class="number">639541632629313772609548040620</span>)</span><br><span class="line">Q1 = (<span class="number">819520958411405887240280598475</span>, <span class="number">76906957256966244725924513645</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    PP = mul_curve(i, G1, K1)</span><br><span class="line">    <span class="keyword">if</span> PP == P1:</span><br><span class="line">        c = i</span><br><span class="line">    QQ = mul_curve(i, G1, K1)</span><br><span class="line">    <span class="keyword">if</span> QQ == Q1:</span><br><span class="line">        b = i</span><br><span class="line"></span><br><span class="line">p = <span class="number">770311352827455849356512448287</span></span><br><span class="line">E = EllipticCurve(GF(p), [-c, b])</span><br><span class="line">G = E.gens()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">P = E(<span class="number">401055814681171318348566474726</span>,<span class="number">293186309252428491012795616690</span>)</span><br><span class="line">G = E(<span class="number">584273268656071313022845392380</span> , <span class="number">105970580903682721429154563816</span>)</span><br><span class="line">key = P.log(G)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AES_encrypt</span>(<span class="params">k</span>):</span><br><span class="line">    key = hashlib.sha256(<span class="built_in">str</span>(k).encode()).digest()[:<span class="number">16</span>]</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    cipher = cipher.decrypt(c)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line">iv = <span class="string">&#x27;bae1b42f174443d009c8d3a1576f07d6&#x27;</span></span><br><span class="line">c = <span class="string">&#x27;ff34da7a65854ed75342fd4ad178bf577bd622df9850a24fd63e1da557b4b8a4&#x27;</span></span><br><span class="line">iv = <span class="built_in">bytes</span>.fromhex(iv)</span><br><span class="line">c= <span class="built_in">bytes</span>.fromhex(c)</span><br><span class="line"><span class="built_in">print</span>(AES_encrypt(key))</span><br><span class="line"></span><br><span class="line"><span class="comment"># DASCTF&#123;THe_C0rv!_1s_Aw3s0me@!!&#125;</span></span><br></pre></td></tr></table></figure>
<p><code>求解以base为底，a的对数；ord为base的阶，可以缺省，operation可以是&#39;+&#39;与 &#39;*&#39;，默认为&#39;*&#39;；bounds是一个区间(ld,ud)，需要保证所计算的对数在此区间内。</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#通用的求离散对数的方法</span></span><br><span class="line">x=discrete_log(a,base,<span class="built_in">ord</span>,operation)</span><br><span class="line"></span><br><span class="line"><span class="comment">#求离散对数的Pollard-Rho算法</span></span><br><span class="line">x=discrete_log_rho(a,base,<span class="built_in">ord</span>,operation)</span><br><span class="line"></span><br><span class="line"><span class="comment">#求离散对数的Pollard-kangaroo算法(也称为lambda算法)</span></span><br><span class="line">x=discrete_log_lambda(a,base,bounds,operation)</span><br><span class="line"></span><br><span class="line"><span class="comment">#小步大步法</span></span><br><span class="line">x=bsgs(base,a,bounds,operation)</span><br><span class="line"></span><br><span class="line">k = P.log(G)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="3-RSA-loss"><a href="#3-RSA-loss" class="headerlink" title="3.RSA_loss"></a>3.RSA_loss</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line">p = getPrime(<span class="number">100</span>)</span><br><span class="line">q = getPrime(<span class="number">100</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">message = <span class="string">b&quot;&quot;</span></span><br><span class="line">m = bytes_to_long(message)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;p = <span class="subst">&#123;p&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;q = <span class="subst">&#123;q&#125;</span>&#x27;</span>)</span><br><span class="line">d = invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">newm = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(newm))</span><br><span class="line"><span class="comment">#c = 356435791209686635044593929546092486613929446770721636839137</span></span><br><span class="line"><span class="comment">#p = 898278915648707936019913202333</span></span><br><span class="line"><span class="comment">#q = 814090608763917394723955024893</span></span><br><span class="line"><span class="comment">#b&#x27;X\xee\x1ey\x88\x01dX\xf6i\x91\x80h\xf4\x1f!\xa7&quot;\x0c\x9a\x06\xc8\x06\x81\x15&#x27;</span></span><br></pre></td></tr></table></figure>
<p>试了一下直接正常爆破 k*n 不可行</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0JDQUNURi9iY2FjdGYtNC4wL2Jsb2IvbWFpbi9yc2EtaXMtYnJva2VuL3JzYS1icm9rZW4tc29sLnB5">bcactf-4.0/rsa-is-broken/rsa-broken-sol.py at main · BCACTF/bcactf-4.0 (github.com)<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">p = <span class="number">898278915648707936019913202333</span></span><br><span class="line">q = <span class="number">814090608763917394723955024893</span></span><br><span class="line">c = <span class="number">356435791209686635044593929546092486613929446770721636839137</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line">d = invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">newm = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调整明文直到其最后一个字节为 &#x27;&#125;&#x27;</span></span><br><span class="line"><span class="keyword">while</span> newm % <span class="number">256</span> != <span class="number">125</span>:    <span class="comment"># ord(&#x27;&#125;&#x27;) = 125</span></span><br><span class="line">    newm += n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建目标前缀和flag模板</span></span><br><span class="line">tmp = <span class="string">b&#x27;DASCTF&#123;&#x27;</span> + <span class="string">b&#x27;0&#x27;</span> * math.floor(math.log(newm, <span class="number">256</span>) - <span class="number">7</span>)</span><br><span class="line">flag = libnum.n2s(<span class="built_in">int</span>(newm))</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 持续调整解密后的消息直到符合目标格式</span></span><br><span class="line"><span class="keyword">while</span> re.fullmatch(<span class="string">b&#x27;[0-9a-zA-Z_&#123;&#125;]+&#x27;</span>, flag) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">if</span> flag[:<span class="number">7</span>] == <span class="string">b&#x27;DASCTF&#123;&#x27;</span>:</span><br><span class="line">        newm += n * <span class="number">256</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        newm += n * <span class="number">256</span> * <span class="built_in">int</span>(math.ceil((libnum.s2n(tmp) - newm) / (n * <span class="number">256</span>)))</span><br><span class="line">        tmp += <span class="string">b&#x27;0&#x27;</span></span><br><span class="line">    flag = libnum.n2s(<span class="built_in">int</span>(newm))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># DASCTF&#123;o0p5_m3ssaGe_to0_b1g_nv93nd0&#125;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>已知 头<code>DASCTF&#123;</code>，尾 <code>&#125;</code>，中间未知，需要未知的位数小于 n 才能做，所以我们还需要将未知部分拆分成两份，一部分爆破，一部分用于求解</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">356435791209686635044593929546092486613929446770721636839137</span></span><br><span class="line">p = <span class="number">898278915648707936019913202333</span></span><br><span class="line">q = <span class="number">814090608763917394723955024893</span></span><br><span class="line">n = p * q</span><br><span class="line">cc = <span class="string">b&#x27;X\xee\x1ey\x88\x01dX\xf6i\x91\x80h\xf4\x1f!\xa7&quot;\x0c\x9a\x06\xc8\x06\x81\x15&#x27;</span></span><br><span class="line">cc = bytes_to_long(cc)</span><br><span class="line"></span><br><span class="line">table = string.digits + string.ascii_letters + <span class="string">&quot;_&quot;</span></span><br><span class="line">nums = <span class="number">3</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> product(table,repeat = nums):</span><br><span class="line">    fix = bytes_to_long(<span class="string">b&quot;DASCTF&#123;&quot;</span> + <span class="string">&quot;&quot;</span>.join(j).encode() + <span class="string">b&quot;\x00&quot;</span>*<span class="number">25</span> + <span class="string">b&quot;&#125;&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        flag = <span class="string">&quot;&quot;</span>.join(j) + long_to_bytes((cc - fix)*inverse(<span class="number">256</span>,n) % n).decode()</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">all</span>(i <span class="keyword">in</span> table <span class="keyword">for</span> i <span class="keyword">in</span> flag)):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;DASCTF&#123;&quot;</span> + flag + <span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<h2 id="4-TheoremPlus"><a href="#4-TheoremPlus" class="headerlink" title="4.TheoremPlus"></a>4.TheoremPlus</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode_e</span>(<span class="params">e</span>):</span><br><span class="line">    <span class="keyword">if</span> e &gt; <span class="number">1</span>:</span><br><span class="line">        mul = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e):</span><br><span class="line">            mul *= i</span><br><span class="line">        <span class="keyword">if</span> e - mul % e - <span class="number">1</span> == <span class="number">0</span>:</span><br><span class="line">            mulmod = mul % e - e</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            mulmod = mul % e</span><br><span class="line">        <span class="keyword">return</span> mulmod + decode_e(e - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">p = next_prime(q)</span><br><span class="line">n = p * q</span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">e = <span class="built_in">abs</span>(decode_e(<span class="number">703440151</span>))</span><br><span class="line">c = <span class="built_in">pow</span>(bytes_to_long(flag), e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n = &#123;&#125;\n&#x27;</span></span><br><span class="line">      <span class="string">&#x27;c = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(n, c))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 18770575776346636857117989716700159556553308603827318013591587255198383129370907809760732011993542700529211200756354110539398800399971400004000898098091275284235225898698802555566416862975758535452624647017057286675078425814784682675012671384340267087604803050995107534481069279281213277371234272710195280647747033302773076094600917583038429969629948198841325080329081838681126456119415461246986745162687569680825296434756908111148165787768172000131704615314046005916223370429567142992192702888820837032850104701948658736010527261246199512595520995042205818856177310544178940343722756848658912946025299687434514029951</span></span><br><span class="line"><span class="string">c = 2587907790257921446754254335909686808394701314827194535473852919883847207482301560195700622542784316421967768148156146355099210400053281966782598551680260513547233270646414440776109941248869185612357797869860293880114609649325409637239631730174236109860697072051436591823617268725493768867776466173052640366393488873505207198770497373345116165334779381031712832136682178364090547875479645094274237460342318587832274304777193468833278816459344132231018703578274192000016560653148923056635076144189403004763127515475672112627790796376564776321840115465990308933303392198690356639928538984862967102082126458529748355566</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>测试发现这就是算素数个数的，但要<code>-2</code> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decode_e</span>(<span class="params">e</span>):</span><br><span class="line">    <span class="keyword">if</span> e &gt; <span class="number">1</span>:</span><br><span class="line">        mul = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, e):</span><br><span class="line">            mul *= i</span><br><span class="line">        <span class="keyword">if</span> e - mul % e - <span class="number">1</span> == <span class="number">0</span>:</span><br><span class="line">            mulmod = mul % e - e</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            mulmod = mul % e</span><br><span class="line">        <span class="keyword">return</span> mulmod + decode_e(e - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">abs</span>(decode_e(<span class="number">200</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 44</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">    <span class="keyword">if</span> isPrime(e):</span><br><span class="line">        num=num+<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 46</span></span><br></pre></td></tr></table></figure>
<p>找到——Python 埃拉托色尼筛法 – 寻找质数</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9nZWVrLWRvY3MuY29tL3B5dGhvbi9weXRob24tYXNrLWFuc3dlci8zMV9weXRob25fc2lldmVfb2ZfZXJhdG9zdGhlbmVzX2ZpbmRpbmdfcHJpbWVzX3B5dGhvbi5odG1s">Python 埃拉托色尼筛法 – 寻找质数|极客教程 (geek-docs.com)<i class="fa fa-external-link-alt"></i></span> </p>
<p>然后费马小定理分解 n</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sieve_of_eratosthenes</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">    primes = [<span class="literal">True</span>] * ((n+<span class="number">1</span>)//<span class="number">2</span>)</span><br><span class="line">    primes[<span class="number">0</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    p = <span class="number">3</span></span><br><span class="line">    <span class="keyword">while</span> p * p &lt;= n:</span><br><span class="line">        <span class="keyword">if</span> primes[p // <span class="number">2</span>]:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(p * p, n+<span class="number">1</span>, <span class="number">2</span> * p):</span><br><span class="line">                primes[i // <span class="number">2</span>] = <span class="literal">False</span></span><br><span class="line">        p += <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>([<span class="number">2</span>] + [<span class="number">2</span> * i + <span class="number">1</span> <span class="keyword">for</span> i, is_prime <span class="keyword">in</span> <span class="built_in">enumerate</span>(primes) <span class="keyword">if</span> is_prime])</span><br><span class="line"></span><br><span class="line">n = <span class="number">703440151</span></span><br><span class="line">prime_numbers = sieve_of_eratosthenes(n)</span><br><span class="line"><span class="built_in">print</span>(prime_numbers)</span><br><span class="line"><span class="comment"># 36421875</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">18770575776346636857117989716700159556553308603827318013591587255198383129370907809760732011993542700529211200756354110539398800399971400004000898098091275284235225898698802555566416862975758535452624647017057286675078425814784682675012671384340267087604803050995107534481069279281213277371234272710195280647747033302773076094600917583038429969629948198841325080329081838681126456119415461246986745162687569680825296434756908111148165787768172000131704615314046005916223370429567142992192702888820837032850104701948658736010527261246199512595520995042205818856177310544178940343722756848658912946025299687434514029951</span></span><br><span class="line">c = <span class="number">2587907790257921446754254335909686808394701314827194535473852919883847207482301560195700622542784316421967768148156146355099210400053281966782598551680260513547233270646414440776109941248869185612357797869860293880114609649325409637239631730174236109860697072051436591823617268725493768867776466173052640366393488873505207198770497373345116165334779381031712832136682178364090547875479645094274237460342318587832274304777193468833278816459344132231018703578274192000016560653148923056635076144189403004763127515475672112627790796376564776321840115465990308933303392198690356639928538984862967102082126458529748355566</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isqrt</span>(<span class="params">n</span>):</span><br><span class="line">  x = n</span><br><span class="line">  y = (x + n // x) // <span class="number">2</span></span><br><span class="line">  <span class="keyword">while</span> y &lt; x:</span><br><span class="line">    x = y</span><br><span class="line">    y = (x + n // x) // <span class="number">2</span></span><br><span class="line">  <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fermat</span>(<span class="params">n, verbose=<span class="literal">True</span></span>):</span><br><span class="line">    a = isqrt(n)</span><br><span class="line">    b2 = a*a - n</span><br><span class="line">    b = isqrt(n)</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> b*b != b2:</span><br><span class="line">        a = a + <span class="number">1</span></span><br><span class="line">        b2 = a*a - n</span><br><span class="line">        b = isqrt(b2)</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    p=a+b</span><br><span class="line">    q=a-b</span><br><span class="line">    <span class="keyword">assert</span> n == p * q</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;p=&#x27;</span>,p)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;q=&#x27;</span>,q)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p, q</span><br><span class="line"></span><br><span class="line">pq=fermat(n)</span><br><span class="line"></span><br><span class="line">p=pq[<span class="number">0</span>]</span><br><span class="line">q=pq[<span class="number">1</span>]</span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">e = <span class="number">36421873</span></span><br><span class="line">d=libnum.invmod(e,phi)</span><br><span class="line">m = libnum.n2s(<span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,n)))</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># DASCTF&#123;Ot2N63D_n8L6kJt_f40V61m_zS1O8L7&#125;</span></span><br></pre></td></tr></table></figure>
<p>除了 埃拉托色尼筛法 找素数之外</p>
<p>sage中可以用 <code>prime_pi(703440151)</code> 函数来输出<code>703440151</code>中有多少个素数</p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Wp</tag>
        <tag>曲线</tag>
        <tag>素数</tag>
      </tags>
  </entry>
  <entry>
    <title>CBC&amp;Padding Oracle Attack</title>
    <url>/Crypto/CBC-Padding-Oracle-Attack/</url>
    <content><![CDATA[<p>记录一下，证明我学过。</p>
<span id="more"></span>
<h2 id="CBC-简介"><a href="#CBC-简介" class="headerlink" title="CBC  简介"></a>CBC  简介</h2><p>CBC 密码分组链接模式（cipher block chaining Triple）。需要key，IV<strong>初始向量</strong> (Initialization Vector) 加解密，<font color='cornflowerblue'>（key、IV、c为字节类型）</font> ，<font color='orange'><code>IV is as long as the block size</code> </font>，IV一般会直接给出，大小和 <code>block</code> 等大，<code>block</code> 即加密时会将明文分成等长的模块(<code>block</code>) ，常见的分为8字节、16字节、32字节，所以很多时候不会恰好等分，此时需要填充。</p>
<hr>
<h3 id="两种常见的填充算法"><a href="#两种常见的填充算法" class="headerlink" title="两种常见的填充算法"></a>两种常见的填充算法</h3><p>两种常见的填充算法，分别是<code>Pkcs5Padding</code>和<code>Pkcs7Padding</code>。</p>
<p>在<code>Pkcs5Padding</code>中，明确定义 <code>Block</code> 的大小为 8字节，<font color='orange'>一组中差几个字节就填充几</font>，如差一字节为8字节便填充一字节:<code>0x01</code> （十六进制表示）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">待加密数据原长度为<span class="number">7</span>字节：<span class="number">0x4</span>10x410x410x410x410x410x41</span><br><span class="line">填充后：<span class="number">0x4</span>10x410x410x410x410x410x410x01</span><br></pre></td></tr></table></figure>
<p>在<code>Pkcs7Padding</code>定义中，对于块的大小是不确定的，可以在<code>1-255</code>之间（块长度超出255的尚待研究），填充值的算法都是一样的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pad = k - (l mod k)  <span class="comment"># k=块大小，l=数据长度，如果k=8， l=9，则需要填充额外的7个byte的7</span></span><br></pre></td></tr></table></figure>
<font color='red'>注意：</font>

<p>当待填充的序列恰好为8个字节时，仍需要在尾部填充8个字节的<code>0x08</code>，这可以让解密的数据准确无误地移除多余字节。</p>
<hr>
<p><code>CBC</code>加密过程中，第一组明文先与 <code>IV</code>异或，再进行<code>cbc</code>加密模式得到第一组密文；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">aes = AES.new(KEY, AES.MODE_CBC, iv=IV)</span><br><span class="line">plain_text = pad(plain_text.encode(), AES.block_size)</span><br><span class="line">cipher = aes.encrypt(plain_text)</span><br></pre></td></tr></table></figure>
<p>从第二组开始，所有的明文分组都是和前一分组加密后的密文进行异或。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/images0d2866a157f2631a3392d12bb1d1d39.png" alt="CBC加密过程"></p>
<hr>
<hr>
<p><code>CBC</code>解密过程，第一组密文先进行<code>CBC</code>模式解密，再与 <code>IV</code>异或得到第一组明文，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">aes = AES.new(KEY, AES.MODE_CBC, iv=iv)</span><br><span class="line">flag = aes.decrypt(c)</span><br></pre></td></tr></table></figure>
<p>第二组密文解密之后和第一组密文异或得到第二组明文。也就是说，解密一组明文需要本组和前一组的密文。 </p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/images3eb233072f4faa122e7f2393871a182.png" alt="CBC解密过程"></p>
<h2 id="Padding-Oracle-Attack"><a href="#Padding-Oracle-Attack" class="headerlink" title="Padding Oracle Attack"></a>Padding Oracle Attack</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>填充提示攻击（一说填充预言攻击）（ Padding Oracle Attack ），Padding的含义是“填充”，在解密时，如果算法发现解密后得到的结果，它的填充方式不符合规则，那么表示输入数据有问题，对于解密的类库来说，往往便会抛出一个异常，提示Padding不正确。</p>
<p>Padding Oracle Attack针对的同样是CBC模式下的分组密码，如果满足攻击条件，那么<strong>利用Padding Oracle能够在不知道密钥的情况下，解密任意密文，或者构造出任意明文的合法密文</strong>。</p>
<h3 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h3><ul>
<li><strong>攻击者能够获得密文，以及密文对应的初始化向量iv</strong></li>
<li><strong>攻击者能够触发密文的解密过程，并且能够知道密文的解密结果是否正确</strong></li>
</ul>
<h3 id="Padding-Oracle流程"><a href="#Padding-Oracle流程" class="headerlink" title="Padding Oracle流程"></a>Padding Oracle流程</h3><p>我们首先来考虑一个具体的场景：</p>
<p>某程序使用Cookie来加密传递用户的加密用户名、公司 ID 和角色 ID。该Cookie使用CBC Mode加密，每个Cookie使用一个唯一的初始化向量iv，该向量位于密文之前。</p>
<p>有以下三种异常方式：</p>
<ul>
<li>当收到一个有效的密文（一个被正确填充并包含有效数据的密文）时，应用程序正常响应（200 OK）</li>
<li>当收到无效的密文时（解密时填充错误的密文），应用程序会抛出加密异常（500 内部服务器错误）</li>
<li>当收到一个有效密文（解密时正确填充的密文）但解密为无效值时，应用程序会显示自定义错误消息 (200 OK)</li>
</ul>
<p>假设有一个员工，其信息分别为：用户名：BRIAN、公司ID：12、角色ID：1。各信息之间用分号分隔，于是可以表示成以下形式：<code>BRIAN;12;1;</code> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">BRIAN;<span class="number">12</span>;<span class="number">1</span>;0x050x050x050x050x05</span><br><span class="line"><span class="comment"># 明文11个字节，可以8字节一个，分成两组，差5个字节，填充5个5 (0x5)</span></span><br></pre></td></tr></table></figure>
<p>以下用表格形式表示CBC加密过程：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagesfe055e288d1d67f90c18923a857422a.png" alt="CBC加密表格"></p>
<p>可以看到初始向量<code>IV</code>为<code>0x7B 0x21 0x6A 0x63 0x49 0x51 0x17 0x0F</code>，这时服务器发送的Cookie应该为<code>7B216A634951170FF851D6CC68FC9537858795A28ED4AAC6</code>，初始向量iv被填充在加密密文之前。（上面没有详细讲iv和密文c的给出形式，代码形式如下）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cipher = aes.encrypt(plain_text)</span><br><span class="line"><span class="keyword">return</span> IV.<span class="built_in">hex</span>() + cipher.<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line">iv = c[:<span class="number">32</span>]    </span><br><span class="line">cipher = c[<span class="number">32</span>:]</span><br></pre></td></tr></table></figure>
<hr>
<p>CBC解密表格如下：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/images71417b8eaf32d8714195e648a827195.png" alt="CBC解密表格"></p>
<p>密文进行分组解密之后会产生中间值Intermediary Value，这些中间值再和前一组密文异或便会得到本组明文。解密出的明文后面会有正确的填充块。当然在客户端，我们无法得知这些中间值是什么。</p>
<h3 id="Padding-Oracle-解密漏洞利用"><a href="#Padding-Oracle-解密漏洞利用" class="headerlink" title="Padding Oracle 解密漏洞利用"></a>Padding Oracle 解密漏洞利用</h3><p>也即：（先判断密文最后一组的填充值是否正确）</p>
<ol>
<li>密文可以正常解密并且解密结果比对正确</li>
<li>密文不能正常解密</li>
<li>密文可以正常解密但解密结果不对</li>
</ol>
<p>这就给了我们可乘之机  ——  <font color='orange'>我们可以利用服务器的返回值判断我们提交的内容能不能正常解密，进一步讲，我们可以知道最后一组密文的填充位符不符合填充标准。</font></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagesdd27f3ff24c97b7eb098864e2954142.png" alt="dd27f3ff24c97b7eb098864e2954142"></p>
<p>如上图所示，明文填充了四位时，如果最后一组密文解密后的结果（Intermediary Value也就是中间值）与前一组密文（Initialization Vector也就是IV值）异或得到的最后四位是<code>0x04</code>，那么服务器就会返回可以正常解密。</p>
<p>（填充1字节，填充值为<code>0x01</code>；填充2字节，填充值为<code>0x020x02</code>，以此类推。据此判断）</p>
<p>所以 每组密文解密后的中间值与前一组的密文异或便可得到那一组的明文</p>
<p>现在我们知道所有的密文和<code>IV</code>，所以我们的问题就转换成了去得到<font color='orange'>中间值</font>，</p>
<h4 id="如何得到中间值？"><a href="#如何得到中间值？" class="headerlink" title="如何得到中间值？"></a>如何得到中间值？</h4><p>我们可以依次爆破<code>IV（0-255  即 0x01-0xFF）</code>的每一位值来通过交互端判断中间值是否正确（判断依据是后面是否有填充值，填充值是否符合填充规则）</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagesa2bbe76edbe12194daa01d3036d7f0e.png" alt="最后一位iv值"></p>
<p>如上，爆破最后一位<code>IV</code>值，因为只差一位，所以填充值为<code>0x01</code>，此时交互端判断其正</p>
<p>确，中间值就为 $0x01\oplus0x3C=0x3D$ ， 接着爆破第二位</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/images39d02d1b03dc28cbc8946f8af746bb6.png" alt="最后二位iv值"></p>
<p>最后两位填充值为<code>0x020x02</code>，交互端判其正确， $0x02\oplus0x3F=0x3D$ ,</p>
<p>还有 $0x02\oplus0x24=0x26$ ，中间值就为 <code>0x260x3D</code> ，如此往复，得到一组中间值乃至所有中间值</p>
<p>此题就可解了。如未理解可以观察这五个测试 </p>
<p><span class="exturl" data-url="aHR0cHM6Ly9nb29kYXBwbGUudG9wL2FyY2hpdmVzLzIxNw==">CBC字节翻转攻击&amp;Padding Oracle Attack原理解析 - 枫のBlog<i class="fa fa-external-link-alt"></i></span></p>
<hr>
<hr>
<h2 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h2><h3 id="POA"><a href="#POA" class="headerlink" title="POA"></a>POA</h3><blockquote>
<p>附件</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> isPrime, long_to_bytes, getStrongPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> socketserver</span><br><span class="line"></span><br><span class="line">FLAG = <span class="string">&#x27;**********&#x27;</span></span><br><span class="line">KEY = <span class="string">b&#x27;****************&#x27;</span></span><br><span class="line">IV = <span class="string">b&#x27;****************&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cbc_decrypt</span>(<span class="params">c, iv</span>):</span><br><span class="line">    aes = AES.new(KEY, AES.MODE_CBC, iv=iv)</span><br><span class="line">    <span class="keyword">return</span> aes.decrypt(c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>():</span><br><span class="line">    plain_text = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]) + FLAG</span><br><span class="line">    aes = AES.new(KEY, AES.MODE_CBC, iv=IV)</span><br><span class="line">    plain_text = pad(plain_text.encode(), AES.block_size)</span><br><span class="line">    cipher = aes.encrypt(plain_text)</span><br><span class="line">    <span class="keyword">return</span> IV.<span class="built_in">hex</span>() + cipher.<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">asserts</span>(<span class="params">pt: <span class="built_in">bytes</span></span>):</span><br><span class="line">    num = pt[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(pt) == <span class="number">16</span>:</span><br><span class="line">        result = pt[::-<span class="number">1</span>]</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">            <span class="keyword">if</span> i == num:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> count == num:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">c</span>):</span><br><span class="line">    iv = c[:<span class="number">32</span>]</span><br><span class="line">    cipher = c[<span class="number">32</span>:]</span><br><span class="line">    plain_text = cbc_decrypt(binascii.unhexlify(cipher), binascii.unhexlify(iv))</span><br><span class="line">    <span class="keyword">if</span> asserts(plain_text):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyServer</span>(socketserver.BaseRequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">proof</span>(<span class="params">self</span>):</span><br><span class="line">        random.seed(os.urandom(<span class="number">8</span>))</span><br><span class="line">        random_str = <span class="string">&#x27;&#x27;</span>.join([random.choice(string.ascii_letters + string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)])</span><br><span class="line">        str_sha256 = hashlib.sha256(random_str.encode()).hexdigest()</span><br><span class="line">        self.request.sendall((<span class="string">&#x27;SHA256(XXXX + %s):%s\n&#x27;</span> % (random_str[<span class="number">4</span>:], str_sha256)).encode())</span><br><span class="line">        self.request.sendall(<span class="string">&#x27;Give Me XXXX:\n&#x27;</span>.encode())</span><br><span class="line">        XXXX = self.request.recv(<span class="number">2048</span>).strip()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> hashlib.sha256((XXXX + random_str[<span class="number">4</span>:].encode())).hexdigest() != str_sha256:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.proof():</span><br><span class="line">            self.request.sendall(<span class="string">b&#x27;Error Hash!&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        cipher = encrypt()</span><br><span class="line">        self.request.sendall(<span class="string">&#x27;Welcome to AES System, please choose the following options:\n1. encrypt the flag\n2. decrypt the flag\n&#x27;</span>.encode())</span><br><span class="line">        n = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> n &lt; <span class="number">65536</span>:</span><br><span class="line">            options = self.request.recv(<span class="number">512</span>).strip().decode()</span><br><span class="line">            <span class="keyword">if</span> options == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                self.request.sendall((<span class="string">&#x27;This is your flag: %s\n&#x27;</span> % cipher).encode())</span><br><span class="line">            <span class="keyword">elif</span> options == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">                self.request.sendall(<span class="string">&#x27;Please enter ciphertext:\n&#x27;</span>.encode())</span><br><span class="line">                recv_cipher = self.request.recv(<span class="number">512</span>).strip().decode()</span><br><span class="line">                <span class="keyword">if</span> decrypt(recv_cipher):</span><br><span class="line">                    self.request.sendall(<span class="string">&#x27;True\n&#x27;</span>.encode())</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.request.sendall(<span class="string">&#x27;False\n&#x27;</span>.encode())</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.request.sendall(<span class="string">&#x27;Input wrong! Please re-enter\n&#x27;</span>.encode())</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadedTCPServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sever = socketserver.ThreadingTCPServer((<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">10010</span>), MyServer)</span><br><span class="line">    ThreadedTCPServer.allow_reuse_address = <span class="literal">True</span></span><br><span class="line">    ThreadedTCPServer.allow_reuse_port = <span class="literal">True</span></span><br><span class="line">    sever.serve_forever()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proof</span>(<span class="params">broke, Hash</span>):   <span class="comment"># 爆破 sha256</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(broke) == <span class="number">16</span> <span class="keyword">and</span> <span class="built_in">len</span>(Hash) == <span class="number">64</span></span><br><span class="line">    shaTable = string.ascii_letters + string.digits</span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> itertools.permutations(shaTable, <span class="number">4</span>):</span><br><span class="line">        x = <span class="string">&#x27;&#x27;</span>.join(ii)</span><br><span class="line">        s = x + broke</span><br><span class="line">        <span class="keyword">if</span> sha256(s.encode()).hexdigest() == Hash:</span><br><span class="line">            <span class="built_in">print</span>(x)</span><br><span class="line">            <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Solve_Oracle</span>():</span><br><span class="line">    <span class="comment"># context.log_level = &#x27;debug&#x27;    # 调试</span></span><br><span class="line">    io = remote(<span class="string">&#x27;124.71.177.14&#x27;</span>, <span class="number">10010</span>)</span><br><span class="line">     <span class="comment">#prv</span></span><br><span class="line">    io.recvuntil(<span class="string">b&quot;XXXX + &quot;</span>)</span><br><span class="line">    broke = io.recv(<span class="number">16</span>).decode()  </span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;):&#x27;</span>)</span><br><span class="line">    Hash = io.recv(<span class="number">64</span>).decode()</span><br><span class="line"></span><br><span class="line">    prefix = proof(broke,Hash)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;XXXX:&#x27;</span>)</span><br><span class="line">    io.sendline(prefix.encode())</span><br><span class="line"></span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;2. decrypt the flag&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;This is your flag: &#x27;</span>)</span><br><span class="line">    c = io.recv(<span class="number">64</span>).decode()</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br><span class="line">    </span><br><span class="line">    guess_iv = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]        <span class="comment"># iv 初始列表</span></span><br><span class="line">    restore_midd = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>)]	 <span class="comment"># 中间值初始列表</span></span><br><span class="line">    index = <span class="number">1</span>  <span class="comment"># 填充值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>, -<span class="number">1</span>, -<span class="number">1</span>):  <span class="comment"># iv长度为16字节，先爆破最后一位，所以倒序</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">256</span>):  <span class="comment"># iv每一字节的所有可能性</span></span><br><span class="line">            io.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">            io.recvuntil(<span class="string">b&#x27;Please enter ciphertext:&#x27;</span>)</span><br><span class="line">            io.recv(<span class="number">1</span>).decode()  <span class="comment"># 空格 随便接收一下</span></span><br><span class="line">            guess_iv[i] = j</span><br><span class="line">            mess = <span class="built_in">bytes</span>(guess_iv).<span class="built_in">hex</span>() + c[<span class="number">32</span>:]</span><br><span class="line">            io.sendline(mess.encode())</span><br><span class="line">            result = io.recv(<span class="number">5</span>).strip().decode()  <span class="comment"># 接收交互端的判断结果</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> result == <span class="string">&#x27;True&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;find&#x27;</span>)</span><br><span class="line">                restore_midd[i] = index ^ j  <span class="comment"># 依据判断结果得到中间值</span></span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>, i - <span class="number">1</span>, -<span class="number">1</span>):   </span><br><span class="line">                    guess_iv[k] = restore_midd[k] ^ (index + <span class="number">1</span>)  <span class="comment"># 替换到iv列表里</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    m = bytes_to_long(<span class="built_in">bytes</span>(restore_midd)) ^ <span class="built_in">int</span>(c[:<span class="number">32</span>], <span class="number">16</span>) <span class="comment"># iv是16字节，所以只有一组，直接异或iv即得flag</span></span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    Solve_Oracle()</span><br><span class="line">  </span><br><span class="line"><span class="comment"># QU&#123;0P@d4Ttk&#125; 改为 D0g3&#123;0P@d4Ttk&#125;</span></span><br></pre></td></tr></table></figure>
<p>翻出了我收藏夹里吃灰的博文：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9nb29kYXBwbGUudG9wL2FyY2hpdmVzLzIxNw==">CBC字节翻转攻击&amp;Padding Oracle Attack原理解析 - 枫のBlog<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>AES</tag>
      </tags>
  </entry>
  <entry>
    <title>DASCTF 2024暑期挑战赛</title>
    <url>/Crypto/DASCTF-2024%E6%9A%91%E6%9C%9F%E6%8C%91%E6%88%98%E8%B5%9B/</url>
    <content><![CDATA[<p><strong>能从中学习到很多</strong></p>
<span id="more"></span>
<h1 id="complex-enc"><a href="#complex-enc" class="headerlink" title="complex_enc"></a>complex_enc</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GET_KEY</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="built_in">sum</span>=<span class="number">2</span></span><br><span class="line">    key=[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        r=random.randint(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">        x=<span class="built_in">sum</span>+random.randint(<span class="number">0</span>,n)*r</span><br><span class="line">        key.append(x)</span><br><span class="line">        <span class="built_in">sum</span>+=x</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">m,k</span>):</span><br><span class="line">    cipher_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">        <span class="keyword">if</span> m[i] == <span class="number">1</span>:</span><br><span class="line">            cipher_list.append(m[i] * k[i])</span><br><span class="line">    cipher = <span class="built_in">sum</span>(cipher_list)</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">m = [<span class="built_in">int</span>(bit) <span class="keyword">for</span> byte <span class="keyword">in</span> flag <span class="keyword">for</span> bit <span class="keyword">in</span> <span class="built_in">format</span>(byte, <span class="string">&#x27;08b&#x27;</span>)]</span><br><span class="line">key=GET_KEY(<span class="built_in">len</span>(m))</span><br><span class="line">c=enc(m,key)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">str</span>(c))</span><br><span class="line">    f.write(<span class="built_in">str</span>(key))</span><br></pre></td></tr></table></figure>
<p>背包密码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="built_in">len</span>(key)</span><br><span class="line">d = n / log(<span class="built_in">max</span>(key), <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(CDF(d))</span><br><span class="line"><span class="keyword">assert</span> CDF(d) &lt; <span class="number">0.9408</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0.9899087608789052</span></span><br><span class="line"><span class="comment"># AssertionError</span></span><br></pre></td></tr></table></figure>
<p>似乎 格打不了</p>
<p>那就利用背包密码的<font color='orange'>超递增序列性质</font> 来解题</p>
<p>注意到最开始有 key = [1] ，这里已经垫了一个 1，所以key 的长度比 m 大一，最后一个key并没有用上</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c =</span><br><span class="line">key =</span><br><span class="line"></span><br><span class="line">m = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> key[::-<span class="number">1</span>]:</span><br><span class="line">    <span class="keyword">if</span> c &gt;= i:</span><br><span class="line">        m = <span class="string">&#x27;1&#x27;</span> + m</span><br><span class="line">        c -= i</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        m = <span class="string">&#x27;0&#x27;</span> + m</span><br><span class="line">        </span><br><span class="line">flag = long_to_bytes(<span class="built_in">int</span>(m[:-<span class="number">1</span>],<span class="number">2</span>))</span><br><span class="line"><span class="comment"># flag = long_to_bytes(int(m+&#x27;0&#x27;*7,2))</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line">m= [m[i:i + <span class="number">8</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(m), <span class="number">8</span>)]</span><br><span class="line">decoded_string = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, byte)), <span class="number">2</span>)) <span class="keyword">for</span> byte <span class="keyword">in</span> m)</span><br><span class="line"><span class="built_in">print</span>(decoded_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># DASCTF&#123;you_kn0w_b@ckpack_Crypt0?&#125;</span></span><br></pre></td></tr></table></figure>
<p>用厨子有奇效，就不用注意多出来的0或者1了，也可以手动处理，如上</p>
<p>（int 似乎默认是从后面（低位）开始数八位来转换，所以填充或者去掉就很有必要）</p>
<h1 id="1z-RSA"><a href="#1z-RSA" class="headerlink" title="1z_RSA"></a>1z_RSA</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">nbit =<span class="number">130</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">l = getPrime(<span class="number">505</span>)</span><br><span class="line">m = bytes_to_long(flag + os.urandom(<span class="number">64</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">29</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    p, q = getPrime(nbit), getPrime(nbit)</span><br><span class="line">    PQ = <span class="built_in">int</span>(<span class="built_in">str</span>(p&lt;&lt;<span class="number">120</span>)+<span class="built_in">str</span>(q))</span><br><span class="line">    QP = <span class="built_in">int</span>(<span class="built_in">str</span>(q&lt;&lt;<span class="number">120</span>)+<span class="built_in">str</span>(p))</span><br><span class="line">    <span class="keyword">if</span> isPrime(PQ) <span class="keyword">and</span> isPrime(QP):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">n = PQ * QP</span><br><span class="line">PP = nextprime((PQ &gt;&gt; <span class="number">190</span>) * (QP &amp; (<span class="number">2</span> ** <span class="number">190</span> - <span class="number">1</span>)))</span><br><span class="line">QQ = nextprime((QP &gt;&gt; <span class="number">190</span>) * (PQ &amp; (<span class="number">2</span> ** <span class="number">190</span> - <span class="number">1</span>)))</span><br><span class="line">N = PP * QQ</span><br><span class="line">M = <span class="built_in">pow</span>(m,<span class="number">1</span>,l)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,N)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n =&#x27;</span>, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;M =&#x27;</span>, M)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;l =&#x27;</span>, l)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c =&#x27;</span>, c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 18339446336492672809908730785358232636383625709800392830207979464962269419140428722248172110017576390002616004691759163126532392634394976712779777822451878822759056304050545622761060245812934467784888422790178920804822224673755691</span></span><br><span class="line"><span class="string">M = 36208281423355218604990190624029584747447986456188203264389519699277658026754156377638444926063784368328407938562964768329134840563331354924365667733322</span></span><br><span class="line"><span class="string">l = 56911058350450672322326236658556745353275014753768458552003425206272938093282425278193278997347671093622024933189270932102361261551908054703317369295189</span></span><br><span class="line"><span class="string">c = 720286366572443009268610917990845759123049408295363966717060100862857351750759651979922104897091176824666482923148635058966589592286465060161271579501861264957611980854954664798904862706450723639237791023808177615189976108231923</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="求-p，q"><a href="#求-p，q" class="headerlink" title="求 p，q"></a>求 p，q</h2><blockquote>
<p><strong>1，通过取模的方式 + 解方程 得到 p，q</strong></p>
</blockquote>
<p>x = len(str(q))，  39 , 40</p>
<p>y = len(str(p))</p>
<p>令x = 39，y = 40，则有</p>
<script type="math/tex; mode=display">
PQ = p*2^{120}*10^x+q</script><script type="math/tex; mode=display">
QP = q*2^{120}*10^y+p</script><script type="math/tex; mode=display">
n = p*q*(2^{240}*10^{x+y}+1)+p^2*2^{120}*10^{x}+q^2*2^{120}*10^{y}</script><script type="math/tex; mode=display">
所以，n=p*q*(2^{240}*10^{79}+1)+(p^2+10*q^2)*2^{120}*10^{39}</script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">130</span>)</span><br><span class="line">q = getPrime(<span class="number">130</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="built_in">str</span>(q)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="built_in">str</span>(p)))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(((p**<span class="number">2</span>+<span class="number">10</span>*q**<span class="number">2</span>)*<span class="number">2</span>**<span class="number">120</span>*<span class="number">10</span>**<span class="number">39</span>).bit_length())</span><br><span class="line"><span class="built_in">print</span>(((<span class="number">2</span>**<span class="number">240</span>*<span class="number">10</span>**<span class="number">79</span>+<span class="number">1</span>)).bit_length())</span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span>**<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 39</span></span><br><span class="line"><span class="comment"># 40</span></span><br><span class="line"><span class="comment"># 512</span></span><br><span class="line"><span class="comment"># 503</span></span><br><span class="line"><span class="comment"># 1024</span></span><br></pre></td></tr></table></figure>
<p>可以看到 $2^{240}*10^{79}+1$ 略小于</p>
<script type="math/tex; mode=display">
(p^2+10*q^2)*2^{120}*10^{39}</script><p>数值并不大，当我们 两边 $// (2^{240}*10^{79}+1) $ 的 时候</p>
<script type="math/tex; mode=display">
p*q = n // (2^{240}*10^{79}+1) -i</script><p>i 可以采取爆破的方法得到</p>
<p>第一个方程有了，第二个方程：</p>
<script type="math/tex; mode=display">
p^2+10*q^2=\frac{n - p*q*(2^{240}*10^{79}+1)}{2^{120}*10^{39}}</script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">18339446336492672809908730785358232636383625709800392830207979464962269419140428722248172110017576390002616004691759163126532392634394976712779777822451878822759056304050545622761060245812934467784888422790178920804822224673755691</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">2</span>**<span class="number">10</span>):</span><br><span class="line">    pq = n // (<span class="number">2</span>**<span class="number">240</span> * <span class="number">10</span>**<span class="number">79</span> + <span class="number">1</span>) - i</span><br><span class="line">    pq2 = (n - pq*(<span class="number">2</span>**<span class="number">240</span> * <span class="number">10</span>**<span class="number">79</span> + <span class="number">1</span>)) // (<span class="number">2</span>**<span class="number">120</span> * <span class="number">10</span>**<span class="number">39</span>)</span><br><span class="line">    <span class="keyword">if</span> (n - pq*(<span class="number">2</span>**<span class="number">240</span> * <span class="number">10</span>**<span class="number">79</span> + <span class="number">1</span>)) % (<span class="number">2</span>**<span class="number">120</span> * <span class="number">10</span>**<span class="number">39</span>) == <span class="number">0</span>:     <span class="comment"># 倍数</span></span><br><span class="line">        p, q = sympy.symbols(<span class="string">&#x27;p q&#x27;</span>)</span><br><span class="line">        flag = sympy.solve([pq - p*q,pq2-(p**<span class="number">2</span>+<span class="number">10</span>*q**<span class="number">2</span>)],[p,q])</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">p = <span class="built_in">abs</span>(flag[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">q = <span class="built_in">abs</span>(flag[<span class="number">0</span>][<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(p,q)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1213149261930568621267125437333569321667 855604426214387476576649090490109822073</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>2，二元copper</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">R.&lt;x,y&gt; = PolynomialRing(Zmod(n^<span class="number">2</span>))</span><br><span class="line">roots = small_roots(f,(<span class="number">2</span>^<span class="number">130</span>,<span class="number">2</span>^<span class="number">130</span>),m=<span class="number">1</span>,d=<span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<p>构造出正确的多项式 f 之后，<code>bounds</code> 是 小根的上界，一般都已知</p>
<p>m为移位（shifts），d 为多项式中的最高幂。（这两个具体咋写值也不是很清楚，直接爆破，1-4试呗🥲）</p>
<p>m越大，跑的越慢，但精度更高</p>
<p>需要注意的是模数 n ，<code>Zmod(n)</code>，如果我们求出的根是 <code>0,0</code>，两个零，那可能是模数小了，乘个 k 倍，或者 如上，<code>n^2</code>，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PR.&lt;p,q&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = ((<span class="number">2</span>*p+<span class="number">1</span>)*<span class="number">2</span>^<span class="number">120</span>*<span class="number">10</span>^<span class="number">39</span>+(<span class="number">2</span>*q+<span class="number">1</span>))*((<span class="number">2</span>*q+<span class="number">1</span>)*<span class="number">2</span>^<span class="number">120</span>*<span class="number">10</span>^<span class="number">40</span>+(<span class="number">2</span>*p+<span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<p>也可以用上p，q是素数的性质（糖醋小鸡块师傅😍）</p>
<hr>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">        d = f.degree()</span><br><span class="line"></span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality()</span><br><span class="line"></span><br><span class="line">    f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">    G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line">        base = N ^ (m - i) * f ^ i</span><br><span class="line">        <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">            g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">            G.append(g)</span><br><span class="line"></span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line">    factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line"></span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line"></span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, <span class="number">1</span> / factor)</span><br><span class="line"></span><br><span class="line">    H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B * monomials):</span><br><span class="line">        H.append(h)</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">            H.pop()</span><br><span class="line">        <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">            roots = []</span><br><span class="line">            <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">                root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">                roots.append(root)</span><br><span class="line">            <span class="keyword">return</span> roots</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">n = <span class="number">18339446336492672809908730785358232636383625709800392830207979464962269419140428722248172110017576390002616004691759163126532392634394976712779777822451878822759056304050545622761060245812934467784888422790178920804822224673755691</span></span><br><span class="line"></span><br><span class="line">lenght = [<span class="number">39</span>,<span class="number">40</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lenght:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> lenght:</span><br><span class="line">        <span class="built_in">print</span>((i, j))</span><br><span class="line">        R.&lt;x,y&gt; = PolynomialRing(Zmod(n^<span class="number">2</span>))</span><br><span class="line">        PQ = x*<span class="number">2</span>^<span class="number">120</span>*<span class="number">10</span>^i + y</span><br><span class="line">        QP = y*<span class="number">2</span>^<span class="number">120</span>*<span class="number">10</span>^j + x</span><br><span class="line">        f = n - PQ*QP</span><br><span class="line">        roots = small_roots(f,(<span class="number">2</span>^<span class="number">130</span>,<span class="number">2</span>^<span class="number">130</span>),m=<span class="number">1</span>,d=<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">if</span> roots !=[]:</span><br><span class="line">            <span class="comment"># print(roots)</span></span><br><span class="line">            p,q = roots[<span class="number">0</span>]</span><br><span class="line">            <span class="built_in">print</span>(p,q)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 1213149261930568621267125437333569321667 855604426214387476576649090490109822073</span></span><br></pre></td></tr></table></figure>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><blockquote>
<p>不知名的一道题</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">nbit =<span class="number">128</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    p, q= getPrime(nbit), getPrime(nbit)</span><br><span class="line">    PQ = <span class="built_in">int</span>(<span class="built_in">str</span>(p&lt;&lt;<span class="number">256</span>)+<span class="built_in">str</span>(q))</span><br><span class="line">    QP = <span class="built_in">int</span>(<span class="built_in">str</span>(q&lt;&lt;<span class="number">256</span>)+<span class="built_in">str</span>(p))</span><br><span class="line">    <span class="keyword">if</span> isPrime(PQ) <span class="keyword">and</span> isPrime(QP):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line">N = PQ * QP</span><br><span class="line">n = p * q</span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;N =&#x27;</span>, N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c=&#x27;</span>,c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">N = 1085674311530255489464290129824772067886812106070317576328547361171348401864749700142226317981052597718932148985813969001766383466131904811646438034866606166860409715940892963991884944642366896061549360382036310506993659981270186354624380079666262454880589702937061510841107889532190435909694042809685218422473</span></span><br><span class="line"><span class="string">c= 56930360094664103380901535309475311481122482721421214918816986675606014573458</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>当时解：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> xenny.ctf.crypto.modern.asymmetric.rsa <span class="keyword">import</span> factor</span><br><span class="line"></span><br><span class="line">N = <span class="number">1085674311530255489464290129824772067886812106070317576328547361171348401864749700142226317981052597718932148985813969001766383466131904811646438034866606166860409715940892963991884944642366896061549360382036310506993659981270186354624380079666262454880589702937061510841107889532190435909694042809685218422473</span></span><br><span class="line">c = <span class="number">56930360094664103380901535309475311481122482721421214918816986675606014573458</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">bit = <span class="built_in">str</span>(<span class="built_in">bin</span>(N)[<span class="number">2</span>:])</span><br><span class="line">n = <span class="built_in">int</span>(<span class="string">&#x27;0b&#x27;</span>+bit[<span class="number">1027</span>//<span class="number">4</span>*<span class="number">3</span>:],<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">p,q = factor.attack(n)</span><br><span class="line">d=libnum.invmod(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">pow</span>(c,d,n)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;Do_9ou_1ike_5andwich&#125;</span></span><br></pre></td></tr></table></figure>
<p>也可以从flag看出这不是预期解</p>
<p>二元copper解同上：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">        d = f.degree()</span><br><span class="line"></span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality()</span><br><span class="line"></span><br><span class="line">    f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">    G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line">        base = N ^ (m - i) * f ^ i</span><br><span class="line">        <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">            g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">            G.append(g)</span><br><span class="line"></span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line">    factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line"></span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line"></span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, <span class="number">1</span> / factor)</span><br><span class="line"></span><br><span class="line">    H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B * monomials):</span><br><span class="line">        H.append(h)</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">            H.pop()</span><br><span class="line">        <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">            roots = []</span><br><span class="line">            <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">                root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">                roots.append(root)</span><br><span class="line">            <span class="keyword">return</span> roots</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">N = <span class="number">1085674311530255489464290129824772067886812106070317576328547361171348401864749700142226317981052597718932148985813969001766383466131904811646438034866606166860409715940892963991884944642366896061549360382036310506993659981270186354624380079666262454880589702937061510841107889532190435909694042809685218422473</span></span><br><span class="line">c= <span class="number">56930360094664103380901535309475311481122482721421214918816986675606014573458</span></span><br><span class="line"></span><br><span class="line">R.&lt;x,y&gt; = PolynomialRing(Zmod(n^<span class="number">2</span>))</span><br><span class="line">PQ = x*<span class="number">2</span>^<span class="number">256</span>*<span class="number">10</span>^<span class="number">39</span> + y</span><br><span class="line">QP = y*<span class="number">2</span>^<span class="number">256</span>*<span class="number">10</span>^<span class="number">39</span> + x</span><br><span class="line">f = N - PQ*QP</span><br><span class="line">roots = small_roots(f,(<span class="number">2</span>^<span class="number">130</span>,<span class="number">2</span>^<span class="number">130</span>))</span><br><span class="line"><span class="keyword">if</span> roots !=[]:</span><br><span class="line">    <span class="comment"># print(roots)</span></span><br><span class="line">    p,q = roots[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(p,q)</span><br></pre></td></tr></table></figure>
<hr>
<hr>
<h2 id="有限域开根"><a href="#有限域开根" class="headerlink" title="有限域开根"></a>有限域开根</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="number">720286366572443009268610917990845759123049408295363966717060100862857351750759651979922104897091176824666482923148635058966589592286465060161271579501861264957611980854954664798904862706450723639237791023808177615189976108231923</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">1213149261930568621267125437333569321667</span> </span><br><span class="line">q = <span class="number">855604426214387476576649090490109822073</span></span><br><span class="line">PQ = <span class="built_in">int</span>(<span class="built_in">str</span>(p&lt;&lt;<span class="number">120</span>)+<span class="built_in">str</span>(q))</span><br><span class="line">QP = <span class="built_in">int</span>(<span class="built_in">str</span>(q&lt;&lt;<span class="number">120</span>)+<span class="built_in">str</span>(p))</span><br><span class="line"></span><br><span class="line">PP = next_prime((PQ &gt;&gt; <span class="number">190</span>) * (QP &amp; (<span class="number">2</span> ** <span class="number">190</span> - <span class="number">1</span>)))</span><br><span class="line">QQ = next_prime((QP &gt;&gt; <span class="number">190</span>) * (PQ &amp; (<span class="number">2</span> ** <span class="number">190</span> - <span class="number">1</span>)))</span><br><span class="line">N = PP * QQ</span><br><span class="line">e = <span class="number">3</span>      </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> mp <span class="keyword">in</span> GF(PP)(c).nth_root(e, <span class="built_in">all</span>=<span class="literal">True</span>):</span><br><span class="line">    <span class="keyword">for</span> mq <span class="keyword">in</span> GF(QQ)(c).nth_root(e, <span class="built_in">all</span>=<span class="literal">True</span>):</span><br><span class="line">        m = long_to_bytes(crt([ZZ(mp), ZZ(mq)], [PP, QQ]))</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;DASCTF&#x27;</span> <span class="keyword">in</span> m:</span><br><span class="line">            <span class="built_in">print</span>(m)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DASCTF&#123;Ar3_Y0u_Su93_Abt139??&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<p>上面没有用到 <code>M = pow(m,1,l)</code> </p>
<p>由于 m 被填充了，不能被直接开3次方得到，但我们可以 得到 <code>m = M + k*l</code> </p>
<p>k（<code>93*8-505=239</code>）远小于 N （758 bit），用 coppersmith 求 k 就很容易得到了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">M = <span class="number">36208281423355218604990190624029584747447986456188203264389519699277658026754156377638444926063784368328407938562964768329134840563331354924365667733322</span></span><br><span class="line">l = <span class="number">56911058350450672322326236658556745353275014753768458552003425206272938093282425278193278997347671093622024933189270932102361261551908054703317369295189</span></span><br><span class="line">c = <span class="number">720286366572443009268610917990845759123049408295363966717060100862857351750759651979922104897091176824666482923148635058966589592286465060161271579501861264957611980854954664798904862706450723639237791023808177615189976108231923</span></span><br><span class="line">p = <span class="number">1213149261930568621267125437333569321667</span> </span><br><span class="line">q = <span class="number">855604426214387476576649090490109822073</span></span><br><span class="line"></span><br><span class="line">PQ = <span class="built_in">int</span>(<span class="built_in">str</span>(p&lt;&lt;<span class="number">120</span>)+<span class="built_in">str</span>(q))</span><br><span class="line">QP = <span class="built_in">int</span>(<span class="built_in">str</span>(q&lt;&lt;<span class="number">120</span>)+<span class="built_in">str</span>(p))</span><br><span class="line">PP = next_prime((PQ &gt;&gt; <span class="number">190</span>) * (QP &amp; (<span class="number">2</span> ** <span class="number">190</span> - <span class="number">1</span>)))</span><br><span class="line">QQ = next_prime((QP &gt;&gt; <span class="number">190</span>) * (PQ &amp; (<span class="number">2</span> ** <span class="number">190</span> - <span class="number">1</span>)))</span><br><span class="line">N = PP * QQ</span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(N))</span><br><span class="line">f = c - (M+x*l)^<span class="number">3</span></span><br><span class="line"><span class="comment"># f = c - (x)^3</span></span><br><span class="line">f = f.monic()</span><br><span class="line">roots = f.small_roots(X=<span class="number">2</span>^<span class="number">239</span>,epsilon = <span class="number">0.02</span>)</span><br><span class="line">k = roots[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">m = M+k*l</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># DASCTF&#123;Ar3_Y0u_Su93_Abt139??&#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="found"><a href="#found" class="headerlink" title="found"></a>found</h1><blockquote>
<p>题目</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">bits = <span class="number">1024</span></span><br><span class="line">l = <span class="number">138833858362699289505402947409766595473722379891580589518174731439613184249727659678966809301611194545239974736175752769503863392697421092435438747741790652435801956708356186578269272819715592752821497122516109657809748674185639254430403157877064556216401002688452227124543508128414591884297632663910714681207</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> isPrime(l)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_prime</span>(<span class="params">bits</span>):</span><br><span class="line">    <span class="keyword">return</span> randprime(<span class="number">2</span>**(bits-<span class="number">1</span>), <span class="number">2</span>**bits)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">data,y,n</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>([data[i] * <span class="built_in">pow</span>(y,i,n) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data))]) % n</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen</span>(<span class="params">x, y, z, w, n</span>):</span><br><span class="line">    data = [randint(n // <span class="number">4</span>, n) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">    leak1 = <span class="built_in">pow</span>(x + <span class="built_in">pow</span>(y, z, n), w, n)</span><br><span class="line">    leak2 = fun(data, y, n)</span><br><span class="line">    <span class="keyword">return</span> data, leak1, leak2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">l,m,n</span>):</span><br><span class="line">    mm = <span class="built_in">bin</span>(m)[<span class="number">2</span>:].zfill((m.bit_length() // <span class="number">8</span> + <span class="number">1</span>) * <span class="number">8</span>)</span><br><span class="line">    length = <span class="built_in">len</span>(mm)</span><br><span class="line">    c = []</span><br><span class="line">    s = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        a = randint(<span class="number">1</span>, n)</span><br><span class="line">        s.append(<span class="built_in">pow</span>(a, length, n))</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        c.append(<span class="built_in">pow</span>(l,<span class="built_in">int</span>(mm[j]),n) * s[j] % n)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line">p, q = [generate_prime(bits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">r = generate_prime(bits // <span class="number">4</span>)</span><br><span class="line">n = p ** <span class="number">2</span> * q * r</span><br><span class="line">e1 = generate_prime(<span class="number">128</span>)</span><br><span class="line">e2 = generate_prime(<span class="number">128</span>)</span><br><span class="line">phi1 = p * (p - <span class="number">1</span>) * (q - <span class="number">1</span>) * (r - <span class="number">1</span>)</span><br><span class="line">phi2 = (p - <span class="number">1</span>) * (p - <span class="number">2</span>) * (q - <span class="number">2</span>) * (r - <span class="number">2</span>)</span><br><span class="line">d1 = inverse(e1, phi1)</span><br><span class="line">d2 = inverse(e2, phi2)</span><br><span class="line"></span><br><span class="line">t = getRandomRange(n // <span class="number">4</span>, n)</span><br><span class="line">data, leak1, leak2 = gen(r, t, e1, d1, n)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = encrypt(l, m, n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">f&#x27;e1 = <span class="subst">&#123;e1&#125;</span>\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">f&#x27;ed = <span class="subst">&#123;e2 * d2&#125;</span>\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">f&#x27;data = <span class="subst">&#123;data&#125;</span>\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">f&#x27;leak1 = <span class="subst">&#123;leak1&#125;</span>\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">f&#x27;leak2 = <span class="subst">&#123;leak2&#125;</span>\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>当 mm = 0 时，$ c = a_i^{length} \bmod n$ </p>
<p>当 mm = 1 时，$c = l* a_i^{length} \bmod n $ </p>
<p>注意到 <code>length = len(mm)</code> 是个偶数，根据二次剩余定理</p>
<p>$x^2 = a \pmod p，其中\gcd(a,p)=1，则称 a 为模p的二次剩余$  </p>
<p>所以 <code>length = 2*k</code> ，$ c = (a_i^k)^{2} \bmod n$ ，符合二次剩余定理（经测试，所有c和n互素）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">n = <span class="number">214189098485907407681203562477141616514627803973812423866137712061520397412283304756125615530911730190509122275581663270324067756428063773995710185422014937638013530995658678484408224195008950739065869752467503449898424403807629035201754909341605483646512086652631108980705938767234014655512244203488129210213088484751842078315616338034946509581920246058635374657554442252420460618886159118637553788160140879059706396460523335509806462257352635091258764319929220939182156189941663585022210802535804264016891744621140144859992731921592420695928759275864955373537480452694672023754214092487216273962896544919015905264313446548396379618341043583032673900608611135254563997519445284222602183035105369017270389887769617942348731416370092842162632579589494341854993600540689280924183073089475208340685636482246115054414077320832052204722015428500812923185709772796221129375539131726373252482799298746655947376656143301849009181701495003174228813534439192414768762803822975277797520157025175837722175072241107</span></span><br><span class="line">l = <span class="number">138833858362699289505402947409766595473722379891580589518174731439613184249727659678966809301611194545239974736175752769503863392697421092435438747741790652435801956708356186578269272819715592752821497122516109657809748674185639254430403157877064556216401002688452227124543508128414591884297632663910714681207</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(libnum.jacobi(l,n))</span><br><span class="line"></span><br><span class="line"><span class="comment"># -1</span></span><br></pre></td></tr></table></figure>
<p>同样，测试发现 l 不符合二次剩余定理</p>
<p>于是，这题就需要用到 n 和 c，利用二次剩余定理解题</p>
<h2 id="exp："><a href="#exp：" class="headerlink" title="exp："></a>exp：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">214189098485907407681203562477141616514627803973812423866137712061520397412283304756125615530911730190509122275581663270324067756428063773995710185422014937638013530995658678484408224195008950739065869752467503449898424403807629035201754909341605483646512086652631108980705938767234014655512244203488129210213088484751842078315616338034946509581920246058635374657554442252420460618886159118637553788160140879059706396460523335509806462257352635091258764319929220939182156189941663585022210802535804264016891744621140144859992731921592420695928759275864955373537480452694672023754214092487216273962896544919015905264313446548396379618341043583032673900608611135254563997519445284222602183035105369017270389887769617942348731416370092842162632579589494341854993600540689280924183073089475208340685636482246115054414077320832052204722015428500812923185709772796221129375539131726373252482799298746655947376656143301849009181701495003174228813534439192414768762803822975277797520157025175837722175072241107</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    c = (f.read().strip().split(<span class="string">&#x27;c = &#x27;</span>)[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">eval</span>(c)</span><br><span class="line"></span><br><span class="line">m = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">    <span class="keyword">if</span> (libnum.jacobi(i,n)) == <span class="number">1</span>:</span><br><span class="line">        m += <span class="string">&#x27;0&#x27;</span>			<span class="comment"># 根据题意 + 0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        m += <span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m,<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># DASCTF&#123;c764ba09-b2aa-12ed-ab17-9408ad39ce84&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="再看"><a href="#再看" class="headerlink" title="再看"></a>再看</h2><p>学习一下其他解法：</p>
<h3 id="gcd"><a href="#gcd" class="headerlink" title="gcd"></a>gcd</h3><p>有：</p>
<script type="math/tex; mode=display">
\phi2 = (p - 1) * (p - 2) * (q - 2) * (r - 2)</script><script type="math/tex; mode=display">
ed \equiv 1 \bmod \phi_2</script><script type="math/tex; mode=display">
那么，2^{ed} = 2^{1+k\phi_2} = 2 \bmod p</script><script type="math/tex; mode=display">
2^{ed} -2=0\pmod {p}</script><p>所以 $p = \gcd(2^{ed}-2 \bmod n,n)$ </p>
<p>与上面同理，只是把 n 换成 p 了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    c = (f.read().strip().split(<span class="string">&#x27;c = &#x27;</span>)[-<span class="number">1</span>])</span><br><span class="line">c = <span class="built_in">eval</span>(c)</span><br><span class="line"></span><br><span class="line">ed = <span class="number">8238783462304466047370608758999664260116370123313022088538091162770601739116628806460542503654403361322931229200817491683096695046254053538710523477982774850621979868926682997393573131262930645387042545807254462907502249936746101134745335780459335767976492133149192198880107516742633966664923533160167069625322094242414191994000927842976472080411237834215691897822371792754587587715760051582955795834883174474583440371035173351136370107484245425758954400434828144460697864191261513214008084848001467959369934964428291290009392620134215667173457413630882523557102057539902909381706460767916715499306316003286608457624713509816056636249181986636842368337873445101552453774405927824096616431732124001038586048766823358751593885500314021939046991953062562270782883182855487098328026196086288533138907969729187779739950764344200364360079479047132746676799216491472345637845220255139152063453462176656553357596450484408472263570570448409671724853674399060252094955913831086556844240273178815236110565265190938731402297513542863173575371193878977</span></span><br><span class="line">n = <span class="number">214189098485907407681203562477141616514627803973812423866137712061520397412283304756125615530911730190509122275581663270324067756428063773995710185422014937638013530995658678484408224195008950739065869752467503449898424403807629035201754909341605483646512086652631108980705938767234014655512244203488129210213088484751842078315616338034946509581920246058635374657554442252420460618886159118637553788160140879059706396460523335509806462257352635091258764319929220939182156189941663585022210802535804264016891744621140144859992731921592420695928759275864955373537480452694672023754214092487216273962896544919015905264313446548396379618341043583032673900608611135254563997519445284222602183035105369017270389887769617942348731416370092842162632579589494341854993600540689280924183073089475208340685636482246115054414077320832052204722015428500812923185709772796221129375539131726373252482799298746655947376656143301849009181701495003174228813534439192414768762803822975277797520157025175837722175072241107</span></span><br><span class="line"></span><br><span class="line">p = GCD(<span class="built_in">pow</span>(<span class="number">2</span>,ed,n)-<span class="number">2</span>,n)</span><br><span class="line">m = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">    <span class="keyword">if</span> (libnum.jacobi(i,p)) == <span class="number">1</span>:</span><br><span class="line">        m += <span class="string">&#x27;0&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        m += <span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m,<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># DASCTF&#123;c764ba09-b2aa-12ed-ab17-9408ad39ce84&#125;</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="已知-ed-分解-n"><a href="#已知-ed-分解-n" class="headerlink" title="已知 ed 分解 n"></a>已知 ed 分解 n</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factor_with_ed</span>(<span class="params">ed,n</span>):</span><br><span class="line">    p=<span class="number">1</span></span><br><span class="line">    q=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> p==<span class="number">1</span> <span class="keyword">and</span> q==<span class="number">1</span>:</span><br><span class="line">        k = ed -<span class="number">1</span></span><br><span class="line">        g = random.randint(<span class="number">1</span>,n)</span><br><span class="line">        <span class="keyword">while</span> k%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">            k //= <span class="number">2</span></span><br><span class="line">            x = <span class="built_in">pow</span>(g,k,n)</span><br><span class="line">            <span class="keyword">if</span> x&gt;<span class="number">1</span> <span class="keyword">and</span> libnum.gcd(x-<span class="number">1</span>,n)&gt;<span class="number">1</span>:</span><br><span class="line">                p = libnum.gcd(x-<span class="number">1</span>,n)</span><br><span class="line">                q = n//p</span><br><span class="line">    <span class="keyword">return</span> p,q</span><br><span class="line"></span><br><span class="line">n = <span class="number">214189098485907407681203562477141616514627803973812423866137712061520397412283304756125615530911730190509122275581663270324067756428063773995710185422014937638013530995658678484408224195008950739065869752467503449898424403807629035201754909341605483646512086652631108980705938767234014655512244203488129210213088484751842078315616338034946509581920246058635374657554442252420460618886159118637553788160140879059706396460523335509806462257352635091258764319929220939182156189941663585022210802535804264016891744621140144859992731921592420695928759275864955373537480452694672023754214092487216273962896544919015905264313446548396379618341043583032673900608611135254563997519445284222602183035105369017270389887769617942348731416370092842162632579589494341854993600540689280924183073089475208340685636482246115054414077320832052204722015428500812923185709772796221129375539131726373252482799298746655947376656143301849009181701495003174228813534439192414768762803822975277797520157025175837722175072241107</span></span><br><span class="line">ed = <span class="number">8238783462304466047370608758999664260116370123313022088538091162770601739116628806460542503654403361322931229200817491683096695046254053538710523477982774850621979868926682997393573131262930645387042545807254462907502249936746101134745335780459335767976492133149192198880107516742633966664923533160167069625322094242414191994000927842976472080411237834215691897822371792754587587715760051582955795834883174474583440371035173351136370107484245425758954400434828144460697864191261513214008084848001467959369934964428291290009392620134215667173457413630882523557102057539902909381706460767916715499306316003286608457624713509816056636249181986636842368337873445101552453774405927824096616431732124001038586048766823358751593885500314021939046991953062562270782883182855487098328026196086288533138907969729187779739950764344200364360079479047132746676799216491472345637845220255139152063453462176656553357596450484408472263570570448409671724853674399060252094955913831086556844240273178815236110565265190938731402297513542863173575371193878977</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ed = e * d</span></span><br><span class="line">p,q = factor_with_ed(ed,n)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 168207689659417173628607066039457820275276732311636007089001107530860513351122555769649031031435042743185528528881857626080873859026128498997148721030271703030768717788591275936600239642357340350598106488044312274746860587888105379606096757814370419770414183228756583472285941821276338279728115488001890742673</span></span><br></pre></td></tr></table></figure>
<p>求出了 p，与上同理</p>
<h3 id="求-r-Sylvester结式法"><a href="#求-r-Sylvester结式法" class="headerlink" title="求 r (Sylvester结式法)"></a>求 r (Sylvester结式法)</h3><p><strong>Sylvester结式法求解多项式方程</strong> </p>
<p><strong>结式：</strong> </p>
<p>指由两个多项式的系数所构成的一种行列式，或称Sylvester行列式，结式可判断两个多项式是否有公根、是否互素，以及判断多项式是否有重根。</p>
<p>我并不准备原理转述：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA4ODM4MzEvYXJ0aWNsZS9kZXRhaWxzLzEyNjc2NDI4NQ==">Sylvester结式法求解多项式方程_用经典的 sylvester 消元法适用于三个未知数吗-CSDN博客<i class="fa fa-external-link-alt"></i></span></p>
<hr>
<p>两个式子：</p>
<script type="math/tex; mode=display">
leak_1 = (r+t^{e_1})^{d_1} \pmod n</script><script type="math/tex; mode=display">
leak_2 = \sum_{i=0}^9data_i*t^i \pmod n</script><p>这两个式子出现过几次了，所以还是多看一下</p>
<script type="math/tex; mode=display">
f = (r+t^{e_1}) -leak_1^{e_1}\\
g = \sum_{i=0}^9data_i*t^i -leak_2</script><p>两个未知数，我们可以利用 结式 消去 <code>t</code>，来求 <code>r</code>，由于 $t^{e_1}$ 较大，无法直接表示，故我们需要优化一下，求它的时候 模一个多项式 g</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ff = t</span><br><span class="line">te = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">bin</span>(e1)[<span class="number">2</span>:][::-<span class="number">1</span>]:		<span class="comment"># 原来求一个数的幂是这么求的，前提 e1&gt;0</span></span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        te = (te * ff) % g</span><br><span class="line">    ff = (ff * ff) % g</span><br></pre></td></tr></table></figure>
<p>结式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">h = f.sylvester_matrix(g, t).det().univariate_polynomial().monic()</span><br><span class="line">he = (companion_matrix(h)).charpoly()    <span class="comment"># 非必选，两个的结果是一样的，如果需要对多项式求幂的话启用第二行</span></span><br></pre></td></tr></table></figure>
<p>代码的意思，不过多赘述，想必你看完就明白了：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly90b3Zlci54eXovcC9yZXN1bHRhbnQtY29tcGFuaW9uLWhhcmRyc2EvI1Jlc3VsdGFudA==">https://tover.xyz/p/resultant-companion-hardrsa/#Resultant<i class="fa fa-external-link-alt"></i></span></p>
<p>r 相对 n 较小，copper 即可解</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = </span><br><span class="line">e1 = </span><br><span class="line">data = </span><br><span class="line">leak1 = </span><br><span class="line">leak2 = </span><br><span class="line"></span><br><span class="line">R.&lt;t,r&gt;=PolynomialRing(Zmod(n))   </span><br><span class="line"></span><br><span class="line">g = <span class="built_in">sum</span>([<span class="built_in">int</span>(data[i]) * t ** i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data))]) - leak2</span><br><span class="line"></span><br><span class="line">ff = t</span><br><span class="line">te = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">bin</span>(e1)[<span class="number">2</span>:][::-<span class="number">1</span>]:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">        te = (te * ff) % g</span><br><span class="line">    ff = (ff * ff) % g</span><br><span class="line"></span><br><span class="line">f = r + te - <span class="built_in">pow</span>(leak1,e1,n)</span><br><span class="line"></span><br><span class="line">h = f.sylvester_matrix(g, t).det().univariate_polynomial().monic()</span><br><span class="line"><span class="comment"># he = (companion_matrix(h)).charpoly()   </span></span><br><span class="line"></span><br><span class="line">res = h.small_roots(X = <span class="number">2</span> ** <span class="number">256</span>,epsilon = <span class="number">0.03</span>)</span><br><span class="line"><span class="keyword">if</span> res:</span><br><span class="line">    <span class="built_in">print</span>(res[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 77477547161688496725906506626131775883966333151442864639104100690032824193233</span></span><br></pre></td></tr></table></figure>
<hr>
<p>出题人题目灵感应该是来自 <code>Van1sh</code> 佬：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MveVRJRktrZGVvczhfX3JwWWdFZGVfZw==">好题分享系列 - 2023 江苏省数据安全竞赛 - hardrsa (qq.com)<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="DAS-DSA"><a href="#DAS-DSA" class="headerlink" title="DAS_DSA"></a>DAS_DSA</h1><blockquote>
<p>DDAASSSAA.py</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">b2l=<span class="keyword">lambda</span> x:bytes_to_long(x)</span><br><span class="line">l2b=<span class="keyword">lambda</span> x:long_to_bytes(x)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">A,B</span>):</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">bytes</span>([a ^ b <span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>(A, B)])</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleDSASigner</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, p, q, g, x,KEY</span>):</span><br><span class="line">        self.p = p</span><br><span class="line">        self.q = q</span><br><span class="line">        self.g = g</span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = <span class="built_in">pow</span>(self.g, self.x, self.p)</span><br><span class="line">        self.KEY=KEY</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">self, message</span>):</span><br><span class="line">        h = <span class="built_in">int</span>(hashlib.sha256(message).hexdigest(), <span class="number">16</span>)</span><br><span class="line">        k = b2l(xor(message,self.KEY))</span><br><span class="line">        r = <span class="built_in">pow</span>(self.g, k, self.p) % self.q</span><br><span class="line">        s = (inverse(k, self.q) * (h + self.x * r)) % self.q</span><br><span class="line">        <span class="keyword">if</span> r != <span class="number">0</span> <span class="keyword">and</span> s != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> (r, s)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self, message, r, s</span>):</span><br><span class="line">        h = <span class="built_in">int</span>(hashlib.sha256(message).hexdigest(), <span class="number">16</span>)</span><br><span class="line">        w = inverse(s, self.q)</span><br><span class="line">        u1 = (h * w) % self.q</span><br><span class="line">        u2 = (r * w) % self.q</span><br><span class="line">        v = ((<span class="built_in">pow</span>(self.g, u1, self.p) * <span class="built_in">pow</span>(self.y, u2, self.p)) % self.p) % self.q</span><br><span class="line">        <span class="keyword">return</span> v == r</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">give_gift</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (self.p,self.q,self.g,self.y)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>task.py</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> DDAASSSAA <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> FLAG</span><br><span class="line">ALPHABET = <span class="string">&quot;DAS&quot;</span></span><br><span class="line">KEY_LENGTH = <span class="number">32</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_random_string</span>(<span class="params">length, chars</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(random.choice(chars) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_message</span>(<span class="params">num_messages</span>):</span><br><span class="line">    <span class="keyword">return</span> [generate_random_string(random.randint(<span class="number">20</span>, <span class="number">32</span>), ALPHABET) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num_messages)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_key</span>():</span><br><span class="line">    <span class="keyword">return</span> generate_random_string(KEY_LENGTH, ALPHABET).encode()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_strong_prime</span>(<span class="params">kbits</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        q = getPrime(kbits)</span><br><span class="line">        p = q * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(p):</span><br><span class="line">            <span class="keyword">return</span> p, q</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_to_file</span>(<span class="params">filename, data, rwx=<span class="string">&quot;w&quot;</span></span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, rwx) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> data:</span><br><span class="line">            file.write(<span class="string">f&quot;<span class="subst">&#123;item&#125;</span>\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    num_messages = <span class="number">2024</span> // <span class="number">65</span></span><br><span class="line">    messages = get_message(num_messages)</span><br><span class="line">    p, q = get_strong_prime(<span class="number">256</span>)</span><br><span class="line">    x = random.randrange(q)</span><br><span class="line">    key = get_key()</span><br><span class="line"></span><br><span class="line">    signer = SimpleDSASigner(p, q, <span class="number">2</span>, x, key)</span><br><span class="line">    write_to_file(<span class="string">&quot;GIFT.txt&quot;</span>, messages)</span><br><span class="line">    signatures = [signer.sign(pad(msg.encode(), <span class="number">32</span>)) <span class="keyword">for</span> msg <span class="keyword">in</span> messages]</span><br><span class="line">    write_to_file(<span class="string">&quot;enc.txt&quot;</span>, <span class="built_in">map</span>(<span class="built_in">str</span>, signatures))</span><br><span class="line">    write_to_file(<span class="string">&quot;enc.txt&quot;</span>, [<span class="built_in">str</span>(signer.give_gift())],<span class="string">&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> FLAG==<span class="string">b&quot;DASCTF&#123;&quot;</span>+key+<span class="string">b&quot;&#125;&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>GIFT.txt</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SDSSDASSAAASSDADSASADASSSSADDS</span><br><span class="line">SADADDAASSAASDSAAAAADS</span><br><span class="line">SSASDDDSSSSDDSDAAAAAASAASDSA</span><br><span class="line">SASSDSDSSSDSSDSDASADDA</span><br><span class="line">SDDAAASASADDAADDSSSSDASAASADSA</span><br><span class="line">AASADASADDSDDASADSAS</span><br><span class="line">DASDDDDAASADDASADAAAAAADS</span><br><span class="line">DSAAAASASDDDDDDSSASDADSASDDA</span><br><span class="line">ADSSSSAADDSDDDADAADD</span><br><span class="line">ASDDSADAASSASSDSDDSSD</span><br><span class="line">SASSDDAASDDSADSDSSDAASSAD</span><br><span class="line">DADSDAASAADDAAASASSSA</span><br><span class="line">DADDADSSDADAADSSADDADDDSSDAS</span><br><span class="line">AAASDSSDSAASDADDSADSDA</span><br><span class="line">ASDASSDSDDADADSDSDDDDADSSAADAS</span><br><span class="line">SDSASDADDASDASSDSAAASSASSDADA</span><br><span class="line">AADDSSDSDADSASDDSASSDDD</span><br><span class="line">SAADASAADAASDDDSASSDAASAAAS</span><br><span class="line">SSDDADSAADSDSSADSADSAASASDSAS</span><br><span class="line">DSDDAAASDDDSAASSDDDAASADSS</span><br><span class="line">SASSAAAAAAADSDASSDASSDAS</span><br><span class="line">DDDASAASDAADSSSASAAAADSDD</span><br><span class="line">SASADSSSAADDASADDDADD</span><br><span class="line">ASDDDDSDDSSSAASASDSSDDASA</span><br><span class="line">DSAASDSDAADAAAAASADSDDDDAAA</span><br><span class="line">ADSDADDDASASDSDADSADADDSASSSD</span><br><span class="line">ADADDASSDSDASADDSADSD</span><br><span class="line">SASAASDSDDASADASSSDSAAA</span><br><span class="line">SASDDADSSDASDDSSDSDA</span><br><span class="line">ADAASDSSDSDASSASADDSDDASAS</span><br><span class="line">AADADDSAADDDSASADASSDAADADAA</span><br></pre></td></tr></table></figure>
<blockquote>
<p>enc.txt</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">59254487398967388114905667045028363843329923626238494813205814542210325221866</span>, <span class="number">38134152657262330507433713437784426184950965354807113354631630191330303144120</span>)</span><br><span class="line">(<span class="number">7272091585909282735283006759301331954064261183899338079418296410637263888770</span>, <span class="number">25499964678151126566605578540840513489434638253159604087981425065951344757164</span>)</span><br><span class="line">(<span class="number">6899645492048427857621143178962093646174799398991863666101058693217698732368</span>, <span class="number">9791582686238213337967141368906212036310014918808878260483336268832064128819</span>)</span><br><span class="line">(<span class="number">25004120896291255053237639070744331951278481119827357255754648579794346195560</span>, <span class="number">141512006531073436448016797005260994098008785866923890662245540709534244927</span>)</span><br><span class="line">(<span class="number">2970680424634969125510981613739745658897845410407912521400879068659540408508</span>, <span class="number">21793011307831199247000930716490000926029175766326909085969585420590222327264</span>)</span><br><span class="line">(<span class="number">54566000630497640561512172245143554745650114820675965968691149808463168361994</span>, <span class="number">14349862994826483344159692458388566295460798903541941504424537018216650283613</span>)</span><br><span class="line">(<span class="number">75159685495692974866291952764676724718763580667689472941977359299782008334398</span>, <span class="number">70458140884809949567915541063312538538372757595177423386408938073672211639375</span>)</span><br><span class="line">(<span class="number">20041025052466338500977838626769109456575569706600589389016534358968746705758</span>, <span class="number">65530083011107720400920780939345704754954869671333734672594688826098321351660</span>)</span><br><span class="line">(<span class="number">70127192435034402135747706941502224672808592757766109942714487474501491910214</span>, <span class="number">57063474646503909216126596725677068514339517777473453937098665282959018241139</span>)</span><br><span class="line">(<span class="number">9691674719110233709152049443866537766465800386755314400120771762265195237696</span>, <span class="number">62093763551744197212031574855244002702924782008725363963219173846480120194830</span>)</span><br><span class="line">(<span class="number">71705536377844454384479609516094364197930343317149881589774662842233960882414</span>, <span class="number">77374603032347186343803094100249733360600621594214414598796066240713702791608</span>)</span><br><span class="line">(<span class="number">52879693221782582945807231749976747516107564896599455986464226581743117039645</span>, <span class="number">1344584960351311598238142429846629993914377848692708811135221930719773821079</span>)</span><br><span class="line">(<span class="number">77382790022991362370508965243223326049308313776687214599186184000848696471646</span>, <span class="number">43641233828500431963081402892838426285406919342406723474664571883294369141394</span>)</span><br><span class="line">(<span class="number">56346141869522955969887972614456267251604757060687228073793419107933969328162</span>, <span class="number">76285674574149814839616688665569434237657824816977670694242559140508233840268</span>)</span><br><span class="line">(<span class="number">13673786393914569132256858604647869957632869873889606981549833789272316263013</span>, <span class="number">55327829510120473782794486945583818434703312785066895788282945944551470490709</span>)</span><br><span class="line">(<span class="number">64767740468987944636292946852714160626094908713011502873333251460983428727987</span>, <span class="number">13259490361346409766866273875042192439139048727072955549892484859673179719539</span>)</span><br><span class="line">(<span class="number">3957421961183318932163297455146838208380750250268324980567615749312524020603</span>, <span class="number">26882140137481455957383933013829466811327529673163422516945649296787438630196</span>)</span><br><span class="line">(<span class="number">26427922029900012253901950242265848521558605010629901777129266992870754082725</span>, <span class="number">69951840114040217998552588969628162605092507207522992695398095063314527794456</span>)</span><br><span class="line">(<span class="number">41377529326816743042387061355650636824586430044255853849728865473372840135697</span>, <span class="number">11219359019456290145545276763003725218855047474525360923001515509608652449000</span>)</span><br><span class="line">(<span class="number">25716607607446503241765016815241812755718791371526314953930748513731536667770</span>, <span class="number">28453782213087434330094261632474010077787574243224303728751260500450723227337</span>)</span><br><span class="line">(<span class="number">19800391798756020076641438144957219387739406397111495660920822320302304854123</span>, <span class="number">45451686690348328576376896082606976500453603983712180502700202971927238065259</span>)</span><br><span class="line">(<span class="number">38726290839677684687529233274549282905118675478275260942535144771737271586397</span>, <span class="number">40829316203033016996956478373044348905634931325393076578307296318880401948880</span>)</span><br><span class="line">(<span class="number">39209612764454560795450300186392582769693156243512973558204034254768849812055</span>, <span class="number">1354495451811853700039180690705948597695565424847801455594169929311025313998</span>)</span><br><span class="line">(<span class="number">65513712517147774905818288938959930101260466094015953149923879872714745367445</span>, <span class="number">15372704507991354781967074099137226451034611060413049367266363154832614415805</span>)</span><br><span class="line">(<span class="number">15729001560566023616632342669016214191974988848807788455841465085832368458445</span>, <span class="number">16327134664007312833089147621817036851276111964898734022794700122827444854947</span>)</span><br><span class="line">(<span class="number">42181696175119369852613642818168055609726913997313538977450877772345284116500</span>, <span class="number">9844926061501886811803369928846120575402269452312877926396348651872911440254</span>)</span><br><span class="line">(<span class="number">66136301537002842836817588252827389434354772150463143258637074246966542574050</span>, <span class="number">40179237579762663098604891208246052072476264271372972425562554108399403298795</span>)</span><br><span class="line">(<span class="number">28759447425094984124057238672075080352158483766211322160596339820824930247130</span>, <span class="number">31809179023991813094371890170356817265600467849999331763205655801654108159032</span>)</span><br><span class="line">(<span class="number">46713611880672324334213026166944979498146683097425440783760089321619754080806</span>, <span class="number">23270114877894114090584274918755188867365261145736710892185678426446455871613</span>)</span><br><span class="line">(<span class="number">57079205189933243387798430767693634017842334556643904914267966016857671112460</span>, <span class="number">18247249527866143497935092319901700668290600772967638096649240924154901762810</span>)</span><br><span class="line">(<span class="number">10688647176294432598580110142909961685073598720504815121442568862023227643325</span>, <span class="number">54331697420125697460151875535555752680845260504979536685075170636565355173106</span>)</span><br><span class="line">(<span class="number">156169498993837300941969389078565637464689185713213578550979549862042014984607</span>, <span class="number">78084749496918650470984694539282818732344592856606789275489774931021007492303</span>, <span class="number">2</span>, <span class="number">59080272611010540206200716660225398487916425104605746321153704646003914371135</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Writeup："><a href="#Writeup：" class="headerlink" title="Writeup："></a>Writeup：</h2><p>移步：</p>
<p><a href="https://wbuildings.github.io/Crypto/DSA/#more">https://wbuildings.github.io/Crypto/DSA/#more</a></p>
<hr>
<h1 id="EZshamir"><a href="#EZshamir" class="headerlink" title="EZshamir"></a>EZshamir</h1><blockquote>
<p>task.sage</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256, md5</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shamir</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, pbits, noise_bit, n, m</span>):</span><br><span class="line">        self.pbits = pbits</span><br><span class="line">        self.noise_bit = noise_bit</span><br><span class="line">        self.n = n</span><br><span class="line">        self.m = m</span><br><span class="line">        self.p = getPrime(pbits)</span><br><span class="line">        P.&lt;x&gt; = PolynomialRing(Zmod(self.p))</span><br><span class="line">        self.poly = P([bytes_to_long(sha256(os.urandom(<span class="number">32</span>)).digest()) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.n)])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sample</span>(<span class="params">self</span>):</span><br><span class="line">        t = getrandbits(self.pbits)</span><br><span class="line">        y = <span class="built_in">int</span>(self.poly(t))</span><br><span class="line">        noise = getrandbits(noise_bit)</span><br><span class="line">        <span class="keyword">return</span> (t, y | noise)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_msg</span>(<span class="params">self</span>):</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.m):</span><br><span class="line">            res.append(self.sample())</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">pbits = <span class="number">400</span></span><br><span class="line">noise_bit = <span class="number">32</span></span><br><span class="line">n = <span class="number">100</span></span><br><span class="line">m = <span class="number">75</span></span><br><span class="line"></span><br><span class="line">shamir = Shamir(pbits, noise_bit, n, m)</span><br><span class="line">coefficient = shamir.poly()</span><br><span class="line">key = <span class="string">&quot;&quot;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>(coefficient)[<span class="number">1</span>:]])</span><br><span class="line">key = md5(key.encode()).digest()</span><br><span class="line">aes = AES.new(key = key, mode = AES.MODE_ECB)</span><br><span class="line">ct = aes.encrypt(pad(flag, <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">str</span>(shamir.p)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="built_in">str</span>(shamir.get_msg())+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="built_in">str</span>(bytes_to_long(ct))+<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Writeup：-1"><a href="#Writeup：-1" class="headerlink" title="Writeup："></a>Writeup：</h2><p>移步：</p>
<p><a href="https://wbuildings.github.io/Crypto/Shamir门限方案/#more">Shamir 门限方案 | W’Blog (wbuildings.github.io)</a> </p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Wp</tag>
        <tag>背包密码</tag>
        <tag>Sylvester</tag>
        <tag>二元copper</tag>
      </tags>
  </entry>
  <entry>
    <title>DSA</title>
    <url>/Crypto/DSA/</url>
    <content><![CDATA[<p>初闻不识曲中意，再听已是曲中人。</p>
<span id="more"></span>
<h1 id="理论："><a href="#理论：" class="headerlink" title="理论："></a>理论：</h1><h2 id="密钥生成"><a href="#密钥生成" class="headerlink" title="密钥生成"></a>密钥生成</h2><ol>
<li><p><strong>选取一个合适的哈希函数记为 $H$ 函数，例如<code>SHA1</code>。</strong></p>
</li>
<li><p>选择合适的密钥长度记$(L,N)$，其中DSS建议 $64|L$ ，且 $512≤L≤1024$，$N$ 不能大于 $H$ 函数输出的长度。</p>
</li>
<li><p>选取$N$ 比特的素数 $q$ 和 $L$ 比特的素数 $p$，并且满足 $q|(p-1)$ 。</p>
</li>
<li><p>选择满足模 $p$ 意义下阶为 $q$ 的整数 $g$ ，这里可以通过关系式</p>
<script type="math/tex; mode=display">
g \equiv h^{(p-1)/q} \ mod \ p</script></li>
</ol>
<p>   得出，其中 $1&lt;h&lt;p−1$ 。</p>
<ol>
<li>选择整数 $x∈(0,q)$，记为私钥，并且计算 $y \equiv g^x \ mod \ p$。</li>
</ol>
<ul>
<li>最终公钥为 $(p,q,g,y)$，私钥为 $x$。</li>
</ul>
<h2 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h2><ol>
<li>选择临时密钥 $k$ ，满足 $0&lt;k&lt;q$。</li>
<li>计算 $r \equiv (g^k \ mod \ p)(mod \ q)$</li>
<li>计算 $s \equiv (H(m)+xr)k^{−1}(mod \ q)$</li>
</ol>
<p>最终签名为 $(r,s)$</p>
<h2 id="验签"><a href="#验签" class="headerlink" title="验签"></a>验签</h2><p>1.设 $w \equiv s^{-1} \ mod \ q$ ，$u_1 \equiv H(m)w \ mod \ q$，$u_2 \equiv rw \ mod \ q$</p>
<p>2.设 $v \equiv g^{u_1}y^{u_2} \ mod \ p \ (mod \ q)$</p>
<p>3.若 $v=r$，则签名有效，否则则为非法签名。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gen_key</span>():</span><br><span class="line">    pri = random.randint(<span class="number">2</span>,q - <span class="number">2</span>)</span><br><span class="line">    pub = <span class="built_in">pow</span>(g,pri,p)</span><br><span class="line">    <span class="keyword">return</span> pri,pub</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">m,pri</span>):</span><br><span class="line">    k = <span class="built_in">int</span>(hashlib.md5(os.urandom(<span class="number">20</span>)).hexdigest(),<span class="number">16</span>)</span><br><span class="line">    H = <span class="built_in">int</span>(hashlib.sha256(m).hexdigest(),<span class="number">16</span>)</span><br><span class="line">    r = <span class="built_in">pow</span>(g,k,p) % q</span><br><span class="line">    s = <span class="built_in">pow</span>(k,-<span class="number">1</span>,q) * (H + pri * r) % q</span><br><span class="line">    <span class="keyword">return</span> r,s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">pub,m,signature</span>):</span><br><span class="line">    r,s = signature</span><br><span class="line">    <span class="keyword">if</span> r &lt;= <span class="number">0</span> <span class="keyword">or</span> r &gt;= q <span class="keyword">or</span> s &lt;= <span class="number">0</span> <span class="keyword">or</span> s &gt;= q:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    w = <span class="built_in">pow</span>(s,-<span class="number">1</span>,q)</span><br><span class="line">    H = <span class="built_in">int</span>(hashlib.sha256(m).hexdigest(),<span class="number">16</span>)</span><br><span class="line">    u1 = H * w % q</span><br><span class="line">    u2 = r * w % q</span><br><span class="line">    v = (<span class="built_in">pow</span>(g,u1,p) * <span class="built_in">pow</span>(pub,u2,p) % p) % q</span><br><span class="line">    <span class="keyword">return</span> v == r</span><br></pre></td></tr></table></figure>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote>
<p>2024i春秋夏季赛</p>
</blockquote>
<h2 id="signature"><a href="#signature" class="headerlink" title="signature"></a>signature</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> DSA</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_proof_key</span>():</span><br><span class="line">    password = <span class="string">&#x27;happy_the_year_of_loong&#x27;</span></span><br><span class="line">    getin = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> password:</span><br><span class="line">        <span class="keyword">if</span> random.randint(<span class="number">0</span>, <span class="number">1</span>):</span><br><span class="line">            getin += i.lower()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            getin += i.upper()</span><br><span class="line">    ans = hashlib.sha256(getin.encode()).hexdigest()</span><br><span class="line">    <span class="keyword">return</span> getin,ans</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_key</span>():</span><br><span class="line">    pri = random.randint(<span class="number">2</span>,q - <span class="number">2</span>)</span><br><span class="line">    pub = <span class="built_in">pow</span>(g,pri,p)</span><br><span class="line">    <span class="keyword">return</span> pri,pub</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">m,pri</span>):</span><br><span class="line">    k = <span class="built_in">int</span>(hashlib.md5(os.urandom(<span class="number">20</span>)).hexdigest(),<span class="number">16</span>)</span><br><span class="line">    H = <span class="built_in">int</span>(hashlib.sha256(m).hexdigest(),<span class="number">16</span>)</span><br><span class="line">    r = <span class="built_in">pow</span>(g,k,p) % q</span><br><span class="line">    s = <span class="built_in">pow</span>(k,-<span class="number">1</span>,q) * (H + pri * r) % q</span><br><span class="line">    <span class="keyword">return</span> r,s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">pub,m,signature</span>):</span><br><span class="line">    r,s = signature</span><br><span class="line">    <span class="keyword">if</span> r &lt;= <span class="number">0</span> <span class="keyword">or</span> r &gt;= q <span class="keyword">or</span> s &lt;= <span class="number">0</span> <span class="keyword">or</span> s &gt;= q:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    w = <span class="built_in">pow</span>(s,-<span class="number">1</span>,q)</span><br><span class="line">    H = <span class="built_in">int</span>(hashlib.sha256(m).hexdigest(),<span class="number">16</span>)</span><br><span class="line">    u1 = H * w % q</span><br><span class="line">    u2 = r * w % q</span><br><span class="line">    v = (<span class="built_in">pow</span>(g,u1,p) * <span class="built_in">pow</span>(pub,u2,p) % p) % q</span><br><span class="line">    <span class="keyword">return</span> v == r</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello sir,Plz login first&#x27;</span>)</span><br><span class="line">    menu = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    1.sign</span></span><br><span class="line"><span class="string">    2.verify</span></span><br><span class="line"><span class="string">    3.get my key</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    times = <span class="number">8</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(menu)</span><br><span class="line">        <span class="keyword">if</span> times &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Timeout!&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        choice = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;&gt;&#x27;</span>))</span><br><span class="line">        <span class="keyword">if</span> choice == <span class="number">1</span>:</span><br><span class="line">            name = <span class="built_in">input</span>(<span class="string">&#x27;Username:&#x27;</span>).encode()</span><br><span class="line">            <span class="keyword">if</span> <span class="string">b&#x27;admin&#x27;</span> <span class="keyword">in</span> name:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Get out!&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            r,s = sign(name,pri)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;This is your signature -- &gt; <span class="subst">&#123;r&#125;</span>,<span class="subst">&#123;s&#125;</span>&#x27;</span>)</span><br><span class="line">            times -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> choice == <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Sure,Plz input your signature&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(pri)</span><br><span class="line">            r = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;r:&#x27;</span>))</span><br><span class="line">            s = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;s:&#x27;</span>))</span><br><span class="line">            <span class="keyword">if</span> verify(pub,<span class="string">b&#x27;admin&#x27;</span>,(r,s)) == <span class="literal">True</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;login success!&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;you are not admin&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> choice == <span class="number">3</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;Oh,your key is <span class="subst">&#123;(p,q,g)&#125;</span>&#x27;</span>)</span><br><span class="line">getin,ans = gen_proof_key()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Your gift --&gt; <span class="subst">&#123;ans[:<span class="number">6</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">your_token = <span class="built_in">input</span>(<span class="string">&#x27;Plz input your token\n&gt;&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> your_token != getin:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Get out!&#x27;</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">key = DSA.generate(<span class="number">1024</span>)</span><br><span class="line">p, q, g = key.p, key.q, key.g</span><br><span class="line">pri, pub = gen_key()</span><br><span class="line"><span class="keyword">if</span> login() == <span class="literal">False</span>:</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">open</span>(<span class="string">&#x27;/flag&#x27;</span>,<span class="string">&#x27;r&#x27;</span>).read())</span><br></pre></td></tr></table></figure>
<blockquote>
<p>题解</p>
</blockquote>
<h3 id="HNP"><a href="#HNP" class="headerlink" title="HNP"></a>HNP</h3><p>$s\equiv k^{-1}(H+xr) \bmod q $ ，变形为：</p>
<p>$k\equiv s^{-1}H+s^{-1}xr \bmod q$ </p>
<p>令 $A = s^{-1}r \bmod q,B=s^{-1}H$  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = inverse((S[i]), q) * (R[i]) % q</span><br><span class="line">b = inverse((S[i]), q) * (H[i]) % q</span><br></pre></td></tr></table></figure>
<p>即 $k_i\equiv A_ix+B_i \bmod q=&gt;k_i=A_ix+B_i+l_iq $ </p>
<p>构建<code>lattice</code>：</p>
<script type="math/tex; mode=display">
[l_0~~l_1~~\dots ~~l_7~~x~~1]\begin{bmatrix}
  q&  0& \dots & 0 & 0 & 0\\
  0&  q& \dots & 0 & 0 & 0\\
  \vdots&  \vdots&  \ddots&  \vdots&  \vdots& \vdots\\
  0&  0&  \dots& q & 0 & 0\\
  A_0&  A_1&  \dots& A_7 & 1 & 0\\
  B_0&  B_1& \dots & B_7 & 0 & K
\end{bmatrix}=[k_0~~k_1~~\dots~~k_7~~x~~K]</script><p>但是 x 是160bit的，k是128bit的，K是k的上界，所以K取 $2^{128}$ ，也是128bit的，就不能直接算出 x</p>
<hr>
<p>同时q也是160bit的，10行10列矩阵，所以n 是 10</p>
<p>数的大小    </p>
<script type="math/tex; mode=display">
\left \| \overrightarrow{v}  \right \| \le \sqrt{n}\det(L)^{\frac{1}{n}}  ,\det(L)=q^8*1*K</script><p> 计算出的bit大小是：</p>
<p>$(160*8+128)/10=140.8 ~~bit$  </p>
<hr>
<p>所以我们需要处理一下，把 x 消掉来求解</p>
<p>Dexterjie 师傅 的做法如下：（膜拜）</p>
<p>$s_ik_i\equiv H_i+xr_i \bmod q=&gt;s_ik_ir_0\equiv H_ir_0+xr_ir_0 \bmod q$ </p>
<p>$s_0k_0\equiv H_0+xr_0 \bmod q=&gt;s_0k_0r_i\equiv H_0r_i+xr_ir_0 \bmod q $  </p>
<p>两式相减就消去 x 了</p>
<p>再转换成HNP的形式</p>
<p>$k_i=(r_0s_i)^{-1}(H_ir_0-H_0r_i)+(r_0s_i)^{-1}(r_is_0)k_0 \bmod q$ </p>
<p>令 $A_i =(r_0s_i)^{-1}(r_is_0)，B_i= (r_0s_i)^{-1}(H_ir_0-H_0r_i)$ </p>
<p>再构造如上同样的格</p>
<script type="math/tex; mode=display">
[l_0~~l_1~~\dots ~~l_7~~k_0~~1]\begin{bmatrix}
  q&  0& \dots & 0 & 0 & 0\\
  0&  q& \dots & 0 & 0 & 0\\
  \vdots&  \vdots&  \ddots&  \vdots&  \vdots& \vdots\\
  0&  0&  \dots& q & 0 & 0\\
  A_0&  A_1&  \dots& A_7 & 1 & 0\\
  B_0&  B_1& \dots & B_7 & 0 & K
\end{bmatrix}=[k_0~~k_1~~\dots~~k_7~~k_0~~K]</script><p>exp：</p>
<p>想改一下的，但改无可改，proof过的比我的顺滑，数据接收处理的比我的好，再次膜拜Dexter佬</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pass_proof</span>(<span class="params">head</span>):</span><br><span class="line">    password = <span class="string">&#x27;happytheyearofloong&#x27;</span></span><br><span class="line">    table = itertools.product([<span class="number">0</span>, <span class="number">1</span>], repeat=<span class="number">19</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(table):</span><br><span class="line">        getin = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(i)):</span><br><span class="line">            <span class="keyword">if</span> i[j] == <span class="number">0</span>:</span><br><span class="line">                getin += password[j].lower()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                getin += password[j].upper()</span><br><span class="line">        msg = getin[:<span class="number">5</span>] + <span class="string">&quot;_&quot;</span> + getin[<span class="number">5</span>:<span class="number">8</span>] + <span class="string">&quot;_&quot;</span> + getin[<span class="number">8</span>:<span class="number">12</span>] + <span class="string">&quot;_&quot;</span> + getin[<span class="number">12</span>:<span class="number">14</span>] + <span class="string">&quot;_&quot;</span> + getin[<span class="number">14</span>:]</span><br><span class="line">        h = hashlib.sha256(msg.encode()).hexdigest()</span><br><span class="line">        <span class="keyword">if</span> h[:<span class="number">6</span>] == head:</span><br><span class="line">            <span class="built_in">print</span>(msg)</span><br><span class="line">            <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">sh = remote(<span class="string">&quot;27.25.151.50&quot;</span>, <span class="built_in">int</span>(<span class="number">9999</span>))</span><br><span class="line">head = sh.recvline().strip().decode().split(<span class="string">&quot; &quot;</span>)[-<span class="number">1</span>]</span><br><span class="line">msg = pass_proof(head)</span><br><span class="line">sh.recvuntil(<span class="string">b&quot;Plz input your token&quot;</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">b&quot;&gt;&quot;</span>, msg.encode())</span><br><span class="line">sh.recvuntil(<span class="string">b&quot;3.get my key\n&quot;</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">b&quot;&gt;&quot;</span>, <span class="string">b&quot;3&quot;</span>)</span><br><span class="line">(p, q, g) = <span class="built_in">eval</span>(sh.recvline().strip().decode().split(<span class="string">&quot;Oh,your key is &quot;</span>)[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">H = []</span><br><span class="line">R = []</span><br><span class="line">S = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    name = <span class="string">b&quot;a&quot;</span> * (i + <span class="number">1</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">b&quot;3.get my key\n&quot;</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">b&quot;&gt;&quot;</span>, <span class="string">b&quot;1&quot;</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">b&quot;Username:&quot;</span>, name)</span><br><span class="line">    data = sh.recvline().strip().decode()</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    r = <span class="built_in">int</span>(data.split(<span class="string">&quot; &quot;</span>)[-<span class="number">1</span>].split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">    s = <span class="built_in">int</span>(data.split(<span class="string">&quot; &quot;</span>)[-<span class="number">1</span>].split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">1</span>])</span><br><span class="line">    h = <span class="built_in">int</span>(hashlib.sha256(name).hexdigest(), <span class="number">16</span>)</span><br><span class="line">    R.append(r)</span><br><span class="line">    S.append(s)</span><br><span class="line">    H.append(h)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_k</span>():</span><br><span class="line">    n = <span class="built_in">len</span>(R)</span><br><span class="line">    r0 = R[<span class="number">0</span>]</span><br><span class="line">    h0 = H[<span class="number">0</span>]</span><br><span class="line">    s0 = S[<span class="number">0</span>]</span><br><span class="line">    A = []</span><br><span class="line">    B = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        a = inverse((r0 * S[i]), q) * (R[i] * s0) % q</span><br><span class="line">        b = inverse((r0 * S[i]), q) * (H[i] * r0 - h0 * R[i])</span><br><span class="line">        A.append(a)</span><br><span class="line">        B.append(b)</span><br><span class="line"></span><br><span class="line">    Ge = Matrix(ZZ, n + <span class="number">2</span>, n + <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        Ge[i, i] = q</span><br><span class="line">        Ge[-<span class="number">2</span>, i] = A[i]</span><br><span class="line">        Ge[-<span class="number">1</span>, i] = B[i]</span><br><span class="line">    K = <span class="number">2</span> ** <span class="number">128</span></span><br><span class="line">    Ge[-<span class="number">2</span>, -<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">    Ge[-<span class="number">1</span>, -<span class="number">1</span>] = K</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> Ge.LLL():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">abs</span>(line[-<span class="number">1</span>]) == K:</span><br><span class="line">            <span class="built_in">print</span>(line)</span><br><span class="line">            <span class="keyword">return</span> line[-<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">m, k, pri</span>):</span><br><span class="line">    H = <span class="built_in">int</span>(hashlib.sha256(m).hexdigest(), <span class="number">16</span>)</span><br><span class="line">    r = <span class="built_in">int</span>(<span class="built_in">pow</span>(g, k, p)) % <span class="built_in">int</span>(q)</span><br><span class="line">    s = <span class="built_in">pow</span>(k, -<span class="number">1</span>, q) * (H + pri * r) % q</span><br><span class="line">    <span class="keyword">return</span> r, s</span><br><span class="line"></span><br><span class="line">k0 = get_k()</span><br><span class="line">sh.recvuntil(<span class="string">b&quot;3.get my key\n&quot;</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">b&quot;&gt;&quot;</span>, <span class="string">b&quot;2&quot;</span>)</span><br><span class="line">sh.recvline()</span><br><span class="line">x = <span class="built_in">int</span>(sh.recvline().strip().decode())</span><br><span class="line"></span><br><span class="line">r, s = sign(<span class="string">b&#x27;admin&#x27;</span>, k0, x)</span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">b&quot;r:&quot;</span>, <span class="built_in">str</span>(r).encode())</span><br><span class="line">sh.sendlineafter(<span class="string">b&quot;s:&quot;</span>, <span class="built_in">str</span>(s).encode())</span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="非预期："><a href="#非预期：" class="headerlink" title="非预期："></a>非预期：</h3><p>我们需要的是 含 admin 的 r，s</p>
<p>k 非必求项，题目直接给了 pri </p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_proof_key</span>():</span><br><span class="line">    password = <span class="string">&#x27;happy_the_year_of_loong&#x27;</span></span><br><span class="line">    getin = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> password:</span><br><span class="line">        <span class="keyword">if</span> random.randint(<span class="number">0</span>, <span class="number">1</span>):</span><br><span class="line">            getin += i.lower()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            getin += i.upper()</span><br><span class="line">    ans = hashlib.sha256(getin.encode()).hexdigest()</span><br><span class="line">    <span class="keyword">return</span> getin,ans</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_token</span>(<span class="params">gift</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">2</span>**<span class="number">21</span>):</span><br><span class="line">        getin,ans = gen_proof_key()</span><br><span class="line">        anss = hashlib.sha256(getin.encode()).hexdigest()</span><br><span class="line">        <span class="keyword">if</span> anss[:<span class="number">6</span>]==gift:</span><br><span class="line">            <span class="built_in">print</span>(getin)</span><br><span class="line">            <span class="keyword">return</span> getin</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># solve_token(&#x27;604193&#x27;)</span></span><br><span class="line"></span><br><span class="line">p,q,g = (<span class="number">174662622154158042971439982212645053687190696768104775225196868992055548704642342585163415973699422033290443580951357526191653161749722322451110110268184889380915621382635156065871162267003276761161722633765289736136153198156831242721193650259121770648937505294914913701513461232854894448353391015513916766209</span>, <span class="number">1001603163301580546725538891279059276434399384247</span>, <span class="number">65517437300009715735633486850159617721548442636115700615863608530591756077096959306295830462609328157311116901616191868098474362388535531484218575841378509656901762529213776351766920344254289468341484076432764116887320535684191024038293728392038508496466213863242290672124853717731912458365180056919340701259</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">m,pri</span>):</span><br><span class="line">    k = <span class="built_in">int</span>(hashlib.md5(os.urandom(<span class="number">20</span>)).hexdigest(),<span class="number">16</span>)</span><br><span class="line">    H = <span class="built_in">int</span>(hashlib.sha256(m).hexdigest(),<span class="number">16</span>)</span><br><span class="line">    r = <span class="built_in">pow</span>(g,k,p) % q</span><br><span class="line">    s = <span class="built_in">pow</span>(k,-<span class="number">1</span>,q) * (H + pri * r) % q</span><br><span class="line">    <span class="keyword">return</span> r,s</span><br><span class="line"></span><br><span class="line">pri = <span class="number">985857368299046143947813211772527824444297963606</span></span><br><span class="line">r,s = sign(<span class="string">b&#x27;admin&#x27;</span>,pri)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/images7a462d5f3549ee09a6442b87893e184e.png" alt="7a462d5f3549ee09a6442b87893e184e"></p>
<h2 id="body、babysign"><a href="#body、babysign" class="headerlink" title="body、babysign"></a>body、babysign</h2><blockquote>
<p>2024 数字中国积分争夺赛 线下 半决赛 babysign</p>
<p>金砖北区 body</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint, getrandbits</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256, md5</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x + <span class="string">b&quot;\x00&quot;</span> * (<span class="number">16</span> - <span class="built_in">len</span>(x) % <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">message, sk</span>):</span><br><span class="line">    <span class="keyword">global</span> state</span><br><span class="line">    new_state = <span class="built_in">sum</span>([state[i] * c[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t+<span class="number">1</span>)]) % N</span><br><span class="line">    state = [<span class="number">1</span>] + state[<span class="number">2</span>:] + [new_state]</span><br><span class="line">    nonce = new_state</span><br><span class="line">    r = <span class="built_in">pow</span>(g, nonce, p) % q</span><br><span class="line">    s = inverse(nonce, q) * (sk * r + <span class="built_in">int</span>(sha256(message).hexdigest(), <span class="number">16</span>)) % q</span><br><span class="line">    <span class="keyword">return</span> r, s</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">200</span>)</span><br><span class="line">g = <span class="number">3</span></span><br><span class="line">N = getPrime(<span class="number">320</span>)</span><br><span class="line">sk = getrandbits(<span class="number">200</span>)</span><br><span class="line">n = <span class="number">6</span></span><br><span class="line">t = <span class="number">3</span></span><br><span class="line">state = [<span class="number">1</span>] + [randint(<span class="number">0</span>, N) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t)]</span><br><span class="line">c = [getrandbits(<span class="number">320</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t+<span class="number">1</span>)]</span><br><span class="line">messages = [<span class="string">b&quot;114514&quot;</span> * (i+<span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"></span><br><span class="line">aes = AES.new(key = md5(long_to_bytes(sk)).digest(), mode = AES.MODE_ECB)</span><br><span class="line">enc = bytes_to_long(aes.encrypt(pad(flag)))</span><br><span class="line"></span><br><span class="line">R = []</span><br><span class="line">S = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    ri, si = sign(messages[i], sk)</span><br><span class="line">    R.append(ri)</span><br><span class="line">    S.append(si)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;p = <span class="subst">&#123;p&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;q = <span class="subst">&#123;q&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;N = <span class="subst">&#123;N&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;R = <span class="subst">&#123;R&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;S = <span class="subst">&#123;S&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;enc = <span class="subst">&#123;enc&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = 116785031927093815079233136633589947752028911814800868369869578931870316046596785184894055371144036776064669868249704618985421271853448853632376254540547823104322168401953544967240347406778720423318565073239690241326817042043484929051576775448673203463074117804649959541507698229893054556550320469203456146047</span></span><br><span class="line"><span class="comment"># q = 1162013185697688453861664553499752399253322748004409113204127</span></span><br><span class="line"><span class="comment"># N = 1323897959325310735325275996475445031975979778815661937579963020223071860214584612380772205207187</span></span><br><span class="line"><span class="comment"># c = [1574322976538315862255039136507109494732893739698961604892927232272176602957720633460435741950981, 982748104570818459054599891053556093959178786766931425281691326835429426630180908134485622115900, 1736434097211081733335115305035342227336962166280217992786003296206828586078433857642947981291194, 1611245572755629905925930221417986751829942084516991104467460999051993831140932783222153911156935]</span></span><br><span class="line"><span class="comment"># R = [250723510788061232081262385603532530634797991937698265582129, 1119721148493144310690267430343591660519419423686023703999507, 327545854313187207152129310491071838289266078925279902580373, 294674329401405307401702457581449942310191500297502018110890, 663517568607778388357638916138325550655894605288185145315867, 580405277132704993594863659545429137977778544843615107482308]</span></span><br><span class="line"><span class="comment"># S = [1098300247591937477578678390124289151378133148552007096408606, 346993462577560155944670863440470223701841323677343217088457, 933695813746504256108426703091701687206684474504987617246020, 1100476120163015325635271971069982126075015834609795493295818, 733513755429731444068237311173894585893520394841207986015275, 1004580193918286835282796048415957927624525481538935452518194]</span></span><br><span class="line"><span class="comment"># enc = 11598259742163605745958985708470844817127222649553248988499234398208575208165607188940106811244327384195175174260322</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>最开始以为是 <code>DSA + LFSR</code>，后面才知道是论文 <font color='orange'>DSA+LCG</font>变形</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9saW5rLnNwcmluZ2VyLmNvbS9jb250ZW50L3BkZi8xMC4xMDA3L0JGYjAwNTIyNDIucGRm">《“Pseudo-Random” Number Generation within Cryptographic Algorithms: the DSS Case》<i class="fa fa-external-link-alt"></i></span></p>
<hr>
<h3 id="eg："><a href="#eg：" class="headerlink" title="eg："></a>eg：</h3><script type="math/tex; mode=display">
\left\{\begin{matrix}
  s_1k_1-r_1x = m_1 \bmod q  \\
  s_2k_2-r_2x = m_2 \bmod q\\
  -ak_1+k_2=b \bmod M
\end{matrix}\right.</script><p>构建格：</p>
<script type="math/tex; mode=display">
M = \begin{bmatrix}
  s_1& 0 & -a & E_1 & 0 & 0\\
  0&  s_2& 1 & 0 & E_2 & 0\\
 -r_1 & -r_2 & 0 & 0 & 0 & E_3\\
 q & 0 & 0 & 0 & 0 & 0\\
 0 & q & 0 & 0 & 0 & 0\\
 0 & 0 & M & 0 & 0 & 0
\end{bmatrix}</script><p>则存在向量 $a=(k_1,k_2,x,j_1,j_2,j_3)$ ，使得 $a\times M = (m_1,m_2,b,k_1E_1,k_2E_2,xE_3) $ </p>
<p>直接进行格基规约的话可能得不到想要的向量，因此设</p>
<p>$E_1 =\frac{1}{\gamma_1},E_2 =\frac{1}{\gamma_1},E_3 =\frac{1}{\gamma_2}$ </p>
<p>其中 $\gamma_1 $  是和 相同数量级的一个数，$\gamma_2$  是和 x 相同数量级的一个数，这样就能够让 $k_1E_1,k_2E_2,xE_3$ 都趋向于 1，然后我们就再在这个规约后的格子上找一个 $(m_1,m_2,b,1,1,1)$ 的 CVP 就行了</p>
<hr>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>回到本题</p>
<p>LCG变形：</p>
<script type="math/tex; mode=display">
k_{i+3}=c_0+c_1*k_i+c_2*k_{i+1}+c_3*k_{i+2} \pmod N</script><p>利用上面的例子，我们可以去得到：</p>
<script type="math/tex; mode=display">
\left\{\begin{matrix}
  s_0k_0-r_0x = m_0 \bmod q  \\
  s_1k_1-r_1x = m_1 \bmod q  \\
  s_2k_2-r_2x = m_2 \bmod q\\
  s_3k_3-r_3x = m_3 \bmod q\\
  s_4k_4-r_4x = m_4 \bmod q\\
  s_5k_5-r_5x = m_5 \bmod q\\
  k_{3}=c_0+c_1*k_0+c_2*k_{1}+c_3*k_{2} \pmod N\\
  k_{4}=c_0+c_1*k_1+c_2*k_{2}+c_3*k_{3} \pmod N\\
  k_{5}=c_0+c_1*k_2+c_2*k_{3}+c_3*k_{4} \pmod N\\
\end{matrix}\right.</script><p>构建格：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">L = Matrix(QQ,</span><br><span class="line">[   [ s0,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,-c1,  <span class="number">0</span>,  <span class="number">0</span>,<span class="number">1</span>/E1,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>], </span><br><span class="line">    [  <span class="number">0</span>, s1,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,-c2,-c1,  <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>/E1,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>], </span><br><span class="line">    [  <span class="number">0</span>,  <span class="number">0</span>, s2,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,-c3,-c2,-c1,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>/E1,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>], </span><br><span class="line">    [  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>, s3,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">1</span>,-c3,-c2,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>/E1,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>], </span><br><span class="line">    [  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>, s4,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">1</span>,-c3,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>/E1,<span class="number">0</span>,<span class="number">0</span>], </span><br><span class="line">    [  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>, s5,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>/E1,<span class="number">0</span>], </span><br><span class="line">    [-r0,-r1,-r2,-r3,-r4,-r5,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>/E2], </span><br><span class="line">    [  q,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>], </span><br><span class="line">    [  <span class="number">0</span>,  q,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>], </span><br><span class="line">    [  <span class="number">0</span>,  <span class="number">0</span>,  q,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>], </span><br><span class="line">    [  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  q,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>], </span><br><span class="line">    [  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  q,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>], </span><br><span class="line">    [  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  q,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>], </span><br><span class="line">    [  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  N,  <span class="number">0</span>,  <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>], </span><br><span class="line">    [  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  N,  <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>], </span><br><span class="line">    [  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  N,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>则存在向量 $a=(k_0,k_1,k_2,k_3,k_4,k_5,x,j_0,j_1,j_2,j_3,j_4,j_5,j_6,j_7,j_8)$ ，使得 $a\times M = (m_0,m_1,m_2,m_3,m_4,m_5,c_0,c_0,c_0,k_0E_1,k_1E_1,k_2E_1,k_3E_1,k_4E_1,,k_5E_1,xE_2) $ </p>
<p>因为 x ，也即 sk 是 200 bit 的，k ，也即 nonce 是 320 bit 的 ，所以对应调一下</p>
<p>$E_1 = \frac{1}{2^{320}},E_2 = \frac{1}{2^{200}} $ </p>
<p>然后利用LLL算法和<font color='orange'>Babai最近平面算法</font>，可以在多项式时间内找到SVP近似解。</p>
<p>也就是上述的找一个 $(m_0,m_1,m_2,m_3,m_4,m_5,c_0,c_0,c_0,1,1,1,1,1,1,1)$ 的 CVP</p>
<h3 id="exp："><a href="#exp：" class="headerlink" title="exp："></a>exp：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint, getrandbits</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256, md5</span><br><span class="line"></span><br><span class="line">p = <span class="number">116785031927093815079233136633589947752028911814800868369869578931870316046596785184894055371144036776064669868249704618985421271853448853632376254540547823104322168401953544967240347406778720423318565073239690241326817042043484929051576775448673203463074117804649959541507698229893054556550320469203456146047</span></span><br><span class="line">q = <span class="number">1162013185697688453861664553499752399253322748004409113204127</span></span><br><span class="line">N = <span class="number">1323897959325310735325275996475445031975979778815661937579963020223071860214584612380772205207187</span></span><br><span class="line">c = [<span class="number">1574322976538315862255039136507109494732893739698961604892927232272176602957720633460435741950981</span>, <span class="number">982748104570818459054599891053556093959178786766931425281691326835429426630180908134485622115900</span>, <span class="number">1736434097211081733335115305035342227336962166280217992786003296206828586078433857642947981291194</span>, <span class="number">1611245572755629905925930221417986751829942084516991104467460999051993831140932783222153911156935</span>]</span><br><span class="line">R = [<span class="number">250723510788061232081262385603532530634797991937698265582129</span>, <span class="number">1119721148493144310690267430343591660519419423686023703999507</span>, <span class="number">327545854313187207152129310491071838289266078925279902580373</span>, <span class="number">294674329401405307401702457581449942310191500297502018110890</span>, <span class="number">663517568607778388357638916138325550655894605288185145315867</span>, <span class="number">580405277132704993594863659545429137977778544843615107482308</span>]</span><br><span class="line">S = [<span class="number">1098300247591937477578678390124289151378133148552007096408606</span>, <span class="number">346993462577560155944670863440470223701841323677343217088457</span>, <span class="number">933695813746504256108426703091701687206684474504987617246020</span>, <span class="number">1100476120163015325635271971069982126075015834609795493295818</span>, <span class="number">733513755429731444068237311173894585893520394841207986015275</span>, <span class="number">1004580193918286835282796048415957927624525481538935452518194</span>]</span><br><span class="line">enc = <span class="number">11598259742163605745958985708470844817127222649553248988499234398208575208165607188940106811244327384195175174260322</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r0,r1,r2,r3,r4,r5 = R</span><br><span class="line">s0,s1,s2,s3,s4,s5 = S</span><br><span class="line">c0,c1,c2,c3 = c</span><br><span class="line">E1=<span class="number">2</span>^<span class="number">320</span></span><br><span class="line">E2=<span class="number">2</span>^<span class="number">200</span></span><br><span class="line"></span><br><span class="line">L = Matrix(QQ,</span><br><span class="line">[   [ s0,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,-c1,  <span class="number">0</span>,  <span class="number">0</span>,<span class="number">1</span>/E1,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],  </span><br><span class="line">    [  <span class="number">0</span>, s1,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,-c2,-c1,  <span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>/E1,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>], </span><br><span class="line">    [  <span class="number">0</span>,  <span class="number">0</span>, s2,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,-c3,-c2,-c1,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>/E1,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>], </span><br><span class="line">    [  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>, s3,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">1</span>,-c3,-c2,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>/E1,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>], </span><br><span class="line">    [  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>, s4,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">1</span>,-c3,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>/E1,<span class="number">0</span>,<span class="number">0</span>], </span><br><span class="line">    [  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>, s5,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>/E1,<span class="number">0</span>], </span><br><span class="line">    [-r0,-r1,-r2,-r3,-r4,-r5,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>/E2], </span><br><span class="line">    [  q,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>], </span><br><span class="line">    [  <span class="number">0</span>,  q,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>], </span><br><span class="line">    [  <span class="number">0</span>,  <span class="number">0</span>,  q,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>], </span><br><span class="line">    [  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  q,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>], </span><br><span class="line">    [  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  q,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>], </span><br><span class="line">    [  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  q,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>], </span><br><span class="line">    [  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  N,  <span class="number">0</span>,  <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>], </span><br><span class="line">    [  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  N,  <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>], </span><br><span class="line">    [  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  N,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">L_lll = L.LLL()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">BabaisClosestPlaneAlgorithm</span>(<span class="params">L, w</span>):</span><br><span class="line">    G, _ = L.gram_schmidt()</span><br><span class="line">    t = w</span><br><span class="line">    i = L.nrows() - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &gt;= <span class="number">0</span>:</span><br><span class="line">        w -= <span class="built_in">round</span>( (w*G[i]) / G[i].norm()**<span class="number">2</span> ) * L[i]</span><br><span class="line">        i -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> t - w</span><br><span class="line"></span><br><span class="line">messages = [<span class="string">b&quot;114514&quot;</span> * (i+<span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m0,m1,m2,m3,m4,m5 = [<span class="built_in">int</span>(sha256(i).hexdigest(),<span class="number">16</span>)  <span class="keyword">for</span> i <span class="keyword">in</span> messages]</span><br><span class="line">Y = vector([m0, m1, m2, m3 , m4, m5, c0, c0, c0, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]) <span class="comment"># target vector</span></span><br><span class="line">X = BabaisClosestPlaneAlgorithm(L_lll, Y)</span><br><span class="line">sk = X[-<span class="number">1</span>]*E2<span class="comment">##</span></span><br><span class="line"></span><br><span class="line">aes = AES.new(key = md5(long_to_bytes(<span class="built_in">int</span>(sk))).digest(), mode = AES.MODE_ECB)</span><br><span class="line">flag = aes.decrypt(long_to_bytes(enc))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;d41d8cd98f00b204e9800998ecf8427e&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="DAS-DSA"><a href="#DAS-DSA" class="headerlink" title="DAS_DSA"></a>DAS_DSA</h2><blockquote>
<p>DDAASSSAA.py</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">b2l=<span class="keyword">lambda</span> x:bytes_to_long(x)</span><br><span class="line">l2b=<span class="keyword">lambda</span> x:long_to_bytes(x)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">A,B</span>):</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">bytes</span>([a ^ b <span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>(A, B)])</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleDSASigner</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, p, q, g, x,KEY</span>):</span><br><span class="line">        self.p = p</span><br><span class="line">        self.q = q</span><br><span class="line">        self.g = g</span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = <span class="built_in">pow</span>(self.g, self.x, self.p)</span><br><span class="line">        self.KEY=KEY</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">self, message</span>):</span><br><span class="line">        h = <span class="built_in">int</span>(hashlib.sha256(message).hexdigest(), <span class="number">16</span>)</span><br><span class="line">        k = b2l(xor(message,self.KEY))</span><br><span class="line">        r = <span class="built_in">pow</span>(self.g, k, self.p) % self.q</span><br><span class="line">        s = (inverse(k, self.q) * (h + self.x * r)) % self.q</span><br><span class="line">        <span class="keyword">if</span> r != <span class="number">0</span> <span class="keyword">and</span> s != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> (r, s)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self, message, r, s</span>):</span><br><span class="line">        h = <span class="built_in">int</span>(hashlib.sha256(message).hexdigest(), <span class="number">16</span>)</span><br><span class="line">        w = inverse(s, self.q)</span><br><span class="line">        u1 = (h * w) % self.q</span><br><span class="line">        u2 = (r * w) % self.q</span><br><span class="line">        v = ((<span class="built_in">pow</span>(self.g, u1, self.p) * <span class="built_in">pow</span>(self.y, u2, self.p)) % self.p) % self.q</span><br><span class="line">        <span class="keyword">return</span> v == r</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">give_gift</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (self.p,self.q,self.g,self.y)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>task.py</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> DDAASSSAA <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> FLAG</span><br><span class="line">ALPHABET = <span class="string">&quot;DAS&quot;</span></span><br><span class="line">KEY_LENGTH = <span class="number">32</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_random_string</span>(<span class="params">length, chars</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(random.choice(chars) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_message</span>(<span class="params">num_messages</span>):</span><br><span class="line">    <span class="keyword">return</span> [generate_random_string(random.randint(<span class="number">20</span>, <span class="number">32</span>), ALPHABET) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num_messages)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_key</span>():</span><br><span class="line">    <span class="keyword">return</span> generate_random_string(KEY_LENGTH, ALPHABET).encode()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_strong_prime</span>(<span class="params">kbits</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        q = getPrime(kbits)</span><br><span class="line">        p = q * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(p):</span><br><span class="line">            <span class="keyword">return</span> p, q</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_to_file</span>(<span class="params">filename, data, rwx=<span class="string">&quot;w&quot;</span></span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, rwx) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> data:</span><br><span class="line">            file.write(<span class="string">f&quot;<span class="subst">&#123;item&#125;</span>\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    num_messages = <span class="number">2024</span> // <span class="number">65</span></span><br><span class="line">    messages = get_message(num_messages)</span><br><span class="line">    p, q = get_strong_prime(<span class="number">256</span>)</span><br><span class="line">    x = random.randrange(q)</span><br><span class="line">    key = get_key()</span><br><span class="line"></span><br><span class="line">    signer = SimpleDSASigner(p, q, <span class="number">2</span>, x, key)</span><br><span class="line">    write_to_file(<span class="string">&quot;GIFT.txt&quot;</span>, messages)</span><br><span class="line">    signatures = [signer.sign(pad(msg.encode(), <span class="number">32</span>)) <span class="keyword">for</span> msg <span class="keyword">in</span> messages]</span><br><span class="line">    write_to_file(<span class="string">&quot;enc.txt&quot;</span>, <span class="built_in">map</span>(<span class="built_in">str</span>, signatures))</span><br><span class="line">    write_to_file(<span class="string">&quot;enc.txt&quot;</span>, [<span class="built_in">str</span>(signer.give_gift())],<span class="string">&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> FLAG==<span class="string">b&quot;DASCTF&#123;&quot;</span>+key+<span class="string">b&quot;&#125;&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>GIFT.txt</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SDSSDASSAAASSDADSASADASSSSADDS</span><br><span class="line">SADADDAASSAASDSAAAAADS</span><br><span class="line">SSASDDDSSSSDDSDAAAAAASAASDSA</span><br><span class="line">SASSDSDSSSDSSDSDASADDA</span><br><span class="line">SDDAAASASADDAADDSSSSDASAASADSA</span><br><span class="line">AASADASADDSDDASADSAS</span><br><span class="line">DASDDDDAASADDASADAAAAAADS</span><br><span class="line">DSAAAASASDDDDDDSSASDADSASDDA</span><br><span class="line">ADSSSSAADDSDDDADAADD</span><br><span class="line">ASDDSADAASSASSDSDDSSD</span><br><span class="line">SASSDDAASDDSADSDSSDAASSAD</span><br><span class="line">DADSDAASAADDAAASASSSA</span><br><span class="line">DADDADSSDADAADSSADDADDDSSDAS</span><br><span class="line">AAASDSSDSAASDADDSADSDA</span><br><span class="line">ASDASSDSDDADADSDSDDDDADSSAADAS</span><br><span class="line">SDSASDADDASDASSDSAAASSASSDADA</span><br><span class="line">AADDSSDSDADSASDDSASSDDD</span><br><span class="line">SAADASAADAASDDDSASSDAASAAAS</span><br><span class="line">SSDDADSAADSDSSADSADSAASASDSAS</span><br><span class="line">DSDDAAASDDDSAASSDDDAASADSS</span><br><span class="line">SASSAAAAAAADSDASSDASSDAS</span><br><span class="line">DDDASAASDAADSSSASAAAADSDD</span><br><span class="line">SASADSSSAADDASADDDADD</span><br><span class="line">ASDDDDSDDSSSAASASDSSDDASA</span><br><span class="line">DSAASDSDAADAAAAASADSDDDDAAA</span><br><span class="line">ADSDADDDASASDSDADSADADDSASSSD</span><br><span class="line">ADADDASSDSDASADDSADSD</span><br><span class="line">SASAASDSDDASADASSSDSAAA</span><br><span class="line">SASDDADSSDASDDSSDSDA</span><br><span class="line">ADAASDSSDSDASSASADDSDDASAS</span><br><span class="line">AADADDSAADDDSASADASSDAADADAA</span><br></pre></td></tr></table></figure>
<blockquote>
<p>enc.txt</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">59254487398967388114905667045028363843329923626238494813205814542210325221866</span>, <span class="number">38134152657262330507433713437784426184950965354807113354631630191330303144120</span>)</span><br><span class="line">(<span class="number">7272091585909282735283006759301331954064261183899338079418296410637263888770</span>, <span class="number">25499964678151126566605578540840513489434638253159604087981425065951344757164</span>)</span><br><span class="line">(<span class="number">6899645492048427857621143178962093646174799398991863666101058693217698732368</span>, <span class="number">9791582686238213337967141368906212036310014918808878260483336268832064128819</span>)</span><br><span class="line">(<span class="number">25004120896291255053237639070744331951278481119827357255754648579794346195560</span>, <span class="number">141512006531073436448016797005260994098008785866923890662245540709534244927</span>)</span><br><span class="line">(<span class="number">2970680424634969125510981613739745658897845410407912521400879068659540408508</span>, <span class="number">21793011307831199247000930716490000926029175766326909085969585420590222327264</span>)</span><br><span class="line">(<span class="number">54566000630497640561512172245143554745650114820675965968691149808463168361994</span>, <span class="number">14349862994826483344159692458388566295460798903541941504424537018216650283613</span>)</span><br><span class="line">(<span class="number">75159685495692974866291952764676724718763580667689472941977359299782008334398</span>, <span class="number">70458140884809949567915541063312538538372757595177423386408938073672211639375</span>)</span><br><span class="line">(<span class="number">20041025052466338500977838626769109456575569706600589389016534358968746705758</span>, <span class="number">65530083011107720400920780939345704754954869671333734672594688826098321351660</span>)</span><br><span class="line">(<span class="number">70127192435034402135747706941502224672808592757766109942714487474501491910214</span>, <span class="number">57063474646503909216126596725677068514339517777473453937098665282959018241139</span>)</span><br><span class="line">(<span class="number">9691674719110233709152049443866537766465800386755314400120771762265195237696</span>, <span class="number">62093763551744197212031574855244002702924782008725363963219173846480120194830</span>)</span><br><span class="line">(<span class="number">71705536377844454384479609516094364197930343317149881589774662842233960882414</span>, <span class="number">77374603032347186343803094100249733360600621594214414598796066240713702791608</span>)</span><br><span class="line">(<span class="number">52879693221782582945807231749976747516107564896599455986464226581743117039645</span>, <span class="number">1344584960351311598238142429846629993914377848692708811135221930719773821079</span>)</span><br><span class="line">(<span class="number">77382790022991362370508965243223326049308313776687214599186184000848696471646</span>, <span class="number">43641233828500431963081402892838426285406919342406723474664571883294369141394</span>)</span><br><span class="line">(<span class="number">56346141869522955969887972614456267251604757060687228073793419107933969328162</span>, <span class="number">76285674574149814839616688665569434237657824816977670694242559140508233840268</span>)</span><br><span class="line">(<span class="number">13673786393914569132256858604647869957632869873889606981549833789272316263013</span>, <span class="number">55327829510120473782794486945583818434703312785066895788282945944551470490709</span>)</span><br><span class="line">(<span class="number">64767740468987944636292946852714160626094908713011502873333251460983428727987</span>, <span class="number">13259490361346409766866273875042192439139048727072955549892484859673179719539</span>)</span><br><span class="line">(<span class="number">3957421961183318932163297455146838208380750250268324980567615749312524020603</span>, <span class="number">26882140137481455957383933013829466811327529673163422516945649296787438630196</span>)</span><br><span class="line">(<span class="number">26427922029900012253901950242265848521558605010629901777129266992870754082725</span>, <span class="number">69951840114040217998552588969628162605092507207522992695398095063314527794456</span>)</span><br><span class="line">(<span class="number">41377529326816743042387061355650636824586430044255853849728865473372840135697</span>, <span class="number">11219359019456290145545276763003725218855047474525360923001515509608652449000</span>)</span><br><span class="line">(<span class="number">25716607607446503241765016815241812755718791371526314953930748513731536667770</span>, <span class="number">28453782213087434330094261632474010077787574243224303728751260500450723227337</span>)</span><br><span class="line">(<span class="number">19800391798756020076641438144957219387739406397111495660920822320302304854123</span>, <span class="number">45451686690348328576376896082606976500453603983712180502700202971927238065259</span>)</span><br><span class="line">(<span class="number">38726290839677684687529233274549282905118675478275260942535144771737271586397</span>, <span class="number">40829316203033016996956478373044348905634931325393076578307296318880401948880</span>)</span><br><span class="line">(<span class="number">39209612764454560795450300186392582769693156243512973558204034254768849812055</span>, <span class="number">1354495451811853700039180690705948597695565424847801455594169929311025313998</span>)</span><br><span class="line">(<span class="number">65513712517147774905818288938959930101260466094015953149923879872714745367445</span>, <span class="number">15372704507991354781967074099137226451034611060413049367266363154832614415805</span>)</span><br><span class="line">(<span class="number">15729001560566023616632342669016214191974988848807788455841465085832368458445</span>, <span class="number">16327134664007312833089147621817036851276111964898734022794700122827444854947</span>)</span><br><span class="line">(<span class="number">42181696175119369852613642818168055609726913997313538977450877772345284116500</span>, <span class="number">9844926061501886811803369928846120575402269452312877926396348651872911440254</span>)</span><br><span class="line">(<span class="number">66136301537002842836817588252827389434354772150463143258637074246966542574050</span>, <span class="number">40179237579762663098604891208246052072476264271372972425562554108399403298795</span>)</span><br><span class="line">(<span class="number">28759447425094984124057238672075080352158483766211322160596339820824930247130</span>, <span class="number">31809179023991813094371890170356817265600467849999331763205655801654108159032</span>)</span><br><span class="line">(<span class="number">46713611880672324334213026166944979498146683097425440783760089321619754080806</span>, <span class="number">23270114877894114090584274918755188867365261145736710892185678426446455871613</span>)</span><br><span class="line">(<span class="number">57079205189933243387798430767693634017842334556643904914267966016857671112460</span>, <span class="number">18247249527866143497935092319901700668290600772967638096649240924154901762810</span>)</span><br><span class="line">(<span class="number">10688647176294432598580110142909961685073598720504815121442568862023227643325</span>, <span class="number">54331697420125697460151875535555752680845260504979536685075170636565355173106</span>)</span><br><span class="line">(<span class="number">156169498993837300941969389078565637464689185713213578550979549862042014984607</span>, <span class="number">78084749496918650470984694539282818732344592856606789275489774931021007492303</span>, <span class="number">2</span>, <span class="number">59080272611010540206200716660225398487916425104605746321153704646003914371135</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>31 组 r，s，典型 <code>HNP</code>，不过直接 规约不出来</p>
<p>这里 key 的构成已知，无非 “DAS” 可重复组合</p>
<p>可以接受爆破 key 的高位</p>
<h3 id="已知-k-的高位"><a href="#已知-k-的高位" class="headerlink" title="已知 k 的高位"></a>已知 k 的高位</h3><p>直接拿上面的下来：    </p>
<script type="math/tex; mode=display">
k_i=(r_0s_i)^{-1}(H_ir_0-H_0r_i)+(r_0s_i)^{-1}(r_is_0)k_0 \pmod q</script><script type="math/tex; mode=display">
令 ~~~k_i = 2^{l_{bit}}k_{ih}+k_{il}</script><p>最后会得到</p>
<script type="math/tex; mode=display">
k_{il}=(r_0s_i)^{-1}(r_is_0)k_{0l} +(H_ir_0-H_0r_i+s_0r_i2^{l_{bit}}k_{0h}-s_ir_02^{l_{bit}}k_{ih})(s_ir_0)^{-1} \pmod q</script><p>令 $A_i=(r_0s_i)^{-1}(r_is_0) \pmod q$ </p>
<script type="math/tex; mode=display">
B_i=(H_ir_0-H_0r_i+s_0r_i2^{l_{bit}}k_{0h}-s_ir_02^{l_{bit}}k_{ih})(s_ir_0)^{-1}</script><p><code>HNP</code> 的形式就出来了</p>
<script type="math/tex; mode=display">
[l_0~~l_1~~\dots ~~l_n~~k_{0l}~~1]\begin{bmatrix}
  q&  0& \dots & 0 & 0 & 0\\
  0&  q& \dots & 0 & 0 & 0\\
  \vdots&  \vdots&  \ddots&  \vdots&  \vdots& \vdots\\
  0&  0&  \dots& q & 0 & 0\\
  A_0&  A_1&  \dots& A_n & 1 & 0\\
  B_0&  B_1& \dots & B_n & 0 & K
\end{bmatrix}=[k_{0l}~~k_{1l}~~\dots~~k_{nl}~~k_{0l}~~K]</script><p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;enc.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f = (f.read().encode().split(<span class="string">b&#x27;\n&#x27;</span>))</span><br><span class="line"></span><br><span class="line">p,q,g,y = <span class="built_in">eval</span>(f[-<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">R = []</span><br><span class="line">S = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(f)-<span class="number">2</span>):</span><br><span class="line">    R.append(<span class="built_in">eval</span>(f[i])[<span class="number">0</span>])</span><br><span class="line">    S.append(<span class="built_in">eval</span>(f[i])[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;GIFT.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f = (f.read().split(<span class="string">&#x27;\n&#x27;</span>))</span><br><span class="line"></span><br><span class="line">H = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(f)-<span class="number">1</span>):</span><br><span class="line">    message = pad(f[i].encode(), <span class="number">32</span>)</span><br><span class="line">    h = <span class="built_in">int</span>(hashlib.sha256(message).hexdigest(), <span class="number">16</span>)</span><br><span class="line">    H.append(h)</span><br><span class="line"></span><br><span class="line">r0 = R[<span class="number">0</span>]</span><br><span class="line">s0 = S[<span class="number">0</span>]</span><br><span class="line">h0 = H[<span class="number">0</span>]</span><br><span class="line">n = <span class="built_in">len</span>(R)</span><br><span class="line"></span><br><span class="line">A = [(s0 * R[i] * inverse((S[i] * r0), q)) % q <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> product(<span class="string">&#x27;DAS&#x27;</span>,repeat = <span class="number">3</span>):</span><br><span class="line">    keyh = <span class="string">&#x27;&#x27;</span>.join(k).encode()</span><br><span class="line">    kih = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        kih.append((bytes_to_long(f[i][:<span class="number">3</span>].encode()) ^^ bytes_to_long(keyh)) * <span class="number">256</span> ^ <span class="number">29</span>)</span><br><span class="line"></span><br><span class="line">    B = [(H[i]*r0 - h0*R[i] + s0*R[i] * kih[<span class="number">0</span>] - S[i]*r0*kih[i]) * inverse((S[i]*r0),q) % q <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"></span><br><span class="line">    K = <span class="number">256</span>^<span class="number">29</span></span><br><span class="line">    L = Matrix(ZZ, n + <span class="number">2</span>, n + <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        L[i, i] = q</span><br><span class="line">        L[-<span class="number">2</span>, i] = A[i]</span><br><span class="line">        L[-<span class="number">1</span>, i] = B[i]</span><br><span class="line">    L[-<span class="number">2</span>, -<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">    L[-<span class="number">1</span>, -<span class="number">1</span>] = K</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> L.LLL():</span><br><span class="line">        <span class="keyword">if</span> line[-<span class="number">1</span>] == K:</span><br><span class="line">            k_low = <span class="built_in">abs</span>(line[-<span class="number">2</span>])</span><br><span class="line">            k0 = kih[<span class="number">0</span>] + k_low</span><br><span class="line">            key = long_to_bytes(k0 ^^ bytes_to_long(pad(f[<span class="number">0</span>].encode(), <span class="number">32</span>)))</span><br><span class="line">            <span class="keyword">if</span> (i <span class="keyword">in</span> <span class="string">b&quot;DAS&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> key):</span><br><span class="line">                <span class="built_in">print</span>(key)</span><br><span class="line">                <span class="comment"># print(line)</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># b&#x27;AADDAASAAASSSASSDSSASSDDDSDAAASS&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="已知-k-的低位"><a href="#已知-k-的低位" class="headerlink" title="已知 k 的低位"></a>已知 k 的低位</h3><p>同理，爆破 k 的低位也是可以接受的</p>
<p>最后会得到</p>
<script type="math/tex; mode=display">
k_{ih}=(r_0s_i2^{l_{bit}})^{-1}(r_is_02^{l_{bit}})k_{0h} +(H_ir_0-H_0r_i+s_0r_ik_{0l}-s_ir_0k_{il})(s_ir_02^{l_{bit}})^{-1} \pmod q</script><script type="math/tex; mode=display">
令~~~A_i=(r_0s_i2^{l_{bit}})^{-1}(r_is_02^{l_{bit}}) \pmod q</script><script type="math/tex; mode=display">
B_i=(H_ir_0-H_0r_i+s_0r_ik_{0l}-s_ir_0k_{il})(s_ir_02^{l_{bit}})^{-1}</script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="built_in">len</span>(R)</span><br><span class="line">bit = <span class="built_in">int</span>(k_low).bit_length()</span><br><span class="line">A = [((S[<span class="number">0</span>]*R[i]*<span class="number">2</span>**(bit)) * inverse((S[i]*R[<span class="number">0</span>]*<span class="number">2</span>**(bit)),q)) % q <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">B = [(H[i]*R[<span class="number">0</span>] - H[<span class="number">0</span>]*R[i] + S[<span class="number">0</span>]*R[i]*j - S[i]*R[<span class="number">0</span>]*j) * inverse((S[i]*R[<span class="number">0</span>]*<span class="number">2</span>**(bit)),q) % q <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<h3 id="已知-k-的高位和低位"><a href="#已知-k-的高位和低位" class="headerlink" title="已知 k 的高位和低位"></a>已知 k 的高位和低位</h3><p>同理，这里也不是不能接受。。。</p>
<h3 id="HNP-补充"><a href="#HNP-补充" class="headerlink" title="HNP 补充"></a><code>HNP</code> 补充</h3><blockquote>
<p>2024-08-06</p>
</blockquote>
<script type="math/tex; mode=display">
[l_0~~l_1~~\dots ~~l_7~~x~~1]\begin{bmatrix}
  q&  0& \dots & 0 & 0 & 0\\
  0&  q& \dots & 0 & 0 & 0\\
  \vdots&  \vdots&  \ddots&  \vdots&  \vdots& \vdots\\
  0&  0&  \dots& q & 0 & 0\\
  A_0&  A_1&  \dots& A_7 & \frac{K}{q} & 0\\
  B_0&  B_1& \dots & B_7 & 0 & K
\end{bmatrix}=[k_0~~k_1~~\dots~~k_7~~\frac{K}{q}x~~K]</script><p>注意 构建矩阵的时候，矩阵类型就变成 <code>QQ</code> 了，(报错原因找到了🥲)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">L = Matrix(QQ, n + <span class="number">2</span>, n + <span class="number">2</span>)</span><br><span class="line">K = <span class="number">2</span> ** <span class="number">128</span></span><br><span class="line">L[-<span class="number">2</span>][-<span class="number">2</span>] = K / q</span><br><span class="line">L[-<span class="number">1</span>][-<span class="number">1</span>] = <span class="number">2</span> ** <span class="number">128</span></span><br></pre></td></tr></table></figure>
<p>细节就需要自己去test了😊😊</p>
<hr>
<hr>
<h2 id="dsa常见题型："><a href="#dsa常见题型：" class="headerlink" title="dsa常见题型："></a>dsa常见题型：</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kZXh0ZXJqaWUuZ2l0aHViLmlvLzIwMjQvMDcvMjYvRFNBLz9oaWdobGlnaHQ9aG5wI0RTQeaVsOWtl+etvuWQjQ==">DSA数字签名 | DexterJie’Blog<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="reference："><a href="#reference：" class="headerlink" title="reference："></a>reference：</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVNpNDIxWTdRZS8/c3BtX2lkX2Zyb209MzMzLjk5OS4wLjAmYW1wO3ZkX3NvdXJjZT1mMzkyNzJiNzk1MzkzNTA4NTkzOGYwMzhhMWRjNDFlZA==">【星盟安全】2024年春秋杯夏季赛密码讲解_哔哩哔哩_bilibili<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYW5xdWFua2UuY29tL3Bvc3QvaWQvMjA0ODQ2I2gzLTM=">浅尝 Lattice 之 HNP-安全客 - 安全资讯平台 (anquanke.com)<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvbUs2TWxNYUk1Sm9vdkk5dXp1WFBqdw==">2024 数字中国积分争夺赛 线下<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>DSA</tag>
        <tag>Lattice</tag>
        <tag>HNP</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 里遇到的sage问题</title>
    <url>/%E6%9D%82%E8%AE%B0/Linux-%E9%87%8C%E9%81%87%E5%88%B0%E7%9A%84sage%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>春城无处不飞花，寒食东风御柳斜。</p>
<span id="more"></span>
<h2 id="终端一键换源："><a href="#终端一键换源：" class="headerlink" title="终端一键换源："></a>终端一键换源：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip config <span class="built_in">set</span> <span class="keyword">global</span>.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>
<h2 id="kali"><a href="#kali" class="headerlink" title="kali"></a>kali</h2><p>运行python脚本：</p>
<p><code>sage -python test.py</code> </p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/images5df9c77033d5983aef2b5527fde5553.png" alt="5df9c77033d5983aef2b5527fde5553"></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/images60ab45c8df93d9419a4736faed043f0.png" alt="60ab45c8df93d9419a4736faed043f0"></p>
<p>我一般把sage脚本也写成 <code>.py</code> 文件了，然后运行，就报错 语法错误</p>
<p>所以改为 .sage 拓展名好点，运行：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagese2071ffe9abc1df21edc147a2f03580.png" alt="e2071ffe9abc1df21edc147a2f03580"></p>
<hr>
<p>此时你会发现他生成了一个 <code>.sage.py</code> 文件 ，也就是 <code>.py</code> 文件（可编译文件，类似Java，先<code>javac</code>生成的 <code>.class</code> ）</p>
<p>此时再用    <code>python test.sage.py</code> 就可以了</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagesimage-20240226194954352.png" alt="image-20240226194954352"></p>
<p>这样切换也有一个好处，就是sage里报的一些类型错误在python不会报错，如下</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagesH5}Q7A~FYQJ7F35R2G9ELQL.png" alt="H5}Q7A~FYQJ7F35R2G9ELQL"></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/images1cb1616e95bb5893fa0ccaca6ee51a0.png" alt="1cb1616e95bb5893fa0ccaca6ee51a0"></p>
<hr>
<p>sage脚本所用库是和本地分开的，要去 sage 里安装库</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/images084853db0f40c8a82a0c1c23742bf59.png" alt="084853db0f40c8a82a0c1c23742bf59"></p>
<p>或者用这个命令安装：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo sage -python -m pip install xxx -i https://pypi.tuna.tsinghua.edu.cn/simple/</span><br></pre></td></tr></table></figure>
<h2 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h2><h3 id="vim命令创建文本"><a href="#vim命令创建文本" class="headerlink" title="vim命令创建文本"></a>vim命令创建文本</h3><p>vim [文件名.拓展名]</p>
<p>如 <code>vim test.sage</code></p>
<p>有四种模式：</p>
<p>1，正常模式：</p>
<p>创建后直接进入，或按 <code>Esc</code>进入，可进行正常的浏览、复制、粘贴、</p>
<p>2，插入模式：</p>
<p>可编辑</p>
<p>3，命令模式：</p>
<p>在正常模式下，按 <code>：</code> 或者 <code>/</code> , 可执行一些命令，如退出并保存 编辑内容  <code>:wq</code> </p>
<p>4,可视模式</p>
<p>感觉还没什么用处</p>
<h3 id="运行sage脚本"><a href="#运行sage脚本" class="headerlink" title="运行sage脚本"></a>运行sage脚本</h3><p><code>sage test.sage</code></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/images8d41196b89124bd60d23546ba9bf0a1.png" alt="8d41196b89124bd60d23546ba9bf0a1"></p>
<p>此时会报一个模块(库)错误</p>
<p>直接安装也不行，还是报错</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/images52b816f713641e653f854c933221269.png" alt="52b816f713641e653f854c933221269"></p>
<p>如上，去 sage 里安装</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/images278215e8f2969609eeddf5ad98dd73c.png" alt="278215e8f2969609eeddf5ad98dd73c"></p>
<p>然后运行：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/images2ce2299429b6fa27651a4cb03793b7e.png" alt="2ce2299429b6fa27651a4cb03793b7e"></p>
<hr>
<p>如果还是报错，卸了重下：</p>
<p><code>pip uninstall +库名</code></p>
<p>如 <code>pip uninstall pycryptodome</code></p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>sage</tag>
      </tags>
  </entry>
  <entry>
    <title>MT19937实战</title>
    <url>/Crypto/MT19937%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<p><strong>人间何所以，观风与月舒。</strong> </p>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>回首看<code>MT19937</code>，似乎当脚本小子也不错，常规的四种题型是可以解的，魔改的大概也只能去啃原理了</p>
<p>此篇仅供常规解题所需</p>
<hr>
<h1 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h1><h2 id="NKCTF2023-real-MT"><a href="#NKCTF2023-real-MT" class="headerlink" title="[NKCTF2023]real_MT"></a>[NKCTF2023]real_MT</h2><blockquote>
<p>题目：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guess_number_1</span>():</span><br><span class="line">    randoms = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">208</span>):</span><br><span class="line">        randoms.append(random.getrandbits(<span class="number">96</span>))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;randoms = &quot;</span>+<span class="built_in">str</span>(randoms))</span><br><span class="line">    number = <span class="built_in">str</span>(random.getrandbits(<span class="number">96</span>))</span><br><span class="line">    guess = <span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&quot;Guess after number:&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> guess != number:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Wrong Number! Guess again.&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guess_number_2</span>():</span><br><span class="line">    number = <span class="built_in">str</span>(random.getrandbits(<span class="number">96</span>))</span><br><span class="line">    randoms = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">627</span>):</span><br><span class="line">        randoms.append(random.getrandbits(<span class="number">32</span>))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;randoms = &quot;</span>+<span class="built_in">str</span>(randoms))</span><br><span class="line">    guess = <span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&quot;Guess pre number:&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> guess != number:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Wrong Number! Guess again.&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guess_number_3</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_int32</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(<span class="number">0xFFFFFFFF</span> &amp; x)  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init</span>(<span class="params">seed</span>):</span><br><span class="line">        mt = [<span class="number">0</span>] * <span class="number">624</span></span><br><span class="line">        mt[<span class="number">0</span>] = seed</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">624</span>):</span><br><span class="line">            mt[i] = _int32(<span class="number">1812433253</span> * (mt[i - <span class="number">1</span>] ^ mt[i - <span class="number">1</span>] &gt;&gt; <span class="number">30</span>) + i)</span><br><span class="line">        <span class="keyword">return</span> mt[-<span class="number">1</span>]</span><br><span class="line">    number = random.getrandbits(<span class="number">32</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;last number = &quot;</span>+ <span class="built_in">str</span>(init(number)))</span><br><span class="line">    guess = <span class="built_in">int</span>(<span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&quot;Guess seed number:&quot;</span>)))</span><br><span class="line">    <span class="keyword">if</span> guess != number:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Wrong Number! Guess again.&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guess_number_4</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_number</span>(<span class="params">y</span>):</span><br><span class="line">        y = y ^ y &gt;&gt; <span class="number">11</span></span><br><span class="line">        y = y ^ y &lt;&lt; <span class="number">7</span> &amp; <span class="number">2636928640</span></span><br><span class="line">        y = y ^ y &lt;&lt; <span class="number">15</span> &amp; <span class="number">4022730752</span></span><br><span class="line">        y = y ^ y &gt;&gt; <span class="number">18</span></span><br><span class="line">        <span class="keyword">return</span> y&amp;<span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line">    number = random.getrandbits(<span class="number">32</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;extract number = &quot;</span>+ <span class="built_in">str</span>(extract_number(number)))</span><br><span class="line">    guess = <span class="built_in">int</span>(<span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&quot;Guess be extracted number:&quot;</span>)))</span><br><span class="line">    <span class="keyword">if</span> guess != number:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Wrong Number! Guess again.&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Welcome to the Mersenne Twister basic challenge. Please try to solve 20 challenges in 60 seconds.&quot;</span>)</span><br><span class="line">signal.alarm(<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Round: &quot;</span>+<span class="built_in">str</span>(i+<span class="number">1</span>))</span><br><span class="line">    random.choice([guess_number_1,guess_number_2,guess_number_3,guess_number_4])()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Good job!&quot;</span>)</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&#x27;/flag&#x27;</span>).read()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Congratulations on passing the challenge. This is your flag: &quot;</span> + <span class="built_in">str</span>(flag))</span><br></pre></td></tr></table></figure>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>四种情况先逐个分析吧：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">guess_number_3</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_int32</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(<span class="number">0xFFFFFFFF</span> &amp; x)  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init</span>(<span class="params">seed</span>):</span><br><span class="line">        mt = [<span class="number">0</span>] * <span class="number">624</span></span><br><span class="line">        mt[<span class="number">0</span>] = seed</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">624</span>):</span><br><span class="line">            mt[i] = _int32(<span class="number">1812433253</span> * (mt[i - <span class="number">1</span>] ^ mt[i - <span class="number">1</span>] &gt;&gt; <span class="number">30</span>) + i)</span><br><span class="line">        <span class="keyword">return</span> mt[-<span class="number">1</span>]</span><br><span class="line">    number = random.getrandbits(<span class="number">32</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;last number = &quot;</span>+ <span class="built_in">str</span>(init(number)))</span><br><span class="line">    guess = <span class="built_in">int</span>(<span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&quot;Guess seed number:&quot;</span>)))</span><br><span class="line">    <span class="keyword">if</span> guess != number:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Wrong Number! Guess again.&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guess_number_4</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_number</span>(<span class="params">y</span>):</span><br><span class="line">        y = y ^ y &gt;&gt; <span class="number">11</span></span><br><span class="line">        y = y ^ y &lt;&lt; <span class="number">7</span> &amp; <span class="number">2636928640</span></span><br><span class="line">        y = y ^ y &lt;&lt; <span class="number">15</span> &amp; <span class="number">4022730752</span></span><br><span class="line">        y = y ^ y &gt;&gt; <span class="number">18</span></span><br><span class="line">        <span class="keyword">return</span> y&amp;<span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line">    number = random.getrandbits(<span class="number">32</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;extract number = &quot;</span>+ <span class="built_in">str</span>(extract_number(number)))</span><br><span class="line">    guess = <span class="built_in">int</span>(<span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&quot;Guess be extracted number:&quot;</span>)))</span><br><span class="line">    <span class="keyword">if</span> guess != number:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Wrong Number! Guess again.&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>这两个直接跟着<code>badmonkey</code>师傅无脑代就行：<span class="exturl" data-url="aHR0cHM6Ly9iYWRtb25rZXkuc2l0ZS9hcmNoaXZlcy9tdDE5OTM3I+mimOWeizIt6aKE5rWL6ZqP5py65pWw">浅析MT19937伪随机数生成算法 - badmonkey<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="求seed"><a href="#求seed" class="headerlink" title="求seed"></a>求seed</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 3 seed</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_int32</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(<span class="number">0xFFFFFFFF</span> &amp; x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">invert_right</span>(<span class="params">res,shift</span>):</span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>//shift):</span><br><span class="line">        res = tmp^res&gt;&gt;shift</span><br><span class="line">    <span class="keyword">return</span> _int32(res)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recover</span>(<span class="params">last</span>):</span><br><span class="line">    n = <span class="number">1</span>&lt;&lt;<span class="number">32</span></span><br><span class="line">    inv = invert(<span class="number">1812433253</span>,n)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">623</span>,<span class="number">0</span>,-<span class="number">1</span>):</span><br><span class="line">        last = ((last-i)*inv)%n</span><br><span class="line">        last = invert_right(last,<span class="number">30</span>)</span><br><span class="line">    <span class="keyword">return</span> last</span><br><span class="line">seed = <span class="number">578972588</span></span><br><span class="line"><span class="built_in">print</span>(recover(seed))</span><br></pre></td></tr></table></figure>
<h3 id="求extracted"><a href="#求extracted" class="headerlink" title="求extracted"></a>求extracted</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 4 extracted</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># right shift inverse</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inverse_right</span>(<span class="params">res, shift, bits=<span class="number">32</span></span>):</span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // shift):</span><br><span class="line">        tmp = res ^ tmp &gt;&gt; shift</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># left shift with mask inverse</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inverse_left_mask</span>(<span class="params">res, shift, mask, bits=<span class="number">32</span></span>):</span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits // shift):</span><br><span class="line">        tmp = res ^ tmp &lt;&lt; shift &amp; mask</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recover</span>(<span class="params">y</span>):</span><br><span class="line">    y = inverse_right(y,<span class="number">18</span>)</span><br><span class="line">    y = inverse_left_mask(y,<span class="number">15</span>,<span class="number">4022730752</span>)</span><br><span class="line">    y = inverse_left_mask(y,<span class="number">7</span>,<span class="number">2636928640</span>)</span><br><span class="line">    y = inverse_right(y,<span class="number">11</span>)</span><br><span class="line">    <span class="keyword">return</span> y&amp;<span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line">extract = <span class="number">1531729985</span></span><br><span class="line"><span class="built_in">print</span>(recover(extract))</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="预测随机数"><a href="#预测随机数" class="headerlink" title="预测随机数"></a>预测随机数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">guess_number_1</span>():</span><br><span class="line">    randoms = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">208</span>):</span><br><span class="line">        randoms.append(random.getrandbits(<span class="number">96</span>))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;randoms = &quot;</span>+<span class="built_in">str</span>(randoms))</span><br><span class="line">    number = <span class="built_in">str</span>(random.getrandbits(<span class="number">96</span>))</span><br><span class="line">    guess = <span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&quot;Guess after number:&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> guess != number:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Wrong Number! Guess again.&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>预测后面的一个<code>96bit</code>的随机数</p>
<p>常规的每个数都是<code>32bit</code>，而这里<code>badmonkey师傅</code>给的也是预测<code>32bit</code>数的脚本，所以我们要想办法把<code>96bit</code>的数转换成<code>3</code>个<code>32bit</code>的数，观察如下测试代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.seed(<span class="number">1</span>)  <span class="comment">#掷随机数种子为1从而确保随机数产生的一致性</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(random.getrandbits(<span class="number">32</span>)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(random.getrandbits(<span class="number">32</span>)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(random.getrandbits(<span class="number">32</span>)))</span><br><span class="line">random.seed(<span class="number">1</span>)  <span class="comment">#重新掷随机数种子</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(random.getrandbits(<span class="number">96</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x2265b1f5</span></span><br><span class="line"><span class="comment"># 0x91b7584a</span></span><br><span class="line"><span class="comment"># 0xd8f16adf</span></span><br><span class="line"><span class="comment"># 0xd8f16adf91b7584a2265b1f5</span></span><br></pre></td></tr></table></figure>
<p>可以看到一个<code>96bit</code>随机数是由三个连续的<code>32bit</code>随机数拼接而成的，并且第三个随机数为高位，第一个随机数为低位，所以我们修改一下代码即可：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> randoms:</span><br><span class="line">    a = <span class="built_in">hex</span>(i)[<span class="number">2</span>:]</span><br><span class="line">    c.append(<span class="built_in">int</span>(a[<span class="built_in">len</span>(a) // <span class="number">3</span> * <span class="number">2</span>:], <span class="number">16</span>))</span><br><span class="line">    c.append(<span class="built_in">int</span>(a[<span class="built_in">len</span>(a)//<span class="number">3</span>:<span class="built_in">len</span>(a)//<span class="number">3</span>*<span class="number">2</span>],<span class="number">16</span>))</span><br><span class="line">    c.append(<span class="built_in">int</span>(a[:<span class="built_in">len</span>(a) // <span class="number">3</span>], <span class="number">16</span>))</span><br></pre></td></tr></table></figure>
<p><code>64bit</code>随机数同样如此，如下是预测随机数脚本（有点很奇怪，有次测试的时候预测结果错了，但其他的是正确的）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1 after number</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> Random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">invert_right</span>(<span class="params">m,l,val=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">    length = <span class="number">32</span></span><br><span class="line">    mx = <span class="number">0xffffffff</span></span><br><span class="line">    <span class="keyword">if</span> val == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        val = mx</span><br><span class="line">    i,res = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i*l&lt;length:</span><br><span class="line">        mask = (mx&lt;&lt;(length-l)&amp;mx)&gt;&gt;i*l</span><br><span class="line">        tmp = m &amp; mask</span><br><span class="line">        m = m^tmp&gt;&gt;l&amp;val</span><br><span class="line">        res += tmp</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">invert_left</span>(<span class="params">m,l,val</span>):</span><br><span class="line">    length = <span class="number">32</span></span><br><span class="line">    mx = <span class="number">0xffffffff</span></span><br><span class="line">    i,res = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i*l &lt; length:</span><br><span class="line">        mask = (mx&gt;&gt;(length-l)&amp;mx)&lt;&lt;i*l</span><br><span class="line">        tmp = m &amp; mask</span><br><span class="line">        m ^= tmp&lt;&lt;l&amp;val</span><br><span class="line">        res |= tmp</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">invert_temper</span>(<span class="params">m</span>):</span><br><span class="line">    m = invert_right(m,<span class="number">18</span>)</span><br><span class="line">    m = invert_left(m,<span class="number">15</span>,<span class="number">4022730752</span>)</span><br><span class="line">    m = invert_left(m,<span class="number">7</span>,<span class="number">2636928640</span>)</span><br><span class="line">    m = invert_right(m,<span class="number">11</span>)</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clone_mt</span>(<span class="params">record</span>):</span><br><span class="line">    state = [invert_temper(i) <span class="keyword">for</span> i <span class="keyword">in</span> record]</span><br><span class="line">    gen = Random()</span><br><span class="line">    gen.setstate((<span class="number">3</span>,<span class="built_in">tuple</span>(state+[<span class="number">0</span>]),<span class="literal">None</span>))</span><br><span class="line">    <span class="keyword">return</span> gen</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">randoms = [<span class="number">55015607074857799292945552290</span>, <span class="number">49368042755482977011736956173</span>, <span class="number">40475374240531115107595906636</span>, <span class="number">52147615048581670023735755450</span>, <span class="number">13432490767545507105189747763</span>, <span class="number">24440678017972777884814646255</span>, <span class="number">32822903152999092153407655597</span>, <span class="number">8563483583446603233686286354</span>, <span class="number">75732019275746461853540401495</span>, <span class="number">36842332206659125653150736486</span>, <span class="number">76786413054424156228987909265</span>, <span class="number">78728868918063155711331208027</span>, <span class="number">68111503649325447384558973315</span>, <span class="number">50046539350414059782746722603</span>, <span class="number">33122956341131312047186478550</span>, <span class="number">47134379833914353599100802574</span>, <span class="number">14506941828436962820850816482</span>, <span class="number">16254006011206386851511190777</span>, <span class="number">53774746810651233261166083709</span>, <span class="number">57317412206054586514985875280</span>, <span class="number">43011044274622942766585189176</span>, <span class="number">21510983328491776879720475647</span>, <span class="number">68805188235988349436606490157</span>, <span class="number">68293687378252177576750854213</span>, <span class="number">64020092712881170155616652147</span>, <span class="number">58788852915482172394398327520</span>, <span class="number">20534731592145885333097885636</span>, <span class="number">71497885157511490073528334436</span>, <span class="number">50079126675284942137464435871</span>, <span class="number">16433905363688130336892639414</span>, <span class="number">10833644831894048938957163773</span>, <span class="number">61837597918870726435017132850</span>, <span class="number">50007378472767284514600652443</span>, <span class="number">13242758280359098364681702807</span>, <span class="number">48040447462883040840110279722</span>, <span class="number">48653833299736009023667402599</span>, <span class="number">61877052829753339768672826777</span>, <span class="number">55104138447302791542841950167</span>, <span class="number">59956782054709979669719351421</span>, <span class="number">33622933736356173639796248572</span>, <span class="number">70720508316358691710097244967</span>, <span class="number">26438465850133558815351580879</span>, <span class="number">12121649600344247919530245458</span>, <span class="number">59429702128155774929559418436</span>, <span class="number">8461855977540480946850517835</span>, <span class="number">35371049050859796434557316156</span>, <span class="number">74900517442122255478113670139</span>, <span class="number">56015804116725775644082181473</span>, <span class="number">54019918704797178896937181953</span>, <span class="number">46449490759360975867530830160</span>, <span class="number">21716938523285444592131111037</span>, <span class="number">4075915261354769937217394891</span>, <span class="number">71101712150556394609286976122</span>, <span class="number">77514446308635805069858161218</span>, <span class="number">30443551680738939325710619401</span>, <span class="number">51330659874633330020137362887</span>, <span class="number">16870162608087608659692436972</span>, <span class="number">36332661698483296611490764287</span>, <span class="number">38912147134106871206560383319</span>, <span class="number">66798268847122499800706103042</span>, <span class="number">241691625661529797405764102</span>, <span class="number">9680620382995429570437419894</span>, <span class="number">54281462677774536994926184946</span>, <span class="number">49156921844074280073449443668</span>, <span class="number">47003617901112210542122896375</span>, <span class="number">20630134319865926707841141605</span>, <span class="number">38539127713936043329828502512</span>, <span class="number">37765649689660950654295018296</span>, <span class="number">27519165366018178520157118526</span>, <span class="number">47311700897513991864703815914</span>, <span class="number">14844131572803548743566512704</span>, <span class="number">72315716735652440986087523229</span>, <span class="number">46411344686639197025534075618</span>, <span class="number">13959184897278020398348948659</span>, <span class="number">2079854302954576073339089565</span>, <span class="number">39428786840574943257095970633</span>, <span class="number">33458396202396229906230251418</span>, <span class="number">69814672396568547483000493475</span>, <span class="number">28451062576030293943028542769</span>, <span class="number">3150653107998963723272095718</span>, <span class="number">20792548261825482531270352147</span>, <span class="number">69131192563757378564191442243</span>, <span class="number">73581103283131546986544846269</span>, <span class="number">32168289412017414311931877308</span>, <span class="number">55734763237596421172118618970</span>, <span class="number">37808961718727478136990696303</span>, <span class="number">22904874676153031620664377715</span>, <span class="number">9794575345156074603503087671</span>, <span class="number">22456694023771898844190118878</span>, <span class="number">49901970266243771395136385496</span>, <span class="number">63113371794658901555756959046</span>, <span class="number">68738124366682093927457951250</span>, <span class="number">23306235486349427954282639191</span>, <span class="number">43594485853233707551383467628</span>, <span class="number">50747180681744235554964992870</span>, <span class="number">49862479356739272497472347214</span>, <span class="number">38434690316151369964072773399</span>, <span class="number">71467050353277898958372067109</span>, <span class="number">55346669078871118497310884600</span>, <span class="number">46017420217054938248863989011</span>, <span class="number">75363033386622698885356870859</span>, <span class="number">10369764848153462639554152052</span>, <span class="number">75890142526899080264345852084</span>, <span class="number">9535759402085584783757952808</span>, <span class="number">43522044721852245514275493334</span>, <span class="number">12464589274296723227328792626</span>, <span class="number">78676543113595295732206638118</span>, <span class="number">60116759495604753189426160756</span>, <span class="number">69969854635185954403204801589</span>, <span class="number">15244509737688480815229679004</span>, <span class="number">36868877814286665666603704724</span>, <span class="number">25296352719228197917967642599</span>, <span class="number">27714369660917369969714529637</span>, <span class="number">7673110772037676634707790378</span>, <span class="number">66678444104365177982652169620</span>, <span class="number">46842636677378560041798283187</span>, <span class="number">10144943294980146082555306558</span>, <span class="number">28284306659807251586984133000</span>, <span class="number">33490472759408013029651749585</span>, <span class="number">77977414783931140205233073617</span>, <span class="number">69530485613806297267022583522</span>, <span class="number">76520003652664840680181807019</span>, <span class="number">46932273878708136776868709933</span>, <span class="number">55587849334378587663972698777</span>, <span class="number">288744469797385122841458086</span>, <span class="number">41277555669463912046072519012</span>, <span class="number">4464200409916053651301885032</span>, <span class="number">40054592246599648525169317693</span>, <span class="number">19475356311294822865721674381</span>, <span class="number">78967801470334524961687238739</span>, <span class="number">75822644069771873149506932458</span>, <span class="number">43938875242093048649223251016</span>, <span class="number">38961281929520042194905361090</span>, <span class="number">21610082723530059512385550253</span>, <span class="number">57418757224608120261793422587</span>, <span class="number">72515591359993311229453026924</span>, <span class="number">53301906528555214119355718384</span>, <span class="number">62399938403321209620318734938</span>, <span class="number">29562948809863356281824237526</span>, <span class="number">64690511731475499536620402074</span>, <span class="number">61422219087048013104282624678</span>, <span class="number">20023299367896362817857259034</span>, <span class="number">1531978217124909227300934212</span>, <span class="number">8362602216400318325888882470</span>, <span class="number">75999045381397120509496119808</span>, <span class="number">24819648371744754442222408890</span>, <span class="number">75932237139374495603284677727</span>, <span class="number">11591629473858684168400446684</span>, <span class="number">75483926784518263475169289687</span>, <span class="number">55768847294454228602227998151</span>, <span class="number">35105596201056028460562538709</span>, <span class="number">48075470868361149890782793466</span>, <span class="number">68011918805791011054681166147</span>, <span class="number">71379711286148023971490418355</span>, <span class="number">5119093941579935754141497093</span>, <span class="number">53547827525583375748301266038</span>, <span class="number">8537501347007365109158293206</span>, <span class="number">49644668676789081527660032954</span>, <span class="number">22515713345276622847996100404</span>, <span class="number">55307392324473859445909519983</span>, <span class="number">10994480124121534718832780851</span>, <span class="number">65533932078012255426667262659</span>, <span class="number">43392581419477495155490691253</span>, <span class="number">6149858215235626580350564774</span>, <span class="number">11427015895083257860925651246</span>, <span class="number">1213227811506969183950341669</span>, <span class="number">35938550903795041826608209051</span>, <span class="number">73091816395793401072374399076</span>, <span class="number">12197443447940928492569868668</span>, <span class="number">25301621853357018223709312786</span>, <span class="number">5689796934241659738266713001</span>, <span class="number">2613230292238434599188292344</span>, <span class="number">42124474617992669523056747325</span>, <span class="number">35194954579809956401055788693</span>, <span class="number">50290306214852192605264941404</span>, <span class="number">11584578367073737286597097637</span>, <span class="number">23330546567461178065917588032</span>, <span class="number">31343688234160714794757165377</span>, <span class="number">63918823993048504659024692114</span>, <span class="number">27365510636493497037417818163</span>, <span class="number">30638666912149387553328229778</span>, <span class="number">54531935194478667388418879230</span>, <span class="number">41072843969336419779445369322</span>, <span class="number">60930376536086388437175835196</span>, <span class="number">55947262970830901337865668896</span>, <span class="number">44515932960074495211895851717</span>, <span class="number">14252286294934938035868124826</span>, <span class="number">35800368864810336116694682268</span>, <span class="number">70076466250975352052336380744</span>, <span class="number">3518883683220809834826882516</span>, <span class="number">21235446402566298534375767444</span>, <span class="number">35231908696746966244552935642</span>, <span class="number">14398535620050895095986981975</span>, <span class="number">19103988715582383425140328987</span>, <span class="number">14062642498531815460021440383</span>, <span class="number">77110266168617581807736354811</span>, <span class="number">54409146707444728728561076439</span>, <span class="number">64253672045037421891482500882</span>, <span class="number">36181743183047944158650802993</span>, <span class="number">26890907171354385267615627636</span>, <span class="number">45223610791479728329076327440</span>, <span class="number">16690474955515435722262505229</span>, <span class="number">2814228033061481589868246822</span>, <span class="number">77863107456708086832326043708</span>, <span class="number">1351886029839065156773853534</span>, <span class="number">65968244564445520569592572140</span>, <span class="number">35354808513582870523085136830</span>, <span class="number">52007148783750186143061130576</span>]</span><br><span class="line"></span><br><span class="line">c = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> randoms:</span><br><span class="line">    a = <span class="built_in">hex</span>(i)[<span class="number">2</span>:]</span><br><span class="line">    c.append(<span class="built_in">int</span>(a[<span class="built_in">len</span>(a) // <span class="number">3</span> * <span class="number">2</span>:], <span class="number">16</span>))</span><br><span class="line">    c.append(<span class="built_in">int</span>(a[<span class="built_in">len</span>(a)//<span class="number">3</span>:<span class="built_in">len</span>(a)//<span class="number">3</span>*<span class="number">2</span>],<span class="number">16</span>))</span><br><span class="line">    c.append(<span class="built_in">int</span>(a[:<span class="built_in">len</span>(a) // <span class="number">3</span>], <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line">g = clone_mt(c)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">208</span>):</span><br><span class="line">    g.getrandbits(<span class="number">96</span>)</span><br><span class="line"></span><br><span class="line">after = g.getrandbits(<span class="number">96</span>)</span><br><span class="line"><span class="built_in">print</span>(after)</span><br><span class="line"><span class="comment"># 73177359307009435987099712513</span></span><br></pre></td></tr></table></figure>
<h3 id="回溯pre-number"><a href="#回溯pre-number" class="headerlink" title="回溯pre number"></a>回溯pre number</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">guess_number_2</span>():</span><br><span class="line">    number = <span class="built_in">str</span>(random.getrandbits(<span class="number">96</span>))</span><br><span class="line">    randoms = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">627</span>):</span><br><span class="line">        randoms.append(random.getrandbits(<span class="number">32</span>))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;randoms = &quot;</span>+<span class="built_in">str</span>(randoms))</span><br><span class="line">    guess = <span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&quot;Guess pre number:&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> guess != number:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Wrong Number! Guess again.&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>这里我倒是把<code>state = backtrace([0]*4+partS)[:624]</code> 调成了<code>[1:625]</code>，不知道是啥原因结果就正确了，做题时倒是可以尝试多调试一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 2 pre number</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> Random</span><br><span class="line"><span class="comment"># right shift inverse</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inverse_right</span>(<span class="params">res,shift,bits=<span class="number">32</span></span>):</span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits//shift):</span><br><span class="line">        tmp = res ^ tmp &gt;&gt; shift</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># left shift with mask inverse</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inverse_left_values</span>(<span class="params">res,shift,mask,bits=<span class="number">32</span></span>):</span><br><span class="line">    tmp = res</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits//shift):</span><br><span class="line">        tmp = res ^ tmp &lt;&lt; shift &amp; mask</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">backtrace</span>(<span class="params">cur</span>):</span><br><span class="line">    high = <span class="number">0x80000000</span></span><br><span class="line">    low = <span class="number">0x7fffffff</span></span><br><span class="line">    mask = <span class="number">0x9908b0df</span></span><br><span class="line">    state = cur</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">        tmp = state[i+<span class="number">624</span>]^state[i+<span class="number">397</span>]</span><br><span class="line">        <span class="comment"># recover Y,tmp = Y</span></span><br><span class="line">        <span class="keyword">if</span> tmp &amp; high == high:</span><br><span class="line">            tmp ^= mask</span><br><span class="line">            tmp &lt;&lt;= <span class="number">1</span></span><br><span class="line">            tmp |= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp &lt;&lt;=<span class="number">1</span></span><br><span class="line">        <span class="comment"># recover the highest bit</span></span><br><span class="line">        res = tmp&amp;high</span><br><span class="line">        <span class="comment"># recover other 31 bits,when i =0,it just use the method again it so beautiful!!!!</span></span><br><span class="line">        tmp = state[i-<span class="number">1</span>+<span class="number">624</span>]^state[i+<span class="number">396</span>]</span><br><span class="line">        <span class="comment"># recover Y,tmp = Y</span></span><br><span class="line">        <span class="keyword">if</span> tmp &amp; high == high:</span><br><span class="line">            tmp ^= mask</span><br><span class="line">            tmp &lt;&lt;= <span class="number">1</span></span><br><span class="line">            tmp |= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp &lt;&lt;=<span class="number">1</span></span><br><span class="line">        res |= (tmp)&amp;low</span><br><span class="line">        state[i] = res</span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recover_state</span>(<span class="params">out</span>):</span><br><span class="line">    state = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> out:</span><br><span class="line">        i = inverse_right(i,<span class="number">18</span>)</span><br><span class="line">        i = inverse_left_values(i,<span class="number">15</span>,<span class="number">0xefc60000</span>)</span><br><span class="line">        i = inverse_left_values(i,<span class="number">7</span>,<span class="number">0x9d2c5680</span>)</span><br><span class="line">        i = inverse_right(i,<span class="number">11</span>)</span><br><span class="line">        state.append(i)</span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line"></span><br><span class="line">randoms = [<span class="number">3131844436</span>, <span class="number">1710395493</span>, <span class="number">2040128529</span>, <span class="number">484345499</span>, <span class="number">2462793287</span>, <span class="number">3676280954</span>, <span class="number">1262783325</span>, <span class="number">2668249231</span>, <span class="number">1577554939</span>, <span class="number">1094686367</span>, <span class="number">3249775482</span>, <span class="number">2535455373</span>, <span class="number">1580873401</span>, <span class="number">3668020441</span>, <span class="number">600047797</span>, <span class="number">2368372766</span>, <span class="number">4131413888</span>, <span class="number">3881611699</span>, <span class="number">1654375267</span>, <span class="number">1363668945</span>, <span class="number">789513452</span>, <span class="number">3762247007</span>, <span class="number">953812596</span>, <span class="number">1506373208</span>, <span class="number">3472069184</span>, <span class="number">2545441793</span>, <span class="number">2826549707</span>, <span class="number">575091032</span>, <span class="number">1773264197</span>, <span class="number">192501172</span>, <span class="number">721152596</span>, <span class="number">2765035108</span>, <span class="number">1254008657</span>, <span class="number">2817100002</span>, <span class="number">3970642288</span>, <span class="number">1818378227</span>, <span class="number">1140978336</span>, <span class="number">3485195271</span>, <span class="number">386023852</span>, <span class="number">3403435021</span>, <span class="number">1144997183</span>, <span class="number">3945241205</span>, <span class="number">1211988218</span>, <span class="number">3434015373</span>, <span class="number">2046254427</span>, <span class="number">620893433</span>, <span class="number">3293410181</span>, <span class="number">3112865039</span>, <span class="number">1171882312</span>, <span class="number">1264231357</span>, <span class="number">2966804259</span>, <span class="number">43998805</span>, <span class="number">3637672398</span>, <span class="number">2681960565</span>, <span class="number">2709103871</span>, <span class="number">1456705725</span>, <span class="number">1660473171</span>, <span class="number">3820308210</span>, <span class="number">916345361</span>, <span class="number">66696421</span>, <span class="number">1234084934</span>, <span class="number">2260115865</span>, <span class="number">4103495816</span>, <span class="number">1445850634</span>, <span class="number">1688161812</span>, <span class="number">3904081009</span>, <span class="number">2933234077</span>, <span class="number">3523756803</span>, <span class="number">490871410</span>, <span class="number">2644412567</span>, <span class="number">648761244</span>, <span class="number">3530982511</span>, <span class="number">1024884722</span>, <span class="number">383286216</span>, <span class="number">2204575995</span>, <span class="number">3268537218</span>, <span class="number">2908281468</span>, <span class="number">749867101</span>, <span class="number">1077132488</span>, <span class="number">3270723079</span>, <span class="number">3585247012</span>, <span class="number">1269156557</span>, <span class="number">3096777547</span>, <span class="number">1366205746</span>, <span class="number">2642565074</span>, <span class="number">1356154486</span>, <span class="number">2371705450</span>, <span class="number">3277675427</span>, <span class="number">1949359019</span>, <span class="number">3911342223</span>, <span class="number">2302199881</span>, <span class="number">1787074024</span>, <span class="number">1176483441</span>, <span class="number">3382524643</span>, <span class="number">1726938894</span>, <span class="number">3732701826</span>, <span class="number">3873136097</span>, <span class="number">648865101</span>, <span class="number">1373666656</span>, <span class="number">1977863320</span>, <span class="number">2275109604</span>, <span class="number">1452217785</span>, <span class="number">2796416538</span>, <span class="number">4169530804</span>, <span class="number">903377449</span>, <span class="number">1230239737</span>, <span class="number">1392065473</span>, <span class="number">3204364427</span>, <span class="number">334317583</span>, <span class="number">2956184008</span>, <span class="number">2411445068</span>, <span class="number">41487849</span>, <span class="number">721765697</span>, <span class="number">1443541315</span>, <span class="number">2093099003</span>, <span class="number">893095099</span>, <span class="number">4074956390</span>, <span class="number">3098600401</span>, <span class="number">314246690</span>, <span class="number">1836298915</span>, <span class="number">651584091</span>, <span class="number">1915188462</span>, <span class="number">2767672465</span>, <span class="number">2165385064</span>, <span class="number">1519266519</span>, <span class="number">4022389379</span>, <span class="number">1728592657</span>, <span class="number">4225918363</span>, <span class="number">1086688090</span>, <span class="number">2667629859</span>, <span class="number">2236562855</span>, <span class="number">397758955</span>, <span class="number">3266197863</span>, <span class="number">1547047859</span>, <span class="number">1769483950</span>, <span class="number">1054690627</span>, <span class="number">3821081636</span>, <span class="number">4243049300</span>, <span class="number">2113976324</span>, <span class="number">3465256288</span>, <span class="number">3394237832</span>, <span class="number">1447852828</span>, <span class="number">3375689141</span>, <span class="number">3469852507</span>, <span class="number">108642640</span>, <span class="number">1417582614</span>, <span class="number">2226381889</span>, <span class="number">1108355161</span>, <span class="number">1107879584</span>, <span class="number">994843797</span>, <span class="number">3134161877</span>, <span class="number">1827259162</span>, <span class="number">2541380730</span>, <span class="number">1414991982</span>, <span class="number">66563096</span>, <span class="number">17558729</span>, <span class="number">2523246427</span>, <span class="number">2306870077</span>, <span class="number">4229357864</span>, <span class="number">1794849582</span>, <span class="number">342768726</span>, <span class="number">2537134735</span>, <span class="number">3992316097</span>, <span class="number">2390770768</span>, <span class="number">58919292</span>, <span class="number">3299454886</span>, <span class="number">47094719</span>, <span class="number">192273779</span>, <span class="number">576620652</span>, <span class="number">2653473543</span>, <span class="number">732566086</span>, <span class="number">3494470827</span>, <span class="number">375184426</span>, <span class="number">3046525929</span>, <span class="number">1917007196</span>, <span class="number">437621599</span>, <span class="number">226187925</span>, <span class="number">279460746</span>, <span class="number">2504991047</span>, <span class="number">2720647095</span>, <span class="number">1726214839</span>, <span class="number">2662580336</span>, <span class="number">310633501</span>, <span class="number">4201239133</span>, <span class="number">1411404284</span>, <span class="number">2797124852</span>, <span class="number">1009997203</span>, <span class="number">1619452767</span>, <span class="number">542751538</span>, <span class="number">2044343202</span>, <span class="number">634443864</span>, <span class="number">779388116</span>, <span class="number">1029257449</span>, <span class="number">214975482</span>, <span class="number">3625137656</span>, <span class="number">70328808</span>, <span class="number">3310617589</span>, <span class="number">1031353996</span>, <span class="number">3450854594</span>, <span class="number">679561624</span>, <span class="number">2983441457</span>, <span class="number">2349421851</span>, <span class="number">2795342193</span>, <span class="number">1652530355</span>, <span class="number">677860488</span>, <span class="number">1518458320</span>, <span class="number">3142116487</span>, <span class="number">1973355550</span>, <span class="number">3385226917</span>, <span class="number">823024989</span>, <span class="number">2787730966</span>, <span class="number">2961286907</span>, <span class="number">1903136206</span>, <span class="number">875506150</span>, <span class="number">4174650755</span>, <span class="number">3561996691</span>, <span class="number">1002531559</span>, <span class="number">4128921823</span>, <span class="number">1282902829</span>, <span class="number">1020680621</span>, <span class="number">3136992997</span>, <span class="number">1708678754</span>, <span class="number">1181634294</span>, <span class="number">3235211337</span>, <span class="number">660397562</span>, <span class="number">3060688465</span>, <span class="number">3934130449</span>, <span class="number">608548952</span>, <span class="number">1854108908</span>, <span class="number">4127434065</span>, <span class="number">1301263785</span>, <span class="number">980156946</span>, <span class="number">1702117699</span>, <span class="number">3806397832</span>, <span class="number">4159471046</span>, <span class="number">2458928134</span>, <span class="number">3866388551</span>, <span class="number">3053272844</span>, <span class="number">2378284756</span>, <span class="number">2054070916</span>, <span class="number">3825976364</span>, <span class="number">2336292623</span>, <span class="number">122801644</span>, <span class="number">3993151514</span>, <span class="number">4096144143</span>, <span class="number">3814616160</span>, <span class="number">3994433936</span>, <span class="number">3462289286</span>, <span class="number">4243017170</span>, <span class="number">3426172061</span>, <span class="number">2583801103</span>, <span class="number">212067227</span>, <span class="number">3534029236</span>, <span class="number">36875405</span>, <span class="number">4045543218</span>, <span class="number">187217458</span>, <span class="number">557973024</span>, <span class="number">444948938</span>, <span class="number">4077939216</span>, <span class="number">3268643877</span>, <span class="number">2993470198</span>, <span class="number">1493479975</span>, <span class="number">2130068040</span>, <span class="number">2299545462</span>, <span class="number">830879239</span>, <span class="number">1365763854</span>, <span class="number">478049374</span>, <span class="number">2074554524</span>, <span class="number">1821969699</span>, <span class="number">3959885144</span>, <span class="number">3646002934</span>, <span class="number">2672029263</span>, <span class="number">2753142311</span>, <span class="number">2688990434</span>, <span class="number">1863524787</span>, <span class="number">1040793750</span>, <span class="number">3125785761</span>, <span class="number">3638172148</span>, <span class="number">3540865755</span>, <span class="number">3757848958</span>, <span class="number">1414800242</span>, <span class="number">2928259859</span>, <span class="number">1861735245</span>, <span class="number">4235431182</span>, <span class="number">2862287091</span>, <span class="number">3428851640</span>, <span class="number">486857161</span>, <span class="number">1352945718</span>, <span class="number">3486730778</span>, <span class="number">883640701</span>, <span class="number">1296225663</span>, <span class="number">3655133993</span>, <span class="number">3830695918</span>, <span class="number">4200683490</span>, <span class="number">1115097527</span>, <span class="number">530632520</span>, <span class="number">2536734545</span>, <span class="number">3330209702</span>, <span class="number">692913861</span>, <span class="number">4173632848</span>, <span class="number">4182050947</span>, <span class="number">4099357993</span>, <span class="number">1992990649</span>, <span class="number">2689587606</span>, <span class="number">1397545631</span>, <span class="number">4049403842</span>, <span class="number">4198228871</span>, <span class="number">3313893404</span>, <span class="number">1356111161</span>, <span class="number">2718318666</span>, <span class="number">358872243</span>, <span class="number">1175402713</span>, <span class="number">1456360316</span>, <span class="number">1921597330</span>, <span class="number">1812196593</span>, <span class="number">1076515795</span>, <span class="number">2119895733</span>, <span class="number">3900210292</span>, <span class="number">3619512492</span>, <span class="number">2837094060</span>, <span class="number">167935</span>, <span class="number">2181313587</span>, <span class="number">2341488060</span>, <span class="number">2373964485</span>, <span class="number">952568298</span>, <span class="number">1842854296</span>, <span class="number">4045471217</span>, <span class="number">1939489272</span>, <span class="number">1473031514</span>, <span class="number">3060284468</span>, <span class="number">2661841551</span>, <span class="number">3031889599</span>, <span class="number">2907382437</span>, <span class="number">4286947591</span>, <span class="number">3584889180</span>, <span class="number">3005106221</span>, <span class="number">2727316663</span>, <span class="number">3931261841</span>, <span class="number">3490523908</span>, <span class="number">3780389181</span>, <span class="number">3743857672</span>, <span class="number">765390813</span>, <span class="number">1987225828</span>, <span class="number">2723892340</span>, <span class="number">1163275304</span>, <span class="number">3062347486</span>, <span class="number">2349224851</span>, <span class="number">787739531</span>, <span class="number">378052259</span>, <span class="number">2055505948</span>, <span class="number">3607986110</span>, <span class="number">3432516938</span>, <span class="number">1221088847</span>, <span class="number">3101819143</span>, <span class="number">3556683912</span>, <span class="number">4073221057</span>, <span class="number">577365487</span>, <span class="number">1860652081</span>, <span class="number">711563646</span>, <span class="number">1039004198</span>, <span class="number">2112807179</span>, <span class="number">809098012</span>, <span class="number">2811893098</span>, <span class="number">766665936</span>, <span class="number">2107894153</span>, <span class="number">3205397082</span>, <span class="number">1062442066</span>, <span class="number">3003811473</span>, <span class="number">2495630660</span>, <span class="number">681813468</span>, <span class="number">1247402813</span>, <span class="number">3015978207</span>, <span class="number">1908481948</span>, <span class="number">402536178</span>, <span class="number">1017534355</span>, <span class="number">3137699610</span>, <span class="number">1243214519</span>, <span class="number">2002971476</span>, <span class="number">2751738083</span>, <span class="number">4202633831</span>, <span class="number">2149611209</span>, <span class="number">2901851985</span>, <span class="number">3441366308</span>, <span class="number">1306405097</span>, <span class="number">1436920351</span>, <span class="number">3206822252</span>, <span class="number">3135875087</span>, <span class="number">3112772405</span>, <span class="number">2155012041</span>, <span class="number">4166786019</span>, <span class="number">2388412286</span>, <span class="number">3743595466</span>, <span class="number">1504277877</span>, <span class="number">2570252102</span>, <span class="number">1525324343</span>, <span class="number">3988357159</span>, <span class="number">2041485802</span>, <span class="number">3706379242</span>, <span class="number">1567644399</span>, <span class="number">3629389711</span>, <span class="number">3521760489</span>, <span class="number">2606285630</span>, <span class="number">2378614660</span>, <span class="number">2278092070</span>, <span class="number">3134112923</span>, <span class="number">1103492149</span>, <span class="number">2544530864</span>, <span class="number">1658255844</span>, <span class="number">1898801584</span>, <span class="number">904222527</span>, <span class="number">2957105662</span>, <span class="number">3389876719</span>, <span class="number">2456986124</span>, <span class="number">2695204025</span>, <span class="number">646113342</span>, <span class="number">4091650903</span>, <span class="number">2199478453</span>, <span class="number">3706005283</span>, <span class="number">612268437</span>, <span class="number">2484284336</span>, <span class="number">2662191700</span>, <span class="number">1940190622</span>, <span class="number">233733292</span>, <span class="number">4012212083</span>, <span class="number">2500822436</span>, <span class="number">541451268</span>, <span class="number">643453712</span>, <span class="number">3232122867</span>, <span class="number">3584484460</span>, <span class="number">648833258</span>, <span class="number">1768628917</span>, <span class="number">3984796041</span>, <span class="number">1411122343</span>, <span class="number">2111633947</span>, <span class="number">4054603898</span>, <span class="number">3486423013</span>, <span class="number">1936378246</span>, <span class="number">2642145436</span>, <span class="number">3750457204</span>, <span class="number">4014965456</span>, <span class="number">1555132787</span>, <span class="number">1596915262</span>, <span class="number">3543904379</span>, <span class="number">221214936</span>, <span class="number">3568886655</span>, <span class="number">509377956</span>, <span class="number">2735720233</span>, <span class="number">2280845785</span>, <span class="number">2244193115</span>, <span class="number">2491466696</span>, <span class="number">2899402863</span>, <span class="number">3409575433</span>, <span class="number">4090467960</span>, <span class="number">2298184706</span>, <span class="number">3445239101</span>, <span class="number">3543853500</span>, <span class="number">3002886346</span>, <span class="number">1957091440</span>, <span class="number">2232700177</span>, <span class="number">1214082317</span>, <span class="number">3253617000</span>, <span class="number">612662508</span>, <span class="number">1967176113</span>, <span class="number">1477788048</span>, <span class="number">2598998495</span>, <span class="number">3732580449</span>, <span class="number">3526698478</span>, <span class="number">3205961233</span>, <span class="number">1596289512</span>, <span class="number">3563960905</span>, <span class="number">701926946</span>, <span class="number">2091717748</span>, <span class="number">497084240</span>, <span class="number">1431153592</span>, <span class="number">2121887464</span>, <span class="number">2717201053</span>, <span class="number">1708163770</span>, <span class="number">2288780659</span>, <span class="number">695843074</span>, <span class="number">1804583145</span>, <span class="number">3549082991</span>, <span class="number">2132631780</span>, <span class="number">1404284920</span>, <span class="number">1812914597</span>, <span class="number">3786808737</span>, <span class="number">1238178729</span>, <span class="number">144709682</span>, <span class="number">2720425065</span>, <span class="number">2567630528</span>, <span class="number">3687426833</span>, <span class="number">921498776</span>, <span class="number">3846928815</span>, <span class="number">3992245405</span>, <span class="number">1523301292</span>, <span class="number">2975368564</span>, <span class="number">2794392842</span>, <span class="number">3915184151</span>, <span class="number">2374520221</span>, <span class="number">3570983257</span>, <span class="number">576777516</span>, <span class="number">434172278</span>, <span class="number">3432585614</span>, <span class="number">2488328901</span>, <span class="number">3502901745</span>, <span class="number">2189466832</span>, <span class="number">3258959396</span>, <span class="number">3652453078</span>, <span class="number">2646058339</span>, <span class="number">1487691505</span>, <span class="number">3489122606</span>, <span class="number">2095120777</span>, <span class="number">3444908045</span>, <span class="number">2169560914</span>, <span class="number">1142429299</span>, <span class="number">3290048052</span>, <span class="number">2989735964</span>, <span class="number">3394182052</span>, <span class="number">629348441</span>, <span class="number">3819996826</span>, <span class="number">45644271</span>, <span class="number">490572833</span>, <span class="number">497254234</span>, <span class="number">454033500</span>, <span class="number">4139957703</span>, <span class="number">1469582655</span>, <span class="number">1871913285</span>, <span class="number">3541204007</span>, <span class="number">1168363870</span>, <span class="number">887995922</span>, <span class="number">2876697335</span>, <span class="number">183207833</span>, <span class="number">3610125137</span>, <span class="number">3750324442</span>, <span class="number">1492867425</span>, <span class="number">3047407108</span>, <span class="number">3149823622</span>, <span class="number">3473939398</span>, <span class="number">3602043139</span>, <span class="number">823675959</span>, <span class="number">844582032</span>, <span class="number">3998968330</span>, <span class="number">2393470080</span>, <span class="number">2512238135</span>, <span class="number">67167808</span>, <span class="number">1611487897</span>, <span class="number">2830420861</span>, <span class="number">4112505264</span>, <span class="number">1473571356</span>, <span class="number">2312858766</span>, <span class="number">871689440</span>, <span class="number">556193926</span>, <span class="number">1001003215</span>, <span class="number">1273007741</span>, <span class="number">762017629</span>, <span class="number">2038148387</span>, <span class="number">4279168802</span>, <span class="number">2408310663</span>, <span class="number">2054122309</span>, <span class="number">42020314</span>, <span class="number">1396677628</span>, <span class="number">3773376680</span>, <span class="number">1932770810</span>, <span class="number">2471957404</span>, <span class="number">2226052083</span>, <span class="number">2029396226</span>, <span class="number">3765862340</span>, <span class="number">1050629836</span>, <span class="number">3182006232</span>, <span class="number">2413024927</span>, <span class="number">4016684643</span>, <span class="number">2024438409</span>, <span class="number">4090205995</span>, <span class="number">3597880762</span>, <span class="number">2506376035</span>, <span class="number">3927261145</span>, <span class="number">4205690402</span>, <span class="number">2307681663</span>, <span class="number">3274838512</span>, <span class="number">3523789777</span>, <span class="number">359904705</span>, <span class="number">1651827754</span>, <span class="number">3293539170</span>, <span class="number">3181510821</span>, <span class="number">1493999036</span>, <span class="number">1649777650</span>, <span class="number">4154519231</span>, <span class="number">1329665122</span>, <span class="number">90822454</span>, <span class="number">999884567</span>, <span class="number">141607911</span>, <span class="number">3884251899</span>, <span class="number">2825791367</span>, <span class="number">1739573277</span>, <span class="number">3234181642</span>, <span class="number">933041054</span>, <span class="number">186550284</span>, <span class="number">4092869914</span>, <span class="number">1043976374</span>, <span class="number">413839654</span>, <span class="number">4146441955</span>, <span class="number">2162431794</span>, <span class="number">1528203403</span>, <span class="number">3113434991</span>, <span class="number">1963838396</span>, <span class="number">1914312708</span>, <span class="number">2228058801</span>, <span class="number">1066392891</span>, <span class="number">3709434263</span>, <span class="number">3444101460</span>, <span class="number">822257454</span>, <span class="number">528906696</span>, <span class="number">2815319529</span>, <span class="number">1900590565</span>, <span class="number">1548596297</span>, <span class="number">2176062412</span>, <span class="number">2101521651</span>, <span class="number">4151077085</span>, <span class="number">2146296787</span>, <span class="number">837380469</span>, <span class="number">3104944571</span>, <span class="number">3846825052</span>, <span class="number">369339</span>, <span class="number">247134846</span>, <span class="number">3774886839</span>, <span class="number">2721198553</span>, <span class="number">3033768060</span>, <span class="number">4071240934</span>]</span><br><span class="line"></span><br><span class="line">partS = recover_state(randoms)</span><br><span class="line">state = backtrace([<span class="number">0</span>]*<span class="number">4</span>+partS)[<span class="number">1</span>:<span class="number">625</span>]</span><br><span class="line"></span><br><span class="line">prng = Random()</span><br><span class="line">prng.setstate((<span class="number">3</span>,<span class="built_in">tuple</span>(state+[<span class="number">0</span>]),<span class="literal">None</span>))</span><br><span class="line"><span class="built_in">print</span>(prng.getrandbits(<span class="number">96</span>))</span><br><span class="line"><span class="comment"># 32029162575545328566623624142</span></span><br></pre></td></tr></table></figure>
<p>此题的定位还是交互题，但由于没有复现环境，懒得搭（主要是还不会），就本地挨个测试了一下，最后也是成功输出了<code>flag</code>，不过没有写交互脚本以及统一的格式</p>
<blockquote>
<p>test：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guess_number_1</span>():</span><br><span class="line">    randoms = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">208</span>):</span><br><span class="line">        randoms.append(random.getrandbits(<span class="number">96</span>))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;randoms = &quot;</span> + <span class="built_in">str</span>(randoms))</span><br><span class="line">    number = <span class="built_in">str</span>(random.getrandbits(<span class="number">96</span>))</span><br><span class="line">    guess = <span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&quot;Guess after number:&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> guess != number:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Wrong Number! Guess again.&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guess_number_2</span>():</span><br><span class="line">    number = <span class="built_in">str</span>(random.getrandbits(<span class="number">96</span>))</span><br><span class="line">    randoms = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">627</span>):</span><br><span class="line">        randoms.append(random.getrandbits(<span class="number">32</span>))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;randoms = &quot;</span> + <span class="built_in">str</span>(randoms))</span><br><span class="line">    guess = <span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&quot;Guess pre number:&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> guess != number:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Wrong Number! Guess again.&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guess_number_3</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_int32</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(<span class="number">0xFFFFFFFF</span> &amp; x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init</span>(<span class="params">seed</span>):</span><br><span class="line">        mt = [<span class="number">0</span>] * <span class="number">624</span></span><br><span class="line">        mt[<span class="number">0</span>] = seed</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">624</span>):</span><br><span class="line">            mt[i] = _int32(<span class="number">1812433253</span> * (mt[i - <span class="number">1</span>] ^ mt[i - <span class="number">1</span>] &gt;&gt; <span class="number">30</span>) + i)</span><br><span class="line">        <span class="keyword">return</span> mt[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    number = random.getrandbits(<span class="number">32</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;last number = &quot;</span> + <span class="built_in">str</span>(init(number)))</span><br><span class="line">    guess = <span class="built_in">int</span>(<span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&quot;Guess seed number:&quot;</span>)))</span><br><span class="line">    <span class="keyword">if</span> guess != number:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Wrong Number! Guess again.&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guess_number_4</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_number</span>(<span class="params">y</span>):</span><br><span class="line">        y = y ^ y &gt;&gt; <span class="number">11</span></span><br><span class="line">        y = y ^ y &lt;&lt; <span class="number">7</span> &amp; <span class="number">2636928640</span></span><br><span class="line">        y = y ^ y &lt;&lt; <span class="number">15</span> &amp; <span class="number">4022730752</span></span><br><span class="line">        y = y ^ y &gt;&gt; <span class="number">18</span></span><br><span class="line">        <span class="keyword">return</span> y &amp; <span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line">    number = random.getrandbits(<span class="number">32</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;extract number = &quot;</span> + <span class="built_in">str</span>(extract_number(number)))</span><br><span class="line">    guess = <span class="built_in">int</span>(<span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&quot;Guess be extracted number:&quot;</span>)))</span><br><span class="line">    <span class="keyword">if</span> guess != number:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Wrong Number! Guess again.&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Welcome to the Mersenne Twister basic challenge. Please try to solve 20 challenges in 60 seconds.&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Round: &quot;</span> + <span class="built_in">str</span>(i + <span class="number">1</span>))</span><br><span class="line">    random.choice([guess_number_1, guess_number_2, guess_number_3, guess_number_4])()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Good job!&quot;</span>)</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&#x27;flag&#x27;</span>).read()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Congratulations on passing the challenge. This is your flag: &quot;</span> + <span class="built_in">str</span>(flag))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<p>前面说到预测和回溯都稍微会遇到一点问题，所以总是会有大佬站出来，上传了有很多相关的<code>python</code>库，我这里选择的是 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL05vbnVwbGVCcm9rZW4vRXh0ZW5kTVQxOTkzN1ByZWRpY3Rvcg==">ExtendMT19937Predictor<i class="fa fa-external-link-alt"></i></span></p>
<p>可以根据<strong><code>Predict</code></strong>、<strong><code>Backtrack</code></strong>的使用示例来进行预测和回溯，如下是exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">attack1</span>(<span class="params">list1</span>):</span><br><span class="line">    predictor = ExtendMT19937Predictor()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">208</span>):</span><br><span class="line">        predictor.setrandbits(list1[i], <span class="number">96</span>)    <span class="comment"># 是将已有的随机数填入，从而预测或回溯随机数</span></span><br><span class="line">    <span class="keyword">return</span> predictor.predict_getrandbits(<span class="number">96</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack2</span>(<span class="params">list1</span>):</span><br><span class="line">    predictor = ExtendMT19937Predictor()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">627</span>):</span><br><span class="line">        predictor.setrandbits(list1[i], <span class="number">32</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">627</span>):</span><br><span class="line">        predictor.backtrack_getrandbits(<span class="number">32</span>)</span><br><span class="line">    x = predictor.backtrack_getrandbits(<span class="number">96</span>)</span><br><span class="line">    <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure>
<h2 id="NKCTF2023-fake-MT"><a href="#NKCTF2023-fake-MT" class="headerlink" title="[NKCTF2023]fake_MT"></a>[NKCTF2023]fake_MT</h2><p>题目源码不说和<code>real_MT</code>长得像，简直是一模一样，一说这题是<code>python2</code>的环境</p>
<p>题解如上，和<code>real_MT</code>一样</p>
<hr>
<hr>
<h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><blockquote>
<p>2024-7-18</p>
</blockquote>
<p>一直被忽略的第五个题型，这里面的扩展题型里，低于32字节的MT19937，例题给的是高位的 1 bit</p>
<h2 id="easy-random"><a href="#easy-random" class="headerlink" title="easy_random"></a>easy_random</h2><blockquote>
<p>WKCTF 2024</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;WKCTF&#123;&#125;&#x27;</span></span><br><span class="line">pad_flag = pad(flag,<span class="number">16</span>)</span><br><span class="line">key = random.randbytes(<span class="number">16</span>)</span><br><span class="line">cipher = AES.new(key,AES.MODE_ECB)</span><br><span class="line"><span class="built_in">print</span>(cipher.encrypt(pad_flag))</span><br><span class="line"><span class="comment"># b&#x27;a\x93\xdc\xc3\x90\x0cK\xfa\xfb\x1c\x05$y\x16:\xfc\xf3+\xf8+%\xfe\xf9\x86\xa3\x17i+ab\xca\xb6\xcd\r\xa5\x94\xeaVM\xdeo\xa7\xdf\xa9D\n\x02\xa3&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;random.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2496</span>):</span><br><span class="line">        f.write(<span class="built_in">str</span>(random.getrandbits(<span class="number">8</span>))+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>（附件就不给了，可以自己生成测试）</p>
<hr>
<p>上面讲了 32bit 以上的随机数是拼接而来的，而32bit 以下则不行，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">random.seed(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(random.getrandbits(<span class="number">8</span>)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(random.getrandbits(<span class="number">8</span>)))</span><br><span class="line"></span><br><span class="line">random.seed(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(random.getrandbits(<span class="number">32</span>)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(random.getrandbits(<span class="number">32</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x22</span></span><br><span class="line"><span class="comment"># 0x91</span></span><br><span class="line"><span class="comment"># 0x2265b1f5</span></span><br><span class="line"><span class="comment"># 0x91b7584a</span></span><br><span class="line"><span class="comment"># 22464</span></span><br><span class="line"></span><br><span class="line">random.seed(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(random.getrandbits(<span class="number">16</span>)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(random.getrandbits(<span class="number">16</span>)))</span><br><span class="line"></span><br><span class="line">random.seed(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(random.getrandbits(<span class="number">32</span>)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(random.getrandbits(<span class="number">32</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x2265</span></span><br><span class="line"><span class="comment"># 0x91b7</span></span><br><span class="line"><span class="comment"># 0x2265b1f5</span></span><br><span class="line"><span class="comment"># 0x91b7584a</span></span><br></pre></td></tr></table></figure>
<p>按顺序来讲，得到的每一个 8bit 是对应 32bit 的前八位，如何得来？也就是先生成 一个32bit的，再右移24bit，得到 8 bit</p>
<p>所以32 bit 以下的随机数不能进行拼接</p>
<hr>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">random.seed(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(random.randbytes(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(random.randbytes(<span class="number">4</span>))</span><br><span class="line">random.seed(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(random.randbytes(<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">random.seed(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(bytes_to_long(random.randbytes(<span class="number">8</span>)))[<span class="number">2</span>:])</span><br><span class="line">random.seed(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(random.getrandbits(<span class="number">64</span>))[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">random.seed(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(random.getrandbits(<span class="number">32</span>)))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(random.getrandbits(<span class="number">32</span>)))</span><br><span class="line">random.seed(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(random.getrandbits(<span class="number">64</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;\xf5\xb1e&quot;&#x27;</span></span><br><span class="line"><span class="comment"># b&#x27;JX\xb7\x91&#x27;</span></span><br><span class="line"><span class="comment"># b&#x27;\xf5\xb1e&quot;JX\xb7\x91&#x27;</span></span><br><span class="line"><span class="comment"># f5b165224a58b791</span></span><br><span class="line"><span class="comment"># 91b7584a2265b1f5</span></span><br><span class="line"><span class="comment"># b&#x27;&quot;e\xb1\xf5&#x27;</span></span><br><span class="line"><span class="comment"># b&#x27;\x91\xb7XJ&#x27;</span></span><br><span class="line"><span class="comment"># b&#x27;\x91\xb7XJ&quot;e\xb1\xf5&#x27;</span></span><br></pre></td></tr></table></figure>
<p>可以看到 生成随机字节 和随机数的拼接方式不一样，</p>
<p>后者后面生成的随机数在高位，先生成的随机数在低位</p>
<p>前者则相反，</p>
<p>所以按照上面我们的拼接方法再逆序即可得到 key</p>
<p>或者看到 生成的 4字节和 32 bit 的关系是逆序的，这种低字节在高位的情况称为 <font color='orange'>小端序</font> ，也可这样处理 key</p>
<hr>
<h3 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h3><p>通过 <code>badmonkey</code> 佬的方法，黑盒测试，在<code>GF(2)</code>上，有</p>
<p>$X·T = Z\Longrightarrow X=Z·T^{-1}$ </p>
<p>其中X,Z为1 x 19968 的向量，T为19968 x 19968 的矩阵</p>
<p>我们可以令 X = (1,0,0…,0)，此时得到 Z 的结果 为 T 的第一行，再令 X = (0,1,0…,0)，以此类推得到全部 T</p>
<p><strong>我们需要注意的是</strong>，文中说明了我们构造的T不是满秩的，求出的第一个32bit的随机数不够准确，我们还需要去还原第一个state，再来进行预测得到完整的32bit随机数</p>
<p>exp：</p>
<p>例题是 1 bit 的，这里是 8 bit 的，据此微改脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> Random</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line">prng = Random()</span><br><span class="line">length = <span class="number">19968</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myState</span>():</span><br><span class="line">    state = [<span class="number">0</span>]*<span class="number">624</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i&lt;length:</span><br><span class="line">        ind = i//<span class="number">32</span></span><br><span class="line">        expont = i%<span class="number">32</span></span><br><span class="line">        state[ind] = <span class="number">1</span>&lt;&lt;(<span class="number">31</span>-expont)</span><br><span class="line">        s = (<span class="number">3</span>,<span class="built_in">tuple</span>(state+[<span class="number">0</span>]),<span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">yield</span> s</span><br><span class="line">        state[ind] = <span class="number">0</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getRow</span>():</span><br><span class="line">    rng = Random()</span><br><span class="line">    gs = myState()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        s = <span class="built_in">next</span>(gs)</span><br><span class="line">        rng.setstate(s)</span><br><span class="line"><span class="comment">#         print(s[1][0])</span></span><br><span class="line">        data=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length // <span class="number">8</span>):</span><br><span class="line">            data.extend(<span class="built_in">list</span>(<span class="built_in">bin</span>(rng.getrandbits(<span class="number">8</span>))[<span class="number">2</span>:].zfill(<span class="number">8</span>)))</span><br><span class="line">        data=[<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> data] <span class="comment"># 只有1行，还是length长度</span></span><br><span class="line">        row = vector(GF(<span class="number">2</span>),data)</span><br><span class="line">        <span class="keyword">yield</span> row</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">buildBox</span>():</span><br><span class="line">    b = matrix(GF(<span class="number">2</span>),length,length)</span><br><span class="line">    rg = getRow()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(length)):</span><br><span class="line">        b[i] = <span class="built_in">next</span>(rg)</span><br><span class="line">    <span class="keyword">return</span> b <span class="comment"># length * length</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># X = Z*(T^-1)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recoverState</span>(<span class="params">T,leak</span>):</span><br><span class="line">    x = T.solve_left(leak)</span><br><span class="line">    x = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> x.<span class="built_in">list</span>()])</span><br><span class="line">    state = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>):</span><br><span class="line">        tmp = <span class="built_in">int</span>(x[i * <span class="number">32</span>:(i + <span class="number">1</span>) * <span class="number">32</span>], <span class="number">2</span>)</span><br><span class="line">        state.append(tmp)</span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据题型2,还原state,有两种可能,这时候可以用暴破</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">backfirst</span>(<span class="params">state</span>):</span><br><span class="line">    high = <span class="number">0x80000000</span></span><br><span class="line">    low = <span class="number">0x7fffffff</span></span><br><span class="line">    mask = <span class="number">0x9908b0df</span></span><br><span class="line">    tmp = state[<span class="number">623</span>] ^ state[<span class="number">396</span>]</span><br><span class="line">    <span class="keyword">if</span> tmp &amp; high == high:</span><br><span class="line">        tmp ^= mask</span><br><span class="line">        tmp &lt;&lt;= <span class="number">1</span></span><br><span class="line">        tmp |= <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tmp &lt;&lt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> &lt;&lt; <span class="number">32</span> - <span class="number">1</span>) | tmp &amp; low, tmp &amp; low</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">readrandom</span>():</span><br><span class="line">    c = []</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;random.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> f.read().split():</span><br><span class="line">            c.append(<span class="built_in">int</span>(i))</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>(<span class="params">leak,state,guess1,guess2</span>):</span><br><span class="line">    prng = Random()</span><br><span class="line">    originState = prng.getstate()</span><br><span class="line">    state[<span class="number">0</span>] = guess1</span><br><span class="line">    s = state</span><br><span class="line">    prng.setstate((<span class="number">3</span>, <span class="built_in">tuple</span>(s + [<span class="number">0</span>]), <span class="literal">None</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;first&quot;</span>)</span><br><span class="line">        prng.setstate((<span class="number">3</span>, <span class="built_in">tuple</span>(s + [<span class="number">0</span>]), <span class="literal">None</span>))</span><br><span class="line">        now =  [prng.getrandbits(<span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2496</span>)]</span><br><span class="line">        <span class="keyword">if</span> now == leak:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;true&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(state)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    state[<span class="number">0</span>] = guess2</span><br><span class="line">    s = state</span><br><span class="line">    prng.setstate((<span class="number">3</span>, <span class="built_in">tuple</span>(s + [<span class="number">0</span>]), <span class="literal">None</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;second&quot;</span>)</span><br><span class="line">        prng.setstate((<span class="number">3</span>, <span class="built_in">tuple</span>(s + [<span class="number">0</span>]), <span class="literal">None</span>))</span><br><span class="line">        now =  [prng.getrandbits(<span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2496</span>)]</span><br><span class="line">        <span class="keyword">if</span> now == leak:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;true&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(state)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    T = buildBox()</span><br><span class="line"></span><br><span class="line">    leak = readrandom()</span><br><span class="line">    leak1=[<span class="built_in">int</span>(j) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="string">&quot;&quot;</span>.join([<span class="built_in">bin</span>(i)[<span class="number">2</span>:].zfill(<span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> leak[:<span class="number">19968</span>//<span class="number">8</span>]])]</span><br><span class="line">    leak1 = matrix(GF(<span class="number">2</span>), leak1)</span><br><span class="line">    <span class="comment"># 恢复state</span></span><br><span class="line">    state = recoverState(T,leak1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;state恢复完成&quot;</span>)</span><br><span class="line">    <span class="comment"># 两种可能</span></span><br><span class="line">    guess1, guess2 = backfirst(state)</span><br><span class="line">    <span class="built_in">print</span>(guess1, guess2)</span><br><span class="line">    pwn(leak,state,guess1,guess2)</span><br><span class="line">    </span><br><span class="line">main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我们用这个得到 state去 还原题目当时的 state（seed？😅），进行预测 624个32bit的随机数用以回溯</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> Random</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> extend_mt19937_predictor <span class="keyword">import</span> ExtendMT19937Predictor</span><br><span class="line"></span><br><span class="line">prng = Random()</span><br><span class="line">state = [<span class="number">2922114156</span>, <span class="number">2886276701</span>, <span class="number">1168768544</span>, <span class="number">2339187170</span>, <span class="number">3551087255</span>, <span class="number">117510054</span>, <span class="number">4232565172</span>, <span class="number">1076139110</span>, <span class="number">3366831833</span>, <span class="number">1734453078</span>, <span class="number">4105913658</span>, <span class="number">1066792668</span>, <span class="number">2395352043</span>, <span class="number">785096749</span>, <span class="number">3707690263</span>, <span class="number">2430171307</span>, <span class="number">2064716469</span>, <span class="number">1119720065</span>, <span class="number">1112222395</span>, <span class="number">2136656989</span>, <span class="number">2232844740</span>, <span class="number">388978998</span>, <span class="number">1363102788</span>, <span class="number">67899517</span>, <span class="number">457789137</span>, <span class="number">3527002829</span>, <span class="number">1187847099</span>, <span class="number">1188611575</span>, <span class="number">3830294635</span>, <span class="number">3760337941</span>, <span class="number">297081839</span>, <span class="number">3230408812</span>, <span class="number">2906355860</span>, <span class="number">279725084</span>, <span class="number">3056220997</span>, <span class="number">1053068885</span>, <span class="number">3252084646</span>, <span class="number">2818726015</span>, <span class="number">3615795115</span>, <span class="number">2751222655</span>, <span class="number">74688614</span>, <span class="number">1452880497</span>, <span class="number">426221319</span>, <span class="number">1680367484</span>, <span class="number">4211465923</span>, <span class="number">908441837</span>, <span class="number">2290937869</span>, <span class="number">526329269</span>, <span class="number">3225608663</span>, <span class="number">350552485</span>, <span class="number">885538125</span>, <span class="number">3496826412</span>, <span class="number">3347875222</span>, <span class="number">2730243675</span>, <span class="number">1823616219</span>, <span class="number">1474037291</span>, <span class="number">2474670592</span>, <span class="number">1175091387</span>, <span class="number">1527449390</span>, <span class="number">2024565653</span>, <span class="number">2185945759</span>, <span class="number">902338428</span>, <span class="number">3571876882</span>, <span class="number">632524934</span>, <span class="number">1235569406</span>, <span class="number">3612682285</span>, <span class="number">2727233684</span>, <span class="number">2085380963</span>, <span class="number">1570339017</span>, <span class="number">3839696585</span>, <span class="number">1482742582</span>, <span class="number">646051896</span>, <span class="number">3804319832</span>, <span class="number">2113555238</span>, <span class="number">4150326517</span>, <span class="number">2606046640</span>, <span class="number">1454130831</span>, <span class="number">1919843931</span>, <span class="number">1018624146</span>, <span class="number">1956310311</span>, <span class="number">1162868231</span>, <span class="number">1118548906</span>, <span class="number">974692065</span>, <span class="number">3020424226</span>, <span class="number">2996838388</span>, <span class="number">1724936385</span>, <span class="number">1668410782</span>, <span class="number">3044755338</span>, <span class="number">3710133971</span>, <span class="number">1043581839</span>, <span class="number">362583150</span>, <span class="number">3880481779</span>, <span class="number">114234888</span>, <span class="number">1724135673</span>, <span class="number">1280834309</span>, <span class="number">2958310395</span>, <span class="number">3502226151</span>, <span class="number">620064160</span>, <span class="number">3244210820</span>, <span class="number">3839287479</span>, <span class="number">2283659292</span>, <span class="number">405764632</span>, <span class="number">29535149</span>, <span class="number">2759062778</span>, <span class="number">1662916252</span>, <span class="number">2374319319</span>, <span class="number">3359789079</span>, <span class="number">1896011543</span>, <span class="number">1991740933</span>, <span class="number">2041947596</span>, <span class="number">3393060496</span>, <span class="number">996086198</span>, <span class="number">193135800</span>, <span class="number">1184463268</span>, <span class="number">819767446</span>, <span class="number">410330102</span>, <span class="number">569788256</span>, <span class="number">3880255000</span>, <span class="number">340523190</span>, <span class="number">885031563</span>, <span class="number">2752345656</span>, <span class="number">4116368372</span>, <span class="number">1738848623</span>, <span class="number">1895472503</span>, <span class="number">85502529</span>, <span class="number">334873925</span>, <span class="number">3543996685</span>, <span class="number">3082948803</span>, <span class="number">3195880838</span>, <span class="number">1458851187</span>, <span class="number">2843458392</span>, <span class="number">20236078</span>, <span class="number">3136689072</span>, <span class="number">2121777470</span>, <span class="number">3543587943</span>, <span class="number">3590933177</span>, <span class="number">4057799526</span>, <span class="number">1241162800</span>, <span class="number">1014541188</span>, <span class="number">1031410742</span>, <span class="number">267989518</span>, <span class="number">92604561</span>, <span class="number">2190353015</span>, <span class="number">87786611</span>, <span class="number">435741463</span>, <span class="number">3800398555</span>, <span class="number">1860727248</span>, <span class="number">2608606593</span>, <span class="number">287619193</span>, <span class="number">768990059</span>, <span class="number">1686137462</span>, <span class="number">3255556540</span>, <span class="number">3234299857</span>, <span class="number">2087562050</span>, <span class="number">1575350832</span>, <span class="number">1982640551</span>, <span class="number">1476745138</span>, <span class="number">2757668599</span>, <span class="number">108958643</span>, <span class="number">337813164</span>, <span class="number">273001595</span>, <span class="number">3515727084</span>, <span class="number">2976758889</span>, <span class="number">2674818924</span>, <span class="number">2133197017</span>, <span class="number">3709052669</span>, <span class="number">1992118633</span>, <span class="number">2421927781</span>, <span class="number">174599786</span>, <span class="number">3608298365</span>, <span class="number">1708985493</span>, <span class="number">3925831183</span>, <span class="number">3063611093</span>, <span class="number">3852984733</span>, <span class="number">540242111</span>, <span class="number">1623482619</span>, <span class="number">1874921843</span>, <span class="number">1317809124</span>, <span class="number">2774735715</span>, <span class="number">3828180102</span>, <span class="number">1997343223</span>, <span class="number">1516869708</span>, <span class="number">941992323</span>, <span class="number">307089973</span>, <span class="number">368181535</span>, <span class="number">163007409</span>, <span class="number">596938343</span>, <span class="number">1686397275</span>, <span class="number">52708329</span>, <span class="number">230996593</span>, <span class="number">3597201983</span>, <span class="number">378926364</span>, <span class="number">3618422671</span>, <span class="number">2062721049</span>, <span class="number">3659976071</span>, <span class="number">546629459</span>, <span class="number">3976307656</span>, <span class="number">1509609055</span>, <span class="number">3677736141</span>, <span class="number">1613243397</span>, <span class="number">1378877471</span>, <span class="number">531534610</span>, <span class="number">2602178644</span>, <span class="number">4099876535</span>, <span class="number">1394187732</span>, <span class="number">1706260244</span>, <span class="number">1842911215</span>, <span class="number">3381571710</span>, <span class="number">456693813</span>, <span class="number">1667668257</span>, <span class="number">792813840</span>, <span class="number">4044011316</span>, <span class="number">1391972141</span>, <span class="number">1677638507</span>, <span class="number">1467741933</span>, <span class="number">2542725716</span>, <span class="number">3261642613</span>, <span class="number">1122181516</span>, <span class="number">1726857655</span>, <span class="number">2765884383</span>, <span class="number">2563231823</span>, <span class="number">1890137479</span>, <span class="number">3462591813</span>, <span class="number">290505918</span>, <span class="number">3480784421</span>, <span class="number">4146013364</span>, <span class="number">906268950</span>, <span class="number">1460571462</span>, <span class="number">625398701</span>, <span class="number">1868955581</span>, <span class="number">2562420879</span>, <span class="number">3524561573</span>, <span class="number">2480663847</span>, <span class="number">424010572</span>, <span class="number">3760440358</span>, <span class="number">506451740</span>, <span class="number">2616205788</span>, <span class="number">3835513223</span>, <span class="number">2698078113</span>, <span class="number">933669512</span>, <span class="number">2259175222</span>, <span class="number">1766445936</span>, <span class="number">3062774434</span>, <span class="number">3383207496</span>, <span class="number">165724374</span>, <span class="number">717679250</span>, <span class="number">872303977</span>, <span class="number">1054921507</span>, <span class="number">1640987195</span>, <span class="number">2398705310</span>, <span class="number">744526846</span>, <span class="number">2142916476</span>, <span class="number">3769314780</span>, <span class="number">3643489144</span>, <span class="number">906983325</span>, <span class="number">1001096018</span>, <span class="number">1522376663</span>, <span class="number">3516789445</span>, <span class="number">425379249</span>, <span class="number">1807654888</span>, <span class="number">1584889396</span>, <span class="number">996500676</span>, <span class="number">2138028000</span>, <span class="number">1877118731</span>, <span class="number">2780715755</span>, <span class="number">56317932</span>, <span class="number">994780643</span>, <span class="number">231703463</span>, <span class="number">1590924826</span>, <span class="number">449553992</span>, <span class="number">1970334362</span>, <span class="number">3631415563</span>, <span class="number">2378887069</span>, <span class="number">2645995105</span>, <span class="number">604040985</span>, <span class="number">766274135</span>, <span class="number">2897107084</span>, <span class="number">3122401328</span>, <span class="number">604584226</span>, <span class="number">3514594183</span>, <span class="number">3159592392</span>, <span class="number">539086862</span>, <span class="number">1966827756</span>, <span class="number">1548312674</span>, <span class="number">2223920152</span>, <span class="number">4193868755</span>, <span class="number">2604831097</span>, <span class="number">2301554299</span>, <span class="number">2919432501</span>, <span class="number">3445772747</span>, <span class="number">221908018</span>, <span class="number">1919849944</span>, <span class="number">1707243688</span>, <span class="number">1311680342</span>, <span class="number">1132835813</span>, <span class="number">824121832</span>, <span class="number">2623654824</span>, <span class="number">4245764621</span>, <span class="number">1669541543</span>, <span class="number">793028119</span>, <span class="number">1400611299</span>, <span class="number">2330555992</span>, <span class="number">1295319061</span>, <span class="number">2376883177</span>, <span class="number">3054784982</span>, <span class="number">1534527889</span>, <span class="number">3381065612</span>, <span class="number">431181624</span>, <span class="number">2520679460</span>, <span class="number">1612115175</span>, <span class="number">3417053178</span>, <span class="number">3202101207</span>, <span class="number">4112825474</span>, <span class="number">209873225</span>, <span class="number">3982289256</span>, <span class="number">3175605361</span>, <span class="number">1007754107</span>, <span class="number">1533969733</span>, <span class="number">3657972615</span>, <span class="number">1233249703</span>, <span class="number">1775877579</span>, <span class="number">2812100730</span>, <span class="number">3215107528</span>, <span class="number">1781386145</span>, <span class="number">3025989255</span>, <span class="number">3066346118</span>, <span class="number">3283795978</span>, <span class="number">1197222174</span>, <span class="number">2936543382</span>, <span class="number">3503535134</span>, <span class="number">2892598771</span>, <span class="number">2621962168</span>, <span class="number">931511531</span>, <span class="number">2231087188</span>, <span class="number">4146539078</span>, <span class="number">4002087507</span>, <span class="number">2491835423</span>, <span class="number">4060649251</span>, <span class="number">4048333160</span>, <span class="number">2444738719</span>, <span class="number">2691519303</span>, <span class="number">1556526141</span>, <span class="number">3615497232</span>, <span class="number">4050826531</span>, <span class="number">500299044</span>, <span class="number">717467546</span>, <span class="number">2206683369</span>, <span class="number">861398548</span>, <span class="number">3151369905</span>, <span class="number">4029791836</span>, <span class="number">3416545629</span>, <span class="number">4120104600</span>, <span class="number">1465267912</span>, <span class="number">483234533</span>, <span class="number">3035820989</span>, <span class="number">3832933168</span>, <span class="number">3568690105</span>, <span class="number">96174302</span>, <span class="number">2545526712</span>, <span class="number">1102861924</span>, <span class="number">1074783639</span>, <span class="number">4182941480</span>, <span class="number">1533353222</span>, <span class="number">1488829617</span>, <span class="number">1503690984</span>, <span class="number">185887778</span>, <span class="number">4211993208</span>, <span class="number">2290188486</span>, <span class="number">1146083769</span>, <span class="number">2041769341</span>, <span class="number">2684027677</span>, <span class="number">3176900642</span>, <span class="number">1387338494</span>, <span class="number">946259368</span>, <span class="number">1066487432</span>, <span class="number">795876682</span>, <span class="number">3861793354</span>, <span class="number">1668825820</span>, <span class="number">216618949</span>, <span class="number">2896083408</span>, <span class="number">3851619025</span>, <span class="number">442276681</span>, <span class="number">206355214</span>, <span class="number">270139248</span>, <span class="number">347366931</span>, <span class="number">1910792165</span>, <span class="number">3953458832</span>, <span class="number">2734158556</span>, <span class="number">2811136264</span>, <span class="number">1920172269</span>, <span class="number">1837836373</span>, <span class="number">3778467275</span>, <span class="number">3779230355</span>, <span class="number">3897121172</span>, <span class="number">2344011383</span>, <span class="number">1146522764</span>, <span class="number">2190434845</span>, <span class="number">609244986</span>, <span class="number">2013714652</span>, <span class="number">560173192</span>, <span class="number">2402932255</span>, <span class="number">1072869170</span>, <span class="number">1770725561</span>, <span class="number">952360909</span>, <span class="number">1412825165</span>, <span class="number">3696544236</span>, <span class="number">2306376326</span>, <span class="number">2830983153</span>, <span class="number">207976619</span>, <span class="number">4155556879</span>, <span class="number">3728896627</span>, <span class="number">2654370117</span>, <span class="number">3334033001</span>, <span class="number">1365410137</span>, <span class="number">1493856098</span>, <span class="number">1253593280</span>, <span class="number">1631830970</span>, <span class="number">5803336</span>, <span class="number">3918597809</span>, <span class="number">86127041</span>, <span class="number">333464839</span>, <span class="number">3604499396</span>, <span class="number">149662371</span>, <span class="number">2129288705</span>, <span class="number">1461710188</span>, <span class="number">3760680120</span>, <span class="number">3729872359</span>, <span class="number">2100765881</span>, <span class="number">3535556758</span>, <span class="number">444301423</span>, <span class="number">2716178967</span>, <span class="number">1126522126</span>, <span class="number">4087265377</span>, <span class="number">129975151</span>, <span class="number">3676574817</span>, <span class="number">946781552</span>, <span class="number">1144144314</span>, <span class="number">4160587561</span>, <span class="number">3992786314</span>, <span class="number">45372372</span>, <span class="number">2839307265</span>, <span class="number">3121990915</span>, <span class="number">2417091275</span>, <span class="number">2394722122</span>, <span class="number">2336989436</span>, <span class="number">3126674182</span>, <span class="number">3231554964</span>, <span class="number">3785353831</span>, <span class="number">3066121066</span>, <span class="number">4059908701</span>, <span class="number">3257600631</span>, <span class="number">3304564137</span>, <span class="number">976977941</span>, <span class="number">2994176851</span>, <span class="number">3509885563</span>, <span class="number">436168092</span>, <span class="number">2194926470</span>, <span class="number">572263581</span>, <span class="number">2964578564</span>, <span class="number">2577729800</span>, <span class="number">4257414592</span>, <span class="number">1074783671</span>, <span class="number">2629434251</span>, <span class="number">42822614</span>, <span class="number">1475322010</span>, <span class="number">3068645543</span>, <span class="number">3694724738</span>, <span class="number">3480058324</span>, <span class="number">4204711804</span>, <span class="number">3168448984</span>, <span class="number">2767935672</span>, <span class="number">3016152818</span>, <span class="number">4134435775</span>, <span class="number">2141315517</span>, <span class="number">2182008981</span>, <span class="number">2871864678</span>, <span class="number">2294299758</span>, <span class="number">1409773258</span>, <span class="number">3418660825</span>, <span class="number">3090287076</span>, <span class="number">3241139267</span>, <span class="number">2315623533</span>, <span class="number">2157788904</span>, <span class="number">334169841</span>, <span class="number">2062298350</span>, <span class="number">4075844652</span>, <span class="number">1672438569</span>, <span class="number">2994084656</span>, <span class="number">2204498767</span>, <span class="number">2430183901</span>, <span class="number">4179388667</span>, <span class="number">317027997</span>, <span class="number">2894184457</span>, <span class="number">3635887387</span>, <span class="number">1307832846</span>, <span class="number">3358657065</span>, <span class="number">734371454</span>, <span class="number">610520453</span>, <span class="number">3421706671</span>, <span class="number">3240587498</span>, <span class="number">3690351924</span>, <span class="number">935152653</span>, <span class="number">2737123774</span>, <span class="number">203357945</span>, <span class="number">1027962332</span>, <span class="number">3777141639</span>, <span class="number">743025036</span>, <span class="number">4046422672</span>, <span class="number">1085389282</span>, <span class="number">110265143</span>, <span class="number">320421926</span>, <span class="number">1931570193</span>, <span class="number">936595461</span>, <span class="number">2927488848</span>, <span class="number">2265674314</span>, <span class="number">3444945553</span>, <span class="number">786566925</span>, <span class="number">4133145648</span>, <span class="number">2879270131</span>, <span class="number">4165751769</span>, <span class="number">3985446237</span>, <span class="number">1971125873</span>, <span class="number">3724681025</span>, <span class="number">2661325531</span>, <span class="number">2441664181</span>, <span class="number">3290805620</span>, <span class="number">2459158763</span>, <span class="number">2102811157</span>, <span class="number">2881160687</span>, <span class="number">1153639082</span>, <span class="number">827213914</span>, <span class="number">3028527431</span>, <span class="number">2205345684</span>, <span class="number">3556675715</span>, <span class="number">1279123065</span>, <span class="number">4253124398</span>, <span class="number">3483559979</span>, <span class="number">4068430995</span>, <span class="number">4141206587</span>, <span class="number">2571521727</span>, <span class="number">2944439402</span>, <span class="number">443124686</span>, <span class="number">2268164570</span>, <span class="number">2235451426</span>, <span class="number">3679071975</span>, <span class="number">3129207272</span>, <span class="number">2516367556</span>, <span class="number">1468462786</span>, <span class="number">1881517367</span>, <span class="number">3491042253</span>, <span class="number">2913831047</span>, <span class="number">3164481275</span>, <span class="number">202602034</span>, <span class="number">3150723817</span>, <span class="number">1533130707</span>, <span class="number">1912730441</span>, <span class="number">2090267514</span>, <span class="number">3558123575</span>, <span class="number">1133228007</span>, <span class="number">3421482977</span>, <span class="number">2553693497</span>, <span class="number">3421969717</span>, <span class="number">2520271965</span>, <span class="number">2067324870</span>, <span class="number">1223636150</span>, <span class="number">2714495378</span>, <span class="number">3773685424</span>, <span class="number">2961634881</span>, <span class="number">88882886</span>, <span class="number">408668635</span>, <span class="number">904339271</span>, <span class="number">3187997208</span>, <span class="number">2883270961</span>, <span class="number">1911371885</span>, <span class="number">1111177434</span>, <span class="number">3677904221</span>, <span class="number">1424566197</span>, <span class="number">456428662</span>, <span class="number">3160502725</span>, <span class="number">2571618126</span>, <span class="number">1931038165</span>, <span class="number">1229862345</span>, <span class="number">885692642</span>, <span class="number">928907436</span>, <span class="number">281108918</span>, <span class="number">2025639202</span>, <span class="number">4098934983</span>, <span class="number">245166619</span>, <span class="number">3978368942</span>, <span class="number">2335134348</span>, <span class="number">2663736265</span>, <span class="number">3483476476</span>, <span class="number">1019177183</span>, <span class="number">1076843627</span>, <span class="number">2150626843</span>, <span class="number">3549898506</span>, <span class="number">497411044</span>, <span class="number">2948681730</span>, <span class="number">1293862520</span>, <span class="number">3364439483</span>, <span class="number">200913955</span>, <span class="number">876046583</span>, <span class="number">2810673955</span>, <span class="number">2828391839</span>, <span class="number">1905062360</span>, <span class="number">3783182365</span>, <span class="number">2472665728</span>, <span class="number">1439731349</span>, <span class="number">2736703148</span>, <span class="number">3316496080</span>, <span class="number">2996051367</span>, <span class="number">448455111</span>, <span class="number">3808598160</span>, <span class="number">2313472828</span>, <span class="number">1619655346</span>, <span class="number">1198200314</span>, <span class="number">3744504057</span>, <span class="number">1680713197</span>, <span class="number">2474661491</span>, <span class="number">3214410863</span>, <span class="number">1662774943</span>, <span class="number">3537885099</span>, <span class="number">3365412658</span>, <span class="number">3583677483</span>]</span><br><span class="line"></span><br><span class="line">prng.setstate((<span class="number">3</span>, <span class="built_in">tuple</span>(state + [<span class="number">0</span>]), <span class="literal">None</span>))</span><br><span class="line">D = [prng.getrandbits(<span class="number">32</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>)]</span><br><span class="line"><span class="built_in">print</span>(D)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[3086615663, 3771906507, 1933791567, 874400704, 4000928288, 1101512046, 3757205682, 895930285, 2975657910, 1590250704, 227397937, 3163700038, 1702493296, 86408336, 1317214060, 355017934, 4281601498, 2958424486, 3248821687, 1977038961, 75767861, 1848107476, 1201089736, 1669521311, 3079560731, 753259725, 2783047520, 1792692953, 1335325755, 4118154638, 221587457, 3931660158, 2105971738, 205787269, 3306213190, 3047766446, 757659831, 70863674, 2054184739, 418281550, 2654142751, 3195128907, 3920550815, 273337573, 856860348, 2332777112, 1144893468, 4097373151, 2348453877, 3391728911, 1909111864, 1167657184, 1690201897, 3037596190, 2683689827, 2591985588, 483396539, 583852871, 4213595783, 3297463098, 3940471284, 3167491933, 3836764654, 385184073, 4089593895, 2435556034, 2689611721, 3009515703, 2557788155, 742759035, 2911234764, 2747466359, 1658388676, 77325257, 1282826102, 833518584, 258773596, 1252680510, 2161330425, 1505524757, 1106189058, 2479195181, 4059279758, 4087261637, 2802856115, 215936888, 385734300, 3976823712, 2155716808, 166878602, 2958581226, 2153643018, 3459229793, 166654981, 1135752470, 2999716815, 102870168, 3592405002, 143561712, 3332529987, 3320611547, 176304087, 3809410875, 956905158, 3283895217, 1267764884, 1781613649, 2648889013, 4023857409, 2805378741, 2649655508, 2608225929, 2196639843, 2844902511, 1947381383, 133311662, 3189375534, 3360781939, 2598704112, 449730728, 1660136746, 2120362421, 4282918442, 553031705, 2359175283, 1820194402, 3326941501, 2079373053, 3848840564, 674418166, 2099289575, 3503720323, 71654499, 1153326313, 560391397, 987219237, 3519108661, 343772283, 2206155982, 1710469128, 4284016382, 1099544658, 2385903806, 435889661, 1754514095, 1654595795, 2611465271, 2924309399, 3849122741, 2771388572, 132443906, 639488960, 1702455392, 1197499823, 3431742381, 1162507747, 1956793904, 2882150352, 1024607141, 573195509, 4026654414, 2622992078, 3350586931, 3799382718, 189653578, 2030853706, 2360599919, 1447670146, 3029293260, 449492231, 794537698, 2013929440, 2521582617, 3662902133, 2988382934, 1101429406, 2204422539, 2884223003, 4160719615, 378925199, 321253023, 713869660, 1722066591, 4190495614, 3241838993, 3156104799, 3976107465, 690141471, 2565083608, 629627271, 3367902606, 3025623735, 1771459709, 2325207656, 29331249, 1631496960, 1272596234, 677116176, 36223230, 1894006200, 1868323656, 147662067, 3018282350, 847618418, 473803624, 303813116, 1222076488, 2857631548, 1620440323, 3028453586, 3771115277, 974948581, 2805463577, 3012869721, 1677541868, 873746956, 3206333732, 3540196648, 4222297189, 3955666095, 3723668809, 3383181896, 1572023031, 3593767211, 4139994756, 2493637240, 1055398974, 3491895839, 2158774748, 4074778554, 2265454243, 3123246270, 3737495019, 3584208536, 505004504, 711346815, 2265659930, 44813444, 762261590, 2345302575, 3635851795, 2255282129, 3598634106, 921749760, 1418440684, 3784150188, 2393915660, 2720478000, 1612782044, 4147046015, 2561634247, 586916363, 1606384598, 1299844033, 4047608483, 3431257347, 781242816, 3127114595, 1484369015, 483654543, 678493767, 2757899632, 3276695749, 1363370762, 1578035875, 555054787, 3093962781, 2222987767, 2130200534, 2053306276, 3948690640, 3249023873, 2343777324, 2833997966, 44199340, 1950451402, 1448991312, 1055067146, 3980624341, 1812874122, 2512418377, 3541037815, 714180005, 987816438, 3414079245, 1619142872, 4122595525, 3638144912, 3337941608, 2664929972, 1577036940, 206102296, 2850863132, 3729200403, 644729416, 844182047, 2261919397, 1040614315, 1776485562, 677708826, 223842114, 2591956969, 3141458682, 4271489476, 4253854271, 3973860423, 2805984925, 2908508806, 2328769351, 3865140, 4170270812, 1373888554, 1702101960, 3761095439, 3848481069, 812779025, 2073985983, 239315333, 1585392927, 2233774162, 2308108952, 3393306946, 2891660426, 1059096016, 2448311649, 2662483261, 422228248, 2356192519, 4004741305, 432651290, 2419877069, 3136967672, 329338548, 510605497, 2753410852, 2256462380, 3602678268, 2558451886, 324326056, 3822050324, 944965241, 4107093336, 1023337388, 564298141, 2977064774, 1802025909, 2329346614, 1460784428, 2510641562, 593994802, 4034614216, 4154528137, 3061249939, 487067285, 2856327155, 1909407614, 1782934804, 947220403, 2311402749, 3528590202, 2841893555, 3179384475, 3485733076, 87074890, 753396673, 790057962, 378850528, 3789224576, 3983502105, 1166116, 1854075229, 965611444, 3399039227, 3301304385, 3499808775, 1553588463, 2562124078, 3702675704, 1456114141, 768418804, 2227423616, 3711148950, 2738970313, 4033988307, 1184409529, 3461105405, 2986057969, 2112332635, 615658869, 2858394250, 2819269426, 499315937, 1714425168, 3816439521, 4188657733, 1226314395, 773286132, 1257824142, 2439511774, 1412431345, 451028253, 102711904, 3272107935, 1915128127, 674941443, 1907183006, 4205826365, 2592631544, 2001660887, 1793337902, 336832953, 1676534641, 439197643, 2175306211, 1969440247, 4084563735, 564896680, 1293717918, 1136684128, 4289259757, 2368216261, 3167549822, 1998645278, 2908859410, 2014400533, 1482521794, 3082876093, 2742987778, 3273667028, 1654313273, 3551772744, 1923315597, 1063687791, 1907747434, 3323400678, 3445870975, 316314436, 3905619499, 853586576, 456263058, 3213830894, 3603099146, 1478599807, 344267130, 1085971878, 2416474796, 247701271, 2926294528, 1981779524, 3809025846, 2106937971, 1596271124, 1289668306, 1824884242, 543613169, 2698011204, 1632632104, 179981234, 1091171130, 608067622, 4034608897, 2707671187, 2261524231, 2177175178, 1649366013, 733151281, 2783115482, 389580085, 495962438, 512715565, 1917819840, 1993385884, 2910358830, 3223741704, 3302008571, 857474180, 143995596, 3194737469, 2792999636, 111369357, 2665449999, 3481184513, 21965724, 172308864, 3373225896, 3941204120, 1487487599, 2697473345, 4173199839, 1988623177, 3567610975, 2393053467, 2231132558, 3798877543, 4275987399, 3626515970, 3957758644, 3196139612, 1577858639, 4145376193, 3982712357, 1316354617, 2476570111, 2796635786, 3673095113, 317782376, 38302891, 2729549772, 3124741082, 779634809, 480059945, 1764557943, 1905762442, 2439926326, 3398546304, 1275206055, 3578388510, 4286589961, 2284154687, 1547652572, 211218778, 4019993609, 1035325551, 47385212, 1413260320, 1895132671, 2144191841, 976730195, 880818479, 2944522030, 3051883625, 941172532, 1956827360, 604038865, 1490554868, 2014326554, 3585424155, 1705580179, 1484996770, 3145161387, 2410763156, 1196196268, 4125882510, 1569631240, 3635487118, 3743075539, 53348120, 3549050110, 2179975673, 1455493727, 909517499, 2034744814, 1815931219, 2625466993, 2328144852, 3083176966, 4185591290, 4232725936, 233807337, 987553443, 25498384, 1577858645, 3349985471, 222166290, 1566719496, 4025597331, 454410574, 4172717618, 3397690720, 1563985388, 1294197484, 454917824, 250364909, 1076318659, 3751354075, 3324840413, 2834288682, 1309780963, 3789459740, 1605544538, 1448439145, 1158482892, 407656226, 3589982226, 2670402128, 2795218845, 4079499284, 2736737218, 468906864, 347349067, 3541605667, 1532233501, 1192558327, 3650037602, 1570092544, 3596826230, 2768927258, 1775543901, 1324819997, 3401066173, 4078892370, 3373389918, 3360817112, 3261261117, 2443241006, 847292772, 3862028592, 4086319712, 1837673494, 3577160747, 2636413549, 4021668342, 573747407, 3546255858, 2787607684, 403421850, 3477281082, 4133820736, 332805644, 3663845239, 80993494, 344033777, 1187319040, 1547969768]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack2</span>(<span class="params">list1</span>):</span><br><span class="line">    predictor = ExtendMT19937Predictor()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>):</span><br><span class="line">        predictor.setrandbits(list1[i], <span class="number">32</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>):</span><br><span class="line">        predictor.backtrack_getrandbits(<span class="number">32</span>)</span><br><span class="line">    x = predictor.backtrack_getrandbits(<span class="number">128</span>)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">key = attack2(D)</span><br><span class="line"></span><br><span class="line">key = <span class="built_in">bytes</span>(<span class="built_in">list</span>(<span class="built_in">reversed</span>(<span class="built_in">list</span>(long_to_bytes(key)))))</span><br><span class="line"><span class="comment"># key = key.to_bytes(16, &#x27;little&#x27;)</span></span><br><span class="line"></span><br><span class="line">c =  <span class="string">b&#x27;a\x93\xdc\xc3\x90\x0cK\xfa\xfb\x1c\x05$y\x16:\xfc\xf3+\xf8+%\xfe\xf9\x86\xa3\x17i+ab\xca\xb6\xcd\r\xa5\x94\xeaVM\xdeo\xa7\xdf\xa9D\n\x02\xa3&#x27;</span></span><br><span class="line"></span><br><span class="line">cipher = AES.new(key,AES.MODE_ECB)</span><br><span class="line"><span class="built_in">print</span>(cipher.decrypt(c))</span><br><span class="line"></span><br><span class="line"><span class="comment"># WKCTF&#123;3f2af637b773613c18d27694f20d98fd&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="官方解"><a href="#官方解" class="headerlink" title="官方解"></a>官方解</h3><p>利用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0p1bGlhUG9vL01UMTk5MzctU3ltYm9saWMtRXhlY3V0aW9uLWFuZC1Tb2x2ZXI=">https://github.com/JuliaPoo/MT19937-Symbolic-Execution-and-Solver<i class="fa fa-external-link-alt"></i></span></p>
<p>这个项目上的脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Only [<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">24</span>, <span class="number">28</span>, <span class="number">32</span>] are supported</span><br></pre></td></tr></table></figure>
<p>有个限制，就是只能解 如上八种大小的随机数</p>
<p>详细使用方法见 <code>Demo of Features.ipynb</code> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rng_clone = MT19937(state_from_data=(rand, <span class="number">4</span>))</span><br></pre></td></tr></table></figure>
<p>无论随机数是4bit 还是 8bit，抑或其他几种，只需修改这个</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> unpad</span><br><span class="line">sys.path.append(<span class="string">&#x27;D:\Desktop\CTF\CTF工具\Sagemath\MT19937-Symbolic-Execution-and-Solver-master\source&#x27;</span>)</span><br><span class="line"><span class="keyword">from</span> MT19937 <span class="keyword">import</span> MT19937</span><br><span class="line"></span><br><span class="line">c = <span class="string">b&#x27;\x90\xddz\xbf@\xa2$a\xacGB\xe5\x1b\x1c\xa6\xc7&#x27;</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;random.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">rand = f.read().split(<span class="string">&#x27;\n&#x27;</span>)[:-<span class="number">1</span>]</span><br><span class="line">rand = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> rand]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Clone rng&#x27;s current state</span></span><br><span class="line">rng_clone = MT19937(state_from_data=(rand, <span class="number">4</span>))  <span class="comment"># Only [4, 8, 12, 16, 20, 24, 28, 32] are supported</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Reverse state by 4</span></span><br><span class="line">rng_clone.reverse_states(<span class="number">4</span>)</span><br><span class="line">reverse_states = [rng_clone() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line"><span class="comment"># 先生成的32比特放在低位</span></span><br><span class="line">k = reverse_states[<span class="number">0</span>] + reverse_states[<span class="number">1</span>]*<span class="number">2</span>**<span class="number">32</span> + reverse_states[<span class="number">2</span>]*<span class="number">2</span>**<span class="number">64</span> + reverse_states[<span class="number">3</span>]*<span class="number">2</span>**<span class="number">96</span></span><br><span class="line">key = k.to_bytes(<span class="number">16</span>, <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">cipher = AES.new(key,AES.MODE_ECB)</span><br><span class="line"><span class="built_in">print</span>(unpad(cipher.decrypt(c),<span class="number">16</span>).decode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># WKCTF&#123;3f2af637b773613c18d27694f20d98fd&#125;</span></span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">to_bytes(length, byteorder):</span><br><span class="line">length：结果字节对象的长度（字节数）。这里是 <span class="number">16</span>，意味着结果将是一个 <span class="number">16</span> 字节长的字节对象。</span><br><span class="line">byteorder：字节序，可以是 ‘big’ 或 ‘little’。</span><br><span class="line">‘big’：大端序（big -endian），高位字节在前。</span><br><span class="line">‘little’：小端序（little -endian），低位字节在前。</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="赣育杯2024-Random-dlp"><a href="#赣育杯2024-Random-dlp" class="headerlink" title="赣育杯2024-Random-dlp"></a>赣育杯2024-Random-dlp</h2><blockquote>
<p>2024-10-27</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m = getrandbits(<span class="number">128</span>)</span><br><span class="line">flag = <span class="string">b&#x27;Sangfor&#123;&#x27;</span>+<span class="built_in">str</span>(m).encode()+<span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line">big_bits = <span class="number">992</span></span><br><span class="line"></span><br><span class="line">x = getrandbits(<span class="number">32</span>)</span><br><span class="line">g = getrandbits(<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prime_number</span>(<span class="params">big_bits</span>):</span><br><span class="line">    number = getrandbits(big_bits)</span><br><span class="line">    number = number &lt;&lt; <span class="number">32</span></span><br><span class="line">    <span class="keyword">return</span> next_prime(number)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">g, x, p</span>):</span><br><span class="line">    c = <span class="built_in">pow</span>(g, x, p)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">c = encrypt(g, x, p)</span><br><span class="line">random_list1 = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    random_num1 = prime_number(big_bits)</span><br><span class="line">    random_num2 = prime_number(big_bits)</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">        Composite_number = random_num1 * random_num2</span><br><span class="line">        xor_prime = random_num1 ^ random_num2</span><br><span class="line">        random_list1.append(<span class="built_in">int</span>(Composite_number))</span><br><span class="line">        random_list1.append(<span class="built_in">int</span>(xor_prime))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        random_list1.append(<span class="built_in">int</span>(random_num1))</span><br><span class="line">        random_list1.append(<span class="built_in">int</span>(random_num2))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="built_in">str</span>(p)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    file.write(<span class="built_in">str</span>(g)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    file.write(<span class="built_in">str</span>(c)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    file.write(<span class="built_in">str</span>(random_list1)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    file.close()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Composite_number = random_num1 * random_num2</span><br><span class="line">xor_prime = random_num1 ^ random_num2</span><br></pre></td></tr></table></figure>
<p>给定p与q的异或求n的分解，剪枝</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">number = number &lt;&lt; <span class="number">32</span></span><br><span class="line"><span class="keyword">return</span> next_prime(number)</span><br></pre></td></tr></table></figure>
<p>因为 <code>&lt;&lt; 32</code>所以我们需要 <code>&gt;&gt; 32</code>，<code>next_prime</code> 就毫无影响</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">g = getrandbits(<span class="number">128</span>)</span><br></pre></td></tr></table></figure>
<p>再加上g，数据足够用于回溯了，</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> extend_mt19937_predictor <span class="keyword">import</span> ExtendMT19937Predictor</span><br><span class="line"></span><br><span class="line">sys.setrecursionlimit(<span class="number">1500</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># part1,剪枝</span></span><br><span class="line">a1= <span class="number">99955815136124674505677363553135840917216692678315165208714645876521277179009541555218693763972124093311337930953461092973753294192953068017272222852126250530936095477001144686822657131226982048667251579944854755923118519999180605689190568796547900773861811522756528982895318342111571405051796393985533019048</span></span><br><span class="line">b1= <span class="number">5065809221397249795914513089532241535418102663843841350285885091820845924268184747393712704066864872817411880187138570682343431633457955483256879427452674941369291914713556216448497708811437937958937996112215942003348660775545739352648178349311820872326958487644664192024604484132973905940652831298817064882948766270012275390175132095666103160877771192023394295841216195145461506875974150379337178597242564194005887140459925415651634648423371399820338191237184941903484527013807399340034262032276649742513332545447037957047893203075544536859894680877963124739172891482242764504898102716242397187522857902572172473057</span></span><br><span class="line"></span><br><span class="line">a1 = <span class="built_in">str</span>(<span class="built_in">bin</span>(a1)[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">p, q</span>):</span><br><span class="line">    l = <span class="built_in">len</span>(p)</span><br><span class="line">    tmp0 = p + (<span class="number">1024</span> - l) * <span class="string">&quot;0&quot;</span></span><br><span class="line">    tmp1 = p + (<span class="number">1024</span> - l) * <span class="string">&quot;1&quot;</span></span><br><span class="line">    tmq0 = q + (<span class="number">1024</span> - l) * <span class="string">&quot;0&quot;</span></span><br><span class="line">    tmq1 = q + (<span class="number">1024</span> - l) * <span class="string">&quot;1&quot;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">int</span>(tmp0, <span class="number">2</span>) &lt; <span class="built_in">int</span>(tmq0, <span class="number">2</span>)):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">int</span>(tmp0, <span class="number">2</span>) * <span class="built_in">int</span>(tmq0, <span class="number">2</span>) &gt; b1):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">elif</span> (<span class="built_in">int</span>(tmp1, <span class="number">2</span>) * <span class="built_in">int</span>(tmq1, <span class="number">2</span>) &lt; b1):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (l == <span class="number">1024</span>):</span><br><span class="line">        pp = <span class="built_in">int</span>(tmp0, <span class="number">2</span>)</span><br><span class="line">        qq = <span class="built_in">int</span>(tmq0, <span class="number">2</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;num1=&#x27;</span>,pp)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;num1=&#x27;</span>,qq)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> (a1[l] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">            find(p + <span class="string">&quot;1&quot;</span>, q + <span class="string">&quot;0&quot;</span>)</span><br><span class="line">            find(p + <span class="string">&quot;0&quot;</span>, q + <span class="string">&quot;1&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            find(p + <span class="string">&quot;0&quot;</span>, q + <span class="string">&quot;0&quot;</span>)</span><br><span class="line">            find(p + <span class="string">&quot;1&quot;</span>, q + <span class="string">&quot;1&quot;</span>)</span><br><span class="line"></span><br><span class="line">tempp = <span class="string">&quot;&quot;</span></span><br><span class="line">tempq = <span class="string">&quot;&quot;</span></span><br><span class="line">find(tempp, tempq)</span><br><span class="line"></span><br><span class="line">num1= <span class="number">127954378905954473979599580543506133734470934402921187567126328044915399136783613004594347893231249786782113863929878799565038392492182148282608301947643527866047185811106214065159313666530775740342170598378474744062316856449855121227117986037506212272472581097517909639356259473022026193056598279705883312493</span></span><br><span class="line">num2= <span class="number">39590745269613494512251071983478757508814280272882049594849029032543594900913069786771939178626302619505593605829896534613681707527396968070583148545044036306348014204000427687094161885558852315374684881011665955520787218713536145424007912730740353898075406161865607017294126568950247058934097741037059441349</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f = f.read()</span><br><span class="line">    p = <span class="built_in">eval</span>(f.decode().split(<span class="string">&#x27;\r\n&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">    g = <span class="built_in">eval</span>(f.decode().split(<span class="string">&#x27;\r\n&#x27;</span>)[<span class="number">1</span>])</span><br><span class="line">    c = <span class="built_in">eval</span>(f.decode().split(<span class="string">&#x27;\r\n&#x27;</span>)[<span class="number">2</span>])</span><br><span class="line">    random_list1 = <span class="built_in">eval</span>(f.decode().split(<span class="string">&#x27;\r\n&#x27;</span>)[-<span class="number">2</span>])</span><br><span class="line">    random_list1[<span class="number">0</span>] = num1</span><br><span class="line">    random_list1[<span class="number">1</span>] = num2</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(random_list1)):</span><br><span class="line">        random_list1[i] = random_list1[i]&gt;&gt;<span class="number">32</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack2</span>(<span class="params">list1</span>):</span><br><span class="line">    predictor = ExtendMT19937Predictor()</span><br><span class="line">    predictor.setrandbits(g, <span class="number">128</span>)		<span class="comment"># 这个位置注意一下</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">        predictor.setrandbits(list1[i], <span class="number">992</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">        predictor.backtrack_getrandbits(<span class="number">992</span>)</span><br><span class="line">    predictor.backtrack_getrandbits(<span class="number">128</span>)</span><br><span class="line">    predictor.backtrack_getrandbits(<span class="number">32</span>)</span><br><span class="line">    x = predictor.backtrack_getrandbits(<span class="number">128</span>)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">x = attack2(random_list1)</span><br><span class="line">flag = <span class="string">b&#x27;Sangfor&#123;&#x27;</span>+<span class="built_in">str</span>(x).encode()+<span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sangfor&#123;332419641733214815865048217860135168997&#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="Reference："><a href="#Reference：" class="headerlink" title="Reference："></a>Reference：</h1><p><span class="exturl" data-url="aHR0cHM6Ly9iYWRtb25rZXkuc2l0ZS9hcmNoaXZlcy9tdDE5OTM3">浅析MT19937伪随机数生成算法 - badmonkey<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyNTU3MTE1L2FydGljbGUvZGV0YWlscy8xMjgyMjgyMDE=">[CTF/randcrack]python随机数预测模块分析及改进方案_random.getrandbits(32)-CSDN博客<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL05vbnVwbGVCcm9rZW4vRXh0ZW5kTVQxOTkzN1ByZWRpY3Rvcg==">ExtendMT19937Predictor<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1hpb25nU2lxaV9ibG9nL2FydGljbGUvZGV0YWlscy8xNDA0MzI4Njc=">[WKCTF 2024] Crypto (random)_wkctf2024-CSDN博客<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>MT19937</tag>
      </tags>
  </entry>
  <entry>
    <title>LitCTF2024</title>
    <url>/Crypto/LitCTF2024/</url>
    <content><![CDATA[<p><strong>薄衾小枕凉天气，乍觉别离滋味。</strong></p>
<span id="more"></span>
<h2 id="small-e"><a href="#small-e" class="headerlink" title="small_e"></a>small_e</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">c_list = [<span class="number">438976</span>, <span class="number">1157625</span>, <span class="number">1560896</span>, <span class="number">300763</span>, <span class="number">592704</span>, <span class="number">343000</span>, <span class="number">1860867</span>, <span class="number">1771561</span>, <span class="number">1367631</span>, <span class="number">1601613</span>, <span class="number">857375</span>, <span class="number">1225043</span>, <span class="number">1331000</span>, <span class="number">1367631</span>, <span class="number">1685159</span>, <span class="number">857375</span>, <span class="number">1295029</span>, <span class="number">857375</span>, <span class="number">1030301</span>, <span class="number">1442897</span>, <span class="number">1601613</span>, <span class="number">140608</span>, <span class="number">1259712</span>, <span class="number">857375</span>, <span class="number">970299</span>, <span class="number">1601613</span>, <span class="number">941192</span>, <span class="number">132651</span>, <span class="number">857375</span>, <span class="number">1481544</span>, <span class="number">1367631</span>, <span class="number">1367631</span>, <span class="number">1560896</span>, <span class="number">857375</span>, <span class="number">110592</span>, <span class="number">1061208</span>, <span class="number">857375</span>, <span class="number">1331000</span>, <span class="number">1953125</span>]</span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c_list:</span><br><span class="line">    flag.append(libnum.nroot(i,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br><span class="line"></span><br><span class="line"><span class="comment"># LitCTF&#123;you_know_m_equ4l_cub3_root_0f_n&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="small-e-plus"><a href="#small-e-plus" class="headerlink" title="small_e_plus"></a>small_e_plus</h2><p>爆破</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">26287684934288536371438030224508784042871268975402791015134838900290249602701092702492594931306572692868654436714501196060619149020850402317982203575250568283872182497606239389480186694649979877566740647822434500023605871516831662099415987589808614777313595453727243531121031390104059097782466650186291076316486240197369759537327997880644540629964227584070506981319936888159712058406052247256554081989035415864476278146328967410452695134756792942103209740186339835071828587981271027235499355298543650516643100665039796305276163706693873611519506528344413021878980171629732211592839945004800782325172828561339662590291</span></span><br><span class="line">c_list = [<span class="number">2206795524649235905421691489826312664535869158473992241382107452229902627430789178221234450699214518235612692491501082306158268745610575202210170312762929300421312081998256557805289595256913161318967687803957784191522197708618872099119883772100567610799038030170491575261415069363292331223848994909959222662307903914818692008641789258455591462146141825906954662346647872459477376830019604449386735009274664469596162731339288162705222622464022019805917855614180415135305122287341306358535204977475464107550060171378721195970927993762052901722822033817371589592984818877687488499315074761849162622037910992107211284008</span>, <span class="number">5772355660578786193365289788142204471140300880779240030922539554921206850801450259027942229717816557629121843824901435845363716561820657469786680232585256790197665053482436914240306106895783671092825614792775018452789907242936725194811142759000550943111242261233418906869936542409260521957109457093880078265172230140113023756025958760162033801341277275818552619176398362323345440943751030254826411167403369778520042425875280132329006784704419423985932863729258308660619215866531848636409929423223281439774682034891288220844217705947244646337813999934326056219959633197870528867256797102445018262011480153115939973120</span>, <span class="number">1207753724090260852409848530096938494041869666191344850580616117902540004602216282128000198616910613629758228599152405146528856830526069167686468063404160733191610918533887137790198044549066176847699828584104335658872479915611835658770230456040566481519133420435691429577114944632254145293686212844875236028065213764327990843553209848826790721557229795796629116716323389485143635207391322758673224679570474982769025868784848121296090448593104527159728316178638031965733210974157123951201010132807247490252051791615388655934783546925682929869630639426022317978556708362738999927581494799492081969707506643799602026519</span>, <span class="number">23349127335265499093449067069020992112353295858939476460071138364566485897994252926437380788575729410533824920877221793075557803246884503318707565286465780619451837755333889863647223503631040527885884507188543322662521167319750343131600891690509665461069767205371629056201897374077580748284228605137071513643680112231720015635177198512671008206911131037246521082139072649111758853436401697265407050360284081221903913252963538698624243925508340434415847360772868692706825954252596535393923195017520961377182762938864807222401006410940590209478399415565644283710492027537832649211992078485373823473694670510027091811150</span>, <span class="number">10226019140134038624377317848115153109426202728030240919051914421470768415604166541259309040981729429302658204608838639560323294519400489855382683083386777345356043308705897287912341523315760693349431629528606884165134456829229982105748229536220053836967234793460400007088552230829556977946642054006994624346182400713981635617380105674142096166299590924644975504927529440869894823989816288037184537810548374154159131078285611810236360387224739364737369218239938401877019353452254541733135847328578198473654682547864026753170978019586975399474768379227943763421295905943744276512487256848753432567851910082922927470490</span>, <span class="number">23740354509167079065405461731971916754037420716194453557110579966491604804762436810357240604414289616234875179623546843181969909941655688193848922121025497722570206788206574369953117810580405098086613804927789389379000011120646581696237263731340862157598831413772589626428552355215317461446703978266643741459189148155110184955643416482312525932611502239696070143649593393180531208682271982848368078201739398938285094875058820959849311021066738043111703290623367049523633339597166603017770974672021851132978175318897057265294143015585933755643775222343716729295329665381969705644856166297065958733244549838186512052385</span>, <span class="number">449014525939717636067736015209424784219819246781576119976763479723069921555975991244061404426209241205491628463587064147168107292515973015167075933513053376730612977909688147192509972914228546673914859512456020534607548288441547681099206879988569397951304088877152364775649300942230940480095891405872756559515878791481146087187792174110744462062133353030045674834570611547897985227875674282106272664164460098105513231986703990634100117091825872525928884988567006942035220750862383326774903397508340077320163638705664083267751275414767422570459999305221215356075828860083175263731374754412655619766335149006888723996</span>, <span class="number">16724794744491727600425925395927244417134995504796613762545001848691858676855371900138882794396073589851705829977971925497098298081053830365847044742295241579270222074264270766160828536659842604404241318349399345391073018854800119637771843569778469196738774691245194283589151708822054754891860887285845079956055960799325451486703248118285066709862851457478898785928241590593187351807366412037409877885725182051826065860998104380663508501993855389845296242673609538795480745163836240239734138130049347272635936034792561725248889899428632572191869130319297765786132841511245497565771732921602763273993266122615935214603</span>, <span class="number">8335009241673468873253675068463589266426701056401774737990647304778993560605655347351631416630769577522424783603153098182609522990968188535194397812386924076809847791156568504352196579970447867606517135531565802449373639411293098029825159629692422202058452950834073234658264013415977347155192720165418683784735863643368164054960138519912292186928345518922656777075501616408802833213759105274620228201695472893761054437789976692657170111413189445894590722931833376629118468092175170858255694444972297979072766528207056455924414294930988285253186403605383727454401973318032223978796412991222953728595468797201373820622</span>, <span class="number">1717028738196915227260339129573501065417757436024070728399837662683474643676720266190852688571851260086024584528234004503770202991702828738603236485267929860326697228640681326889845794391744206929580676537615769150484083242039924741303807364343064097449659558370778499818290907827480001580408520014110979083082316647497828342236619136282585160822630608240519352654269080203964531142386474415714079196749108940162898716817139452352062000261548631825989143362746715121123292436275957550673873937398160148303975715603319819731258894296533494152025775404106195174909015831441339509280028585399046169513149752204461930349</span>, <span class="number">6253489839553538192995294139816446969824750751774728963617638345595670445770677500921617837218605680169746240573789832579137206230177143500699620111070145585461358354523003959756713830108697398762585026303196668650471722612722372863973566811324151291707208671745892059398682725808801715988328719567890446420981480784833951835550433358928430667547317456646990287369723084794020241264506154652275756123282486762023979426752588250225435784747977075518696454125522814567504866613306081720330538332436897331017796420408357014130003339073229042803329670944110125353218213811432346818713964878168764790792105206633440354005</span>, <span class="number">1207753724090260852409848530096938494041869666191344850580616117902540004602216282128000198616910613629758228599152405146528856830526069167686468063404160733191610918533887137790198044549066176847699828584104335658872479915611835658770230456040566481519133420435691429577114944632254145293686212844875236028065213764327990843553209848826790721557229795796629116716323389485143635207391322758673224679570474982769025868784848121296090448593104527159728316178638031965733210974157123951201010132807247490252051791615388655934783546925682929869630639426022317978556708362738999927581494799492081969707506643799602026519</span>, <span class="number">5772355660578786193365289788142204471140300880779240030922539554921206850801450259027942229717816557629121843824901435845363716561820657469786680232585256790197665053482436914240306106895783671092825614792775018452789907242936725194811142759000550943111242261233418906869936542409260521957109457093880078265172230140113023756025958760162033801341277275818552619176398362323345440943751030254826411167403369778520042425875280132329006784704419423985932863729258308660619215866531848636409929423223281439774682034891288220844217705947244646337813999934326056219959633197870528867256797102445018262011480153115939973120</span>, <span class="number">1717028738196915227260339129573501065417757436024070728399837662683474643676720266190852688571851260086024584528234004503770202991702828738603236485267929860326697228640681326889845794391744206929580676537615769150484083242039924741303807364343064097449659558370778499818290907827480001580408520014110979083082316647497828342236619136282585160822630608240519352654269080203964531142386474415714079196749108940162898716817139452352062000261548631825989143362746715121123292436275957550673873937398160148303975715603319819731258894296533494152025775404106195174909015831441339509280028585399046169513149752204461930349</span>, <span class="number">16954257214609715453949449319699339161494232855569310228933510507504171504126469206091874371244790265592761015613256403517471291015511338346765442554575984841436537843152588028133877350821930031082920487532579036233128796943768462075658517963544351576867080570835108123172127678561307490005618742426940555485915573421790050723171701483141269800431262504278004147886695150170337842904413809555649193394856219267444671017423976317095448634183238063104910602376968654113825856753568856181455666796555652402905808458114516561773417952991326953537750434218624122318995368477991659040481704212571743288062208854477599259233</span>, <span class="number">16724794744491727600425925395927244417134995504796613762545001848691858676855371900138882794396073589851705829977971925497098298081053830365847044742295241579270222074264270766160828536659842604404241318349399345391073018854800119637771843569778469196738774691245194283589151708822054754891860887285845079956055960799325451486703248118285066709862851457478898785928241590593187351807366412037409877885725182051826065860998104380663508501993855389845296242673609538795480745163836240239734138130049347272635936034792561725248889899428632572191869130319297765786132841511245497565771732921602763273993266122615935214603</span>, <span class="number">5185490165247175755074805103840625687511977590976733896967715184223982955725681935365096951517529730737911572507779959945930556296503873230438433692310842981978848881986205067999307067785730415524359447947414935770806603135319166013408164683315806218163318125978230966989985398051513033616788512784230934142137906332152151059584574222941527730647262944250765844919176013002939308197949589859844618414360065768222159786067710805154244111569645546199262226746460081578671653615283375596665960708242700241780342523448742861815380568359092813225600016747957517992666799497302478221946509254852979437130583539850985247422</span>, <span class="number">1748234508408435343229319253644625402817707176509451594647354284826288727338735967235360246609210161049023834307132290872525340273117113455850690260255921823613621383639409134488848519959372177408937889998552431530493839856756914185531673290249084408278489645057787655359507244021027375565961471003583528932265312366403288884176948556324167675395562225956088863571715251876674710333918813480215719798596428736037441464450389735436535142133977551778467378533427938402690627170065561491269748888688911598444983102702261665208037447965537895418969759387684448834920453303484908559802952752182953165141625674023904414158</span>, <span class="number">11012890581084315425095922547777050020962029248110211263311188736825161568336991045243917700829742195694068118244042803336244383422040087972310576680130493039066637029837297205028290343840934744140990838248421706520572790950203052596858612764294640351774272157943334862976359969574219205290501939867352064476895317015572786888474774760071718201404856802312145427767679849647981118814029138127523521157700904020659839293447586228220702194369342121785362851205183676546931393764208787501487430625010774845511515509394872334800320955439381971987176625826068199951062429360895302585774691509075464492623725384467268825285</span>, <span class="number">5976772453334984518311442738240004799220403662435440872185530863193424233037367952925902243175234771035939695813307154967530503941081645934538688267920825967077726208002575899575371222695901346361307413004351281869655229087644917183767240951265807406293078230174759543645470570834782744332808979716142354429389228605592485271438778026468985249730030159932637979600514791593524263931036554765213297195922837236962842381131840868115187459577702023810124989825582700575011520568245435377833934768593346195065831458857440454704013911127816011037625063876159283174160162690848395114549568308205531592017492613772445173774</span>, <span class="number">5185490165247175755074805103840625687511977590976733896967715184223982955725681935365096951517529730737911572507779959945930556296503873230438433692310842981978848881986205067999307067785730415524359447947414935770806603135319166013408164683315806218163318125978230966989985398051513033616788512784230934142137906332152151059584574222941527730647262944250765844919176013002939308197949589859844618414360065768222159786067710805154244111569645546199262226746460081578671653615283375596665960708242700241780342523448742861815380568359092813225600016747957517992666799497302478221946509254852979437130583539850985247422</span>, <span class="number">6452875340997852295275020218749378916760411126851936571996259386760459856313309845592392640856504175949234216794963908475913037761993360407125952607943943083700382006783091443756617877566422165299422992987336811474980284131306966940424642139162441283769172531199959298540627795873212152702317440453079566096174835647147665695679094943137671532124636863128457006714211465119286776747310503452130041649279123753848522079886216732719572247000481047269505214596261386534160935834909921155351371984109147724730932926711831690752003577272018655013647352055561080857579522667684581123594159788011149227192380455462896729962</span>, <span class="number">6253489839553538192995294139816446969824750751774728963617638345595670445770677500921617837218605680169746240573789832579137206230177143500699620111070145585461358354523003959756713830108697398762585026303196668650471722612722372863973566811324151291707208671745892059398682725808801715988328719567890446420981480784833951835550433358928430667547317456646990287369723084794020241264506154652275756123282486762023979426752588250225435784747977075518696454125522814567504866613306081720330538332436897331017796420408357014130003339073229042803329670944110125353218213811432346818713964878168764790792105206633440354005</span>, <span class="number">6253489839553538192995294139816446969824750751774728963617638345595670445770677500921617837218605680169746240573789832579137206230177143500699620111070145585461358354523003959756713830108697398762585026303196668650471722612722372863973566811324151291707208671745892059398682725808801715988328719567890446420981480784833951835550433358928430667547317456646990287369723084794020241264506154652275756123282486762023979426752588250225435784747977075518696454125522814567504866613306081720330538332436897331017796420408357014130003339073229042803329670944110125353218213811432346818713964878168764790792105206633440354005</span>, <span class="number">20897947836932076779964827384680266669444872541242595584853544810847660781809255811902379402727265984145972717558208216627868351476262475424181241317707734298108218231636329375895362429626917095073694210812814494087830535014117884013936787285440467171742761631884901929078488856204289738449061959822388725333274257861099169377435400465998662612618115681519773625182456433449001773543437767201553703283209697249003117284877232666946456539017194397166088957330100388776645543342462188483091150441369824235427061443229429025534194618806460187812446633057673388068141804189503074739767911838028579099128625845793341901127</span>, <span class="number">5185490165247175755074805103840625687511977590976733896967715184223982955725681935365096951517529730737911572507779959945930556296503873230438433692310842981978848881986205067999307067785730415524359447947414935770806603135319166013408164683315806218163318125978230966989985398051513033616788512784230934142137906332152151059584574222941527730647262944250765844919176013002939308197949589859844618414360065768222159786067710805154244111569645546199262226746460081578671653615283375596665960708242700241780342523448742861815380568359092813225600016747957517992666799497302478221946509254852979437130583539850985247422</span>, <span class="number">1207753724090260852409848530096938494041869666191344850580616117902540004602216282128000198616910613629758228599152405146528856830526069167686468063404160733191610918533887137790198044549066176847699828584104335658872479915611835658770230456040566481519133420435691429577114944632254145293686212844875236028065213764327990843553209848826790721557229795796629116716323389485143635207391322758673224679570474982769025868784848121296090448593104527159728316178638031965733210974157123951201010132807247490252051791615388655934783546925682929869630639426022317978556708362738999927581494799492081969707506643799602026519</span>, <span class="number">8335009241673468873253675068463589266426701056401774737990647304778993560605655347351631416630769577522424783603153098182609522990968188535194397812386924076809847791156568504352196579970447867606517135531565802449373639411293098029825159629692422202058452950834073234658264013415977347155192720165418683784735863643368164054960138519912292186928345518922656777075501616408802833213759105274620228201695472893761054437789976692657170111413189445894590722931833376629118468092175170858255694444972297979072766528207056455924414294930988285253186403605383727454401973318032223978796412991222953728595468797201373820622</span>, <span class="number">5185490165247175755074805103840625687511977590976733896967715184223982955725681935365096951517529730737911572507779959945930556296503873230438433692310842981978848881986205067999307067785730415524359447947414935770806603135319166013408164683315806218163318125978230966989985398051513033616788512784230934142137906332152151059584574222941527730647262944250765844919176013002939308197949589859844618414360065768222159786067710805154244111569645546199262226746460081578671653615283375596665960708242700241780342523448742861815380568359092813225600016747957517992666799497302478221946509254852979437130583539850985247422</span>, <span class="number">25920961707523393202281300218444176129734572566815781137488940145677301500180714145402663962373623882683655757546713176923316428191765157386415468883815905581966232659296756935108128028157735278704173240867754374892767863985119564774915890766313799183822643494869775607043330683224121234927784433937849569120283272329925062133702698267726766476110289877776286080853490841837897993369872640809289989540435112046742658888426704252633322563361442888492873827942589957261396606340845665522400646771232316872444568013520651608356878655632725425106340256031308528158877727958784150436116095788759918507442721063497464001672</span>, <span class="number">6253489839553538192995294139816446969824750751774728963617638345595670445770677500921617837218605680169746240573789832579137206230177143500699620111070145585461358354523003959756713830108697398762585026303196668650471722612722372863973566811324151291707208671745892059398682725808801715988328719567890446420981480784833951835550433358928430667547317456646990287369723084794020241264506154652275756123282486762023979426752588250225435784747977075518696454125522814567504866613306081720330538332436897331017796420408357014130003339073229042803329670944110125353218213811432346818713964878168764790792105206633440354005</span>, <span class="number">25663191423484921175412364224530127146643925340004154726702279647143356157592854508759921404410754752035271117262826349048515204905598320781277358442584209773238813165864338686191131303650343111109522647292342262318312191154828123703005048694144581658454332596649591143235675787721964930836353194643708891591880016775053451232129740204331045326847472524157097116402350309528683224670236144960836423799755065339099128269152330465141709080678776263364496603148723855163217962603724059472220503607467867433663538613289855157923304803789694579660594681244121347757234971567712156039920653800971260669403951884026752686998</span>, <span class="number">6253489839553538192995294139816446969824750751774728963617638345595670445770677500921617837218605680169746240573789832579137206230177143500699620111070145585461358354523003959756713830108697398762585026303196668650471722612722372863973566811324151291707208671745892059398682725808801715988328719567890446420981480784833951835550433358928430667547317456646990287369723084794020241264506154652275756123282486762023979426752588250225435784747977075518696454125522814567504866613306081720330538332436897331017796420408357014130003339073229042803329670944110125353218213811432346818713964878168764790792105206633440354005</span>, <span class="number">25920961707523393202281300218444176129734572566815781137488940145677301500180714145402663962373623882683655757546713176923316428191765157386415468883815905581966232659296756935108128028157735278704173240867754374892767863985119564774915890766313799183822643494869775607043330683224121234927784433937849569120283272329925062133702698267726766476110289877776286080853490841837897993369872640809289989540435112046742658888426704252633322563361442888492873827942589957261396606340845665522400646771232316872444568013520651608356878655632725425106340256031308528158877727958784150436116095788759918507442721063497464001672</span>, <span class="number">13263786466446190163016008769836220535269357696454674792666135258902640846903309780108315355392508130227345512883180524670260067683978830659316889987124447343297390324463103766540103214985414999778290407008190424180154779235834484101584174703692738403343419550940166812669376385233441159764013001794070232476009158915966454070958519878855933028785291151945528736387913371707135653596226023268592330842008453104190134667308270525900634583278545983101946869551676698088147890541479096323734726116488316329827416755818060204664181280485697259466218350842103872751987842240867163996948996727825810630964777385967911053901</span>, <span class="number">6253489839553538192995294139816446969824750751774728963617638345595670445770677500921617837218605680169746240573789832579137206230177143500699620111070145585461358354523003959756713830108697398762585026303196668650471722612722372863973566811324151291707208671745892059398682725808801715988328719567890446420981480784833951835550433358928430667547317456646990287369723084794020241264506154652275756123282486762023979426752588250225435784747977075518696454125522814567504866613306081720330538332436897331017796420408357014130003339073229042803329670944110125353218213811432346818713964878168764790792105206633440354005</span>, <span class="number">5185490165247175755074805103840625687511977590976733896967715184223982955725681935365096951517529730737911572507779959945930556296503873230438433692310842981978848881986205067999307067785730415524359447947414935770806603135319166013408164683315806218163318125978230966989985398051513033616788512784230934142137906332152151059584574222941527730647262944250765844919176013002939308197949589859844618414360065768222159786067710805154244111569645546199262226746460081578671653615283375596665960708242700241780342523448742861815380568359092813225600016747957517992666799497302478221946509254852979437130583539850985247422</span>, <span class="number">1748234508408435343229319253644625402817707176509451594647354284826288727338735967235360246609210161049023834307132290872525340273117113455850690260255921823613621383639409134488848519959372177408937889998552431530493839856756914185531673290249084408278489645057787655359507244021027375565961471003583528932265312366403288884176948556324167675395562225956088863571715251876674710333918813480215719798596428736037441464450389735436535142133977551778467378533427938402690627170065561491269748888688911598444983102702261665208037447965537895418969759387684448834920453303484908559802952752182953165141625674023904414158</span>, <span class="number">8335009241673468873253675068463589266426701056401774737990647304778993560605655347351631416630769577522424783603153098182609522990968188535194397812386924076809847791156568504352196579970447867606517135531565802449373639411293098029825159629692422202058452950834073234658264013415977347155192720165418683784735863643368164054960138519912292186928345518922656777075501616408802833213759105274620228201695472893761054437789976692657170111413189445894590722931833376629118468092175170858255694444972297979072766528207056455924414294930988285253186403605383727454401973318032223978796412991222953728595468797201373820622</span>, <span class="number">5976772453334984518311442738240004799220403662435440872185530863193424233037367952925902243175234771035939695813307154967530503941081645934538688267920825967077726208002575899575371222695901346361307413004351281869655229087644917183767240951265807406293078230174759543645470570834782744332808979716142354429389228605592485271438778026468985249730030159932637979600514791593524263931036554765213297195922837236962842381131840868115187459577702023810124989825582700575011520568245435377833934768593346195065831458857440454704013911127816011037625063876159283174160162690848395114549568308205531592017492613772445173774</span>, <span class="number">25920961707523393202281300218444176129734572566815781137488940145677301500180714145402663962373623882683655757546713176923316428191765157386415468883815905581966232659296756935108128028157735278704173240867754374892767863985119564774915890766313799183822643494869775607043330683224121234927784433937849569120283272329925062133702698267726766476110289877776286080853490841837897993369872640809289989540435112046742658888426704252633322563361442888492873827942589957261396606340845665522400646771232316872444568013520651608356878655632725425106340256031308528158877727958784150436116095788759918507442721063497464001672</span>, <span class="number">5185490165247175755074805103840625687511977590976733896967715184223982955725681935365096951517529730737911572507779959945930556296503873230438433692310842981978848881986205067999307067785730415524359447947414935770806603135319166013408164683315806218163318125978230966989985398051513033616788512784230934142137906332152151059584574222941527730647262944250765844919176013002939308197949589859844618414360065768222159786067710805154244111569645546199262226746460081578671653615283375596665960708242700241780342523448742861815380568359092813225600016747957517992666799497302478221946509254852979437130583539850985247422</span>, <span class="number">1717028738196915227260339129573501065417757436024070728399837662683474643676720266190852688571851260086024584528234004503770202991702828738603236485267929860326697228640681326889845794391744206929580676537615769150484083242039924741303807364343064097449659558370778499818290907827480001580408520014110979083082316647497828342236619136282585160822630608240519352654269080203964531142386474415714079196749108940162898716817139452352062000261548631825989143362746715121123292436275957550673873937398160148303975715603319819731258894296533494152025775404106195174909015831441339509280028585399046169513149752204461930349</span>, <span class="number">25139940794218635348197118071301083238188918027193611763525774422502805824030159181810808048312828586310375271390658874846166941305171889519472685469675087274773157307133820213186080599249106104274031234797703970573904818411381605617364965926619916397551349237481884885723093798237875561681274880161116978250140685000915537069110074814807782361116104719639226963741990834724296742064451257526339309855861251778350642631845345431897638639307184086434344778694684043943923041302280417162444914203825532942834207262516015206535412006876830590028421616204643350943277314562927607754616803756985741638210493640875844891960</span>, <span class="number">6452875340997852295275020218749378916760411126851936571996259386760459856313309845592392640856504175949234216794963908475913037761993360407125952607943943083700382006783091443756617877566422165299422992987336811474980284131306966940424642139162441283769172531199959298540627795873212152702317440453079566096174835647147665695679094943137671532124636863128457006714211465119286776747310503452130041649279123753848522079886216732719572247000481047269505214596261386534160935834909921155351371984109147724730932926711831690752003577272018655013647352055561080857579522667684581123594159788011149227192380455462896729962</span>, <span class="number">20897947836932076779964827384680266669444872541242595584853544810847660781809255811902379402727265984145972717558208216627868351476262475424181241317707734298108218231636329375895362429626917095073694210812814494087830535014117884013936787285440467171742761631884901929078488856204289738449061959822388725333274257861099169377435400465998662612618115681519773625182456433449001773543437767201553703283209697249003117284877232666946456539017194397166088957330100388776645543342462188483091150441369824235427061443229429025534194618806460187812446633057673388068141804189503074739767911838028579099128625845793341901127</span>, <span class="number">11585318389310082289634538436928729260761907754954731989483654384251165000197213645281370351397028539366128403662173911562239143321895246754339672995138654604980948825905276968754585440593530502031072587489418651687027546522269634035791996102885960686969316226732356317109881863779734224468395519503131972389118986368190443032576070941428487054450651328773394985517568216579647364967614926730248841713741600286001390136757473284393174512577204042060290369663604703262495330209924328523120390710228628984130500686686583318088441875055416917520119056403841430529851364998090755804939747123419334984081027473820456086396</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> trange(<span class="number">1000</span>,<span class="number">2000</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c_list)):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">pow</span>(i,e,n) == c_list[j]:</span><br><span class="line">                flag += <span class="built_in">chr</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># LitCTF&#123;sometim3s_y0u_need_to_rever5e_your_m1nd&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="common-primes"><a href="#common-primes" class="headerlink" title="common_primes"></a>common_primes</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">n1 = <span class="number">63306931765261881888912008095340470978772999620205174857271016152744820165330787864800482852578992473814976781143226630412780924144266471891939661312715157811674817013479316983665960087664430205713509995750877665395721635625035356901765881750073584848176491668327836527294900831898083545883834181689919776769</span></span><br><span class="line">n2 = <span class="number">73890412251808619164803968217212494551414786402702497903464017254263780569629065810640215252722102084753519255771619560056118922616964068426636691565703046691711267156442562144139650728482437040380743352597966331370286795249123105338283013032779352474246753386108510685224781299865560425114568893879804036573</span></span><br><span class="line">c1 = <span class="number">11273036722994861938281568979042367628277071611591846129102291159440871997302324919023708593105900105417528793646809809850626919594099479505740175853342947734943586940152981298688146019253712344529086852083823837309492466840942593843720630113494974454498664328412122979195932862028821524725158358036734514252</span></span><br><span class="line">c2 = <span class="number">42478690444030101869094906005321968598060849172551382502632480617775125215522908666432583017311390935937075283150967678500354031213909256982757457592610576392121713817693171520657833496635639026791597219755461854281419207606460025156812307819350960182028395013278964809309982264879773316952047848608898562420</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">p = libnum.gcd(n1,n2)</span><br><span class="line">q = n1//p</span><br><span class="line">d = libnum.invmod(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">pow</span>(c1,d,n1)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># LitCTF&#123;c0mmunity_w1th_two_ciphert3xt&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="common-primes-plus"><a href="#common-primes-plus" class="headerlink" title="common_primes_plus"></a>common_primes_plus</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">n1 = <span class="number">72619153900682160072296441595808393095979917106156741746523649725579328293061366133340736822282117284050717527134297532031234706715551253283030119063143935874516054785948327252045453986903379262257406260016876625891582923191913450785482873961282498295762698500898694660964018533698142756095427829906473038053</span></span><br><span class="line">hint1 = <span class="number">115150932086321440397498980975794957800400136337062771258224890596200580556053305338941267789684878816176014493153795643655219028833232337281425177163963414534998897852644398384446019097451620742463880027107068960452304016955877225140421899265978792650445328111566277376529454404089066088845864500514742797060500618255170627</span></span><br><span class="line">hint2 = <span class="number">166820160267525807953634213157298160399912450930658918773153592459310847514047652216110562360456335336533080444219104489314586122760398361430693763814336759476811490524054588094610387417965626546375189720748660483054863693527537614055954695966458622029711055735399842018236940424665041143785192280089418185085532002136215976</span></span><br><span class="line">c = <span class="number">28378912671104261862184597375842174085651209464660064937481961814538145807266472966765374317717522401362019901110151858589886717440587644003368826809403188935808872400614919296641885383025657934630410406898092262104442977722339379234085663757182028529198392480656965957860644395092769333414671609962801212632</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(e):</span><br><span class="line">    f = hint2*hint1+i*n1</span><br><span class="line">    g = libnum.gcd(f,n1)</span><br><span class="line">    <span class="keyword">if</span> g.bit_length() == <span class="number">512</span>:</span><br><span class="line">        d = libnum.invmod(e, g - <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(libnum.n2s(<span class="built_in">pow</span>(c, d, g)))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># LitCTF&#123;th1s_i5_a_adv4nced_c0mmon_prim3s&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="CRT"><a href="#CRT" class="headerlink" title="CRT"></a>CRT</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CRT</span>(<span class="params">mi, ai</span>):</span><br><span class="line">    <span class="keyword">assert</span>(reduce(gmpy2.gcd,mi)==<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">assert</span> (<span class="built_in">isinstance</span>(mi, <span class="built_in">list</span>) <span class="keyword">and</span> <span class="built_in">isinstance</span>(ai, <span class="built_in">list</span>))</span><br><span class="line">    M = reduce(<span class="keyword">lambda</span> x, y: x * y, mi)</span><br><span class="line">    ai_ti_Mi = [a * (M // m) * gmpy2.invert(M // m, m) <span class="keyword">for</span> (m, a) <span class="keyword">in</span> <span class="built_in">zip</span>(mi, ai)]</span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x, y: x + y, ai_ti_Mi) % M</span><br><span class="line"></span><br><span class="line">e= <span class="number">10</span></span><br><span class="line">n_list = [<span class="number">16284549467215459860410219597024063610473673936290355100056351270928590364613988243842136274404316005691228851657707321037165033870804113001550943722154728825877813376691406849932899693973387282799799300076386870984605589385666352824740622229871992727011987847056429850720207816048044538068625281977059392365698031140268787802886018698622326103590834314940280191560618753408741810842189500991556860816195814550884416201667771827582907240044216817705876129993030771943110090291383205720587816820335839616491257078918258839986942101986011761809815192713499542329037877195448381127272183807358011340669666067708631770629</span>, <span class="number">18874449316683637715798227591079994715220250787784886038879393543606786017564740000007881151950098752600868917271951840433212429335449734520464340460962870875528399394278620757114832553403790578599857545045548782264680469899469733610229824411943119032419052885845035690046611519195843721184869834557481917675133504256150187042147269721516549831707784660343957497462516302534697915170087780048689613921549811073805796084838801677337285061667687328043565589734203160196445644144798845303226939960633632967262794622796927905511547760465906600293964201276584199569541295613430382495278352554280248372584117917520373403063</span>, <span class="number">13076908038170870040678205430512292701702182383746502395067907294908791921755288520053025319156015431312084703402938465525746196078114225446604200656116848235842943713613538425047483331236843707852400888407037547782069810250229035895403347555287877301409523248658733500963325361631821388259137561613536275954710848967383282290486421290937700396986650186236373076267188846407623991396459884128392118502565707689494271484411270172764553747426536404781904379621870642658609027074757591034785814602602669666257742808888301912575857074138613714693225934811254682687014167022418837710552784925328161453554291397460324648009</span>, <span class="number">16378397749449315054623854181248970586445531404081850673625192835136416152712968780451149412408644689393643801969477034418829482292894114547339155149570026460766659623960243723741437212596779580161767297321149670682427000047000712397718946486472118638780090056091542235702825736985864963592363421943353726975184567975451918105247987573044010599149673027905021130138957885113596669923366241161695565837122963976988635649640547443201925034845002113548522307980664206158188711548845245115694530280375848933481227411503982144621846732228815377656607983358898296200251680387871097014543693213877074718748683243193584032307</span>, <span class="number">16561385664507310659703460597815131331175620854125898893505075859155749890511144622913872488783791188180242785479319865960633526830814389031162024199864660323116594980719331106368397062852472114748955889862650270563487466194545102072373606964935390400328607060427961354290055443710114639781630071832997101380097322119243847190066266823291236828718017385537809056374392924015081117151158033309950857254309859691442649968222489177513517837849318096762149934959873646750864750378500351560253453052870424424427631414365680967482680769587570457938750679258205430151223470761518748987038822469422647137405393267829437115661</span>, <span class="number">27046459277694602448592524332290812177367631061914086306537115904955610821120392893033090428641088790759783810505225125618182431554899875183961418066959811832057748013953098277804562621152445358481976221983179988257658622392669474721482514871569548645762057681213193026792187879687736985533503283192537252904253565317763028483404018596514523171644666753183517320602643087213777450193062371986178076259168860180486748722567326484282893069173271762518110920685267104269429407229859993484209639764440874444582271870147714648808732931399985199947422716048582921727875237459841962093669408116061538502016560235135864203187</span>, <span class="number">26656304012303785684433399162699704691814095671158676770279115782799819097401667611247727555104978633884125246262630572285699884039990597392442760154412046297340436752418017863089245998557221143069544231044947583991838381529081774245290065442299808728542273138931461712874414662570197142795674160946728850452526786804787060582942714635903943088540232346797109678405554499677459722287119125623191067780196726820726456507802067342186435679967664032334075189916733352409403602499298544374351405005339596410771187606377781063995755795494682971576602822244457151090982442689870155439418641987576796032975032982289138437523</span>, <span class="number">15430339362720939092241771692575439580654810089653970198317149114896596238037181680990393763581287618371554846982066535980062263001619707606585504112155505335852802431392213092366756058196440934454810685146101829974548748060332228708229146991380736668433937967747468330692411917426038703359064546899782163287526256750039064809093426968389929333819191207284079703677535201724530391246890003928025687520199553868464322185815354591044585221486768114570373992719977614232251764409893171263639718616620216630797031237033969290978218328767317279717825174597882707772846934097838694418308236053838800414834627456689940059791</span>, <span class="number">18567217334857361786819913577261265078968886790989901098066320191741355103505838160569648197557648144402318678198622602821398215265062903833980611331991924162821902705417905758829862021425828310098183855605162264362860669298956185657733562472361876121183146316333113433547558152618165933865808900552444816088227098441082165477634812598644531670232452276788291537671779564658425789722419032860803991282640262179618723470437500425645011269733791887608702964571393657348573277992781115199432229176320688981128912052074722348557580462855962547978505669490105804175211061178124988260957275350940324541120102820024607088877</span>, <span class="number">10779265483116424102513175333888918968735912126282080716409998310381429332303237383487628664073567555863832134055945636657550074126628975203541323090803941066893475056319351674995896497450955897099614503220268400135112031310669044989879413178359759130908036871112663414065113664951350386824618325532532761206110118269005313068956882540007289422776225718534047101012876346009269097785027585782628699252006893938086064139042361425306202870627629615292450559291783382487842611805623198422252868756644595549320868144393828052610953995595915294930701560599016888539448223935199483656756326744914184772404419968728372785709</span>]</span><br><span class="line">c_list = [<span class="number">644471004204038587358576160407417490938643306027967868486894032686145771114614076076527690366372762614045209015175209880518279715723521182568975220993976451106760236390912778371250746699463366097164369672789316408520079193370191810477580463635224092686607896863852671881543817329521589324466628227730589108339783619357530316049670209743367574983963078106666377633552745384690084183804939047320711873053569717432670155045869610477526046503868585690544254566603491357805849009447674789480061139157433156989123228768899846183291164697221164452100037658563026884070301188916984245139290761779580443049</span>, <span class="number">644471004204038587358576160407417490938643306027967868486894032686145771114614076076527690366372762614045209015175209880518279715723521182568975220993976451106760236390912778371250746699463366097164369672789316408520079193370191810477580463635224092686607896863852671881543817329521589324466628227730589108339783619357530316049670209743367574983963078106666377633552745384690084183804939047320711873053569717432670155045869610477526046503868585690544254566603491357805849009447674789480061139157433156989123228768899846183291164697221164452100037658563026884070301188916984245139290761779580443049</span>, <span class="number">644471004204038587358576160407417490938643306027967868486894032686145771114614076076527690366372762614045209015175209880518279715723521182568975220993976451106760236390912778371250746699463366097164369672789316408520079193370191810477580463635224092686607896863852671881543817329521589324466628227730589108339783619357530316049670209743367574983963078106666377633552745384690084183804939047320711873053569717432670155045869610477526046503868585690544254566603491357805849009447674789480061139157433156989123228768899846183291164697221164452100037658563026884070301188916984245139290761779580443049</span>, <span class="number">644471004204038587358576160407417490938643306027967868486894032686145771114614076076527690366372762614045209015175209880518279715723521182568975220993976451106760236390912778371250746699463366097164369672789316408520079193370191810477580463635224092686607896863852671881543817329521589324466628227730589108339783619357530316049670209743367574983963078106666377633552745384690084183804939047320711873053569717432670155045869610477526046503868585690544254566603491357805849009447674789480061139157433156989123228768899846183291164697221164452100037658563026884070301188916984245139290761779580443049</span>, <span class="number">644471004204038587358576160407417490938643306027967868486894032686145771114614076076527690366372762614045209015175209880518279715723521182568975220993976451106760236390912778371250746699463366097164369672789316408520079193370191810477580463635224092686607896863852671881543817329521589324466628227730589108339783619357530316049670209743367574983963078106666377633552745384690084183804939047320711873053569717432670155045869610477526046503868585690544254566603491357805849009447674789480061139157433156989123228768899846183291164697221164452100037658563026884070301188916984245139290761779580443049</span>, <span class="number">644471004204038587358576160407417490938643306027967868486894032686145771114614076076527690366372762614045209015175209880518279715723521182568975220993976451106760236390912778371250746699463366097164369672789316408520079193370191810477580463635224092686607896863852671881543817329521589324466628227730589108339783619357530316049670209743367574983963078106666377633552745384690084183804939047320711873053569717432670155045869610477526046503868585690544254566603491357805849009447674789480061139157433156989123228768899846183291164697221164452100037658563026884070301188916984245139290761779580443049</span>, <span class="number">644471004204038587358576160407417490938643306027967868486894032686145771114614076076527690366372762614045209015175209880518279715723521182568975220993976451106760236390912778371250746699463366097164369672789316408520079193370191810477580463635224092686607896863852671881543817329521589324466628227730589108339783619357530316049670209743367574983963078106666377633552745384690084183804939047320711873053569717432670155045869610477526046503868585690544254566603491357805849009447674789480061139157433156989123228768899846183291164697221164452100037658563026884070301188916984245139290761779580443049</span>, <span class="number">644471004204038587358576160407417490938643306027967868486894032686145771114614076076527690366372762614045209015175209880518279715723521182568975220993976451106760236390912778371250746699463366097164369672789316408520079193370191810477580463635224092686607896863852671881543817329521589324466628227730589108339783619357530316049670209743367574983963078106666377633552745384690084183804939047320711873053569717432670155045869610477526046503868585690544254566603491357805849009447674789480061139157433156989123228768899846183291164697221164452100037658563026884070301188916984245139290761779580443049</span>, <span class="number">644471004204038587358576160407417490938643306027967868486894032686145771114614076076527690366372762614045209015175209880518279715723521182568975220993976451106760236390912778371250746699463366097164369672789316408520079193370191810477580463635224092686607896863852671881543817329521589324466628227730589108339783619357530316049670209743367574983963078106666377633552745384690084183804939047320711873053569717432670155045869610477526046503868585690544254566603491357805849009447674789480061139157433156989123228768899846183291164697221164452100037658563026884070301188916984245139290761779580443049</span>, <span class="number">644471004204038587358576160407417490938643306027967868486894032686145771114614076076527690366372762614045209015175209880518279715723521182568975220993976451106760236390912778371250746699463366097164369672789316408520079193370191810477580463635224092686607896863852671881543817329521589324466628227730589108339783619357530316049670209743367574983963078106666377633552745384690084183804939047320711873053569717432670155045869610477526046503868585690544254566603491357805849009447674789480061139157433156989123228768899846183291164697221164452100037658563026884070301188916984245139290761779580443049</span>]</span><br><span class="line"></span><br><span class="line">m=gmpy2.iroot(CRT(n_list, c_list), e)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># LitCTF&#123;CRT_i5_s0_e4sy!!!&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="CRT-plus"><a href="#CRT-plus" class="headerlink" title="CRT_plus"></a>CRT_plus</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">e= <span class="number">5</span></span><br><span class="line">A = [<span class="number">126</span>, <span class="number">48</span>, <span class="number">16</span>, <span class="number">72</span>, <span class="number">118</span>]</span><br><span class="line">B = [<span class="number">1015</span>, <span class="number">838</span>, <span class="number">454</span>, <span class="number">322</span>, <span class="number">287</span>]</span><br><span class="line">C = [<span class="number">1722078835760061914922188136968375167560877120158977673683182787526616054111469302309902289765296385972742778009222122528552899918863724377732557219671176645494150005867610261347026235782564913243945601412744385129580128250927608122522809099383488427292064494983097644976239331574095708707385594044914760001270147206289650087166888037423932397555572816680601347885645487184528254070549733484985825517047949</span>, <span class="number">13816768804244975535171696506080461156723308623701857620869448033158865282990045039961844920570143914665135883585879971811381020721992222246426401777511507400191713087571687956741206708710177012785421375718708189812774837594504418965920334982224317114403682678639035989628947049770826058014589194158740309041792753136519168749545398774774914316098342278282514631042388857128856143795589244785052399900000</span>, <span class="number">56859130881666565988360890971524531509149418204534393501520362276373931205720700726887545491289205478830425585724997174504028201171321308151273876050431857688549262391131233843813896378551007208009894797843649952348922113315189777325469148719163919686766128489229222919487894298991061288984198998019515140204032611992635303660051083035992783953034672470253917987745130941338091497821670180651626339168</span>, <span class="number">104921088107235282970210070343048501908867624861235981308477371001800133242704884555685815497516836051050046856653001827861416954490565731163497396533369953441870506739608750779206146960512840685327369132438186520936819912160558465866281258814185277348673235724471278843834900077063632942847769939844998491486539844971328759014099887125592504524703425638600458022082133169071492523661735192162844062500000</span>, <span class="number">1240538766092673389922062748316424702468324581791216732649676526936727204257919336267729115874238837779394913573904392250443112978081341477867371036538324777176210745189240390306682663050771398816977024467405187435749941354366210128964797433232968555682642062707794521268832699429918162047270351881018092211816812850558073282348521389449478019560248801682472510717226707312809024869529183888321461953350349</span>]</span><br><span class="line">N = [<span class="number">14928238039315040991308196203361315232720657103650133916768377003541186379974554794073142343542962199646167766317056723028716081533473830944328192280890558488982087259502304749351712886702680690273779927046689225691188145463409018705371701817782500722503682956161406169576545370923150575960593215241955617811801884711743303725010992704344613814422803869554915295599263200818169122460109761202619658976615539515461554999589496432809489233653847835884852838383631155057809145366161488972716470542997257824927235683738259840332405831579098429903716774910463581929154318403690419160948134710111693142307975784807557693379</span>, <span class="number">17942112047893516394059758069789896767008729052700255916941606468451353356755128052549675888464470730751071560385587733542652063605624887715486701968268746511130513891808360080569152819964870126967139166330069938033479674849483747008363844616001579775106124746396822730393977795887093285171120310391388533993105150552272708636765519928941755740285542436495225661570621438914992974707276930502069303295274628661481998308554649392508786793750053053121122238628064635273635766848165401929854140867543074809148318281653184460226317939677515071700168976030351545593059026392022012671316065525702115657483566938137244340943</span>, <span class="number">13019064216900979539288062154033407362873923068007793252861690841339799064052996489313924024470974905381895275618151217852919855409876807710907317767656306172828545362002202523070939278046699936212402230630256584670423362708987878505483680635512219997968954116231217398227993622065902156246475702094095500711503286622519913896122591961739665723628435538946933843825335162611709476594363043466396457232612767777259192378480905334359054208794766852953721503794850664015006289392327541583330272689875846792533484323373077869253786846989723423921359499060297185946499178827913630078855649725924366889102773642897486126623</span>, <span class="number">13912864686675639249288437589107116555604805004189183711379789929568272769079461241751272015747660238880020581115276925307650817840052731478197935494922776778456671398757225456564763063323400586339819575338030773839261766332062362334879207190483699972215128979606986002814161594101693635881349015199185085412611407662604627479103847204950489715963432100704956918420774156334247252954925845191282729254577898318969430816941295140050362250629162902319950857410371021670404067789437944207703037460999816188314289887032825758140831028148890807643175098513541476223379383684271681907330269037209677032315558402937931625967</span>, <span class="number">20697281700165158060712321641266488711894944770894967058614284974230824937584669196933970375321828545024565840884072714039625672397255154291241299830226044184343634190191714207346083253113281433886226024581215292220163243496877738571331530557698633431609877271753876915587472086166892247529345031622448967841394311132707519133169502656041602524428786054667737910711240877755895057344274733837936106880244101397045580919605270516952216181028018300911277852780391514223551138578229868751099931303779985263212375714318776700627534091244790507276964260243653855487575165560179621639549449819991732450911014479975009486773</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    c1 = libnum.nroot(C[i],e)</span><br><span class="line">    inv = libnum.invmod(A[i],N[i])</span><br><span class="line">    <span class="built_in">print</span>(libnum.n2s(((c1-B[i])*inv)%N[i]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># LitCTF&#123;Y0u_know_broadca5t_att4ck&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="真·EasyRSA"><a href="#真·EasyRSA" class="headerlink" title="真·EasyRSA"></a>真·EasyRSA</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">c1= <span class="number">78995097464505692833175221336110444691706720784642201874318792576886638370795877665241433503242322048462220941850261103929220636367258375223629313880314757819288233877871049903331061261182932603536690216472460424869498053787147893179733302705430645181983825884645791816106080546937178721898460776392249707560</span></span><br><span class="line">c2= <span class="number">3784701757181065428915597927276042180461070890549646164035543821266506371502690247347168340234933318004928718562990468281285421981157783991138077081303219</span></span><br><span class="line">n = <span class="number">111880903302112599361822243412777826052651261464069603671228695119729911614927471127031113870129416452329155262786735889603893196627646342615137280714187446627292465966881136599942375394018828846001863354234047074224843640145067337664994314496776439054625605421747689126816804916163793264559188427704647589521</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">p = libnum.nroot(n,<span class="number">4</span>)</span><br><span class="line">phi = p**<span class="number">3</span>*(p-<span class="number">1</span>)</span><br><span class="line">d = libnum.invmod(e,phi)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">pow</span>(c1,d,n)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;LitCTF&#123;HeRe_1s_Weak_F1aG&#125;hahahaha_____hint_is_93492332457019255141294502555555489582661562346262162342211605562996217352449&#x27;</span></span><br><span class="line">q2 = <span class="number">93492332457019255141294502555555489582661562346262162342211605562996217352449</span></span><br><span class="line">n2 = p*q2</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q2-<span class="number">1</span>)</span><br><span class="line">d2 = libnum.invmod(e,phi)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">pow</span>(c2,d2,n2)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># LitCTF&#123;R1ght_Answ3r!&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="真·签到！！！"><a href="#真·签到！！！" class="headerlink" title="真·签到！！！"></a>真·签到！！！</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">53779688736203933047434881701980151653423802317221115318252054349550528639605402386823698507644560099402835048990108944258111185574422278737617624691459404487383205558495742477348096557609903091073482529108655721238870718736876917084894146112572318162754496404262394399247602930119945411919174294508800616891</span></span><br><span class="line">c = [<span class="number">4124398080749553074619843072966405052653858760437326718059791703345965920503569739252697039258403095781261373084359291436131778873009458422798167842256401087702314540530419434366776728534830888673974354635857270349385440098865230210094489169761588857916363734220665484295067349289289937219722492065728599463</span>]</span><br><span class="line"></span><br><span class="line">L = <span class="built_in">ord</span>(<span class="string">&#x27;L&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">2</span>,<span class="number">10</span>**<span class="number">8</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">pow</span>(L, i, n) == c[<span class="number">0</span>]:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># e = 9897777</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">53779688736203933047434881701980151653423802317221115318252054349550528639605402386823698507644560099402835048990108944258111185574422278737617624691459404487383205558495742477348096557609903091073482529108655721238870718736876917084894146112572318162754496404262394399247602930119945411919174294508800616891</span></span><br><span class="line">c = [<span class="number">4124398080749553074619843072966405052653858760437326718059791703345965920503569739252697039258403095781261373084359291436131778873009458422798167842256401087702314540530419434366776728534830888673974354635857270349385440098865230210094489169761588857916363734220665484295067349289289937219722492065728599463</span>, <span class="number">15481644643922585500945090000695562756282558733694376113993997188985665803568510535190119480845091520658885447822873846242168965970319826752836201669345271783173616567609933032017344851978404496594310266471195858958401298265505190354107704046599872108795281982693695588930911349202457222578310220886622884416</span>, <span class="number">40974022330897595185593668062654482156370823359835540803640174599026663839070218063991563668507393666219642637135525638990455137020424754595250945054931120081475828089632764945575780326199183117119567719177117261011813697975685625263935820428233393538013872760001414320682062909650622706212810667501741354873</span>, <span class="number">33981786848660496333961506517187714554193615584845878232210394944336780137112027320577548034903832074752598242250089070169817297717880683657379700922708752551349470039462849959879736868560539774248532790598446587204581950938279079907176227710483120279719588731010982317536907131989435797059221285174093962908</span>, <span class="number">1285910717903203084975787538616625852434321550159180500468441407891029771447865370135113417284148880935400895099397662772912500923680415544536692392496640999237766173745842517211118889788913178800742948591271387743915400252547483363390245549270543581643322229638652142265779266726517677852583628198266108421</span>, <span class="number">23789203781845502389604138554793333517773526003503743390692470103394090787030629083975882919256262588645554701048271917571850719220017173479370286653555316337255808129285505861937546032314431989480012931420093894536654994001056137216516437854011401289717520452295524972795366753274063468895803833424426506331</span>, <span class="number">20940208240413900181251095272480030757105866339312310157480925947687648156412725814283553668029566232713480333831122495321031459080649522184580652548367762322620272746907156287431288132170924230190580437501883293037927765862049006329498758245604100845556492302312391684439016854521845339622400243037514523867</span>, <span class="number">41340655699032850811922590703534124397137469314819785476566566093858629648044627482514797174972386035722096563024583525376236045453451526570126890987183821072119586387364708099135124115856050119661380924186837677285512927400295146789034172166107474252827192261267643468495553148849468493009241668471083048430</span>, <span class="number">22966360367971968504676737450654736559784526278126249100481690257360113645735823869174095070763996461165850039977914727245980242307319409983699793511352248209423007808171107239738771728438094641440444300596228692729277266556257088686585351869961921410859567001968798590921194402863219621666507877820378827092</span>, <span class="number">41340655699032850811922590703534124397137469314819785476566566093858629648044627482514797174972386035722096563024583525376236045453451526570126890987183821072119586387364708099135124115856050119661380924186837677285512927400295146789034172166107474252827192261267643468495553148849468493009241668471083048430</span>, <span class="number">52202475140977838262155766391763349770007617219731559882124842701306589259283233719727463105485402530682922793511867820592726412692298060420804847173813733441078903812811823520344962843237246635665635279928926476628971734748164894875272506105775963532397945641093931037074645811860105881221105902306255621181</span>, <span class="number">43686732822375527268166781780704145014463398236959129237259540820318050928142217382482854923592727143517945840145245021402367171624497223470640246895897992745217804594441620139099576901221773322604374681094586004810027213343123533228000473640015954168594863999625384697827658129618656763377267113765657637761</span>, <span class="number">14880134921930262144875287284818967110251827510945998306349834095556559727134453367023956672529927521400098332845397865476485851088348289863395304436600667602897364946074198944367059280853856523321854848231173098875824362694147164421785094924944589659224105370845089374193840009119763660625714201229551202464</span>, <span class="number">38013516229906731040770728995532120131491416592495253746823605701526767788760134027460299370090486775327164899231056232048607749748639052414737842983659937901990208411978548025212907210373477389757182408450834322391767748006090559771843058148102090701817180898022507797050605846546948706282805015074193093273</span>, <span class="number">20524906300041996892262239459527462404196257551590250259857365607007677670540302221668693379920161363521285920275466639018409401155313360025405024607708054080526222596947953326605977964045680445269338000371617360892920017917084671528868044975804331654166128752309192614142872384593861258628748764936855953220</span>, <span class="number">20524906300041996892262239459527462404196257551590250259857365607007677670540302221668693379920161363521285920275466639018409401155313360025405024607708054080526222596947953326605977964045680445269338000371617360892920017917084671528868044975804331654166128752309192614142872384593861258628748764936855953220</span>, <span class="number">20524906300041996892262239459527462404196257551590250259857365607007677670540302221668693379920161363521285920275466639018409401155313360025405024607708054080526222596947953326605977964045680445269338000371617360892920017917084671528868044975804331654166128752309192614142872384593861258628748764936855953220</span>, <span class="number">38013516229906731040770728995532120131491416592495253746823605701526767788760134027460299370090486775327164899231056232048607749748639052414737842983659937901990208411978548025212907210373477389757182408450834322391767748006090559771843058148102090701817180898022507797050605846546948706282805015074193093273</span>, <span class="number">16822859827241912092903301050602204948222809037868347721306013629185546078070142612905867911365364682095817701589155688149474870521437581822944710801232554186762524645518382246152771387652373860849924256464746937608068511622557828364043958392814895625329426982855829366086732912276996321034036018819408951193</span>, <span class="number">34150153608686108981107806839997156875358767651869050480811448846242725270615327530663889984779854553092120823194108656627949475159285700946138204912775266363022036292515155178325852957375486496328282381365286611916449049601323101141237331480034977207188953388238873934117345088291003788988627587000440491067</span>, <span class="number">1080077289768974224514697428506714010850637431783677450886962480094680409598510781459495187524547891405762403065728309492525472661717864381505770334364496408759066160232404275108402127205833678508044742271255268139834900230068167627203821637533356900402299478531941413138234500208157822130575455493383047567</span>, <span class="number">1080077289768974224514697428506714010850637431783677450886962480094680409598510781459495187524547891405762403065728309492525472661717864381505770334364496408759066160232404275108402127205833678508044742271255268139834900230068167627203821637533356900402299478531941413138234500208157822130575455493383047567</span>, <span class="number">43686732822375527268166781780704145014463398236959129237259540820318050928142217382482854923592727143517945840145245021402367171624497223470640246895897992745217804594441620139099576901221773322604374681094586004810027213343123533228000473640015954168594863999625384697827658129618656763377267113765657637761</span>, <span class="number">1080077289768974224514697428506714010850637431783677450886962480094680409598510781459495187524547891405762403065728309492525472661717864381505770334364496408759066160232404275108402127205833678508044742271255268139834900230068167627203821637533356900402299478531941413138234500208157822130575455493383047567</span>, <span class="number">2261213433462723419446068536636649771187144868712624195878985258332075459437123191546644392841202030016957753759317962427017329871785225346154355535823733243490439256337121075737014302820285880854932463336983215343814901470468271086180806826828758278636642722717746069806141466423669570629896086040252059811</span>, <span class="number">2261213433462723419446068536636649771187144868712624195878985258332075459437123191546644392841202030016957753759317962427017329871785225346154355535823733243490439256337121075737014302820285880854932463336983215343814901470468271086180806826828758278636642722717746069806141466423669570629896086040252059811</span>, <span class="number">20524906300041996892262239459527462404196257551590250259857365607007677670540302221668693379920161363521285920275466639018409401155313360025405024607708054080526222596947953326605977964045680445269338000371617360892920017917084671528868044975804331654166128752309192614142872384593861258628748764936855953220</span>, <span class="number">1080077289768974224514697428506714010850637431783677450886962480094680409598510781459495187524547891405762403065728309492525472661717864381505770334364496408759066160232404275108402127205833678508044742271255268139834900230068167627203821637533356900402299478531941413138234500208157822130575455493383047567</span>, <span class="number">34150153608686108981107806839997156875358767651869050480811448846242725270615327530663889984779854553092120823194108656627949475159285700946138204912775266363022036292515155178325852957375486496328282381365286611916449049601323101141237331480034977207188953388238873934117345088291003788988627587000440491067</span>, <span class="number">22966360367971968504676737450654736559784526278126249100481690257360113645735823869174095070763996461165850039977914727245980242307319409983699793511352248209423007808171107239738771728438094641440444300596228692729277266556257088686585351869961921410859567001968798590921194402863219621666507877820378827092</span>, <span class="number">16264894348259769136675550067824857283471919750028043029657185995447205515644739721442713128709898468504029150415861841382906641476195752925950909219618894837821015850329001463680764039265007095540240515692665160125015606879662459432975652875535648068534926380848491577719631224890161757880802939228883185592</span>, <span class="number">1080077289768974224514697428506714010850637431783677450886962480094680409598510781459495187524547891405762403065728309492525472661717864381505770334364496408759066160232404275108402127205833678508044742271255268139834900230068167627203821637533356900402299478531941413138234500208157822130575455493383047567</span>, <span class="number">48082751893707411443030173186335305790867819509239136633531599952276619514671134605545456992422479102909480454270136006149473478156585782252929384235054442854349205489546634520955838888639404324251978615664175676633161271815457282615312198983401493084973690137353747061078161134872098033066383487860152411239</span>, <span class="number">21327622441108572162106669889096334171915319598231314927862632695081879818457106233577588661109578343720589743198154707810708496736138963401446774648179328773413409171869828838434037907816132436438314483017142493175451372700989061258496056410836951234155583628787251073520843683698565432474522538486905480145</span>, <span class="number">2261213433462723419446068536636649771187144868712624195878985258332075459437123191546644392841202030016957753759317962427017329871785225346154355535823733243490439256337121075737014302820285880854932463336983215343814901470468271086180806826828758278636642722717746069806141466423669570629896086040252059811</span>, <span class="number">21327622441108572162106669889096334171915319598231314927862632695081879818457106233577588661109578343720589743198154707810708496736138963401446774648179328773413409171869828838434037907816132436438314483017142493175451372700989061258496056410836951234155583628787251073520843683698565432474522538486905480145</span>, <span class="number">16264894348259769136675550067824857283471919750028043029657185995447205515644739721442713128709898468504029150415861841382906641476195752925950909219618894837821015850329001463680764039265007095540240515692665160125015606879662459432975652875535648068534926380848491577719631224890161757880802939228883185592</span>, <span class="number">43686732822375527268166781780704145014463398236959129237259540820318050928142217382482854923592727143517945840145245021402367171624497223470640246895897992745217804594441620139099576901221773322604374681094586004810027213343123533228000473640015954168594863999625384697827658129618656763377267113765657637761</span>, <span class="number">52202475140977838262155766391763349770007617219731559882124842701306589259283233719727463105485402530682922793511867820592726412692298060420804847173813733441078903812811823520344962843237246635665635279928926476628971734748164894875272506105775963532397945641093931037074645811860105881221105902306255621181</span>, <span class="number">6095619509559019908019352298785640301209234881314970774184941172547625244370412202107112133779358742353812823865176363562807708451451147505179327450732451736668872375390442553984797239930526165727742801338607942940231944774202087146668342653834800543503935286187760190753179319613671205950833349955049912928</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># e = random.randint(2,10**8)</span></span><br><span class="line">e = <span class="number">9897777</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">pow</span>(i,e,n) == c[j]:</span><br><span class="line">            flag += <span class="built_in">chr</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># LitCTF&#123;f9fab7522253e44b48824e914d0801ba&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="little-fermat"><a href="#little-fermat" class="headerlink" title="little_fermat"></a>little_fermat</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isqrt</span>(<span class="params">n</span>):</span><br><span class="line">  x = n</span><br><span class="line">  y = (x + n // x) // <span class="number">2</span></span><br><span class="line">  <span class="keyword">while</span> y &lt; x:</span><br><span class="line">    x = y</span><br><span class="line">    y = (x + n // x) // <span class="number">2</span></span><br><span class="line">  <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fermat</span>(<span class="params">n, verbose=<span class="literal">True</span></span>):</span><br><span class="line">    a = isqrt(n)</span><br><span class="line">    b2 = a*a - n</span><br><span class="line">    b = isqrt(n)</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> b*b != b2:</span><br><span class="line">        a = a + <span class="number">1</span></span><br><span class="line">        b2 = a*a - n</span><br><span class="line">        b = isqrt(b2)</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    p=a+b</span><br><span class="line">    q=a-b</span><br><span class="line">    <span class="keyword">assert</span> n == p * q</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;p=&#x27;</span>,p)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;q=&#x27;</span>,q)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p, q</span><br><span class="line"></span><br><span class="line">n = <span class="number">122719648746679660211272134136414102389555796575857405114496972248651220892565781331814993584484991300852578490929023084395318478514528533234617759712503439058334479192297581245539902950267201362675602085964421659147977335779128546965068649265419736053467523009673037723382969371523663674759921589944204926693</span></span><br><span class="line">c = <span class="number">109215817118156917306151535199288935588358410885541150319309172366532983941498151858496142368333375769194040807735053625645757204569614999883828047720427480384683375435683833780686557341909400842874816853528007258975117265789241663068590445878241153205106444357554372566670436865722966668420239234530554168928</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">pq=fermat(n)</span><br><span class="line"></span><br><span class="line">p=pq[<span class="number">0</span>]</span><br><span class="line">q=pq[<span class="number">1</span>]</span><br><span class="line">phi_n=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=gmpy2.invert(e,phi_n)</span><br><span class="line"></span><br><span class="line">m=<span class="built_in">pow</span>(c,d,n)</span><br><span class="line">m = m ^(q-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># LitCTF&#123;Y0u_know_littl3_ferm4t_th3ory&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="little-fermat-plus"><a href="#little-fermat-plus" class="headerlink" title="little_fermat_plus"></a>little_fermat_plus</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isqrt</span>(<span class="params">n</span>):</span><br><span class="line">  x = n</span><br><span class="line">  y = (x + n // x) // <span class="number">2</span></span><br><span class="line">  <span class="keyword">while</span> y &lt; x:</span><br><span class="line">    x = y</span><br><span class="line">    y = (x + n // x) // <span class="number">2</span></span><br><span class="line">  <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fermat</span>(<span class="params">n, verbose=<span class="literal">True</span></span>):</span><br><span class="line">    a = isqrt(n)</span><br><span class="line">    b2 = a*a - n</span><br><span class="line">    b = isqrt(n)</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> b*b != b2:</span><br><span class="line">        a = a + <span class="number">1</span></span><br><span class="line">        b2 = a*a - n</span><br><span class="line">        b = isqrt(b2)</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    p=a+b</span><br><span class="line">    q=a-b</span><br><span class="line">    <span class="keyword">assert</span> n == p * q</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;p=&#x27;</span>,p)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;q=&#x27;</span>,q)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p, q</span><br><span class="line"></span><br><span class="line">n = <span class="number">169522900072954416356051647146585827691225327527086797334523482640452305793443986277933900273961829438217255938808371865341750200444086653241610669340348513884285892043530862971785487294831341653909852543469963032532560079879299447677636753647721541724969084825510405349373420839032990681851700075554428485967</span></span><br><span class="line">c = <span class="number">105943762023156641770119141175498496686312095002592803768522760959533958364969985856505466722378959991757667341747887520146437729810252085791886309974903778546814812093444837674447485802109225767800488527376777153844313243366001288246744190001997192598159277512188417272938455513900277907186067996704043274199</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">pq=fermat(n)</span><br><span class="line"></span><br><span class="line">p=pq[<span class="number">0</span>]</span><br><span class="line">q=pq[<span class="number">1</span>]</span><br><span class="line">phi_n=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=gmpy2.invert(e,phi_n)</span><br><span class="line">m=<span class="built_in">pow</span>(c,d,n)</span><br><span class="line"></span><br><span class="line">m1 = m ^ ((q-<span class="number">1</span>)*<span class="number">1024</span>)</span><br><span class="line">m1 =libnum.n2s(<span class="built_in">int</span>(m1))</span><br><span class="line"><span class="built_in">print</span>(m1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># LitCTF&#123;It_i5_little_f3rm4t_the0ry_extends&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Polynomial"><a href="#Polynomial" class="headerlink" title="Polynomial"></a>Polynomial</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"></span><br><span class="line">Polynomial1 = <span class="number">58154360680755769340954893572401748667033313354117942223258370092578635555451803701875246040822675770820625484823955325325376503299610647282074512182673844099014723538935840345806279326671621834884174315042653272845859393720044076731894387316020043030549656441366838837625687203481896972821231596403741150142</span></span><br><span class="line">Polynomial2 = <span class="number">171692903673150731426296312524549271861303258108708311216496913475394189393793697817800098242049692305164782587880637516028827647505093628717337292578359337044168928317124830023051015272429945829345733688929892412065424786481363731277240073380880692592385413767327833405744609781605297684139130460468105300760</span></span><br><span class="line">Polynomial3 = <span class="number">97986346322515909710602796387982657630408165005623501811821116195049269186902123564611531712164389221482586560334051304898550068155631792198375385506099765648724724155022839470830188199666501947166597094066238209936082936786792764398576045555400742489416583987159603174056183635543796238419852007348207068832</span></span><br><span class="line">c = <span class="number">690029769225186609779381701643778761457138553080920444396078012690121613426213828722870549564971078807093600149349998980667982840018011505754141625901220546541212773327617562979660059608220851878701195162259632365509731746682263484332327620436394912873346114451271145412882158989824703847237437871480757404551113620810392782422053869083938928788602100916785471462523020232714027448069442708638323048761035121752395570167604059421559260760645061567883338223699900</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Polynomial1 = p**2 + q</span></span><br><span class="line"><span class="comment"># Polynomial2 = q**2 + r</span></span><br><span class="line"><span class="comment"># Polynomial3 = r**2 + p</span></span><br><span class="line"></span><br><span class="line">p,q,r = sympy.symbols(<span class="string">&#x27;p q r&#x27;</span>)</span><br><span class="line">f1 = p**<span class="number">2</span> + q-Polynomial1</span><br><span class="line">f2 = q**<span class="number">2</span> + r-Polynomial2</span><br><span class="line">f3 = r**<span class="number">2</span> + p-Polynomial3</span><br><span class="line">flag = sympy.solve([f1,f2,f3],[p,q,r])</span><br><span class="line">p = flag[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">q = flag[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">r = flag[<span class="number">0</span>][<span class="number">2</span>]</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(r-<span class="number">1</span>)</span><br><span class="line">d = libnum.invmod(e,phi)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(<span class="built_in">pow</span>(c,<span class="built_in">int</span>(d),<span class="built_in">int</span>(p)))))</span><br><span class="line"></span><br><span class="line"><span class="comment"># LitCTF&#123;P0lynomi4l_i5_inter3st1ng&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="Polynomial-plus"><a href="#Polynomial-plus" class="headerlink" title="Polynomial_plus"></a>Polynomial_plus</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"></span><br><span class="line">n = <span class="number">343424787688946710828788193478518340184635630498236346907606509763011890082198311173501834898393322176325060349656021994088578448585570427399686920253145504431065451412326430233084073651599248661762036671841142048573051549474182586297565046285161375600990596119448538118327240405957845178956427810835797220204485242640945891970398041508724313442375608608662117158013</span></span><br><span class="line">c = <span class="number">300097152084696274516003269451037367405899874736667089358316145472977115856239312841307278390995620995063953407731245808077915106161525019835875978698148238617148929170257141762407514139479267867121064342168993486529889088067645866930029787500052390195406519896658384623575160091828173111087120708969655686251340535134778177193882787257773427670338018428731395437974</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">k = sympy.symbols(<span class="string">&#x27;k&#x27;</span>)</span><br><span class="line">p = k**<span class="number">10</span> + <span class="number">22</span>*k**<span class="number">8</span> + <span class="number">53</span>*k**<span class="number">6</span> - <span class="number">22</span>*k**<span class="number">4</span> - <span class="number">39</span>*k**<span class="number">2</span> + <span class="number">114514</span></span><br><span class="line">q = k**<span class="number">9</span> + <span class="number">10</span>*k**<span class="number">7</span> - <span class="number">13</span>*k**<span class="number">6</span> - <span class="number">2</span>*k**<span class="number">4</span> + <span class="number">111</span>*k**<span class="number">2</span> + <span class="number">1919810</span></span><br><span class="line">f1= p*q-n</span><br><span class="line"></span><br><span class="line">flag = sympy.solve([f1],[k])</span><br><span class="line">k = flag[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">p = k**<span class="number">10</span> + <span class="number">22</span>*k**<span class="number">8</span> + <span class="number">53</span>*k**<span class="number">6</span> - <span class="number">22</span>*k**<span class="number">4</span> - <span class="number">39</span>*k**<span class="number">2</span> + <span class="number">114514</span></span><br><span class="line">q = k**<span class="number">9</span> + <span class="number">10</span>*k**<span class="number">7</span> - <span class="number">13</span>*k**<span class="number">6</span> - <span class="number">2</span>*k**<span class="number">4</span> + <span class="number">111</span>*k**<span class="number">2</span> + <span class="number">1919810</span></span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = libnum.invmod(e,phi)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(<span class="built_in">pow</span>(c,<span class="built_in">int</span>(d),<span class="built_in">int</span>(p)))))</span><br><span class="line"></span><br><span class="line"><span class="comment"># LitCTF&#123;Th1s_i5_a_trick_for_s0lving_polynomi4l&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="男人，什么罐头我说！"><a href="#男人，什么罐头我说！" class="headerlink" title="男人，什么罐头我说！"></a>男人，什么罐头我说！</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0000</span>1010 00110000 00110001 00110000 00110001 00110001 <span class="number">00</span>100000 00110000 00110000 00110000 00110000 00110000 <span class="number">00</span>100000 00110000 00110001 00110001 00110000 00110000 <span class="number">00</span>100000 00110001 00110000 00110001 00110000 00110000 <span class="number">00</span>100000 00110000 00110000 00110001 00110001 00110001 <span class="number">00</span>100000 00110000 00110000 00110000 00110000 00110000 <span class="number">00</span>100000 00110001 00110000 00110000 00110001 00110000 <span class="number">00</span>100000 00110000 00110000 00110000 00110001 00110000 <span class="number">00</span>100000 00110000 00110000 00110000 00110000 00110000 <span class="number">00</span>100000 00110000 00110001 00110001 00110000 00110000 <span class="number">00</span>100000 00110000 00110001 00110000 00110001 00110000 <span class="number">00</span>100000 00110001 00110000 00110000 00110000 00110001 <span class="number">00</span>100000 00110000 00110000 00110000 00110000 00110000 <span class="number">00</span>100000 00110001 00110000 00110001 00110001 00110000</span><br><span class="line"></span><br><span class="line">每组都是八个，当成二进制转换成 <span class="built_in">bytes</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(c))</span><br><span class="line"><span class="string">b&#x27;\n01011 00000 01100 10100 00111 00000 10010 00010 00000 01100 01010 10001 00000 10110&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>个一组，猜测培根密码</span><br><span class="line"></span><br><span class="line">LitCTF&#123;MANWHATCANLSAY&#125;</span><br></pre></td></tr></table></figure>
<h2 id="mid"><a href="#mid" class="headerlink" title="mid"></a>mid</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">10912724749357317040117295175340915836309117326481842971911576002816136982982366412133127436929465794389631046998036509363047557873155846920275327196471118680559431161116535588318645353317739214770132790445807395653916337747136630775427171105596048281228718048314706544665819996610453587925745842345926654572410324847927833437471701176403031302117052425160845583678182335391697596801106017558494065612842298945201720733418994561321697012416704574891516720606917736854915347853341353358814869449590841870866128113400765492223847582506991200050368263722438854522124807397499067048911261448546634778788867555039834459211</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">6991017300002465473760665517672638980904771950587963320768028786572848880002446111427309844155944419991711131609525886799710433964716773503883581910737560542905952516670539044167012461107915291519628081744473505479068712979401023972013124089857993361492602682730769445826818873805246777789559501477084603991595919524098203387452563401306823917989080019788620521432596833764004972429814705900915782768111621466120683534147560628509733828773006451505153520893053368254310905682981931980175859011116643271531341395883753605992130701423800808678200033639094180802506618083869818685981234182334150817211223363755511509799</span></span><br><span class="line">leak1 = <span class="number">749278395841748263310980933893</span></span><br><span class="line">leak2 = <span class="number">2675756732628494397256285826768672620995252274010849868485475743575097846941007603037228233621038664628877573057336866559545388148568450491606789423985</span></span><br><span class="line"></span><br><span class="line">mod=<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">pbar=(leak1&lt;&lt;<span class="number">924</span>)+leak2</span><br><span class="line"><span class="comment">#sage</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line"> </span><br><span class="line">f=pbar+x*mod</span><br><span class="line">f=f.monic()</span><br><span class="line">pp=f.small_roots(X=<span class="number">2</span>^<span class="number">424</span>,beta=<span class="number">0.4</span>)</span><br><span class="line"><span class="keyword">if</span>(pp):</span><br><span class="line">    p=pbar+pp[<span class="number">0</span>]*mod</span><br><span class="line">    q=n//<span class="built_in">int</span>(p)</span><br><span class="line">    phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>) </span><br><span class="line">    d=gmpy2.invert(e,<span class="built_in">int</span>(phi))</span><br><span class="line">    m=gmpy2.powmod(c,<span class="built_in">int</span>(d),n)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line"><span class="comment"># LitCTF&#123;3b633bcc134c1d0f5c07ea7873f91c26&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="你是capper，还是copper？"><a href="#你是capper，还是copper？" class="headerlink" title="你是capper，还是copper？"></a>你是capper，还是copper？</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">e = <span class="number">13072237795424057999129127027979234989717137387957646486113645675299547455876355434346547808746552482965795288244687521108647998478307740108159933821771239011129296482617888480397978257432977308896431711182794340987048211178166823842422554472231405752077101111017727678497340027900077855145324567076470130835</span></span><br><span class="line">c = <span class="number">68627543734818005182182738951459640368220444851344171131951942770319683236026987275564911027739185775745844128612642216644533871400591052349794872565933125142881743934565729384895786720059720829738537411808512740621199697348750764033684771791461466523568130279863016302934164238161768481421610386382948741646</span></span><br><span class="line">P=<span class="number">8770594378518257184819328657308152928029757169205998713929325053727701443407644651726148745366587806353078115048763121275581729457548618046203512855832519694356213899919351220281540608</span></span><br><span class="line"></span><br><span class="line">p = P&gt;&gt;<span class="number">100</span></span><br><span class="line">d = libnum.invmod(e,p-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">pow</span>(c,d,p)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># LitCTF&#123;wiener_@nd_c0pp3r&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="暗号-paillier"><a href="#暗号-paillier" class="headerlink" title="**暗号-paillier"></a>**暗号-paillier</h2><p>hint：Crypto-“暗号-pailler” hint:flag为静态 且 assert len(flag)&gt;32</p>
<p>因为矩阵杯和Litctf来回切换，没注意到群里的提示，唉，又一次栽在了交互CRT上面</p>
<p>原理的话和 RSA 类似，比较简单，也容易搜索到</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n1,g1 = (<span class="number">81799017563765125514504527052003913366173623814176603242422896521422153967173</span>, <span class="number">81799017563765125514504527052003913366173623814176603242422896521422153967174</span>)</span><br><span class="line">m1 = <span class="number">0x7b94db288b117535425513fd7a8cbb5a67e95cc3542387061c4c43a148421d4f</span></span><br><span class="line">n2,g2 = (<span class="number">89860077733933248166879987690896750588749886442467961686119236675688758633379</span>, <span class="number">89860077733933248166879987690896750588749886442467961686119236675688758633380</span>)</span><br><span class="line">m2 = <span class="number">0x18c63c2c4a64416bc265c17f821ab854e4b60ab75b654f9503b7bf8ce3354c17</span></span><br><span class="line">M = crt([m1,m2],[n1,n2])</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(M))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Litctf&#123;A235E5DF-0E8B-D361-D1D4-60F7E25345AA_this_is_Paillier!!!&#125;</span></span><br></pre></td></tr></table></figure>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXh0ZXJqaWUuZ2l0aHViLmlvLzIwMjQvMDYvMDEv6LWb6aKY5aSN546wLzIwMjRMaXRDVEYvI+aal+WPty1wYWlsbGllcg==">2024LitCTF<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Wp</tag>
      </tags>
  </entry>
  <entry>
    <title>NSSCTF Round17</title>
    <url>/Crypto/NSSCTF-Round17/</url>
    <content><![CDATA[<p>兰陵美酒郁金香，玉碗盛来琥珀光。 </p>
<span id="more"></span>
<h2 id="Level-1"><a href="#Level-1" class="headerlink" title="Level_1"></a>Level_1</h2><blockquote>
<p>附件</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#真签到题</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getPrime</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> getflag</span><br><span class="line"></span><br><span class="line">e1 = getPrime(<span class="number">1024</span>)</span><br><span class="line">e2 = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = e1 * e2</span><br><span class="line">m = bytes_to_long(getflag().encode())</span><br><span class="line">c1 = <span class="built_in">pow</span>(m, e1, n)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m, e2, n)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(c1)</span><br><span class="line"><span class="built_in">print</span>(c2)</span><br><span class="line"><span class="built_in">print</span>(e1)</span><br><span class="line"><span class="built_in">print</span>(e2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># n = 22517647586235353449147432825948355885962082318127038138351524894369583539246623545565501496312996556897362735789505076324197072008392656511657262430676945685471397862981216472634785622155317188784494912316440866051402627470561626691472280850273482836308002341429493460677206562201947000047718275995355772707947408688836667011206588727438261189233517003341094758634490421007907582147392858070623641389171229435187248184443645883661560636995548332475573072064240073037558031928639832259001407585962782698021735648128101459118863015844905452823095147248865104102562991382119836061161756978764495337874807458182581421229</span></span><br><span class="line"><span class="comment"># c1 = 1432393096266401187029059077791766305797845826173887492889260179348416733820890797101745501984437201566364579129066414005659742104885321270122634155922766503333859812540068278962999824043206496595825886026095484801291802992082454776271149083516187121160475839108002133113254134626407840182541809478892306748590016896975053434021666376203540725254480252049443975835307793528287818262102688334515632062552114342619781840154202525919769192765621085008206581226486157149883898548933475155236509073675387541466324512294079413938239828341890576923100769181401944289365386552139418728492565319685207500539721582552448971814</span></span><br><span class="line"><span class="comment"># c2 = 13299679392897297864252207869444022461237574801991239380909482153705185317634241850084078027230394830079554676426505967970943836811048777462696506309466535820372917756458083553031417406403895116557560548183674144457502601887632495739472178857537011190162283185735114683172731936834993707871636782206418680404006299140864001776588991141011500807549645227520128216130966268810165946959810884593793452437010902774726405217517557763322690215690606067996057037379898630878638483268362526985225092000670251641184960698506349245915816808028210142606700394584541282682338561482561343076218115042099753144875658666459825545602</span></span><br><span class="line"><span class="comment"># e1 = 155861690390761931560700906834977917646203451142415617638229284868013723431003139974975998354830978765979365632120896717380895021936387027045347260400512396388028781862427862974453223157509702913026222541667006325100878113871620322023188372501930117363623076837619478555007555970810681502521309925774889678793</span></span><br><span class="line"><span class="comment"># e2 = 144471983652821947847253052623701746810204736865723159569786739658583884214397562204788127484897909964898113250509653721265240138487697822089282456150238116811225975640330930854549232972314642221382625614304415750165289831040623741828600283778523993251940904896081111235859249916040849697146542311990869696453</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>共模攻击</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">n = <span class="number">22517647586235353449147432825948355885962082318127038138351524894369583539246623545565501496312996556897362735789505076324197072008392656511657262430676945685471397862981216472634785622155317188784494912316440866051402627470561626691472280850273482836308002341429493460677206562201947000047718275995355772707947408688836667011206588727438261189233517003341094758634490421007907582147392858070623641389171229435187248184443645883661560636995548332475573072064240073037558031928639832259001407585962782698021735648128101459118863015844905452823095147248865104102562991382119836061161756978764495337874807458182581421229</span></span><br><span class="line">c1 = <span class="number">1432393096266401187029059077791766305797845826173887492889260179348416733820890797101745501984437201566364579129066414005659742104885321270122634155922766503333859812540068278962999824043206496595825886026095484801291802992082454776271149083516187121160475839108002133113254134626407840182541809478892306748590016896975053434021666376203540725254480252049443975835307793528287818262102688334515632062552114342619781840154202525919769192765621085008206581226486157149883898548933475155236509073675387541466324512294079413938239828341890576923100769181401944289365386552139418728492565319685207500539721582552448971814</span></span><br><span class="line">c2 = <span class="number">13299679392897297864252207869444022461237574801991239380909482153705185317634241850084078027230394830079554676426505967970943836811048777462696506309466535820372917756458083553031417406403895116557560548183674144457502601887632495739472178857537011190162283185735114683172731936834993707871636782206418680404006299140864001776588991141011500807549645227520128216130966268810165946959810884593793452437010902774726405217517557763322690215690606067996057037379898630878638483268362526985225092000670251641184960698506349245915816808028210142606700394584541282682338561482561343076218115042099753144875658666459825545602</span></span><br><span class="line">e1 = <span class="number">155861690390761931560700906834977917646203451142415617638229284868013723431003139974975998354830978765979365632120896717380895021936387027045347260400512396388028781862427862974453223157509702913026222541667006325100878113871620322023188372501930117363623076837619478555007555970810681502521309925774889678793</span></span><br><span class="line">e2 = <span class="number">144471983652821947847253052623701746810204736865723159569786739658583884214397562204788127484897909964898113250509653721265240138487697822089282456150238116811225975640330930854549232972314642221382625614304415750165289831040623741828600283778523993251940904896081111235859249916040849697146542311990869696453</span></span><br><span class="line"></span><br><span class="line">s,s1,s2 = gmpy2.gcdext(e1,e2)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line">m = <span class="built_in">pow</span>(c1,s1,n)*<span class="built_in">pow</span>(c2,s2,n)%n</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(libnum.nroot(m,s))))</span><br><span class="line"></span><br><span class="line"><span class="comment"># NSSCTF&#123;Y0u_Hav3_S01v3d_Crypt0_Leve1_i&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="Level-2"><a href="#Level-2" class="headerlink" title="Level_2"></a>Level_2</h2><blockquote>
<p>hint:e is a common e</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 猜猜我是谁 猜对了直接秒出flag喔</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long, getPrime</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> getflag</span><br><span class="line"></span><br><span class="line">p = ***</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">e = you guess!</span><br><span class="line">n = p * q</span><br><span class="line">m = bytes_to_long(getflag().encode())</span><br><span class="line">c=<span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(q)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p=one of ps</span></span><br><span class="line"><span class="comment">#q=145721736470529261146573065574028992352505611489859183763269215489708531333597694809923949026781460438320576519639268582565188719134157402292313959218961804213310847081787824780075530751842057663327444602428455144829447776271394663729996984613471623158126083062443634493708467568220146024273763894704649472957</span></span><br><span class="line"><span class="comment">#c=17441814714407189483380175736850663249578989775568187792928771544069162420510939242665830363276698262009780462912108642025299275146709817979705069095332726251759039923303627023610865046363171692163473939115438686877494878334016463787558794121885354719336139401336137097548305393030069499625065664884238710759260231321106291200849044147840392021931720902340003746946851806025722944795391356835342258387797980787437188976704677008092850181043891802072500430200735973581081228711070923822341261809453662427341958883142789220800541626034573952425948295446202775198692920613709157662831071515700549093766182579873408465779</span></span><br><span class="line"><span class="comment">#flag=NSSCTF&#123;*&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>提不提示都无所谓，我主要喜欢 <code>65537</code></p>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">q=<span class="number">145721736470529261146573065574028992352505611489859183763269215489708531333597694809923949026781460438320576519639268582565188719134157402292313959218961804213310847081787824780075530751842057663327444602428455144829447776271394663729996984613471623158126083062443634493708467568220146024273763894704649472957</span></span><br><span class="line">c=<span class="number">17441814714407189483380175736850663249578989775568187792928771544069162420510939242665830363276698262009780462912108642025299275146709817979705069095332726251759039923303627023610865046363171692163473939115438686877494878334016463787558794121885354719336139401336137097548305393030069499625065664884238710759260231321106291200849044147840392021931720902340003746946851806025722944795391356835342258387797980787437188976704677008092850181043891802072500430200735973581081228711070923822341261809453662427341958883142789220800541626034573952425948295446202775198692920613709157662831071515700549093766182579873408465779</span></span><br><span class="line"></span><br><span class="line">d = libnum.invmod(e,q-<span class="number">1</span>)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,q)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(m))</span><br><span class="line"><span class="comment"># NSSCTF&#123;Y0u_g0t_1t!!!&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="Level-3"><a href="#Level-3" class="headerlink" title="Level_3"></a>Level_3</h2><blockquote>
<p>自动化RSA？</p>
</blockquote>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagesautorsa.png" alt="autorsa"></p>
<p>因为这里是交互端输出flag，所以把 <code>io.interactive()</code> 添上</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">io = remote(<span class="string">&#x27;node4.anna.nssctf.cn&#x27;</span>,<span class="number">28767</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_sharemodulus</span>(<span class="params">n,e1,e2,c1,c2</span>):</span><br><span class="line">    s, s1, s2 = gmpy2.gcdext(e1, e2)</span><br><span class="line">    m = <span class="built_in">pow</span>(c1, s1, n) * <span class="built_in">pow</span>(c2, s2, n) % n</span><br><span class="line">    <span class="keyword">return</span> libnum.n2s(<span class="built_in">int</span>(libnum.nroot(m, s)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">666</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;py?\n&#x27;</span>)</span><br><span class="line">    n = io.recvline(keepends=<span class="literal">False</span>).decode()[<span class="number">2</span>:]  <span class="comment"># #接受一行数据，keepends为是否保留行尾的\n</span></span><br><span class="line">    e1 = io.recvline(keepends=<span class="literal">False</span>).decode()[<span class="number">3</span>:]</span><br><span class="line">    e2 = io.recvline(keepends=<span class="literal">False</span>).decode()[<span class="number">3</span>:]</span><br><span class="line">    c1 = io.recvline(keepends=<span class="literal">False</span>).decode()[<span class="number">3</span>:]</span><br><span class="line">    c2 = io.recvline(keepends=<span class="literal">False</span>).decode()[<span class="number">3</span>:]</span><br><span class="line">	<span class="comment"># eval()函数可以将str转换成int</span></span><br><span class="line">   </span><br><span class="line">    m = solve_sharemodulus(<span class="built_in">int</span>(n),<span class="built_in">int</span>(e1),<span class="built_in">int</span>(e2),<span class="built_in">int</span>(c1),<span class="built_in">int</span>(c2))</span><br><span class="line">    io.sendlineafter(<span class="string">b&#x27;Pl Give Me flaag :&#x27;</span>,m)</span><br><span class="line"></span><br><span class="line"><span class="comment">#直接进行交互，相当于回到shell的模式，在取得shell之后使用</span></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment"># NSSCTF&#123;3c4cb097-a84a-4f0c-90f6-9f8dc37fdf8d&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Wp</tag>
      </tags>
  </entry>
  <entry>
    <title>NSSCTF Round16</title>
    <url>/Crypto/NSSCTF-Round16/</url>
    <content><![CDATA[<p>NSSCTF Round16 ——— Crypto 复现</p>
<h2 id="pr"><a href="#pr" class="headerlink" title="pr"></a>pr</h2><p>描述：CRT</p>
<span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">flag=plaintext = <span class="string">&#x27;NSSCTF&#123;****************&#125;&#x27;</span></span><br><span class="line">charset = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span></span><br><span class="line">padding_length = <span class="number">100</span> - <span class="built_in">len</span>(plaintext)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(padding_length):</span><br><span class="line">    plaintext += random.choice(charset)</span><br><span class="line"></span><br><span class="line">public_exponent = <span class="number">31413537523</span></span><br><span class="line">message = bytes_to_long(plaintext.encode())</span><br><span class="line"><span class="keyword">assert</span> message &gt; (<span class="number">1</span> &lt;&lt; <span class="number">512</span>)</span><br><span class="line"><span class="keyword">assert</span> message &lt; (<span class="number">1</span> &lt;&lt; <span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">prime_p = getPrime(<span class="number">512</span>)</span><br><span class="line">prime_q = getPrime(<span class="number">512</span>)</span><br><span class="line">prime_r = getPrime(<span class="number">512</span>)</span><br><span class="line">n1 = prime_p * prime_q</span><br><span class="line">n2 = prime_q * prime_r</span><br><span class="line">ciphertext1 = <span class="built_in">pow</span>(message, public_exponent, n1)</span><br><span class="line">ciphertext2 = <span class="built_in">pow</span>(message, public_exponent, n2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c1=&#x27;</span>, ciphertext1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c2=&#x27;</span>, ciphertext2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p=&#x27;</span>, prime_p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;r=&#x27;</span>, prime_r)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c1= 36918910341116680090654563538246204134840776220077189276689868322808977412566781872132517635399441578464309667998925236488280867210758507758915311644529399878185776345227817559234605958783077866016808605942558810445187434690812992072238407431218047312484354859724174751718700409405142819140636116559320641695</span></span><br><span class="line"><span class="string">c2= 15601788304485903964195122196382181273808496834343051747331984997977255326224514191280515875796224074672957848566506948553165091090701291545031857563686815297483181025074113978465751897596411324331847008870832527695258040104858667684793196948970048750296571273364559767074262996595282324974180754813257013752</span></span><br><span class="line"><span class="string">p= 12101696894052331138951718202838643670037274599483776996203693662637821825873973767235442427190607145999472731101517998719984942030184683388441121181962123</span></span><br><span class="line"><span class="string">r= 10199001137987151966640837133782537428248507382360655526592866939552984259171772190788036403425837649697437126360866173688083643144865107648483668545682383</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>真就止步CRT了</p>
<p>m被填充，很大，直接CRT算不出，利用 dp，dr 解</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagesimage-20240115192100952.png" alt="image-20240115192100952"></p>
<script type="math/tex; mode=display">e*d\equiv 1\bmod (p-1)</script><script type="math/tex; mode=display">d\equiv d_p\bmod (p-1)</script><p>所以有 <script type="math/tex">e*d_p\equiv 1\bmod (p-1)</script> </p>
<p>则，<script type="math/tex">d_p=e^{-1} \bmod (p-1)</script>           <script type="math/tex">d_r 同理</script> </p>
<p>再通过</p>
<script type="math/tex; mode=display">m_p = c^{dp} \bmod p</script><script type="math/tex; mode=display">m_r = c^{dr} \bmod r</script><p>求得   <script type="math/tex">m=crt([m_p,m_r],[p,r])</script> </p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">e= <span class="number">31413537523</span></span><br><span class="line">c1= <span class="number">36918910341116680090654563538246204134840776220077189276689868322808977412566781872132517635399441578464309667998925236488280867210758507758915311644529399878185776345227817559234605958783077866016808605942558810445187434690812992072238407431218047312484354859724174751718700409405142819140636116559320641695</span></span><br><span class="line">c2= <span class="number">15601788304485903964195122196382181273808496834343051747331984997977255326224514191280515875796224074672957848566506948553165091090701291545031857563686815297483181025074113978465751897596411324331847008870832527695258040104858667684793196948970048750296571273364559767074262996595282324974180754813257013752</span></span><br><span class="line">p= <span class="number">12101696894052331138951718202838643670037274599483776996203693662637821825873973767235442427190607145999472731101517998719984942030184683388441121181962123</span></span><br><span class="line">r= <span class="number">10199001137987151966640837133782537428248507382360655526592866939552984259171772190788036403425837649697437126360866173688083643144865107648483668545682383</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dp = gmpy2.invert(e,p-<span class="number">1</span>)</span><br><span class="line">dr = gmpy2.invert(e,r-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">mp = <span class="built_in">pow</span>(c1,dp,p)</span><br><span class="line">mr = <span class="built_in">pow</span>(c2,dr,r)</span><br><span class="line"></span><br><span class="line">m = crt([<span class="built_in">int</span>(mp),<span class="built_in">int</span>(mr)],[p,r])</span><br><span class="line">flag = long_to_bytes(<span class="built_in">int</span>(m))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># NSSCTF&#123;yUanshEnx1ncHun2o23!&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="考点："><a href="#考点：" class="headerlink" title="考点："></a>考点：</h3><p>1，dp、dq泄露</p>
<p>2，CRT</p>
<h2 id="break"><a href="#break" class="headerlink" title="break"></a>break</h2><p>描述：私钥好像坏掉了，如何拿到里面的数据捏~</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pri-<span class="keyword">break</span>.pem:</span><br><span class="line">Bc8tSTrvGJm2oYuCzIz+Yg4nwwKBgQDiYUawe5Y+rPbFhVOMVB8ZByfMa4LjeSDd</span><br><span class="line">Z23jEGvylBHSeyvFCQq3ISUE40k1D2XmmeaZML3a1nUn6ORIWGaG2phcwrWLkR6n</span><br><span class="line">ubVmb1QJSzgzmFHGnL56KHByZxD9q6DPB+o6gGWt8/6ddBl2NIZU/1btdPQgojfA</span><br><span class="line">XXJFzR92RQKBgQC7qlB0U7m2U4FdG9eelSd+WSKNUVllZAuHji7jgh7Ox6La9xN5</span><br><span class="line">miGZ1yvP44yX218OJ9Zi08o6vIrM6Eil45KzTtGm4iuIn8CMpox+5eUtoxyvxa9r</span><br><span class="line">s2Wu+IRZN9zCME+p+qI8/TG27dIyDzsdgNqcUo8ESls7uW5/FEA7bYTCiQKBgQC7</span><br><span class="line">1KybeB+kZ0zlfIdi8tVOpeI+uaHDbdh3+/5wHUsD3hmfg7VAag0q/2RA1vkB/oG1</span><br><span class="line">QVLVHl0Yu0I/<span class="number">1</span>/u5jyeakrtClAegAsvlrK+3i321rGS4YpTPb3SX1P/f3GZ7o7Ds</span><br><span class="line">touA+NHk8IL9T7xkmJYw5h/RLG32ucH6aU6MXfLR5QKBgD/skfdFxGWxhHk6U1mS</span><br><span class="line">27IM9jJNg9xLz5nxzkqPPhLn+rdgIIuTuQtv++eEjEP++7ZV10rg5yKVJd/bxy8H</span><br><span class="line">2IN7aQo7kZWulHTQDZMFwgOhn0u6glJi+qC8bWzYDFOQSFrY9XQ3vwKMspqm+<span class="number">697</span></span><br><span class="line">xM+dMUW0LML6oUE9ZjEiAY/<span class="number">5</span></span><br><span class="line">-----END PRIVATE KEY-----</span><br><span class="line"></span><br><span class="line">c = <span class="number">6081370370545409218106271903400346695565292992689150366474451604281551878507114813906275593034729563149286993189430514737137534129570304832172520820901940874698337733991868650159489601159238582002010625666203730677577976307606665760650563172302688129824842780090723167480409842707790983962415315804311334507726664838464859751689906850572044873633896253285381878416855505301919877714965930289139921111644393144686543207867970807469735534838601255712764863973853116693691206791007433101433703535127367245739289103650669095061417223994665200039533840922696282929063608853551346533188464573323230476645532002621795338655</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这题是真让我体会到 理解原理 的重要性</p>
<p>我们在网上常见的手撕私钥给出的例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">3082025d  	<span class="comment"># Begin Sequence: len=0x025d</span></span><br><span class="line">0201  		<span class="comment"># Version: (len=0x01)</span></span><br><span class="line"><span class="number">00</span></span><br><span class="line">028181		<span class="comment"># n: (len=0x81)</span></span><br><span class="line">0203		<span class="comment"># e: (len=0x03)</span></span><br><span class="line">028180		<span class="comment"># d: (len=0x80)</span></span><br><span class="line">0241		<span class="comment"># p: (len=0x41)</span></span><br><span class="line">0241		<span class="comment"># q: (len=0x41)</span></span><br><span class="line">0240		<span class="comment"># d mod (p-1): (len=0x40)</span></span><br><span class="line">0241		<span class="comment"># d mod (q-1): (len=0x41)</span></span><br><span class="line">0241		<span class="comment"># (inverse of q) mod p: (len=0x41)		(  (1/q)mod p,即 q^(-1) mod p  )</span></span><br><span class="line">			<span class="comment"># End Sequence</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">这是n为<span class="number">1024</span>位的例子</span><br><span class="line">02 表示短整形 （<span class="number">512</span>位用短整形）</span><br><span class="line">0281 表示长整形  （<span class="number">1024</span>位用长整形）</span><br><span class="line">上面最后两位都表示长度</span><br></pre></td></tr></table></figure>
<p>这里我们测出 c 为 2046 位</p>
<p>所以猜测 n 为 2048位，p、q分别为 1024 位</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">将私钥手动转化为 十六进制 ：</span><br><span class="line"></span><br><span class="line"><span class="number">05</span>cf<span class="number">2</span>d<span class="number">493</span>aef<span class="number">1899</span>b<span class="number">6</span>a<span class="number">18</span>b<span class="number">82</span><span class="keyword">cc</span><span class="number">8</span>cfe<span class="number">620e27</span><span class="keyword">c</span><span class="number">302818100e26146</span>b<span class="number">07</span>b<span class="number">963</span>eacf<span class="number">6</span><span class="keyword">c</span><span class="number">585538</span><span class="keyword">c</span><span class="number">541</span>f<span class="number">190727</span><span class="keyword">cc</span><span class="number">6</span>b<span class="number">82e37920</span>dd<span class="number">676</span>de<span class="number">3106</span>bf<span class="number">29411</span>d<span class="number">27</span>b<span class="number">2</span>bc<span class="number">5090</span>ab<span class="number">7212504e349350</span>f<span class="number">65e699</span>e<span class="number">69930</span>bddad<span class="number">67527e8</span>e<span class="number">448586686</span>da<span class="number">985</span><span class="keyword">cc</span><span class="number">2</span>b<span class="number">58</span>b<span class="number">911</span>ea<span class="number">7</span>b<span class="number">9</span>b<span class="number">5666</span>f<span class="number">54094</span>b<span class="number">38339851</span><span class="keyword">c</span><span class="number">69</span>cbe<span class="number">7</span>a<span class="number">2870726710</span>fdaba<span class="number">0</span>cf<span class="number">07</span>ea<span class="number">3</span>a<span class="number">8065</span>adf<span class="number">3</span>fe<span class="number">9</span>d<span class="number">741976348654</span>ff<span class="number">56</span>ed<span class="number">74</span>f<span class="number">420</span>a<span class="number">237</span><span class="keyword">c</span><span class="number">05</span>d<span class="number">7245</span>cd<span class="number">1</span>f<span class="number">764502818100</span>bbaa<span class="number">507453</span>b<span class="number">9</span>b<span class="number">653815</span>d<span class="number">1</span>bd<span class="number">79e95277</span>e<span class="number">59228</span>d<span class="number">515965640</span>b<span class="number">878e2</span>ee<span class="number">3821</span>ecec<span class="number">7</span>a<span class="number">2</span>daf<span class="number">713799</span>a<span class="number">2199</span>d<span class="number">72</span>bcfe<span class="number">38</span><span class="keyword">c</span><span class="number">97</span>db<span class="number">5</span>f<span class="number">0e27</span>d<span class="number">662</span>d<span class="number">3</span>ca<span class="number">3</span>abc<span class="number">8</span>acce<span class="number">848</span>a<span class="number">5e392</span>b<span class="number">34</span>ed<span class="number">1</span>a<span class="number">6e22</span>b<span class="number">889</span>fc<span class="number">08</span>ca<span class="number">68</span><span class="keyword">c</span><span class="number">7</span>ee<span class="number">5e52</span>da<span class="number">31</span>cafc<span class="number">5</span>af<span class="number">6</span>bb<span class="number">365</span>aef<span class="number">8845937</span>dcc<span class="number">2304</span>fa<span class="number">9</span>faa<span class="number">23</span>cfd<span class="number">31</span>b<span class="number">6</span>edd<span class="number">2320</span>f<span class="number">3</span>b<span class="number">1</span>d<span class="number">80</span>da<span class="number">9</span><span class="keyword">c</span><span class="number">528</span>f<span class="number">044</span>a<span class="number">5</span>b<span class="number">3</span>bb<span class="number">96e7</span>f<span class="number">14403</span>b<span class="number">6</span>d<span class="number">84</span><span class="keyword">c</span><span class="number">28902818100</span>bbd<span class="number">4</span>ac<span class="number">9</span>b<span class="number">781</span>fa<span class="number">4674</span>ce<span class="number">57</span><span class="keyword">c</span><span class="number">8762</span>f<span class="number">2</span>d<span class="number">54</span>ea<span class="number">5e23</span>eb<span class="number">9</span>a<span class="number">1</span><span class="keyword">c</span><span class="number">36</span>dd<span class="number">877</span>fbfe<span class="number">701</span>d<span class="number">4</span>b<span class="number">03</span>de<span class="number">199</span>f<span class="number">83</span>b<span class="number">5406</span>a<span class="number">0</span>d<span class="number">2</span>aff<span class="number">6440</span>d<span class="number">6</span>f<span class="number">901</span>fe<span class="number">81</span>b<span class="number">54152</span>d<span class="number">51e5</span>d<span class="number">18</span>bb<span class="number">423</span>fd<span class="number">7</span>fbb<span class="number">98</span>f<span class="number">279</span>a<span class="number">92</span>bb<span class="number">429407</span>a<span class="number">002</span>cbe<span class="number">5</span>acafb<span class="number">78</span>b<span class="number">7</span>db<span class="number">5</span>ac<span class="number">64</span>b<span class="number">86294</span>cf<span class="number">6</span>f<span class="number">7497</span>d<span class="number">4</span>ffdfdc<span class="number">667</span>ba<span class="number">3</span>b<span class="number">0</span>ecb<span class="number">68</span>b<span class="number">80</span>f<span class="number">8</span>d<span class="number">1e4</span>f<span class="number">082</span>fd<span class="number">4</span>fbc<span class="number">64989630e61</span>fd<span class="number">12</span><span class="keyword">c</span><span class="number">6</span>df<span class="number">6</span>b<span class="number">9</span><span class="keyword">c</span><span class="number">1</span>fa<span class="number">694e8</span><span class="keyword">c</span><span class="number">5</span>df<span class="number">2</span>d<span class="number">1e50281803</span>fec<span class="number">91</span>f<span class="number">745</span><span class="keyword">c</span><span class="number">465</span>b<span class="number">184793</span>a<span class="number">535992</span>dbb<span class="number">20</span>cf<span class="number">6324</span>d<span class="number">83</span>dc<span class="number">4</span>bcf<span class="number">99</span>f<span class="number">1</span>ce<span class="number">4</span>a<span class="number">8</span>f<span class="number">3e12</span>e<span class="number">7</span>fab<span class="number">760208</span>b<span class="number">93</span>b<span class="number">90</span>b<span class="number">6</span>ffbe<span class="number">7848</span><span class="keyword">c</span><span class="number">43</span>fefbb<span class="number">655</span>d<span class="number">74</span>ae<span class="number">0e7229525</span>dfdbc<span class="number">72</span>f<span class="number">07</span>d<span class="number">8837</span>b<span class="number">690</span>a<span class="number">3</span>b<span class="number">9195</span>ae<span class="number">9474</span>d<span class="number">00</span>d<span class="number">9305</span><span class="keyword">c</span><span class="number">203</span>a<span class="number">19</span>f<span class="number">4</span>bba<span class="number">825262</span>faa<span class="number">0</span>bc<span class="number">6</span>d<span class="number">6</span>cd<span class="number">80</span><span class="keyword">c</span><span class="number">5390485</span>ad<span class="number">8</span>f<span class="number">57437</span>bf<span class="number">028</span>cb<span class="number">29</span>aa<span class="number">6</span>fbaf<span class="number">7</span>bc<span class="number">4</span>cf<span class="number">9</span>d<span class="number">3145</span>b<span class="number">42</span><span class="keyword">cc</span><span class="number">2</span>faa<span class="number">1413</span>d<span class="number">663122018</span>ff<span class="number">9</span></span><br></pre></td></tr></table></figure>
<p>可以看出有3段 028181 和 1段 028180 ，我们知 0281是长整形，后面是81还是80是数据的长度决定，而不是他们决定是哪段数据</p>
<p>我们可以知道私钥按顺序列出我们需要的数据为：n、e、d、p、q、dp、dq、qinvp</p>
<p>所以我们得到的是最后四位数据：q、dp、dq、qinvp</p>
<p>有点上面那题的考点了</p>
<script type="math/tex; mode=display">m\equiv c^{d_q} \bmod q</script><p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">q = <span class="number">0xe26146b07b963eacf6c585538c541f190727cc6b82e37920dd676de3106bf29411d27b2bc5090ab7212504e349350f65e699e69930bddad67527e8e448586686da985cc2b58b911ea7b9b5666f54094b38339851c69cbe7a2870726710fdaba0cf07ea3a8065adf3fe9d741976348654ff56ed74f420a237c05d7245cd1f7645</span></span><br><span class="line">dp = <span class="number">0xbbaa507453b9b653815d1bd79e95277e59228d515965640b878e2ee3821ecec7a2daf713799a2199d72bcfe38c97db5f0e27d662d3ca3abc8acce848a5e392b34ed1a6e22b889fc08ca68c7ee5e52da31cafc5af6bb365aef8845937dcc2304fa9faa23cfd31b6edd2320f3b1d80da9c528f044a5b3bb96e7f14403b6d84c289</span></span><br><span class="line">dq = <span class="number">0xbbd4ac9b781fa4674ce57c8762f2d54ea5e23eb9a1c36dd877fbfe701d4b03de199f83b5406a0d2aff6440d6f901fe81b54152d51e5d18bb423fd7fbb98f279a92bb429407a002cbe5acafb78b7db5ac64b86294cf6f7497d4ffdfdc667ba3b0ecb68b80f8d1e4f082fd4fbc64989630e61fd12c6df6b9c1fa694e8c5df2d1e5</span></span><br><span class="line">qinvp = <span class="number">0x3fec91f745c465b184793a535992dbb20cf6324d83dc4bcf99f1ce4a8f3e12e7fab760208b93b90b6ffbe7848c43fefbb655d74ae0e7229525dfdbc72f07d8837b690a3b9195ae9474d00d9305c203a19f4bba825262faa0bc6d6cd80c5390485ad8f57437bf028cb29aa6fbaf7bc4cf9d3145b42cc2faa1413d663122018ff9</span></span><br><span class="line">c = <span class="number">6081370370545409218106271903400346695565292992689150366474451604281551878507114813906275593034729563149286993189430514737137534129570304832172520820901940874698337733991868650159489601159238582002010625666203730677577976307606665760650563172302688129824842780090723167480409842707790983962415315804311334507726664838464859751689906850572044873633896253285381878416855505301919877714965930289139921111644393144686543207867970807469735534838601255712764863973853116693691206791007433101433703535127367245739289103650669095061417223994665200039533840922696282929063608853551346533188464573323230476645532002621795338655</span></span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c,dq,q)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;oi!_you_find___what_i_Wa1t_talK_y0n!!!&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="考点：-1"><a href="#考点：-1" class="headerlink" title="考点："></a>考点：</h3><p>1，手撕私钥</p>
<p>2，dp、dq泄露</p>
<p>参考链接：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80NjEzNDk5NDY=">(PKCS1) RSA 公私钥 pem 文件解析 - 知乎 (zhihu.com)<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly90b3Zlci54eXovcC9wZW0tYnktaGFuZC8j5omL5pKVUlNB56eB6ZKl">手撕PEM密钥（RSA） | Tover’ Blog<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXh0ZXJqaWUuZ2l0aHViLmlvLzIwMjQvMDEvMTMv6LWb6aKY5aSN546wL05TU0NURi1Sb3VuZDE2LyNwcg==">NSSCTF Round16 | DexterJie’Blog<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Wp</tag>
      </tags>
  </entry>
  <entry>
    <title>NSSCTF Round18</title>
    <url>/Crypto/NSSCTF-Round18/</url>
    <content><![CDATA[<p>只说是三四月，又谁知五六年？</p>
<span id="more"></span>
<h2 id="过年来下棋"><a href="#过年来下棋" class="headerlink" title="过年来下棋"></a>过年来下棋</h2><blockquote>
<p>新年快乐呀！来一起下象棋吧！我都摆好咯~ 祝愿大家在新的一年里 lucky！flag格式：NSSCTF{<strong>字母小写</strong>}</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">XXVAF AVXAX DXFVX DXDVA XAGV</span><br></pre></td></tr></table></figure>
<p>根据密文特征容易找到 是棋盘密码的 <code>ADFGVX</code> ，似乎需要密钥，不用密钥试一下，是错的，所以需要密钥</p>
<p>再回到题目描述，注意看文字信息、注意看文字信息、注意看文字信息，<code>lucky</code> 单一个英文就有点突兀，密钥试一下</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagesimage-20240307210837704.png" alt="image-20240307210837704"></p>
<p>注意看报错，注意看报错，注意看报错，密文不合规，我那时候竟然看成了密钥</p>
<p>去掉空格</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagesimage-20240307211034702.png" alt="image-20240307211034702"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">NSSCTF&#123;h499yn3wye4r&#125;</span><br></pre></td></tr></table></figure>
<h2 id="年画！"><a href="#年画！" class="headerlink" title="年画！"></a>年画！</h2><blockquote>
<p>读“年”品“画”，flag格式：NSSCTF{<em>*</em>}</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> key</span><br><span class="line">flag = <span class="string">b&#x27;NSSCTF&#123;******FAKE*********&#125;&#x27;</span> </span><br><span class="line">enc_c = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(key)):</span><br><span class="line">    enc_c += (key[i]^(flag[i%<span class="number">7</span>])).to_bytes(<span class="number">1</span>,<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;enc_c=<span class="subst">&#123;enc_c&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Depart</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_pixel</span>(<span class="params">self, image</span>): </span><br><span class="line">        image = Image.<span class="built_in">open</span>(image)</span><br><span class="line">        imageRGB = image.convert(<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line">        width=image.size[<span class="number">0</span>] </span><br><span class="line">        height=image.size[<span class="number">1</span>]    </span><br><span class="line">        imageBin=<span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(width):  </span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">                r, g, b = imageRGB.getpixel((i, j)) </span><br><span class="line">                imageBin+=<span class="string">&#x27;&#123;:08b&#125;&#x27;</span>.<span class="built_in">format</span>(r)</span><br><span class="line">                imageBin+=<span class="string">&#x27;&#123;:08b&#125;&#x27;</span>.<span class="built_in">format</span>(g)</span><br><span class="line">                imageBin+=<span class="string">&#x27;&#123;:08b&#125;&#x27;</span>.<span class="built_in">format</span>(b)</span><br><span class="line">        <span class="keyword">return</span> imageBin</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">departBin</span>(<span class="params">self, bin_data</span>):</span><br><span class="line">        imageBinList=[]</span><br><span class="line">        data_length=<span class="built_in">len</span>(bin_data)</span><br><span class="line">        <span class="keyword">while</span> data_length&gt;=<span class="number">64</span>:     </span><br><span class="line">            imageBinList.append(bin_data[:<span class="number">64</span>])</span><br><span class="line">            data_length-=<span class="number">64</span></span><br><span class="line">            bin_data=bin_data[<span class="number">64</span>:]</span><br><span class="line">        <span class="keyword">if</span> data_length == <span class="number">0</span>:</span><br><span class="line">            padding_byte_size=<span class="number">8</span></span><br><span class="line">            padding_data=(<span class="string">&#x27;&#123;:08b&#125;&#x27;</span>.<span class="built_in">format</span>(padding_byte_size))*padding_byte_size</span><br><span class="line">            imageBinList.append(padding_data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            padding_length = <span class="number">64</span> - data_length</span><br><span class="line">            padding_byte_size = (padding_length)//<span class="number">8</span></span><br><span class="line">            padding_data = (<span class="string">&#x27;&#123;:08b&#125;&#x27;</span>.<span class="built_in">format</span>(padding_byte_size))*padding_byte_size</span><br><span class="line">            imageBinList.append(bin_data + padding_data)    </span><br><span class="line">        <span class="keyword">return</span> imageBinList</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_cipher</span>(<span class="params">self, imageBinList</span>):</span><br><span class="line">        f=<span class="built_in">open</span>(<span class="string">&#x27;cipher.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> imageBinList:</span><br><span class="line">            f.write(i+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Convert</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt_image</span>(<span class="params">self, image_path, key</span>):</span><br><span class="line">        image = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">        pixels = image.tobytes()</span><br><span class="line">        cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">        encrypted_pixels = cipher.encrypt(pad(pixels, AES.block_size))</span><br><span class="line">        encrypted_image = Image.frombytes(image.mode, image.size, encrypted_pixels)</span><br><span class="line">        <span class="keyword">return</span> encrypted_image</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        image_path = <span class="string">&quot;flag.png&quot;</span></span><br><span class="line">        encrypted_image = self.encrypt_image(image_path, key)</span><br><span class="line">        encrypted_image.save(<span class="string">&quot;cipher.png&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Same</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate_random_image</span>(<span class="params">self, image_path</span>):</span><br><span class="line">        cipher_image = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">        width, height = cipher_image.size</span><br><span class="line">        random_image = Image.new(<span class="string">&quot;RGB&quot;</span>, (width, height))</span><br><span class="line">        random_pixels = random_image.load()</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(width):  </span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(height):  </span><br><span class="line">                red = random.randint(<span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">                green = random.randint(<span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">                blue = random.randint(<span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">                random_pixels[x, y] = (red, green, blue)</span><br><span class="line">        random_image.save(<span class="string">&quot;random_image.png&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">drawNewYearPicture</span>():</span><br><span class="line">    convert = Convert()</span><br><span class="line">    convert.run()</span><br><span class="line"></span><br><span class="line">    depart = Depart()</span><br><span class="line">    image_dir = <span class="string">&quot;cipher.png&quot;</span></span><br><span class="line">    bin_data = depart.get_pixel(image_dir)</span><br><span class="line">    imageBinList = depart.departBin(bin_data)</span><br><span class="line">    depart.make_cipher(imageBinList)</span><br><span class="line"></span><br><span class="line">    getRandom = Same()</span><br><span class="line">    getRandom.generate_random_image(image_dir)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    drawNewYearPicture()</span><br><span class="line"></span><br><span class="line"><span class="comment"># enc_c=b&#x27;&amp;2#3-(\x1e9*6&quot;&amp;$\x02=&amp;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>密文太长就不便上传了，图片太难看也不传了（毕竟没得密文😊:smile:)</p>
<hr>
<hr>
<p>后面回来补😭😭😭</p>
<hr>
<hr>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Wp</tag>
      </tags>
  </entry>
  <entry>
    <title>NKCTF2023</title>
    <url>/Crypto/NKCTF2023/</url>
    <content><![CDATA[<p>NKCTF2024还有两周就快开始了，复现一下NKCTF2023</p>
<span id="more"></span>
<h2 id="baby-RSA"><a href="#baby-RSA" class="headerlink" title="baby_RSA"></a>baby_RSA</h2><blockquote>
<p>题目</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">nbit = <span class="number">512</span></span><br><span class="line">flag=<span class="string">&#x27;****************************&#x27;</span></span><br><span class="line"></span><br><span class="line">p=getPrime(nbit)</span><br><span class="line">q=getPrime(nbit)</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">n=p*q</span><br><span class="line">m= bytes_to_long(<span class="built_in">bytes</span>(flag.encode()))</span><br><span class="line">P = <span class="built_in">pow</span>(m,p,n)</span><br><span class="line">Q = <span class="built_in">pow</span>(m,q,n)</span><br><span class="line">N=P*Q</span><br><span class="line">phi_N=(P-<span class="number">1</span>)*(Q-<span class="number">1</span>)</span><br><span class="line">d=inverse(e,phi_N)</span><br><span class="line">dP=d%(P-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n = &#x27;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;N = &#x27;</span>,N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;dP = &#x27;</span>,dP)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n =  <span class="number">114101396033690088275999670914803472451228154227614098210572767821433470213124900655723605426526569384342101959232900145334500170690603208327913698128445002527020347955300595384752458477749198178791196660625870659540794807018881780680683388008090434114437818447523471527878292741702348454486217652394664664641</span></span><br><span class="line">N =  <span class="number">1159977299277711167607914893426674454199208605107323826176606074354449015203832606569051328721360397610665453513201486235549374869954501563523028914285006850687275382822302821825953121223999268058107278346499657597050468069712686559045712946025472616754027552629008516489090871415609098178522863027127254404804829735621706042266140637592206366042515190385496909533329383212542170504864473944657824502882014292528444918055958758310544435120502872883857209880723535754528096143707324179005292445100655695427777453144657819474805882956064292780031599790769618615908501966912635232746588639924772530057835864082951499028</span></span><br><span class="line">dP =  <span class="number">33967356791272818610254738927769774016289590226681637441101504040121743937150259930712897925893431093938385216227201268238374281750681609796883676743311872905933219290266120756315613501614208779063819499785817502677885240656957036398336462000771885589364702443157120609506628895933862241269347200444629283263</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>先是老生常见的<code>dp泄露</code> ,然后：</p>
<p>$P = m^p \bmod n=m+k_1p$</p>
<p>$Q = m^q \bmod n=m+k_2q$ </p>
<p>$P*Q=m^2+m(k_1p+k_2q)+k_1k_2pq$ </p>
<p>所以copper里的多项式就出来了：$P*Q=m^2+m(P-m+Q-m) \bmod n$</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">n =  <span class="number">114101396033690088275999670914803472451228154227614098210572767821433470213124900655723605426526569384342101959232900145334500170690603208327913698128445002527020347955300595384752458477749198178791196660625870659540794807018881780680683388008090434114437818447523471527878292741702348454486217652394664664641</span></span><br><span class="line">N =  <span class="number">1159977299277711167607914893426674454199208605107323826176606074354449015203832606569051328721360397610665453513201486235549374869954501563523028914285006850687275382822302821825953121223999268058107278346499657597050468069712686559045712946025472616754027552629008516489090871415609098178522863027127254404804829735621706042266140637592206366042515190385496909533329383212542170504864473944657824502882014292528444918055958758310544435120502872883857209880723535754528096143707324179005292445100655695427777453144657819474805882956064292780031599790769618615908501966912635232746588639924772530057835864082951499028</span></span><br><span class="line">dP =  <span class="number">33967356791272818610254738927769774016289590226681637441101504040121743937150259930712897925893431093938385216227201268238374281750681609796883676743311872905933219290266120756315613501614208779063819499785817502677885240656957036398336462000771885589364702443157120609506628895933862241269347200444629283263</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,e):</span><br><span class="line">    P=(dP*e-<span class="number">1</span>)//i+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> N%P==<span class="number">0</span>:</span><br><span class="line">        Q=N//P</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = P*Q - x^<span class="number">2</span> -x*(P-x+Q-x)</span><br><span class="line">f = f.small_roots()</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(f[<span class="number">0</span>])))</span><br><span class="line"></span><br><span class="line"><span class="comment"># NKCTF&#123;Th1S_a_babyRSA_y0u_are_tql!!!&#125;</span></span><br></pre></td></tr></table></figure>
<p>解2：</p>
<p>一般是消项凑公因子的思路</p>
<p>$P^{pq} = (m^{pq})^p \bmod n=m \bmod p=m+k_1p$</p>
<p>$Q^{pp} = (m^{pq})^p \bmod n=m \bmod p$   ==&gt;  $Q= m \bmod p=m+k_2p$ </p>
<p>$P^{pq}-Q=p(k_1-k_2)$  </p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">n =  <span class="number">114101396033690088275999670914803472451228154227614098210572767821433470213124900655723605426526569384342101959232900145334500170690603208327913698128445002527020347955300595384752458477749198178791196660625870659540794807018881780680683388008090434114437818447523471527878292741702348454486217652394664664641</span></span><br><span class="line">N =  <span class="number">1159977299277711167607914893426674454199208605107323826176606074354449015203832606569051328721360397610665453513201486235549374869954501563523028914285006850687275382822302821825953121223999268058107278346499657597050468069712686559045712946025472616754027552629008516489090871415609098178522863027127254404804829735621706042266140637592206366042515190385496909533329383212542170504864473944657824502882014292528444918055958758310544435120502872883857209880723535754528096143707324179005292445100655695427777453144657819474805882956064292780031599790769618615908501966912635232746588639924772530057835864082951499028</span></span><br><span class="line">dP =  <span class="number">33967356791272818610254738927769774016289590226681637441101504040121743937150259930712897925893431093938385216227201268238374281750681609796883676743311872905933219290266120756315613501614208779063819499785817502677885240656957036398336462000771885589364702443157120609506628895933862241269347200444629283263</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,e):</span><br><span class="line">    P=(dP*e-<span class="number">1</span>)//i+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> N%P==<span class="number">0</span>:</span><br><span class="line">        Q=N//P</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">p = libnum.gcd(<span class="built_in">pow</span>(P,n,n) -Q,n)   <span class="comment"># pow()</span></span><br><span class="line">q = n//p</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = libnum.invmod(p,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(P,d,n)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># NKCTF&#123;Th1S_a_babyRSA_y0u_are_tql!!!&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="ez-math"><a href="#ez-math" class="headerlink" title="ez_math"></a>ez_math</h2><blockquote>
<p>题目</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> BITS, hints, flag</span><br><span class="line"></span><br><span class="line">p = getPrime(BITS)</span><br><span class="line">q = getPrime(BITS)</span><br><span class="line">n = p * q</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">c = <span class="built_in">pow</span>(bytes_to_long(flag), e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Give you some boring pows:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(hints)):</span><br><span class="line">    <span class="built_in">print</span>(hints[i])</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n = 369520637995317866367336688225182965061898803879373674073832046072914710171302486913303917853881549637806426191970292829598855375370563396182543413674021955181862907847280705741114636854238746612618069619482248639049407507041667720977392421249242597197448360531895206645794505182208390084734779667749657408715621</span></span><br><span class="line"><span class="string">c = 324131338592233305486487416176106472248153652884280898177125443926549710357763331715045582842045967830200123100144721322509500306940560917086108978796500145618443920020112366546853892387011738997522207752873944151628204886591075864677988865335625452099668804529484866900390927644093597772065285222172136374562043</span></span><br><span class="line"><span class="string">Give you some boring pows:</span></span><br><span class="line"><span class="string">pow(6, 42762902032363446334121451790132830028099011269558028556333775251728898854654431095595000922138958455510196735338223430882428451914478079186797153527810555787441234842366353864053114538165236037883914332840687123514412294276743506313011532002136735343280737244020115917460801848337792582496228600926958548903290, n) = 4</span></span><br><span class="line"><span class="string">pow(6, 141997416965295486849546892322458652502850390670128808480582247784728456230996812361056958004801816363393016360646922983916999235770803618904474553309200419301820603229504955218189709387942156848904968053547462302189568831762401075340100029630332409419313772378068180267756675141584884876543484516408660699471038, n) = 9</span></span><br><span class="line"><span class="string">pow(6, 163378867981477210016607618217525067516899896304907822758749135410592905658324027908854458465871295591148114728316034699358213461728042658497873130073105697195541220650688132150216266657024774867846925219967805863946774978900772828496605795631400777090954141000078238226487076065753781167791598816872139973922682, n) = 3</span></span><br><span class="line"><span class="string">pow(5, 101651508435846472131121026992982127175369332865677196032272241712711171024515826370577416844824734811581351106736224929238579734879671732717639124571916168742336862493284572465162318403582113621582374924091725060981390318743531229548188092491836655143124663368239422819562367919547196053790207486164506763679128, n) = 4</span></span><br><span class="line"><span class="string">pow(8, 7202269322818255506843028035725052687541091567764933235328308385449791332345247877549905289072216053144576876979686287212194040101112899704499548530779540409356827298148385589812450437990490353926475147376495772639210184768544932563432306664067058309318707174880146258394471096033723193568453520897758319446472, n) = 3</span></span><br><span class="line"><span class="string">pow(6, 64144353048545169501182177685199245042148516904337042834500662877593348281981646643392501383208437683265295103007335146323642677871717118780195730291715833681161852263549530796079671807247854056825871499261030685271618441415115259469517298003205103014921105866030173876191202772506688873744342901390437823354935, n) = 8</span></span><br><span class="line"><span class="string">pow(6, 21381451016181723167060725895066415014049505634779014278166887625864449427327215547797500461069479227755098367669111715441214225957239039593398576763905277893720617421183176932026557269082618018941957166420343561757206147138371753156505766001068367671640368622010057958730400924168896291248114300463479274451645, n) = 2</span></span><br><span class="line"><span class="string">pow(4, 21606807968454766520529084107175158062623274703294799705984925156349373997035743632649715867216648159433730630939058861636582120303338699113498645592338621228070481894445156769437351313971471061779425442129487317917630554305634797690296919992201174927956121524640438775183413288101169580705360562693274958339416, n) = 9</span></span><br><span class="line"><span class="string">pow(2, 21606807968454766520529084107175158062623274703294799705984925156349373997035743632649715867216648159433730630939058861636582120303338699113498645592338621228070481894445156769437351313971471061779425442129487317917630554305634797690296919992201174927956121524640438775183413288101169580705360562693274958339417, n) = 6</span></span><br><span class="line"><span class="string">pow(4, 10803403984227383260264542053587579031311637351647399852992462578174686998517871816324857933608324079716865315469529430818291060151669349556749322796169310614035240947222578384718675656985735530889712721064743658958815277152817398845148459996100587463978060762320219387591706644050584790352680281346637479169708, n) = 3</span></span><br><span class="line"><span class="string">pow(9, 3293982057350410278459882519024200329089724149803879577174733206141551016681048848343176690789446255513117465644006032807116613436995145441651711865811812905401261777042165657533800465011922458688696664211216129846590488003282750224539553623014598025837108471148806368738631086225250952573439068109703953523338, n) = 4</span></span><br><span class="line"><span class="string">pow(2, 43213615936909533041058168214350316125246549406589599411969850312698747994071487265299431734433296318867461261878117723273164240606677398226997291184677242456140963788890313538874702627942942123558850884258974635835261108611269595380593839984402349855912243049280877550366826576202339161410721125386549916678832, n) = 9</span></span><br><span class="line"><span class="string">pow(7, 156359509651684605051402965560382969488421316701585527115005130492947292379802933549188085059602557600903593831240316597311439285149968787780538126741092612405335349622445040578126369183536683733294143156965518222696624206221060030916594302284630706642066420353822195108928341123726471513256217857861184609387726, n) = 9</span></span><br><span class="line"><span class="string">pow(7, 170559914324671769117535654836487226009685359320636182075960576764702323732727088502920021993271666209903403463612731506055433486417625242935904916789051793747298593847158174830184596554822038310041512771676833824200302666130102306284852931958549925702330464987955245647072909056824574486147965487598401928881026, n) = 3</span></span><br><span class="line"><span class="string">pow(8, 123173545998439288789112229408394321687299601293124558024610682024304903390434162304434639284627183212602142063990097609866285125123521132060847804558007316726174558714580872721495215950738261924525921590925432950469320750692763054435407707754979429841729673081392197456811651326615118306026475411557079498916218, n) = 4</span></span><br><span class="line"><span class="string">pow(2, 21606807968454766520529084107175158062623274703294799705984925156349373997035743632649715867216648159433730630939058861636582120303338699113498645592338621228070481894445156769437351313971471061779425442129487317917630554305634797690296919992201174927956121524640438775183413288101169580705360562693274958339416, n) = 3</span></span><br><span class="line"><span class="string">pow(3, 6587964114700820556919765038048400658179448299607759154349466412283102033362097696686353381578892511026234931288012065614233226873990290883303423731623625810802523554084331315067600930023844917377393328422432259693180976006565500449079107246029196051674216942297612737477262172450501905146878136219407907046676, n) = 4</span></span><br><span class="line"><span class="string">pow(7, 146900004342901005519726059203387905743111231159623333298786259340649199259667124880775175860427705602975071010583553281005991812801779033020769274211420710213704563866848310994325033574484679477677016014418321661821714582236428708141287327064859146436371562752616380650770729341741997594308364878898526065859626, n) = 4</span></span><br><span class="line"><span class="string">pow(5, 172192380036714150788905270808196199818277334366508682218739812159577144024191963252552116624193235000074634457087111471641800814071769221933018962135503876997163938949365614056098717522475180216291316295788774044033481065993544994610614082708563841846852650913646728169671510827052772868386414581035580266356334, n) = 3</span></span><br><span class="line"><span class="string">pow(8, 68789042322037899901399142739922213531190892214327212247633649397602243027562329029767224931385807659445647908974735092145336602662873465734923450809783198772444106655438821950560058413359621316189435942839212247873870560114926459781136160541556773230183543715576244986800296759341282346581691226676298068904581, n) = 6</span></span><br><span class="line"><span class="string">pow(5, 159624441075769368394142197503800917105605266793330527400563601282696932962732683048452274321445695181246055818189076528484173940458256745774766217433996778905066039826859919029954611118842967545793750205189398662362981005947945407568116603784658538931110792205205160154125544664182868277733116044735541284338342, n) = 9</span></span><br><span class="line"><span class="string">pow(8, 14404538645636511013686056071450105375082183135529866470656616770899582664690495755099810578144432106289153753959372574424388080202225799408999097061559080818713654596296771179624900875980980707852950294752991545278420369537089865126864613328134116618637414349760292516788942192067446387136907041795516638892944, n) = 9</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="题解：-1"><a href="#题解：-1" class="headerlink" title="题解："></a>题解：</h3><p>$a^{e_1} = 3 \bmod n$</p>
<p>$a^{e_2} = 9 \bmod n$</p>
<p>所以 $a^{2e_1}\equiv a^{e_2} \bmod n$ ==&gt; $a^{2e_1-e_2}=1 \bmod n$</p>
<p>由欧拉定理得，$2e_1-e_2=\varphi(n)$  </p>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">n = <span class="number">369520637995317866367336688225182965061898803879373674073832046072914710171302486913303917853881549637806426191970292829598855375370563396182543413674021955181862907847280705741114636854238746612618069619482248639049407507041667720977392421249242597197448360531895206645794505182208390084734779667749657408715621</span></span><br><span class="line">c = <span class="number">324131338592233305486487416176106472248153652884280898177125443926549710357763331715045582842045967830200123100144721322509500306940560917086108978796500145618443920020112366546853892387011738997522207752873944151628204886591075864677988865335625452099668804529484866900390927644093597772065285222172136374562043</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">a73 = <span class="number">170559914324671769117535654836487226009685359320636182075960576764702323732727088502920021993271666209903403463612731506055433486417625242935904916789051793747298593847158174830184596554822038310041512771676833824200302666130102306284852931958549925702330464987955245647072909056824574486147965487598401928881026</span></span><br><span class="line">a79 = <span class="number">156359509651684605051402965560382969488421316701585527115005130492947292379802933549188085059602557600903593831240316597311439285149968787780538126741092612405335349622445040578126369183536683733294143156965518222696624206221060030916594302284630706642066420353822195108928341123726471513256217857861184609387726</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">phi = <span class="number">2</span>*a73 - a79</span><br><span class="line">d = libnum.invmod(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(m))</span><br><span class="line"><span class="comment"># NKCTF&#123;d15cr373_L0g_15_R3DuC710n_f0R_f4C70r1nG&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="ezRSA"><a href="#ezRSA" class="headerlink" title="ezRSA"></a>ezRSA</h2><blockquote>
<p>题目</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m1 = bytes_to_long(flag[:<span class="built_in">len</span>(flag)//<span class="number">3</span>])</span><br><span class="line">m2 = bytes_to_long(flag[<span class="built_in">len</span>(flag)//<span class="number">3</span>:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen</span>():</span><br><span class="line">    prime_list  = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        prime_list.append(getPrime(<span class="number">512</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sorted</span>(prime_list)</span><br><span class="line"></span><br><span class="line">prime_list = gen()</span><br><span class="line">p,q,r,t = prime_list[<span class="number">0</span>],prime_list[<span class="number">3</span>],prime_list[<span class="number">1</span>],prime_list[<span class="number">2</span>]</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = p*q*r*t</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)*(r-<span class="number">1</span>)*(t-<span class="number">1</span>)</span><br><span class="line">c1 = <span class="built_in">pow</span>(m1,e,p*q)</span><br><span class="line">p1 = getPrime(<span class="number">512</span>)</span><br><span class="line">q1 = getPrime(<span class="number">512</span>)</span><br><span class="line">N = p1*q1</span><br><span class="line">c2 = <span class="built_in">pow</span>(m2,p1,N)</span><br><span class="line">c3 = <span class="built_in">pow</span>(m2,q1,N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;phi = <span class="subst">&#123;phi&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c1 = <span class="subst">&#123;c1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;N = <span class="subst">&#123;N&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c2 = <span class="subst">&#123;c2&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c3 = <span class="subst">&#123;c3&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 8836130216343708623415307573630337110573363595188748983290313549413242332143945452914800845282478216810685733227137911630239808895196748125078747600505626165666334675100147790578546682128517668100858766784733351894480181877144793496927464058323582165412552970999921215333509253052644024478417393146000490808639363681195799826541558906527985336104761974023394438549055804234997654701266967731137282297623426318212701157416397999108259257077847307874122736921265599854976855949680133804464839768470200425669609996841568545945133611190979810786943246285103031363790663362165522662820344917056587244701635831061853354597</span></span><br><span class="line"><span class="string">phi = 8836130216343708623415307573630337110573363595188748983290313549413242332143945452914800845282478216810685733227137911630239808895196748125078747600505622503351461565956106005118029537938273153581675065762015952483687057805462728186901563990429998916382820576211887477098611684072561849314986341226981300596338314989867731725668312057134075244816223120038573374383949718714549930261073576391501671722900294331289082826058292599838631513746370889828026039555245672195833927609280773258978856664434349221972568651378808050580665443131001632395175205804045958846124475183825589672204752895252723130454951830966138888560</span></span><br><span class="line"><span class="string">c1 = 78327207863361017953496121356221173288422862370301396867341957979087627011991738176024643637029313969241151622985226595093079857523487726626882109114134910056673489916408854152274726721451884257677533593174371742411008169082367666168983943358876017521749198218529804830864940274185360506199116451280975188409</span></span><br><span class="line"><span class="string">N = 157202814866563156513184271957553223260772141845129283711146204376449001653397810781717934720804041916333174673656579086498762693983380365527400604554663873045166444369504886603233275868192688995284322277504050322927511160583280269073338415758019142878016084536129741435221345599028001581385308324407324725353</span></span><br><span class="line"><span class="string">c2 = 63355788175487221030596314921407476078592001060627033831694843409637965350474955727383434406640075122932939559532216639739294413008164038257338675094324172634789610307227365830016457714456293397466445820352804725466971828172010276387616894829328491068298742711984800900411277550023220538443014162710037992032</span></span><br><span class="line"><span class="string">c3 = 9266334096866207047544089419994475379619964393206968260875878305040712629590906330073542575719856965053269812924808810766674072615270535207284077081944428011398767330973702305174973148018082513467080087706443512285098600431136743009829009567065760786940706627087366702015319792328141978938111501345426931078</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="题解：-2"><a href="#题解：-2" class="headerlink" title="题解："></a>题解：</h3><p>第一部分观察细节：知道n和phi，直接可以搜到相关分解n的脚本（已知n和phi，分解n）</p>
<p>第二部分同<code>baby_RSA</code>：</p>
<p>$c_2^{q_1p_1}=m_2 \bmod p_1 $ </p>
<p>$c_3=m_2 \bmod p_1$ </p>
<p>$c_2^N-c_3=p_1(k_1-k_2)$ </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> isqrt</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> is_prime</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> gcd</span><br><span class="line"></span><br><span class="line">n = <span class="number">8836130216343708623415307573630337110573363595188748983290313549413242332143945452914800845282478216810685733227137911630239808895196748125078747600505626165666334675100147790578546682128517668100858766784733351894480181877144793496927464058323582165412552970999921215333509253052644024478417393146000490808639363681195799826541558906527985336104761974023394438549055804234997654701266967731137282297623426318212701157416397999108259257077847307874122736921265599854976855949680133804464839768470200425669609996841568545945133611190979810786943246285103031363790663362165522662820344917056587244701635831061853354597</span></span><br><span class="line">phi = <span class="number">8836130216343708623415307573630337110573363595188748983290313549413242332143945452914800845282478216810685733227137911630239808895196748125078747600505622503351461565956106005118029537938273153581675065762015952483687057805462728186901563990429998916382820576211887477098611684072561849314986341226981300596338314989867731725668312057134075244816223120038573374383949718714549930261073576391501671722900294331289082826058292599838631513746370889828026039555245672195833927609280773258978856664434349221972568651378808050580665443131001632395175205804045958846124475183825589672204752895252723130454951830966138888560</span></span><br><span class="line">c1 = <span class="number">78327207863361017953496121356221173288422862370301396867341957979087627011991738176024643637029313969241151622985226595093079857523487726626882109114134910056673489916408854152274726721451884257677533593174371742411008169082367666168983943358876017521749198218529804830864940274185360506199116451280975188409</span></span><br><span class="line">N = <span class="number">157202814866563156513184271957553223260772141845129283711146204376449001653397810781717934720804041916333174673656579086498762693983380365527400604554663873045166444369504886603233275868192688995284322277504050322927511160583280269073338415758019142878016084536129741435221345599028001581385308324407324725353</span></span><br><span class="line">c2 = <span class="number">63355788175487221030596314921407476078592001060627033831694843409637965350474955727383434406640075122932939559532216639739294413008164038257338675094324172634789610307227365830016457714456293397466445820352804725466971828172010276387616894829328491068298742711984800900411277550023220538443014162710037992032</span></span><br><span class="line">c3 = <span class="number">9266334096866207047544089419994475379619964393206968260875878305040712629590906330073542575719856965053269812924808810766674072615270535207284077081944428011398767330973702305174973148018082513467080087706443512285098600431136743009829009567065760786940706627087366702015319792328141978938111501345426931078</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factorize</span>(<span class="params">N, phi</span>):    <span class="comment"># 只能分解两个因子</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Recovers the prime factors from a modulus if Euler&#x27;s totient is known.</span></span><br><span class="line"><span class="string">    This method only works for a modulus consisting of 2 primes!</span></span><br><span class="line"><span class="string">    :param N: the modulus</span></span><br><span class="line"><span class="string">    :param phi: Euler&#x27;s totient, the order of the multiplicative group modulo N</span></span><br><span class="line"><span class="string">    :return: a tuple containing the prime factors, or None if the factors were not found</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    s = N + <span class="number">1</span> - phi</span><br><span class="line">    d = s ** <span class="number">2</span> - <span class="number">4</span> * N</span><br><span class="line">    p = <span class="built_in">int</span>(s - isqrt(d)) // <span class="number">2</span></span><br><span class="line">    q = <span class="built_in">int</span>(s + isqrt(d)) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> p, q <span class="keyword">if</span> p * q == N <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factorize_multi_prime</span>(<span class="params">N, phi</span>):   <span class="comment"># 能分解出多个因子</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Recovers the prime factors from a modulus if Euler&#x27;s totient is known.</span></span><br><span class="line"><span class="string">    This method works for a modulus consisting of any number of primes, but is considerably be slower than factorize.</span></span><br><span class="line"><span class="string">    More information: Hinek M. J., Low M. K., Teske E., &quot;On Some Attacks on Multi-prime RSA&quot; (Section 3)</span></span><br><span class="line"><span class="string">    :param N: the modulus</span></span><br><span class="line"><span class="string">    :param phi: Euler&#x27;s totient, the order of the multiplicative group modulo N</span></span><br><span class="line"><span class="string">    :return: a tuple containing the prime factors</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    prime_factors = <span class="built_in">set</span>()</span><br><span class="line">    factors = [N]</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(factors) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># Element to factorize.</span></span><br><span class="line">        N = factors[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        w = randrange(<span class="number">2</span>, N - <span class="number">1</span>)</span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> phi % (<span class="number">2</span> ** i) == <span class="number">0</span>:</span><br><span class="line">            sqrt_1 = <span class="built_in">pow</span>(w, phi // (<span class="number">2</span> ** i), N)</span><br><span class="line">            <span class="keyword">if</span> sqrt_1 &gt; <span class="number">1</span> <span class="keyword">and</span> sqrt_1 != N - <span class="number">1</span>:</span><br><span class="line">                <span class="comment"># We can remove the element to factorize now, because we have a factorization.</span></span><br><span class="line">                factors = factors[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">                p = gcd(N, sqrt_1 + <span class="number">1</span>)</span><br><span class="line">                q = N // p</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> is_prime(p):</span><br><span class="line">                    prime_factors.add(p)</span><br><span class="line">                <span class="keyword">elif</span> p &gt; <span class="number">1</span>:</span><br><span class="line">                    factors.append(p)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> is_prime(q):</span><br><span class="line">                    prime_factors.add(q)</span><br><span class="line">                <span class="keyword">elif</span> q &gt; <span class="number">1</span>:</span><br><span class="line">                    factors.append(q)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Continue in the outer loop</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">tuple</span>(prime_factors)</span><br><span class="line"></span><br><span class="line">a = factorize_multi_prime(n,phi)</span><br><span class="line">prime_list = <span class="built_in">sorted</span>(a)</span><br><span class="line">p,q,r,t = prime_list[<span class="number">0</span>],prime_list[<span class="number">3</span>],prime_list[<span class="number">1</span>],prime_list[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">d = libnum.invmod(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m1 = <span class="built_in">pow</span>(c1,d,p*q)</span><br><span class="line">m1 = libnum.n2s(m1)</span><br><span class="line"></span><br><span class="line">p1 = libnum.gcd(<span class="built_in">pow</span>(c2,N,N) -c3,N)   <span class="comment"># pow()</span></span><br><span class="line">q1 = N//p1</span><br><span class="line"></span><br><span class="line">s,s1,s2 = gmpy2.gcdext(p1,q1)</span><br><span class="line">m2  =<span class="built_in">pow</span>(c2,s1,N)*<span class="built_in">pow</span>(c3,s2,N)%N</span><br><span class="line">m2 = libnum.n2s(<span class="built_in">int</span>(m2))</span><br><span class="line"><span class="built_in">print</span>(m1+m2)</span><br><span class="line"><span class="comment"># NKCTF&#123;it_i5_e45y_th4t_Kn0wn_phi_4nd_N_dec0mp0ses_N_w1th_th3_s4m3_c0mm0n_n_but_pq&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="real-MT"><a href="#real-MT" class="headerlink" title="real_MT"></a>real_MT</h2><blockquote>
<p>题目</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guess_number_1</span>():</span><br><span class="line">    randoms = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">208</span>):</span><br><span class="line">        randoms.append(random.getrandbits(<span class="number">96</span>))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;randoms = &quot;</span>+<span class="built_in">str</span>(randoms))</span><br><span class="line">    number = <span class="built_in">str</span>(random.getrandbits(<span class="number">96</span>))</span><br><span class="line">    guess = <span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&quot;Guess after number:&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> guess != number:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Wrong Number! Guess again.&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guess_number_2</span>():</span><br><span class="line">    number = <span class="built_in">str</span>(random.getrandbits(<span class="number">96</span>))</span><br><span class="line">    randoms = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">627</span>):</span><br><span class="line">        randoms.append(random.getrandbits(<span class="number">32</span>))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;randoms = &quot;</span>+<span class="built_in">str</span>(randoms))</span><br><span class="line">    guess = <span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&quot;Guess pre number:&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> guess != number:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Wrong Number! Guess again.&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guess_number_3</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_int32</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(<span class="number">0xFFFFFFFF</span> &amp; x)  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init</span>(<span class="params">seed</span>):</span><br><span class="line">        mt = [<span class="number">0</span>] * <span class="number">624</span></span><br><span class="line">        mt[<span class="number">0</span>] = seed</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">624</span>):</span><br><span class="line">            mt[i] = _int32(<span class="number">1812433253</span> * (mt[i - <span class="number">1</span>] ^ mt[i - <span class="number">1</span>] &gt;&gt; <span class="number">30</span>) + i)</span><br><span class="line">        <span class="keyword">return</span> mt[-<span class="number">1</span>]</span><br><span class="line">    number = random.getrandbits(<span class="number">32</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;last number = &quot;</span>+ <span class="built_in">str</span>(init(number)))</span><br><span class="line">    guess = <span class="built_in">int</span>(<span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&quot;Guess seed number:&quot;</span>)))</span><br><span class="line">    <span class="keyword">if</span> guess != number:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Wrong Number! Guess again.&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guess_number_4</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_number</span>(<span class="params">y</span>):</span><br><span class="line">        y = y ^ y &gt;&gt; <span class="number">11</span></span><br><span class="line">        y = y ^ y &lt;&lt; <span class="number">7</span> &amp; <span class="number">2636928640</span></span><br><span class="line">        y = y ^ y &lt;&lt; <span class="number">15</span> &amp; <span class="number">4022730752</span></span><br><span class="line">        y = y ^ y &gt;&gt; <span class="number">18</span></span><br><span class="line">        <span class="keyword">return</span> y&amp;<span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line">    number = random.getrandbits(<span class="number">32</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;extract number = &quot;</span>+ <span class="built_in">str</span>(extract_number(number)))</span><br><span class="line">    guess = <span class="built_in">int</span>(<span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&quot;Guess be extracted number:&quot;</span>)))</span><br><span class="line">    <span class="keyword">if</span> guess != number:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Wrong Number! Guess again.&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Welcome to the Mersenne Twister basic challenge. Please try to solve 20 challenges in 60 seconds.&quot;</span>)</span><br><span class="line">signal.alarm(<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Round: &quot;</span>+<span class="built_in">str</span>(i+<span class="number">1</span>))</span><br><span class="line">    random.choice([guess_number_1,guess_number_2,guess_number_3,guess_number_4])()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Good job!&quot;</span>)</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&#x27;/flag&#x27;</span>).read()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Congratulations on passing the challenge. This is your flag: &quot;</span> + <span class="built_in">str</span>(flag))</span><br></pre></td></tr></table></figure>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解:"></a>题解:</h3><p>移步<a href="https://wbuildings.github.io/Crypto/MT19937实战/#more">MT19937 实战 | W’Blog (wbuildings.github.io)</a></p>
<h2 id="fake-MT"><a href="#fake-MT" class="headerlink" title="fake_MT"></a>fake_MT</h2><blockquote>
<p>题目</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guess_number_1</span>():</span><br><span class="line">    randoms = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">208</span>):</span><br><span class="line">        randoms.append(random.getrandbits(<span class="number">96</span>))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;randoms = &quot;</span>+<span class="built_in">str</span>(randoms))</span><br><span class="line">    number = <span class="built_in">str</span>(random.getrandbits(<span class="number">96</span>))</span><br><span class="line">    guess = <span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&quot;Guess after number:&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> guess != number:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Wrong Number! Guess again.&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guess_number_2</span>():</span><br><span class="line">    number = <span class="built_in">str</span>(random.getrandbits(<span class="number">96</span>))</span><br><span class="line">    randoms = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">627</span>):</span><br><span class="line">        randoms.append(random.getrandbits(<span class="number">32</span>))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;randoms = &quot;</span>+<span class="built_in">str</span>(randoms))</span><br><span class="line">    guess = <span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&quot;Guess pre number:&quot;</span>))</span><br><span class="line">    <span class="keyword">if</span> guess != number:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Wrong Number! Guess again.&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guess_number_3</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_int32</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(<span class="number">0xFFFFFFFF</span> &amp; x)  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init</span>(<span class="params">seed</span>):</span><br><span class="line">        mt = [<span class="number">0</span>] * <span class="number">624</span></span><br><span class="line">        mt[<span class="number">0</span>] = seed</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">624</span>):</span><br><span class="line">            mt[i] = _int32(<span class="number">1812433253</span> * (mt[i - <span class="number">1</span>] ^ mt[i - <span class="number">1</span>] &gt;&gt; <span class="number">30</span>) + i)</span><br><span class="line">        <span class="keyword">return</span> mt[-<span class="number">1</span>]</span><br><span class="line">    number = random.getrandbits(<span class="number">32</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;last number = &quot;</span>+ <span class="built_in">str</span>(init(number)))</span><br><span class="line">    guess = <span class="built_in">int</span>(<span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&quot;Guess seed number:&quot;</span>)))</span><br><span class="line">    <span class="keyword">if</span> guess != number:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Wrong Number! Guess again.&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guess_number_4</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_number</span>(<span class="params">y</span>):</span><br><span class="line">        y = y ^ y &gt;&gt; <span class="number">11</span></span><br><span class="line">        y = y ^ y &lt;&lt; <span class="number">7</span> &amp; <span class="number">2636928640</span></span><br><span class="line">        y = y ^ y &lt;&lt; <span class="number">15</span> &amp; <span class="number">4022730752</span></span><br><span class="line">        y = y ^ y &gt;&gt; <span class="number">18</span></span><br><span class="line">        <span class="keyword">return</span> y&amp;<span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line">    number = random.getrandbits(<span class="number">32</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;extract number = &quot;</span>+ <span class="built_in">str</span>(extract_number(number)))</span><br><span class="line">    guess = <span class="built_in">int</span>(<span class="built_in">str</span>(<span class="built_in">input</span>(<span class="string">&quot;Guess be extracted number:&quot;</span>)))</span><br><span class="line">    <span class="keyword">if</span> guess != number:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Wrong Number! Guess again.&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Welcome to the Mersenne Twister basic challenge. Please try to solve 20 challenges in 60 seconds.&quot;</span>)</span><br><span class="line">signal.alarm(<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Round: &quot;</span>+<span class="built_in">str</span>(i+<span class="number">1</span>))</span><br><span class="line">    random.choice([guess_number_1,guess_number_2,guess_number_3,guess_number_4])()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Good job!&quot;</span>)</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&#x27;/flag&#x27;</span>).read()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Congratulations on passing the challenge. This is your flag: &quot;</span> + <span class="built_in">str</span>(flag))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="题解：-3"><a href="#题解：-3" class="headerlink" title="题解："></a>题解：</h3><p>题目源码不说和<code>real_MT</code>长得像，简直是一模一样，一说这题是<code>python2</code>的环境</p>
<p>题解如上，和<code>real_MT</code>一样</p>
<p>同上，移步<a href="https://wbuildings.github.io/Crypto/MT19937实战/#more">MT19937 实战 | W’Blog (wbuildings.github.io)</a></p>
<h2 id="ez-polynomial"><a href="#ez-polynomial" class="headerlink" title="ez_polynomial"></a>ez_polynomial</h2><blockquote>
<p>题目：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="built_in">list</span>(<span class="built_in">bytearray</span>(<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">p = getPrime(<span class="number">16</span>)</span><br><span class="line">R.&lt;y&gt; = PolynomialRing(GF(p))</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    P1 = R.random_element(degree=(ZZ.random_element(<span class="built_in">len</span>(flag), <span class="number">2</span>*<span class="built_in">len</span>(flag))))</span><br><span class="line">    Q1 = R.random_element(degree=(ZZ.random_element(<span class="built_in">len</span>(flag), <span class="number">2</span>*<span class="built_in">len</span>(flag))))</span><br><span class="line">    <span class="keyword">if</span> P1.is_irreducible() <span class="keyword">and</span> Q1.is_irreducible():</span><br><span class="line">        P = P1</span><br><span class="line">        Q = Q1</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">N = P*Q</span><br><span class="line">S.&lt;x&gt; = R.quotient(N)</span><br><span class="line">c = S(flag) ^ e</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;P:&quot;</span> + <span class="built_in">str</span>(p) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;N:&quot;</span> + <span class="built_in">str</span>(N) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;C:&quot;</span> + <span class="built_in">str</span>(c))</span><br><span class="line"></span><br><span class="line"><span class="comment">#P:40031</span></span><br><span class="line"><span class="comment">#N:24096*y^93 + 38785*y^92 + 17489*y^91 + 9067*y^90 + 1034*y^89 + 6534*y^88 + 35818*y^87 + 22046*y^86 + 12887*y^85 + 445*y^84 + 26322*y^83 + 37045*y^82 + 4486*y^81 + 3503*y^80 + 1184*y^79 + 38471*y^78 + 8012*y^77 + 36561*y^76 + 19429*y^75 + 35227*y^74 + 10813*y^73 + 26341*y^72 + 29474*y^71 + 2059*y^70 + 16068*y^69 + 31597*y^68 + 14685*y^67 + 9266*y^66 + 31019*y^65 + 6171*y^64 + 385*y^63 + 28986*y^62 + 9912*y^61 + 10632*y^60 + 33741*y^59 + 12634*y^58 + 21179*y^57 + 35548*y^56 + 17894*y^55 + 7152*y^54 + 9440*y^53 + 4004*y^52 + 2600*y^51 + 12281*y^50 + 22*y^49 + 17314*y^48 + 32694*y^47 + 7693*y^46 + 6567*y^45 + 19897*y^44 + 27329*y^43 + 8799*y^42 + 36348*y^41 + 33963*y^40 + 23730*y^39 + 27685*y^38 + 29037*y^37 + 14622*y^36 + 29608*y^35 + 39588*y^34 + 23294*y^33 + 757*y^32 + 20140*y^31 + 19511*y^30 + 1469*y^29 + 3898*y^28 + 6630*y^27 + 19610*y^26 + 11631*y^25 + 7188*y^24 + 11683*y^23 + 35611*y^22 + 37286*y^21 + 32139*y^20 + 20296*y^19 + 36426*y^18 + 25340*y^17 + 36204*y^16 + 37787*y^15 + 31256*y^14 + 505*y^13 + 27508*y^12 + 20885*y^11 + 32037*y^10 + 31236*y^9 + 7929*y^8 + 27195*y^7 + 28980*y^6 + 11863*y^5 + 16025*y^4 + 16389*y^3 + 570*y^2 + 36547*y + 10451</span></span><br><span class="line"><span class="comment">#C:3552*x^92 + 6082*x^91 + 25295*x^90 + 35988*x^89 + 26052*x^88 + 16987*x^87 + 12854*x^86 + 25117*x^85 + 25800*x^84 + 30297*x^83 + 5589*x^82 + 23233*x^81 + 14449*x^80 + 4712*x^79 + 35719*x^78 + 1696*x^77 + 35653*x^76 + 13995*x^75 + 13715*x^74 + 4578*x^73 + 37366*x^72 + 25260*x^71 + 28865*x^70 + 36120*x^69 + 7047*x^68 + 10497*x^67 + 19160*x^66 + 17939*x^65 + 14850*x^64 + 6705*x^63 + 17805*x^62 + 30083*x^61 + 2400*x^60 + 10685*x^59 + 15272*x^58 + 2225*x^57 + 13194*x^56 + 14251*x^55 + 31016*x^54 + 10189*x^53 + 35040*x^52 + 7042*x^51 + 29206*x^50 + 39363*x^49 + 32608*x^48 + 38614*x^47 + 5528*x^46 + 20119*x^45 + 13439*x^44 + 25468*x^43 + 30056*x^42 + 19720*x^41 + 21808*x^40 + 3712*x^39 + 25243*x^38 + 10606*x^37 + 16247*x^36 + 36106*x^35 + 17287*x^34 + 36276*x^33 + 1407*x^32 + 28839*x^31 + 8459*x^30 + 38863*x^29 + 435*x^28 + 913*x^27 + 36619*x^26 + 15572*x^25 + 9363*x^24 + 36837*x^23 + 17925*x^22 + 38567*x^21 + 38709*x^20 + 13582*x^19 + 35038*x^18 + 31121*x^17 + 8933*x^16 + 1666*x^15 + 21940*x^14 + 25585*x^13 + 840*x^12 + 21938*x^11 + 20143*x^10 + 28507*x^9 + 5947*x^8 + 20289*x^7 + 32196*x^6 + 924*x^5 + 370*x^4 + 14849*x^3 + 10780*x^2 + 14035*x + 15327</span></span><br></pre></td></tr></table></figure>
<h3 id="题解：-4"><a href="#题解：-4" class="headerlink" title="题解："></a>题解：</h3><p>多项式<code>RSA</code> ，先分解一下N，得到 <code>phi</code></p>
<p>多项式的phi，$\varphi=p^n-1$ ，<code>p为GF(p)的模数，n为此多项式最高项次数</code> </p>
<p>所以这里的<code>phi</code>等于： $\varphi(N)=(p^n-1)*(p^n-1)$  </p>
<p>然后常规解再取多项式的系数就行</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Sage</span></span><br><span class="line"><span class="comment">#已知p,n,m^e</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = <span class="number">40031</span></span><br><span class="line">S.&lt;x&gt; = PolynomialRing(GF(p))</span><br><span class="line">y = x</span><br><span class="line">N=<span class="number">24096</span>*y^<span class="number">93</span> + <span class="number">38785</span>*y^<span class="number">92</span> + <span class="number">17489</span>*y^<span class="number">91</span> + <span class="number">9067</span>*y^<span class="number">90</span> + <span class="number">1034</span>*y^<span class="number">89</span> + <span class="number">6534</span>*y^<span class="number">88</span> + <span class="number">35818</span>*y^<span class="number">87</span> + <span class="number">22046</span>*y^<span class="number">86</span> + <span class="number">12887</span>*y^<span class="number">85</span> + <span class="number">445</span>*y^<span class="number">84</span> + <span class="number">26322</span>*y^<span class="number">83</span> + <span class="number">37045</span>*y^<span class="number">82</span> + <span class="number">4486</span>*y^<span class="number">81</span> + <span class="number">3503</span>*y^<span class="number">80</span> + <span class="number">1184</span>*y^<span class="number">79</span> + <span class="number">38471</span>*y^<span class="number">78</span> + <span class="number">8012</span>*y^<span class="number">77</span> + <span class="number">36561</span>*y^<span class="number">76</span> + <span class="number">19429</span>*y^<span class="number">75</span> + <span class="number">35227</span>*y^<span class="number">74</span> + <span class="number">10813</span>*y^<span class="number">73</span> + <span class="number">26341</span>*y^<span class="number">72</span> + <span class="number">29474</span>*y^<span class="number">71</span> + <span class="number">2059</span>*y^<span class="number">70</span> + <span class="number">16068</span>*y^<span class="number">69</span> + <span class="number">31597</span>*y^<span class="number">68</span> + <span class="number">14685</span>*y^<span class="number">67</span> + <span class="number">9266</span>*y^<span class="number">66</span> + <span class="number">31019</span>*y^<span class="number">65</span> + <span class="number">6171</span>*y^<span class="number">64</span> + <span class="number">385</span>*y^<span class="number">63</span> + <span class="number">28986</span>*y^<span class="number">62</span> + <span class="number">9912</span>*y^<span class="number">61</span> + <span class="number">10632</span>*y^<span class="number">60</span> + <span class="number">33741</span>*y^<span class="number">59</span> + <span class="number">12634</span>*y^<span class="number">58</span> + <span class="number">21179</span>*y^<span class="number">57</span> + <span class="number">35548</span>*y^<span class="number">56</span> + <span class="number">17894</span>*y^<span class="number">55</span> + <span class="number">7152</span>*y^<span class="number">54</span> + <span class="number">9440</span>*y^<span class="number">53</span> + <span class="number">4004</span>*y^<span class="number">52</span> + <span class="number">2600</span>*y^<span class="number">51</span> + <span class="number">12281</span>*y^<span class="number">50</span> + <span class="number">22</span>*y^<span class="number">49</span> + <span class="number">17314</span>*y^<span class="number">48</span> + <span class="number">32694</span>*y^<span class="number">47</span> + <span class="number">7693</span>*y^<span class="number">46</span> + <span class="number">6567</span>*y^<span class="number">45</span> + <span class="number">19897</span>*y^<span class="number">44</span> + <span class="number">27329</span>*y^<span class="number">43</span> + <span class="number">8799</span>*y^<span class="number">42</span> + <span class="number">36348</span>*y^<span class="number">41</span> + <span class="number">33963</span>*y^<span class="number">40</span> + <span class="number">23730</span>*y^<span class="number">39</span> + <span class="number">27685</span>*y^<span class="number">38</span> + <span class="number">29037</span>*y^<span class="number">37</span> + <span class="number">14622</span>*y^<span class="number">36</span> + <span class="number">29608</span>*y^<span class="number">35</span> + <span class="number">39588</span>*y^<span class="number">34</span> + <span class="number">23294</span>*y^<span class="number">33</span> + <span class="number">757</span>*y^<span class="number">32</span> + <span class="number">20140</span>*y^<span class="number">31</span> + <span class="number">19511</span>*y^<span class="number">30</span> + <span class="number">1469</span>*y^<span class="number">29</span> + <span class="number">3898</span>*y^<span class="number">28</span> + <span class="number">6630</span>*y^<span class="number">27</span> + <span class="number">19610</span>*y^<span class="number">26</span> + <span class="number">11631</span>*y^<span class="number">25</span> + <span class="number">7188</span>*y^<span class="number">24</span> + <span class="number">11683</span>*y^<span class="number">23</span> + <span class="number">35611</span>*y^<span class="number">22</span> + <span class="number">37286</span>*y^<span class="number">21</span> + <span class="number">32139</span>*y^<span class="number">20</span> + <span class="number">20296</span>*y^<span class="number">19</span> + <span class="number">36426</span>*y^<span class="number">18</span> + <span class="number">25340</span>*y^<span class="number">17</span> + <span class="number">36204</span>*y^<span class="number">16</span> + <span class="number">37787</span>*y^<span class="number">15</span> + <span class="number">31256</span>*y^<span class="number">14</span> + <span class="number">505</span>*y^<span class="number">13</span> + <span class="number">27508</span>*y^<span class="number">12</span> + <span class="number">20885</span>*y^<span class="number">11</span> + <span class="number">32037</span>*y^<span class="number">10</span> + <span class="number">31236</span>*y^<span class="number">9</span> + <span class="number">7929</span>*y^<span class="number">8</span> + <span class="number">27195</span>*y^<span class="number">7</span> + <span class="number">28980</span>*y^<span class="number">6</span> + <span class="number">11863</span>*y^<span class="number">5</span> + <span class="number">16025</span>*y^<span class="number">4</span> + <span class="number">16389</span>*y^<span class="number">3</span> + <span class="number">570</span>*y^<span class="number">2</span> + <span class="number">36547</span>*y + <span class="number">10451</span></span><br><span class="line">C=<span class="number">3552</span>*x^<span class="number">92</span> + <span class="number">6082</span>*x^<span class="number">91</span> + <span class="number">25295</span>*x^<span class="number">90</span> + <span class="number">35988</span>*x^<span class="number">89</span> + <span class="number">26052</span>*x^<span class="number">88</span> + <span class="number">16987</span>*x^<span class="number">87</span> + <span class="number">12854</span>*x^<span class="number">86</span> + <span class="number">25117</span>*x^<span class="number">85</span> + <span class="number">25800</span>*x^<span class="number">84</span> + <span class="number">30297</span>*x^<span class="number">83</span> + <span class="number">5589</span>*x^<span class="number">82</span> + <span class="number">23233</span>*x^<span class="number">81</span> + <span class="number">14449</span>*x^<span class="number">80</span> + <span class="number">4712</span>*x^<span class="number">79</span> + <span class="number">35719</span>*x^<span class="number">78</span> + <span class="number">1696</span>*x^<span class="number">77</span> + <span class="number">35653</span>*x^<span class="number">76</span> + <span class="number">13995</span>*x^<span class="number">75</span> + <span class="number">13715</span>*x^<span class="number">74</span> + <span class="number">4578</span>*x^<span class="number">73</span> + <span class="number">37366</span>*x^<span class="number">72</span> + <span class="number">25260</span>*x^<span class="number">71</span> + <span class="number">28865</span>*x^<span class="number">70</span> + <span class="number">36120</span>*x^<span class="number">69</span> + <span class="number">7047</span>*x^<span class="number">68</span> + <span class="number">10497</span>*x^<span class="number">67</span> + <span class="number">19160</span>*x^<span class="number">66</span> + <span class="number">17939</span>*x^<span class="number">65</span> + <span class="number">14850</span>*x^<span class="number">64</span> + <span class="number">6705</span>*x^<span class="number">63</span> + <span class="number">17805</span>*x^<span class="number">62</span> + <span class="number">30083</span>*x^<span class="number">61</span> + <span class="number">2400</span>*x^<span class="number">60</span> + <span class="number">10685</span>*x^<span class="number">59</span> + <span class="number">15272</span>*x^<span class="number">58</span> + <span class="number">2225</span>*x^<span class="number">57</span> + <span class="number">13194</span>*x^<span class="number">56</span> + <span class="number">14251</span>*x^<span class="number">55</span> + <span class="number">31016</span>*x^<span class="number">54</span> + <span class="number">10189</span>*x^<span class="number">53</span> + <span class="number">35040</span>*x^<span class="number">52</span> + <span class="number">7042</span>*x^<span class="number">51</span> + <span class="number">29206</span>*x^<span class="number">50</span> + <span class="number">39363</span>*x^<span class="number">49</span> + <span class="number">32608</span>*x^<span class="number">48</span> + <span class="number">38614</span>*x^<span class="number">47</span> + <span class="number">5528</span>*x^<span class="number">46</span> + <span class="number">20119</span>*x^<span class="number">45</span> + <span class="number">13439</span>*x^<span class="number">44</span> + <span class="number">25468</span>*x^<span class="number">43</span> + <span class="number">30056</span>*x^<span class="number">42</span> + <span class="number">19720</span>*x^<span class="number">41</span> + <span class="number">21808</span>*x^<span class="number">40</span> + <span class="number">3712</span>*x^<span class="number">39</span> + <span class="number">25243</span>*x^<span class="number">38</span> + <span class="number">10606</span>*x^<span class="number">37</span> + <span class="number">16247</span>*x^<span class="number">36</span> + <span class="number">36106</span>*x^<span class="number">35</span> + <span class="number">17287</span>*x^<span class="number">34</span> + <span class="number">36276</span>*x^<span class="number">33</span> + <span class="number">1407</span>*x^<span class="number">32</span> + <span class="number">28839</span>*x^<span class="number">31</span> + <span class="number">8459</span>*x^<span class="number">30</span> + <span class="number">38863</span>*x^<span class="number">29</span> + <span class="number">435</span>*x^<span class="number">28</span> + <span class="number">913</span>*x^<span class="number">27</span> + <span class="number">36619</span>*x^<span class="number">26</span> + <span class="number">15572</span>*x^<span class="number">25</span> + <span class="number">9363</span>*x^<span class="number">24</span> + <span class="number">36837</span>*x^<span class="number">23</span> + <span class="number">17925</span>*x^<span class="number">22</span> + <span class="number">38567</span>*x^<span class="number">21</span> + <span class="number">38709</span>*x^<span class="number">20</span> + <span class="number">13582</span>*x^<span class="number">19</span> + <span class="number">35038</span>*x^<span class="number">18</span> + <span class="number">31121</span>*x^<span class="number">17</span> + <span class="number">8933</span>*x^<span class="number">16</span> + <span class="number">1666</span>*x^<span class="number">15</span> + <span class="number">21940</span>*x^<span class="number">14</span> + <span class="number">25585</span>*x^<span class="number">13</span> + <span class="number">840</span>*x^<span class="number">12</span> + <span class="number">21938</span>*x^<span class="number">11</span> + <span class="number">20143</span>*x^<span class="number">10</span> + <span class="number">28507</span>*x^<span class="number">9</span> + <span class="number">5947</span>*x^<span class="number">8</span> + <span class="number">20289</span>*x^<span class="number">7</span> + <span class="number">32196</span>*x^<span class="number">6</span> + <span class="number">924</span>*x^<span class="number">5</span> + <span class="number">370</span>*x^<span class="number">4</span> + <span class="number">14849</span>*x^<span class="number">3</span> + <span class="number">10780</span>*x^<span class="number">2</span> + <span class="number">14035</span>*x + <span class="number">15327</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">q1, q2 = N.factor()		<span class="comment"># 分解多项式 N</span></span><br><span class="line">q1, q2 = q1[<span class="number">0</span>], q2[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">phi = (p**q1.degree() - <span class="number">1</span>) * (p**q2.degree() - <span class="number">1</span>) 	<span class="comment"># 求φ，注意求法</span></span><br><span class="line"><span class="keyword">assert</span> gcd(e, phi) == <span class="number">1</span></span><br><span class="line">d = inverse_mod(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(C,d,N)</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">bytes</span>(m.coefficients())		<span class="comment"># 取多项式系数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Flag: &quot;</span>, flag.decode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># NKCTF&#123;We_HaV3_n0th1ng_But_dr3amS&#125;</span></span><br></pre></td></tr></table></figure>
<p>这题是原题，脚本参考：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sYXp6emFyby5naXRodWIuaW8vMjAyMC8wNS8wNi9jcnlwdG8tUlNBLw==">RSA | Lazzaro (lazzzaro.github.io)<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="eZ-Bl⊕ck"><a href="#eZ-Bl⊕ck" class="headerlink" title="eZ_Bl⊕ck"></a>eZ_Bl⊕ck</h2><blockquote>
<p>题目：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor <span class="keyword">as</span> xor</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">round</span>(<span class="params">s, k</span>):</span><br><span class="line">    l, r = s[:<span class="number">16</span>], s[<span class="number">16</span>:]</span><br><span class="line">    l_, r_ = xor(xor(r, k), l), l</span><br><span class="line">    <span class="keyword">return</span> l_ + r_</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">s, k</span>):</span><br><span class="line">    t = s</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        t = <span class="built_in">round</span>(t, k[i])</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = os.urandom(<span class="number">32</span>)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br><span class="line"></span><br><span class="line">key = [os.urandom(<span class="number">16</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(encode(r, key))</span><br><span class="line">m = flag.strip(<span class="string">b&#x27;NKCTF&#123;&#x27;</span>).strip(<span class="string">b&#x27;&#125;&#x27;</span>).replace(<span class="string">b&#x27;-&#x27;</span>, <span class="string">b&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(encode(m, key))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&quot;t\xf7\xaa\xac\x9d\x88\xa4\x8b\x1f+pA\x84\xacHg&#x27;\x07&#123;\xcc\x06\xc4i\xdd)\xda\xc9\xad\xa9\xe8\x1fi&quot;</span></span><br><span class="line"><span class="comment"># b&quot;&#x27;&#123;&lt;z&#125;\x91\xda\xc5\xd5S\x8b\xfa\x9f~]J\x0f\xf4\x9a\x1e\xe0\xef\x129N\xe7a\x928+\xe0\xee&quot;</span></span><br><span class="line"><span class="comment"># b&#x27;8\x1f&quot;\x83B4\x86)\xce\xebq3\x06\xa0w\x16U\x04M/w\xa1\x8f;)M\xdd~\x11:\xe3\xb3&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="题解：-5"><a href="#题解：-5" class="headerlink" title="题解："></a>题解：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(encode(r, key))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(encode(m, key))</span><br></pre></td></tr></table></figure>
<p>这样给了一个例子再给你加密的，要么通过前者求出<code>key</code>，要么两者消掉<code>key</code>，后者居多</p>
<p>八层异或罢了</p>
<p>看不出来就写下来，把每个步骤写下来，不要眼高手低（bushi）</p>
<p>记 <code>r1 = [:16],r2 = [16:],m1 = [:16],m2 = [16:],rc1 = [:16],rc2 = [16:]，mc1 =  [:16],mc2 = [16:]</code> </p>
<p>第一层</p>
<p>前一半：<code>r1^r2^key1</code>                       后一半：<code>r1</code></p>
<p>第二层</p>
<p>前一半：<code>r2^key1^key2</code>                     后一半：<code>r1^r2^key1</code></p>
<p>第三层</p>
<p>前一半：<code>r1^key2^key3</code>                      后一半：<code>r2^key1^key2</code></p>
<p>第四层</p>
<p>前一半：<code>r1^r2^key1^key3^key4</code>         后一半：<code>r1^key2^key3</code> </p>
<p>第五层</p>
<p>前一半：<code>r2^key1^key2^key4^key5</code>         后一半：<code>r1^r2^key1^key3^key4</code> </p>
<p>第六层</p>
<p>前一半：<code>r1^key2^key3^key5^key6</code>         后一半：<code>r2^key1^key2^key4^key5</code> </p>
<p>第七层</p>
<p>前一半：<code>r1^r2^key1^key3^key4^key6^key7</code>        后一半：<code>r1^key2^key3^key5^key6</code>    </p>
<p>第八层</p>
<p>前一半：<code>r2^key1^key2^key4^key5^key7^key8</code>     后一半：<code>r1^r2^key1^key3^key4^key6^key7</code></p>
<hr>
<p>看得出来，<code>m1、m2</code> 同理</p>
<p>第八层</p>
<p>前一半：<code>m2^key1^key2^key4^key5^key7^key8</code>     后一半：<code>m1^m2^key1^key3^key4^key6^key7</code></p>
<p>所以 <code>m2 = mc1^rc1^r2</code>  ，<code>m1 = mc2^rc2^r1^r2^m2</code> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = flag.strip(<span class="string">b&#x27;NKCTF&#123;&#x27;</span>).strip(<span class="string">b&#x27;&#125;&#x27;</span>).replace(<span class="string">b&#x27;-&#x27;</span>, <span class="string">b&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>最后拼接转成 <code>uuid</code> 的格式就行了</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor <span class="keyword">as</span> xor</span><br><span class="line"></span><br><span class="line">r = <span class="string">b&quot;t\xf7\xaa\xac\x9d\x88\xa4\x8b\x1f+pA\x84\xacHg&#x27;\x07&#123;\xcc\x06\xc4i\xdd)\xda\xc9\xad\xa9\xe8\x1fi&quot;</span></span><br><span class="line">rc = <span class="string">b&quot;&#x27;&#123;&lt;z&#125;\x91\xda\xc5\xd5S\x8b\xfa\x9f~]J\x0f\xf4\x9a\x1e\xe0\xef\x129N\xe7a\x928+\xe0\xee&quot;</span></span><br><span class="line">mc = <span class="string">b&#x27;8\x1f&quot;\x83B4\x86)\xce\xebq3\x06\xa0w\x16U\x04M/w\xa1\x8f;)M\xdd~\x11:\xe3\xb3&#x27;</span></span><br><span class="line"></span><br><span class="line">r1 = r[:<span class="number">16</span>]</span><br><span class="line">r2 = r[<span class="number">16</span>:]</span><br><span class="line">rc1 = rc[:<span class="number">16</span>]</span><br><span class="line">rc2 = rc[<span class="number">16</span>:]</span><br><span class="line">mc1 = mc[:<span class="number">16</span>]</span><br><span class="line">mc2 = mc[<span class="number">16</span>:]</span><br><span class="line"></span><br><span class="line">m2 = xor(xor(mc1,rc1),r2)</span><br><span class="line">m1 = xor(xor(xor(xor(mc2,rc2),r1),r2),m2)</span><br><span class="line"><span class="built_in">print</span>(uuid.UUID((m1+m2).decode()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># NKCTF&#123;1ccd5cee-c96d-4caf-8ce5-9a512b3d0655&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="easy-high"><a href="#easy-high" class="headerlink" title="easy_high"></a>easy_high</h2><blockquote>
<p>题目</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">p, q = getPrime(<span class="number">1024</span>), getPrime(<span class="number">1024</span>)</span><br><span class="line">N = p * q</span><br><span class="line">p0 = p ^ (bytes_to_long(flag)&lt;&lt;<span class="number">444</span>)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, <span class="number">65537</span>, N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c=&#x27;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;N=&#x27;</span>,N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p0=&#x27;</span>,p0)</span><br><span class="line"></span><br><span class="line"><span class="comment">#c= 4881545863615247924697512170011400857004555681758106351259776881249360423774694437921554056529064037535796844084045263140567168171628832384672612945806728465127954937293787045302307135365408938448006548465000663247116917564500525499976139556325841597810084111303039525833367199565266613007333465332710833102978756654324956219855687611590278570749890543277201538208370370097424105751568285050703167350889953331829275262932104042040526209179357770495596739361176548337593674366015027648541293309465113202672923556991818236011769228078267484362980348613669012975963468592763463397575879215173972436831753615524193609612</span></span><br><span class="line"><span class="comment">#N= 17192509201635459965397076685948071839556595198733884616568925970608227408244870123644193452116734188924766414178232653941867668088060274364830452998991993756231372252367134508712447410029668020439498980619263308413952840568602285764163331028384281840387206878673090608323292785024372223569438874557728414737773416206032540038861064700108597448191546413236875600906013508022023794395360001242071569785940215873854748631691555516626235191098174739613181230094797844414203694879874212340812119576042962565179579136753839946922829803044355134086779223242080575811804564731938746051591474236147749401914216734714709281349</span></span><br><span class="line"><span class="comment">#p0= 149263925308155304734002881595820602641174737629551638146384199378753884153459661375931646716325020758837194837271581361322079811468970876532640273110966545339040194118880506352109559900553776706613338890047890747811129988585025948270181264314668772556874718178868209009192010129918138140332707080927643141811</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="题解：-6"><a href="#题解：-6" class="headerlink" title="题解："></a>题解：</h3><p>我早期的一篇博客写的挺详细的，适合初学者，请移步（划到最后）：<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vV2J1aWxkaW5ncy9wL1JTQS5odG1s">RSA刷题系列(施工中) - Wbuildings - 博客园 (cnblogs.com)<i class="fa fa-external-link-alt"></i></span></p>
<p>把 m 的长度调到 合理范围内就行了</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum, gmpy2</span><br><span class="line"></span><br><span class="line">c= <span class="number">4881545863615247924697512170011400857004555681758106351259776881249360423774694437921554056529064037535796844084045263140567168171628832384672612945806728465127954937293787045302307135365408938448006548465000663247116917564500525499976139556325841597810084111303039525833367199565266613007333465332710833102978756654324956219855687611590278570749890543277201538208370370097424105751568285050703167350889953331829275262932104042040526209179357770495596739361176548337593674366015027648541293309465113202672923556991818236011769228078267484362980348613669012975963468592763463397575879215173972436831753615524193609612</span></span><br><span class="line">N= <span class="number">17192509201635459965397076685948071839556595198733884616568925970608227408244870123644193452116734188924766414178232653941867668088060274364830452998991993756231372252367134508712447410029668020439498980619263308413952840568602285764163331028384281840387206878673090608323292785024372223569438874557728414737773416206032540038861064700108597448191546413236875600906013508022023794395360001242071569785940215873854748631691555516626235191098174739613181230094797844414203694879874212340812119576042962565179579136753839946922829803044355134086779223242080575811804564731938746051591474236147749401914216734714709281349</span></span><br><span class="line">p0= <span class="number">149263925308155304734002881595820602641174737629551638146384199378753884153459661375931646716325020758837194837271581361322079811468970876532640273110966545339040194118880506352109559900553776706613338890047890747811129988585025948270181264314668772556874718178868209009192010129918138140332707080927643141811</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">m_length = <span class="number">400</span></span><br><span class="line">p_high =(p0&gt;&gt;(m_length+<span class="number">444</span>))&lt;&lt;(m_length+<span class="number">444</span>)</span><br><span class="line"></span><br><span class="line">p_low = p0%(<span class="number">2</span>^<span class="number">444</span>)</span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(N))</span><br><span class="line">f = p_high+x*<span class="number">2</span>^<span class="number">444</span>+p_low</span><br><span class="line">f = f.monic()</span><br><span class="line">x = f.small_roots(X=<span class="number">2</span>^m_length, beta=<span class="number">0.4</span>)</span><br><span class="line">p = <span class="built_in">int</span>(p_high+x[<span class="number">0</span>]*<span class="number">2</span>^<span class="number">444</span>+p_low)</span><br><span class="line">q = N//p</span><br><span class="line"></span><br><span class="line">d = <span class="built_in">int</span>(gmpy2.invert(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>)))</span><br><span class="line">m = <span class="built_in">int</span>(<span class="built_in">pow</span>(c, d, N))</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(m))</span><br><span class="line"></span><br><span class="line"><span class="comment"># NKCTF&#123;F10wrs_hVe_r3strDay&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="eZ-LargeCG"><a href="#eZ-LargeCG" class="headerlink" title="eZ_LargeCG"></a>eZ_LargeCG</h2><blockquote>
<p>题目</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> next_prime</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, isPrime, bytes_to_long</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init</span>():</span><br><span class="line">    primes = []</span><br><span class="line">    p = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(primes) &lt; <span class="number">100</span>:</span><br><span class="line">        p = next_prime(p)</span><br><span class="line">        primes.append(<span class="built_in">int</span>(p))</span><br><span class="line">    <span class="keyword">return</span> primes</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genMyPrimeA</span>(<span class="params">bits</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        g = <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> g &lt; <span class="number">2</span> ** bits:</span><br><span class="line">            g *= random.choice(primes)</span><br><span class="line">        g += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(g):</span><br><span class="line">            <span class="keyword">return</span> g</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genMyPrimeB</span>(<span class="params">bits</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        g = <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> g &lt; <span class="number">2</span> ** bits:</span><br><span class="line">            g *= random.choice(primes)</span><br><span class="line">        g -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> isPrime(g):</span><br><span class="line">            <span class="keyword">return</span> g</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen</span>(<span class="params">st, n, a, b, c, d</span>):</span><br><span class="line">    A = [st + <span class="number">2023</span>, st + <span class="number">2024</span>, st + <span class="number">2025</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>**<span class="number">666</span>):</span><br><span class="line">        A.append((a * A[-<span class="number">3</span>] + b * A[-<span class="number">2</span>] + c * A[-<span class="number">1</span>] + d) % n)</span><br><span class="line">    <span class="keyword">return</span> A</span><br><span class="line"></span><br><span class="line">primes = init()</span><br><span class="line">p1 = getPrime(<span class="number">256</span>)</span><br><span class="line"><span class="built_in">print</span>(p1)</span><br><span class="line">q1 = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> p1 &gt; q1:</span><br><span class="line">    q1 = genMyPrimeA(<span class="number">256</span>)</span><br><span class="line"><span class="built_in">print</span>(q1)</span><br><span class="line">p2 = getPrime(<span class="number">256</span>)</span><br><span class="line">q2 = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> p2 &gt; q2:</span><br><span class="line">    q2 = genMyPrimeB(<span class="number">256</span>)</span><br><span class="line">n1 = p1 * q1</span><br><span class="line">n2 = p2 * q2</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n1 = <span class="subst">&#123;n1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n2 = <span class="subst">&#123;n2&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r = getPrime(<span class="number">512</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;r = <span class="subst">&#123;r&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">A = gen(bytes_to_long(flag), r, p1, q1, p2, q2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;A[-3] = <span class="subst">&#123;A[-<span class="number">3</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;A[-2] = <span class="subst">&#123;A[-<span class="number">2</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;A[-1] = <span class="subst">&#123;A[-<span class="number">1</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># n1 = 39755206609675677517559022219519767646524455449142889144073217274247893104711318356648198334858966762944109142752432641040037415587397244438634301062818169</span></span><br><span class="line"><span class="comment"># n2 = 30725253491966558227957591684441310073288683324213439179377278006583428660031769862224980605664642101191616868994066039054762100886678504154619135365646221</span></span><br><span class="line"><span class="comment"># r = 7948275435515074902473978567170931671982245044864706132834233483354166398627204583162848756424199888842910697874390403881343013872330344844971750121043493</span></span><br><span class="line"><span class="comment"># A[-3] = 6085327340671394838391386566774092636784105046872311226269065664501131836034666722102264842236327898770287752026397099940098916322051606027565395747098434</span></span><br><span class="line"><span class="comment"># A[-2] = 1385551782355619987198268805270109182589006873371541520953112424858566073422289235930944613836387546298080386848159955053303343649615385527645536504580787</span></span><br><span class="line"><span class="comment"># A[-1] = 2529291156468264643335767070801583140819639532551726975314270127875306069067016825677707064451364791677536138503947465612206191051563106705150921639560469</span></span><br></pre></td></tr></table></figure>
<h3 id="题解：-7"><a href="#题解：-7" class="headerlink" title="题解："></a>题解：</h3><p>典型的 <strong>Pollard’s p-1</strong>、<strong>William’s p+1</strong> ，脚本参考： <span class="exturl" data-url="aHR0cHM6Ly9sYXp6emFyby5naXRodWIuaW8vMjAyMC8wNS8wNi9jcnlwdG8tUlNBLw==">RSA | Lazzaro (lazzzaro.github.io)<i class="fa fa-external-link-alt"></i></span></p>
<p>最后一步是  <strong>矩阵快速幂</strong> ，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(a * A[-<span class="number">3</span>] + b * A[-<span class="number">2</span>] + c * A[-<span class="number">1</span>] + d) % n</span><br></pre></td></tr></table></figure>
<p>据此构造矩阵</p>
<p>同时 题目说明 <code>p1&lt;q1，p2&lt;q2</code> </p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> primefac <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">k = <span class="number">2</span></span><br><span class="line">N = <span class="number">39755206609675677517559022219519767646524455449142889144073217274247893104711318356648198334858966762944109142752432641040037415587397244438634301062818169</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    a = powmod(a, k, N)</span><br><span class="line">    res = gcd(a-<span class="number">1</span>, N)</span><br><span class="line">    <span class="keyword">if</span> res != <span class="number">1</span> <span class="keyword">and</span> res != N:</span><br><span class="line">        q = N // res</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;p1 =&quot;</span>,res)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;q1 =&quot;</span>,q)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    k += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">30725253491966558227957591684441310073288683324213439179377278006583428660031769862224980605664642101191616868994066039054762100886678504154619135365646221</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mlucas</span>(<span class="params">v, a, n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Helper function for williams_pp1().  Multiplies along a Lucas sequence modulo n. &quot;&quot;&quot;</span></span><br><span class="line">    v1, v2 = v, (v**<span class="number">2</span> - <span class="number">2</span>) % n</span><br><span class="line">    <span class="keyword">for</span> bit <span class="keyword">in</span> <span class="built_in">bin</span>(a)[<span class="number">3</span>:]:</span><br><span class="line">        v1, v2 = ((v1**<span class="number">2</span> - <span class="number">2</span>) % n, (v1*v2 - v) % n) <span class="keyword">if</span> bit == <span class="string">&quot;0&quot;</span> <span class="keyword">else</span> ((v1*v2 - v) % n, (v2**<span class="number">2</span> - <span class="number">2</span>) % n)</span><br><span class="line">    <span class="keyword">return</span> v1</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> count(<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> primegen():</span><br><span class="line">        e = ilog(isqrt(n), p)</span><br><span class="line">        <span class="keyword">if</span> e == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(e):</span><br><span class="line">            v = mlucas(v, p, n)</span><br><span class="line">        g = gcd(v-<span class="number">2</span>, n)</span><br><span class="line">        <span class="keyword">if</span> <span class="number">1</span> &lt; g &lt; n:</span><br><span class="line">            p2 = g</span><br><span class="line">            q2 = n // p2</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;p2 =&#x27;</span>,p2)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;q2 =&#x27;</span>,q2)</span><br><span class="line">            exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> g == n:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sage</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">6085327340671394838391386566774092636784105046872311226269065664501131836034666722102264842236327898770287752026397099940098916322051606027565395747098434</span>    <span class="comment">#倒数第三项</span></span><br><span class="line">y = <span class="number">1385551782355619987198268805270109182589006873371541520953112424858566073422289235930944613836387546298080386848159955053303343649615385527645536504580787</span>    <span class="comment">#倒数第二项</span></span><br><span class="line">z = <span class="number">2529291156468264643335767070801583140819639532551726975314270127875306069067016825677707064451364791677536138503947465612206191051563106705150921639560469</span>   <span class="comment">#最后一项</span></span><br><span class="line">r = <span class="number">7948275435515074902473978567170931671982245044864706132834233483354166398627204583162848756424199888842910697874390403881343013872330344844971750121043493</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> p1 &gt; q1:</span><br><span class="line">    p1, q1 = q1, p1</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> p2 &gt; q2:</span><br><span class="line">    p2, q2 = q2, p2</span><br><span class="line">    </span><br><span class="line">a = p1</span><br><span class="line">b = q1</span><br><span class="line">c = p2</span><br><span class="line">d = q2</span><br><span class="line"></span><br><span class="line">mt=matrix(Zmod(r),<span class="number">4</span>,<span class="number">4</span>)</span><br><span class="line">mt[<span class="number">0</span>]=[c,b,a,d]</span><br><span class="line">mt[<span class="number">1</span>]=[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">mt[<span class="number">2</span>]=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">mt[<span class="number">3</span>]=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">mn=matrix(Zmod(r),<span class="number">4</span>,<span class="number">1</span>,[z,y,x,<span class="number">1</span>])</span><br><span class="line">X=(mt^(<span class="built_in">pow</span>(<span class="number">6</span>,<span class="number">666</span>))).solve_right(mn)</span><br><span class="line"><span class="built_in">print</span>(X)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(X[<span class="number">0</span>][<span class="number">0</span>]-<span class="number">2025</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># NKCTF&#123;y0u_kN0w_r5A_&amp;_LCg_&amp;_Ma7r1X_s0_w3ll!!!&#125;</span></span><br></pre></td></tr></table></figure>
<p>原题：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxNTA3NDM3L2FydGljbGUvZGV0YWlscy8xMjQyMDU3MzI=">RSA中利用光滑数进行模数分解-CSDN博客<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="complex-matrix"><a href="#complex-matrix" class="headerlink" title="complex_matrix"></a>complex_matrix</h2><blockquote>
<p>题目</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gy</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">k = <span class="number">400</span></span><br><span class="line">p, q = getPrime(<span class="number">741</span>), getPrime(<span class="number">741</span>)</span><br><span class="line">N = p * q</span><br><span class="line">phi = (p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">_flag = bytes_to_long(flag)</span><br><span class="line">p, q = getPrime(<span class="number">1024</span>), getPrime(<span class="number">1024</span>)</span><br><span class="line">d_array = [getPrime(k) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)] </span><br><span class="line">e_array = [inverse(i, phi) <span class="keyword">for</span> i <span class="keyword">in</span> d_array]</span><br><span class="line">c = <span class="built_in">pow</span>(_flag, <span class="number">65537</span>, N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;N:&#x27;</span>,N)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;e:&#x27;</span>,e_array)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c:&#x27;</span>,c)</span><br><span class="line"></span><br><span class="line"><span class="comment">#N: 71841248095369087024928175623295380241516644434969868335504061065977014103487197287619667598363486210886674500469383623511906399909335989202774281795855975972913438448899231650449810696539722877903606541112937729384851506921675290984316325565141178015123381439392534417225128922398194700511937668809140024838070124095703585627058463137549632965723304713166804084673075651182998654091113119667582720831809458721072371364839503563819080226784026253</span></span><br><span class="line"><span class="comment">#e: [65128799196671634905309494529154568614228788035735808211836905142007976099865571126946706559109393187772126407982007858423859147772762638898854472065889939549916077695303157760259717113616428849798058080633047516455513870697383339784816006154279428812359241282979297285283850338964993773227397528608557211742425548651971558377656644211835094019462699301650412862894391885325969143805924684662849869947172175608502179438901337558870349697233790535, 58756559706647121529575085912021603170286163639572075337348109911506627489265537716060463072086480156516641723700802217411122982693536541892986623158818442274840863016647800896033363360822503445344748132842451806511693779600370832206455202293028402486647422212959763287987847280322100701242139127654031151565924132562837893975505159702015125483479126108892709063135006366792197127007229210558758401679638300464111782814561428899998471531067163715, 34828685390969672139784723764579499920301439564705391196519314224159563070870933754477650614819514127121146216049444888554338415587165719098661141454627820126445291802801256297252654045398330613075575527685542980264993711077876535643646746742646371967302159565887123638001580042027272379341650995728849759541960087953160211696369079708787543303742132161742979856720539914370868829868891655221361545648778590685232034703220732697083024449894197969, 26717968456600556973167180286909817773394160817933525240720067057464671317174201540556176814203780603153696663101158205367554829261808020426363683474848952397963507069306452835776851274959389849223566030857588019845781623271395012194869024566879791449466064832273531795430185178486425688475688634844530106740480643866537205900809400383304665727460014210405339697947582657505028211149470787536144302545259243549176816653560626044921521516818788487]</span></span><br><span class="line"><span class="comment">#c: 39297018404565022956251803918747154798377576057123078716166221329195959669756819453426741569480551313085435037629493881038383709458043802420338889323233368852331387845200216275712388921820794980987541224782392553528127093154957890356084331463340193478391679540506421250562554424770350351514435220782124981277580072039637811543914983033300225131364246910828188727043248991987332274929827173923543187017105236008487756190002204169623313222748976369</span></span><br></pre></td></tr></table></figure>
<h3 id="题解：-8"><a href="#题解：-8" class="headerlink" title="题解："></a>题解：</h3><p><code>d 为 400bit，N为 741*2 bit</code>，    </p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagesimage-20240317145526358.png" alt="image-20240317145526358"></p>
<p> 所以，<code>d</code>的大小在<code>Boneh Durfee</code> 攻击范围内</p>
<p>我调的是<code>m=8</code>，求得 d 后就是，<code>已知ed 分解 n</code></p>
<p>Boneh Durfee 脚本在此 <a href="https://wbuildings.github.io/Crypto/2023年春秋杯网络安全联赛冬季赛/">2023年春秋杯网络安全联赛冬季赛 | W’Blog (wbuildings.github.io)</a></p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e = <span class="number">65128799196671634905309494529154568614228788035735808211836905142007976099865571126946706559109393187772126407982007858423859147772762638898854472065889939549916077695303157760259717113616428849798058080633047516455513870697383339784816006154279428812359241282979297285283850338964993773227397528608557211742425548651971558377656644211835094019462699301650412862894391885325969143805924684662849869947172175608502179438901337558870349697233790535</span></span><br><span class="line">d = <span class="number">2538622943228145345878128391246955913733471093083079525518295718921319603924905551012052344520607070240272805900599777139</span></span><br><span class="line">n = <span class="number">71841248095369087024928175623295380241516644434969868335504061065977014103487197287619667598363486210886674500469383623511906399909335989202774281795855975972913438448899231650449810696539722877903606541112937729384851506921675290984316325565141178015123381439392534417225128922398194700511937668809140024838070124095703585627058463137549632965723304713166804084673075651182998654091113119667582720831809458721072371364839503563819080226784026253</span></span><br><span class="line">c = <span class="number">39297018404565022956251803918747154798377576057123078716166221329195959669756819453426741569480551313085435037629493881038383709458043802420338889323233368852331387845200216275712388921820794980987541224782392553528127093154957890356084331463340193478391679540506421250562554424770350351514435220782124981277580072039637811543914983033300225131364246910828188727043248991987332274929827173923543187017105236008487756190002204169623313222748976369</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factor_with_ed</span>(<span class="params">e,d,n</span>):</span><br><span class="line">    p=<span class="number">1</span></span><br><span class="line">    q=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> p==<span class="number">1</span> <span class="keyword">and</span> q==<span class="number">1</span>:</span><br><span class="line">        k = e*d -<span class="number">1</span></span><br><span class="line">        g = random.randint(<span class="number">1</span>,n)</span><br><span class="line">        <span class="keyword">while</span> k%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">            k //= <span class="number">2</span></span><br><span class="line">            x = <span class="built_in">pow</span>(g,k,n)</span><br><span class="line">            <span class="keyword">if</span> x&gt;<span class="number">1</span> <span class="keyword">and</span> libnum.gcd(x-<span class="number">1</span>,n)&gt;<span class="number">1</span>:</span><br><span class="line">                p = libnum.gcd(x-<span class="number">1</span>,n)</span><br><span class="line">                q = n//p</span><br><span class="line">    <span class="keyword">return</span> p,q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p,q = factor_with_ed(e,d,n)</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = libnum.invmod(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># NKCTF&#123;F10w3r_Hav3_r3start_Day_N0_Man_iS_Y0ung_Aga1n&#125;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>还可以拓展维纳攻击?</p>
<p>拓展维纳攻击：给了多个指数 $e_i$ </p>
<p><code>Dexterjie师傅</code>测试了3，4，5，6个<code>e</code>，都能够跑出结果，不过跑6个<code>e</code>的需要挺长时间</p>
<p><code>Xenny</code>给出测试结论：大约<code>8个e</code> 的情况已经运行不出来了</p>
<p>(我才知道这个wiki博客是Xenny师傅的博客，恐怖如斯😭😭)</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9jdGYtd2lraS5vcmcvY3J5cHRvL2FzeW1tZXRyaWMvcnNhL2RfYXR0YWNrcy9yc2FfZXh0ZW5kaW5nX3dpZW5lci8jXzg=">扩展维纳攻击 - CTF Wiki (ctf-wiki.org)<i class="fa fa-external-link-alt"></i></span></p>
<p>这边存一下 拓展维纳攻击 的脚本:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">isdigit = <span class="keyword">lambda</span> x: <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>) &lt;= <span class="built_in">ord</span>(x) &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_permutations</span>(<span class="params">g, n</span>):</span><br><span class="line">    sub = []</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">s, prev</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(s) == n:</span><br><span class="line">            res.append(s[::])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> g:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> s <span class="keyword">or</span> i &lt; prev:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            s.append(i)</span><br><span class="line">            dfs(s, <span class="built_in">max</span>(prev, i))</span><br><span class="line">            s.remove(i)</span><br><span class="line">    dfs(sub, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">X3NNY</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, exp1, exp2</span>):</span><br><span class="line">        self.exp1 = exp1</span><br><span class="line">        self.exp2 = exp2</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__mul__</span>(<span class="params">self, b</span>):</span><br><span class="line">        <span class="keyword">return</span> X3NNY(self.exp1 * b.exp1, self.exp2 * b.exp2)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;%s = %s&#x27;</span> % (self.exp1.expand().collect_common_factors(), self.exp2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">X_Complex</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, exp</span>):</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        s = <span class="string">&#x27;%s&#x27;</span> % exp</span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(s):</span><br><span class="line">            <span class="keyword">if</span> isdigit(s[i]):</span><br><span class="line">                num = <span class="number">0</span></span><br><span class="line">                <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(s) <span class="keyword">and</span> isdigit(s[i]):</span><br><span class="line">                    num = num*<span class="number">10</span> + <span class="built_in">int</span>(s[i])</span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> i &gt;= <span class="built_in">len</span>(s):</span><br><span class="line">                    self.b = num</span><br><span class="line">                <span class="keyword">elif</span> s[i] == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                    self.a = num</span><br><span class="line">                    i += <span class="number">2</span></span><br><span class="line">                <span class="keyword">elif</span> s[i] == <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                    r = <span class="number">0</span></span><br><span class="line">                    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(s) <span class="keyword">and</span> isdigit(s[i]):</span><br><span class="line">                        r = r*<span class="number">10</span> + <span class="built_in">int</span>(s[i])</span><br><span class="line">                        i += <span class="number">1</span></span><br><span class="line">                    self.b = num/r</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(self, <span class="string">&#x27;a&#x27;</span>):</span><br><span class="line">            self.a = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(self, <span class="string">&#x27;b&#x27;</span>):</span><br><span class="line">            self.b = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">WW</span>(<span class="params">e, d, k, g, N, s</span>):</span><br><span class="line">    <span class="keyword">return</span> X3NNY(e*d*g-k*N, g+k*s)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GG</span>(<span class="params">e1, e2, d1, d2, k1, k2</span>):</span><br><span class="line">    <span class="keyword">return</span> X3NNY(e1*d1*k2- e2*d2*k1, k2 - k1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">W</span>(<span class="params">i</span>):</span><br><span class="line">    e = <span class="built_in">eval</span>(<span class="string">&quot;e%d&quot;</span> % i)</span><br><span class="line">    d = <span class="built_in">eval</span>(<span class="string">&quot;d%d&quot;</span> % i)</span><br><span class="line">    k = <span class="built_in">eval</span>(<span class="string">&quot;k%d&quot;</span> % i)</span><br><span class="line">    <span class="keyword">return</span> WW(e, d, k, g, N, s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">G</span>(<span class="params">i, j</span>):</span><br><span class="line">    e1 = <span class="built_in">eval</span>(<span class="string">&quot;e%d&quot;</span> % i)</span><br><span class="line">    d1 = <span class="built_in">eval</span>(<span class="string">&quot;d%d&quot;</span> % i)</span><br><span class="line">    k1 = <span class="built_in">eval</span>(<span class="string">&quot;k%d&quot;</span> % i)</span><br><span class="line">    </span><br><span class="line">    e2 = <span class="built_in">eval</span>(<span class="string">&quot;e%d&quot;</span> % j)</span><br><span class="line">    d2 = <span class="built_in">eval</span>(<span class="string">&quot;d%d&quot;</span> % j)</span><br><span class="line">    k2 = <span class="built_in">eval</span>(<span class="string">&quot;k%d&quot;</span> % j)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> GG(e1, e2, d1, d2, k1, k2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">R</span>(<span class="params">e, sn</span>): <span class="comment"># min u max v</span></span><br><span class="line">    ret = X3NNY(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    n = <span class="built_in">max</span>(e)</span><br><span class="line">    nn = <span class="built_in">len</span>(e)</span><br><span class="line">    l = <span class="built_in">set</span>(i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>))</span><br><span class="line">    debug = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    u, v = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> e:</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">1</span>:</span><br><span class="line">            ret *= W(<span class="number">1</span>)</span><br><span class="line">            debug += <span class="string">&#x27;W(%d)&#x27;</span> % i</span><br><span class="line">            nn -= <span class="number">1</span></span><br><span class="line">            l.remove(<span class="number">1</span>)</span><br><span class="line">            u += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> i &gt; <span class="built_in">min</span>(l) <span class="keyword">and</span> <span class="built_in">len</span>(l) &gt;= <span class="number">2</span>*nn:</span><br><span class="line">            ret *= G(<span class="built_in">min</span>(l), i)</span><br><span class="line">            nn -= <span class="number">1</span></span><br><span class="line">            debug += <span class="string">&#x27;G(%d, %d)&#x27;</span> % (<span class="built_in">min</span>(l), i)</span><br><span class="line">            l.remove(<span class="built_in">min</span>(l))</span><br><span class="line">            l.remove(i)</span><br><span class="line">            v += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ret *= W(i)</span><br><span class="line">            l.remove(i)</span><br><span class="line">            debug += <span class="string">&#x27;W(%d)&#x27;</span> % i</span><br><span class="line">            nn -= <span class="number">1</span></span><br><span class="line">            u += <span class="number">1</span></span><br><span class="line">    <span class="comment"># print(debug, end = &#x27; &#x27;)</span></span><br><span class="line">    <span class="keyword">return</span> ret, u/<span class="number">2</span> + (sn - v) * a</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">H</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> [<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> [(), (<span class="number">1</span>,), (<span class="number">2</span>,), (<span class="number">1</span>, <span class="number">2</span>)]</span><br><span class="line">    ret = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, n+<span class="number">1</span>):</span><br><span class="line">        ret.append((i,))</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> my_permutations(<span class="built_in">range</span>(<span class="number">1</span>, i), j):</span><br><span class="line">                ret.append(<span class="built_in">tuple</span>(k + [i]))</span><br><span class="line">    <span class="keyword">return</span> H(<span class="number">2</span>) + ret</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CC</span>(<span class="params">exp, n</span>):</span><br><span class="line">    cols = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>&lt;&lt;n)]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># split exp</span></span><br><span class="line">    texps = (<span class="string">&#x27;%s&#x27;</span> % exp.exp1.expand()).strip().split(<span class="string">&#x27; - &#x27;</span>)</span><br><span class="line">    ops = []</span><br><span class="line">    exps = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(texps)):</span><br><span class="line">        <span class="keyword">if</span> texps[i].find(<span class="string">&#x27; + &#x27;</span>) != -<span class="number">1</span>:</span><br><span class="line">            tmp = texps[i].split(<span class="string">&#x27; + &#x27;</span>)</span><br><span class="line">            ops.append(<span class="number">0</span>)</span><br><span class="line">            exps.append(tmp[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(tmp)):</span><br><span class="line">                ops.append(<span class="number">1</span>)</span><br><span class="line">                exps.append(tmp[i])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ops.append(<span class="number">0</span>)</span><br><span class="line">            exps.append(texps[i])</span><br><span class="line">    <span class="keyword">if</span> exps[<span class="number">0</span>][<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(exps)):</span><br><span class="line">            ops[i] = <span class="number">1</span>-ops[i]</span><br><span class="line">        exps[<span class="number">0</span>] = exps[<span class="number">0</span>][<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ops[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    <span class="comment"># find e and N</span></span><br><span class="line">    l = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(exps)):</span><br><span class="line">        tmp = <span class="number">1</span> <span class="keyword">if</span> ops[i] <span class="keyword">else</span> -<span class="number">1</span></span><br><span class="line">        en = []</span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> j &lt; <span class="built_in">len</span>(exps[i]):</span><br><span class="line">            <span class="keyword">if</span> exps[i][j] == <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">                num = <span class="number">0</span></span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> isdigit(exps[i][j]):</span><br><span class="line">                    num = num*<span class="number">10</span> + <span class="built_in">int</span>(exps[i][j])</span><br><span class="line">                    j += <span class="number">1</span></span><br><span class="line">                tmp *= <span class="built_in">eval</span>(<span class="string">&#x27;e%d&#x27;</span> % num)</span><br><span class="line">                en.append(num)</span><br><span class="line">            <span class="keyword">elif</span> exps[i][j] == <span class="string">&#x27;N&#x27;</span>:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">                num = <span class="number">0</span></span><br><span class="line">                <span class="keyword">if</span> exps[i][j] == <span class="string">&#x27;^&#x27;</span>:</span><br><span class="line">                    j += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">while</span> isdigit(exps[i][j]):</span><br><span class="line">                        num = num*<span class="number">10</span> + <span class="built_in">int</span>(exps[i][j])</span><br><span class="line">                        j += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">                    num = <span class="number">1</span></span><br><span class="line">                tmp *= <span class="built_in">eval</span>(<span class="string">&#x27;N**%d&#x27;</span> % num)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> tmp == <span class="number">1</span> <span class="keyword">or</span> tmp == -<span class="number">1</span>:</span><br><span class="line">            l.append((<span class="number">0</span>, ()))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l.append((tmp, <span class="built_in">tuple</span>(<span class="built_in">sorted</span>(en))))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># construct h</span></span><br><span class="line">    mp = H(n)</span><br><span class="line">    <span class="keyword">for</span> val, en <span class="keyword">in</span> l:</span><br><span class="line">        cols[mp.index(en)] = val</span><br><span class="line">    <span class="comment"># print(cols)</span></span><br><span class="line">    <span class="keyword">return</span> cols</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">EWA</span>(<span class="params">n, elist, NN, alpha</span>):</span><br><span class="line">    mp = H(n)</span><br><span class="line">    var(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    S = [X_Complex(n*a)]</span><br><span class="line">    cols = [[<span class="number">1</span> <span class="keyword">if</span> i == <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>^n)]]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> mp[<span class="number">1</span>:]:</span><br><span class="line">        eL, s = R(i, n)</span><br><span class="line">        cols.append(CC(eL, n))</span><br><span class="line">        S.append(X_Complex(s))</span><br><span class="line">    </span><br><span class="line">    alphaA,alphaB = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> S:</span><br><span class="line">        alphaA = <span class="built_in">max</span>(i.a, alphaA)</span><br><span class="line">        alphaB = <span class="built_in">max</span>(i.b, alphaB)</span><br><span class="line">    <span class="comment"># print(alphaA, alphaB)</span></span><br><span class="line">    D = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(S)):</span><br><span class="line">        <span class="comment"># print((alphaA-S[i].a), (alphaB - S[i].b))</span></span><br><span class="line">        D.append(</span><br><span class="line">            <span class="built_in">int</span>(NN^((alphaA-S[i].a)*alpha + (alphaB - S[i].b)))</span><br><span class="line">        )</span><br><span class="line">    kw = &#123;<span class="string">&#x27;N&#x27;</span>: NN&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(elist)):</span><br><span class="line">        kw[<span class="string">&#x27;e%d&#x27;</span> % (i+<span class="number">1</span>)] = elist[i]</span><br><span class="line"></span><br><span class="line">    B = Matrix(ZZ, Matrix(cols).T(**kw)) * diagonal_matrix(ZZ, D)</span><br><span class="line">    L = B.LLL(<span class="number">0.5</span>)</span><br><span class="line">    v = Matrix(ZZ, L[<span class="number">0</span>])</span><br><span class="line">    x = v * B**(-<span class="number">1</span>)</span><br><span class="line">    phi = <span class="built_in">int</span>(x[<span class="number">0</span>,<span class="number">1</span>]/x[<span class="number">0</span>,<span class="number">0</span>]*elist[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> phi</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">NN, elist, alpha</span>):</span><br><span class="line">    phi = EWA(<span class="built_in">len</span>(elist), elist, NN, alpha)</span><br><span class="line">    <span class="built_in">print</span>(phi)</span><br><span class="line">    <span class="keyword">return</span> phi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NN = <span class="number">71841248095369087024928175623295380241516644434969868335504061065977014103487197287619667598363486210886674500469383623511906399909335989202774281795855975972913438448899231650449810696539722877903606541112937729384851506921675290984316325565141178015123381439392534417225128922398194700511937668809140024838070124095703585627058463137549632965723304713166804084673075651182998654091113119667582720831809458721072371364839503563819080226784026253</span></span><br><span class="line">elist = [<span class="number">65128799196671634905309494529154568614228788035735808211836905142007976099865571126946706559109393187772126407982007858423859147772762638898854472065889939549916077695303157760259717113616428849798058080633047516455513870697383339784816006154279428812359241282979297285283850338964993773227397528608557211742425548651971558377656644211835094019462699301650412862894391885325969143805924684662849869947172175608502179438901337558870349697233790535</span>, <span class="number">58756559706647121529575085912021603170286163639572075337348109911506627489265537716060463072086480156516641723700802217411122982693536541892986623158818442274840863016647800896033363360822503445344748132842451806511693779600370832206455202293028402486647422212959763287987847280322100701242139127654031151565924132562837893975505159702015125483479126108892709063135006366792197127007229210558758401679638300464111782814561428899998471531067163715</span>, <span class="number">34828685390969672139784723764579499920301439564705391196519314224159563070870933754477650614819514127121146216049444888554338415587165719098661141454627820126445291802801256297252654045398330613075575527685542980264993711077876535643646746742646371967302159565887123638001580042027272379341650995728849759541960087953160211696369079708787543303742132161742979856720539914370868829868891655221361545648778590685232034703220732697083024449894197969</span>, <span class="number">26717968456600556973167180286909817773394160817933525240720067057464671317174201540556176814203780603153696663101158205367554829261808020426363683474848952397963507069306452835776851274959389849223566030857588019845781623271395012194869024566879791449466064832273531795430185178486425688475688634844530106740480643866537205900809400383304665727460014210405339697947582657505028211149470787536144302545259243549176816653560626044921521516818788487</span>]</span><br><span class="line">c = <span class="number">39297018404565022956251803918747154798377576057123078716166221329195959669756819453426741569480551313085435037629493881038383709458043802420338889323233368852331387845200216275712388921820794980987541224782392553528127093154957890356084331463340193478391679540506421250562554424770350351514435220782124981277580072039637811543914983033300225131364246910828188727043248991987332274929827173923543187017105236008487756190002204169623313222748976369</span></span><br><span class="line">alpha = <span class="number">400</span> / <span class="built_in">int</span>(NN).bit_length()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(elist)+<span class="number">1</span>):</span><br><span class="line">    var(<span class="string">&quot;e%d&quot;</span> % i)</span><br><span class="line">    var(<span class="string">&quot;d%d&quot;</span> % i)</span><br><span class="line">    var(<span class="string">&quot;k%d&quot;</span> % i)</span><br><span class="line">g, N, s = var(<span class="string">&#x27;g&#x27;</span>), var(<span class="string">&#x27;N&#x27;</span>), var(<span class="string">&#x27;s&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(elist)):</span><br><span class="line">    elist[i] = Integer(elist[i])</span><br><span class="line">phi = attack(NN, elist, alpha)</span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(<span class="number">65537</span>, phi)</span><br><span class="line">m = <span class="built_in">int</span>(<span class="built_in">pow</span>(c, d, NN))</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(m))</span><br><span class="line"><span class="comment"># NKCTF&#123;F10w3r_Hav3_r3start_Day_N0_Man_iS_Y0ung_Aga1n&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="baby-classical（未明白）"><a href="#baby-classical（未明白）" class="headerlink" title="baby_classical（未明白）"></a>baby_classical（未明白）</h2><blockquote>
<p>题目</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag length:&#x27;</span>,<span class="built_in">len</span>(flag))</span><br><span class="line">dic = string.ascii_uppercase+string.ascii_lowercase+string.digits+<span class="string">&#x27;+/&#x27;</span></span><br><span class="line">f1nd = <span class="keyword">lambda</span> x : dic.find(x)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">KeyEncryption</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, m: <span class="built_in">int</span>, fillchar: <span class="built_in">str</span>=<span class="string">&quot;z&quot;</span>, key: np.ndarray=<span class="literal">None</span></span>):</span><br><span class="line">        self.m = m</span><br><span class="line">        self.key = key</span><br><span class="line">        self.dicn2s = &#123;i: dic[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>)&#125;</span><br><span class="line">        self.dics2n = <span class="built_in">dict</span>(<span class="built_in">zip</span>(self.dicn2s.values(), self.dicn2s.keys()))</span><br><span class="line">        self.fillchar = self.dics2n[fillchar]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setM</span>(<span class="params">self, m: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">assert</span> m &gt; <span class="number">0</span></span><br><span class="line">        self.m = m</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setKey</span>(<span class="params">self, key: np.ndarray=<span class="literal">None</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">while</span> key <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> KeyEncryption.modInv(np.linalg.det(key)) == -<span class="number">1</span>:</span><br><span class="line">                key = np.random.randint(<span class="number">0</span>, <span class="number">65</span>, size=(self.m, self.m))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;random matrix：\n&quot;</span>, key)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">assert</span> KeyEncryption.modInv(np.linalg.det(key)) != -<span class="number">1</span></span><br><span class="line">        self.key = key</span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">modInv</span>(<span class="params">x: <span class="built_in">int</span></span>):</span><br><span class="line">        y = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> y &lt; <span class="number">64</span>:</span><br><span class="line">            y += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> (x * y) % <span class="number">64</span> == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> y</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_loopCrypt</span>(<span class="params">self, long: np.ndarray, K: np.ndarray</span>) -&gt; np.ndarray:</span><br><span class="line">        ans = np.array([])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(long.shape[<span class="number">0</span>] // self.m):</span><br><span class="line">            ans = np.mod(np.hstack((</span><br><span class="line">                ans, </span><br><span class="line">                np.dot(long[i*self.m:i*self.m+self.m], K)</span><br><span class="line">            )), <span class="number">64</span>)</span><br><span class="line">        <span class="keyword">return</span> ans.astype(np.int64)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self, plaintext: np.ndarray</span>):</span><br><span class="line">        <span class="keyword">assert</span> self.m !=<span class="literal">None</span> <span class="keyword">and</span> self.key <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> plaintext.shape[<span class="number">0</span>] % self.m:</span><br><span class="line">            plaintext = np.hstack((</span><br><span class="line">                plaintext, </span><br><span class="line">                [self.fillchar] *(self.m - plaintext.shape[<span class="number">0</span>] % self.m)</span><br><span class="line">            ))</span><br><span class="line">        <span class="keyword">return</span> self._loopCrypt(plaintext, self.key)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">translate</span>(<span class="params">self, s, to: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="keyword">if</span> to == <span class="string">&quot;text&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join([self.dicn2s[si] <span class="keyword">for</span> si <span class="keyword">in</span> s])</span><br><span class="line">        <span class="keyword">elif</span> to == <span class="string">&quot;num&quot;</span>:</span><br><span class="line">            s = s.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> np.array([self.dics2n[si] <span class="keyword">for</span> si <span class="keyword">in</span> s])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getKey</span>(<span class="params">key</span>):</span><br><span class="line">  he = KeyEncryption(m=<span class="number">3</span>)</span><br><span class="line">  he.setKey()              </span><br><span class="line">  nums = he.translate(key, <span class="string">&quot;num&quot;</span>)</span><br><span class="line">  res = he.encrypt(nums)</span><br><span class="line">  enkey = <span class="string">&#x27;&#x27;</span>.join(dic[i] <span class="keyword">for</span> i <span class="keyword">in</span> res.tolist())</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;Encrypt key:&#x27;</span>,enkey)</span><br><span class="line">  <span class="keyword">return</span> enkey</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  fir1 = <span class="string">&#x27; &#x27;</span>.join(<span class="built_in">map</span>(<span class="keyword">lambda</span> _:_[::-<span class="number">1</span>],re.split(<span class="string">&quot;[ &#123; _ &#125; ]&quot;</span> , flag.swapcase())))</span><br><span class="line">  ciphertext1 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  key = <span class="string">&quot;&quot;</span>  </span><br><span class="line">  enkey = getKey(key)</span><br><span class="line">  _enkey=[f1nd(i) <span class="keyword">for</span> i <span class="keyword">in</span> key]</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;key lengeh:&#x27;</span>,<span class="built_in">len</span>(_enkey))</span><br><span class="line">  j = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> fir1:</span><br><span class="line">    <span class="keyword">if</span> f1nd(i)&gt;=<span class="number">0</span>:</span><br><span class="line">      ciphertext1 += dic[(f1nd(i) + _enkey[j % <span class="built_in">len</span>(_enkey)])%<span class="number">64</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      ciphertext1 += i</span><br><span class="line">    j += <span class="number">1</span></span><br><span class="line">  ciphertext = ciphertext1.replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;_&#x27;</span>)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;ciphertext:%s&#123;%s&#125;&#x27;</span> % (ciphertext[<span class="number">0</span>:<span class="number">5</span>],ciphertext[<span class="number">6</span>:-<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">flag length: 48</span></span><br><span class="line"><span class="string">random matrix：</span></span><br><span class="line"><span class="string"> [[13 37 10]</span></span><br><span class="line"><span class="string"> [15 17 41]</span></span><br><span class="line"><span class="string"> [13  0 10]]</span></span><br><span class="line"><span class="string">Encrypt key: pVvRe/G08rLhfwa</span></span><br><span class="line"><span class="string">key lengeh: 14</span></span><br><span class="line"><span class="string">ciphertext:1k2Pe&#123;24seBl4_a6Ot_fp7O1_eHk_Plg3EF_g/JtIonut4/&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解:"></a>题解:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self, ciphertext: np.ndarray</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    self.key = np.array([[<span class="number">13</span>,<span class="number">37</span>,<span class="number">10</span>],[<span class="number">15</span>,<span class="number">17</span>,<span class="number">41</span>],[<span class="number">13</span>,<span class="number">0</span>,<span class="number">10</span>]])</span><br><span class="line">    <span class="built_in">print</span>(self.key)</span><br><span class="line">    <span class="keyword">assert</span> self.m <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> self.key <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line">    plaintext = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    inv_key = KeyEncryption.modInv(np.linalg.det(self.key)) * np.<span class="built_in">round</span>(</span><br><span class="line">        np.linalg.inv(self.key) * np.linalg.det(self.key))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ciphertext.shape[<span class="number">0</span>] // self.m):</span><br><span class="line">        tmp = np.mod(np.dot(ciphertext[i * self.m:i * self.m + self.m], inv_key), <span class="number">64</span>)</span><br><span class="line">        plaintext += <span class="string">&#x27;&#x27;</span>.join([self.dicn2s[<span class="built_in">int</span>(tmp[j])] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(self.m)])</span><br><span class="line">    plaintext = plaintext.rstrip(self.dicn2s[self.fillchar])</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br></pre></td></tr></table></figure>
<p>放弃了，看不懂，存个脚本（我的GPT怎么就写不出来啊）</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9oYXJyeTA1OTcuY29tLzIwMjMvMDMvMzAvTktDVEYyMDIzLw==">NKCTF2023·Crypto WP | Harry’s Blog (harry0597.com)<i class="fa fa-external-link-alt"></i></span></p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">dic = string.ascii_uppercase + string.ascii_lowercase + string.digits + <span class="string">&#x27;+/&#x27;</span></span><br><span class="line">f1nd = <span class="keyword">lambda</span> x: dic.find(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">KeyEncryption</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, m: <span class="built_in">int</span>, fillchar: <span class="built_in">str</span> = <span class="string">&quot;z&quot;</span>, key: np.ndarray = <span class="literal">None</span></span>):</span><br><span class="line">        self.m = m</span><br><span class="line">        self.key = key</span><br><span class="line">        self.dicn2s = &#123;i: dic[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>)&#125;</span><br><span class="line">        <span class="comment"># print(&quot;self.dicn2s =&quot;, self.dicn2s)</span></span><br><span class="line">        self.dics2n = <span class="built_in">dict</span>(<span class="built_in">zip</span>(self.dicn2s.values(), self.dicn2s.keys()))</span><br><span class="line">        <span class="comment"># print(&quot;self.dics2n =&quot;, self.dics2n)</span></span><br><span class="line">        self.fillchar = self.dics2n[fillchar]</span><br><span class="line">        <span class="comment"># print(&quot;fillchar =&quot;, self.fillchar)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setM</span>(<span class="params">self, m: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">assert</span> m &gt; <span class="number">0</span></span><br><span class="line">        self.m = m</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setKey</span>(<span class="params">self, key: np.ndarray = <span class="literal">None</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">while</span> key <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> KeyEncryption.modInv(np.linalg.det(key)) == -<span class="number">1</span>:</span><br><span class="line">                key = np.random.randint(<span class="number">0</span>, <span class="number">65</span>, size=(self.m, self.m))</span><br><span class="line">            <span class="comment"># print(&quot;random matrix：\n&quot;, key)</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">assert</span> KeyEncryption.modInv(np.linalg.det(key)) != -<span class="number">1</span></span><br><span class="line">        self.key = key</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">modInv</span>(<span class="params">x: <span class="built_in">int</span></span>):</span><br><span class="line">        y = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> y &lt; <span class="number">64</span>:</span><br><span class="line">            y += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> (x * y) % <span class="number">64</span> == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> y</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_loopCrypt</span>(<span class="params">self, long: np.ndarray, K: np.ndarray</span>) -&gt; np.ndarray:</span><br><span class="line">        ans = np.array([])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(long.shape[<span class="number">0</span>] // self.m):</span><br><span class="line">            ans = np.mod(np.hstack((</span><br><span class="line">                ans,</span><br><span class="line">                np.dot(long[i * self.m:i * self.m + self.m], K)</span><br><span class="line">            )), <span class="number">64</span>)</span><br><span class="line">        <span class="keyword">return</span> ans.astype(np.int64)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self, plaintext: np.ndarray</span>):</span><br><span class="line">        <span class="keyword">assert</span> self.m != <span class="literal">None</span> <span class="keyword">and</span> self.key <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> plaintext.shape[<span class="number">0</span>] % self.m:</span><br><span class="line">            plaintext = np.hstack((</span><br><span class="line">                plaintext,</span><br><span class="line">                [self.fillchar] * (self.m - plaintext.shape[<span class="number">0</span>] % self.m)</span><br><span class="line">            ))</span><br><span class="line">        <span class="comment"># print(&quot;plaintext&quot;, plaintext)</span></span><br><span class="line">        <span class="keyword">return</span> self._loopCrypt(plaintext, self.key)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">translate</span>(<span class="params">self, s, to: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="keyword">if</span> to == <span class="string">&quot;text&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join([self.dicn2s[si] <span class="keyword">for</span> si <span class="keyword">in</span> s])</span><br><span class="line">        <span class="keyword">elif</span> to == <span class="string">&quot;num&quot;</span>:</span><br><span class="line">            s = s.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> np.array([self.dics2n[si] <span class="keyword">for</span> si <span class="keyword">in</span> s])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self, ciphertext: np.ndarray</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        self.key = np.array([[<span class="number">13</span>,<span class="number">37</span>,<span class="number">10</span>],[<span class="number">15</span>,<span class="number">17</span>,<span class="number">41</span>],[<span class="number">13</span>,<span class="number">0</span>,<span class="number">10</span>]])</span><br><span class="line">        <span class="built_in">print</span>(self.key)</span><br><span class="line">        <span class="keyword">assert</span> self.m <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> self.key <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line">        plaintext = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        inv_key = KeyEncryption.modInv(np.linalg.det(self.key)) * np.<span class="built_in">round</span>(</span><br><span class="line">            np.linalg.inv(self.key) * np.linalg.det(self.key))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(ciphertext.shape[<span class="number">0</span>] // self.m):</span><br><span class="line">            tmp = np.mod(np.dot(ciphertext[i * self.m:i * self.m + self.m], inv_key), <span class="number">64</span>)</span><br><span class="line">            plaintext += <span class="string">&#x27;&#x27;</span>.join([self.dicn2s[<span class="built_in">int</span>(tmp[j])] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(self.m)])</span><br><span class="line">        plaintext = plaintext.rstrip(self.dicn2s[self.fillchar])</span><br><span class="line">        <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getKey</span>(<span class="params">key</span>):</span><br><span class="line">    he = KeyEncryption(m=<span class="number">3</span>)</span><br><span class="line">    he.setKey()</span><br><span class="line">    nums = he.translate(key, <span class="string">&quot;num&quot;</span>)</span><br><span class="line">    <span class="comment"># print(&quot;nums =&quot;, nums)</span></span><br><span class="line"></span><br><span class="line">    res = he.encrypt(nums)</span><br><span class="line">    <span class="comment"># print(&#x27;res =&#x27;, res)</span></span><br><span class="line">    enkey = <span class="string">&#x27;&#x27;</span>.join(dic[i] <span class="keyword">for</span> i <span class="keyword">in</span> res.tolist())</span><br><span class="line">    <span class="comment"># print(&quot;res.tolist() =&quot;,  res.tolist())</span></span><br><span class="line">    <span class="comment"># print(&#x27;Encrypt key:&#x27;, enkey)</span></span><br><span class="line">    <span class="keyword">return</span> enkey</span><br><span class="line"></span><br><span class="line">he = KeyEncryption(m=<span class="number">3</span>)</span><br><span class="line">enc_key = <span class="string">&#x27;pVvRe/G08rLhfwa&#x27;</span></span><br><span class="line">enc_key = [f1nd(i) <span class="keyword">for</span> i <span class="keyword">in</span> enc_key]</span><br><span class="line"><span class="comment"># print(enc_key)</span></span><br><span class="line">enc_key = np.array(enc_key)</span><br><span class="line"><span class="comment"># print(enc_key)</span></span><br><span class="line">key = he.decrypt(enc_key)</span><br><span class="line"><span class="comment"># print(key)</span></span><br><span class="line">_enkey = [f1nd(i) <span class="keyword">for</span> i <span class="keyword">in</span> key]</span><br><span class="line"></span><br><span class="line">c = <span class="string">&#x27;1k2Pe&#123;24seBl4_a6Ot_fp7O1_eHk_Plg3EF_g/JtIonut4/&#125;&#x27;</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line">tmp = &#123;&#125;</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">    <span class="keyword">if</span> f1nd(i) &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># tmp = (f1nd(i) + _enkey[j % len(_enkey)]) % 64</span></span><br><span class="line">        tmp = (f1nd(i) - _enkey[j % <span class="built_in">len</span>(_enkey)]) % <span class="number">64</span></span><br><span class="line">        flag += dic[tmp]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += i</span><br><span class="line">    j += <span class="number">1</span></span><br><span class="line"><span class="comment"># print(flag)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag.split(<span class="string">&#x27;_&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(i[::-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;CISsALc&#x27;</span>[::-<span class="number">1</span>])</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 手动转向</span></span><br><span class="line">flag = <span class="string">&#x27;nkctf&#123;cLAsSIC_C0DE_D0L1S_ArE_R3A1LY_INT3REsTING&#125;&#x27;</span>.swapcase()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># NKCTF&#123;ClaSsic_c0de_d0l1s_aRe_r3a1ly_int3reSting&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="Raven"><a href="#Raven" class="headerlink" title="Raven"></a>Raven</h2><blockquote>
<p>题目</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"><span class="comment"># Problem by rec, with a bad raven.</span></span><br><span class="line"><span class="keyword">import</span> os, hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Raven</span>(<span class="params">n: <span class="built_in">int</span>, secret: <span class="built_in">bytes</span></span>):</span><br><span class="line">    H = <span class="keyword">lambda</span> x: hashlib.md5(os.urandom(<span class="number">8</span>) + x).digest()</span><br><span class="line"></span><br><span class="line">    p = getPrime(<span class="number">728</span>)</span><br><span class="line">    R.&lt;z&gt; = PolynomialRing(GF(p))</span><br><span class="line"></span><br><span class="line">    seed = H(secret)</span><br><span class="line">    f = R(</span><br><span class="line">        [bytes_to_long(secret)] + [bytes_to_long(H(seed)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>)]</span><br><span class="line">    )</span><br><span class="line">    x = [getRandomRange(<span class="number">2</span>, p - <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    y = [ZZ(f(xi)^<span class="number">2</span> + getPrime(<span class="number">256</span>)) <span class="keyword">for</span> xi <span class="keyword">in</span> x]</span><br><span class="line"></span><br><span class="line">    pairs = <span class="built_in">list</span>(<span class="built_in">zip</span>(x, y))</span><br><span class="line">    <span class="keyword">return</span> p, pairs</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;#####&#x27;</span></span><br><span class="line">key = os.urandom(<span class="number">16</span>)</span><br><span class="line">cipher = AES.new(key=key, IV=<span class="built_in">bytes</span>(<span class="built_in">range</span>(<span class="number">16</span>)), mode=AES.MODE_CBC)</span><br><span class="line">ct = cipher.encrypt(flag + os.urandom(<span class="number">16</span> - <span class="built_in">len</span>(flag) % <span class="number">16</span>))</span><br><span class="line">p, pairs = Raven(<span class="number">4</span>, key)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;p = &#125;</span>\n<span class="subst">&#123;pairs = &#125;</span>\n<span class="subst">&#123;ct = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p = 1018551160851728231474335384388576586031917743463656622083024684199383855595168341728561337234276243780407755294430553694832049089534855113774546001494743212076463713621965520780122783825100696968959866614846174188401153</span></span><br><span class="line"><span class="string">pairs = [(615358616404864757405587650175842125441380884418119777842292095751090237848084440177153221092040264723889917863863854377665802549748720692225139890884830475485512763149974948701807492663962748292710803434009673589337265, 84982753624462868217739962129526665082932464631118597651920986288766037499319751354013335054886685186857222944776560264528363811382359242656883760986496856164448940929282013856762706210675691655747370624405968909408102), (528363810186974800127873139379943131424126521611531830591311656948009967709310974894584084912262479395720199930206495204352231804549705720854271566421006481173043064265399467682307971910488405265826107365679757755866812, 496810092723839642457928776423789418365006215801711874210443222720529161066621876103037104247173440072986344011599384793861949574577559989016501090247331146721371126871470611440468688947950954988175225633457347666551944), (68711183101845981499596464753252121346970486988311398916877579778110690480447199642602267233989256728822535174215153145632158860662954277116345331672194812126361911061449082917955000137698138358926301360506687271134873, 995428771589393162202488762223106955302099250561593105620410424291405842350539887383005328242236156038373244928147473800972534658018117705291472213770335998508454938607290279268848513727721410314612261163489156360908800), (61574167546312883246262193556029081771904529137922128124933785599227801608271357738142074310192454183183340219301304405636497744152219785042075198056952749425345561162612590170550454476602892138914473795478531165181812, 618169326093802548516842299173393893046765466917311052414967158839652012130855552015876657514610755108820971877570295328618373296493668146691687291894702228119875561585283226588768969944781923428807766632578060221034862)]</span></span><br><span class="line"><span class="string">ct = b&quot;|2\xf0v7\x05Y\x89\r]\xe93s\rr)#3\xe9\x90%Z\x9a\xd9\x9ck\xba\xec]q\xb8\xf2&#x27;\xc8e~fL\xcf\x93\x00\xd6^s-\xc9\xd6M&quot;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="题解：-9"><a href="#题解：-9" class="headerlink" title="题解："></a>题解：</h3><p>Shamir门限秘密共享方案， SSS，见：</p>
<p><a href="https://wbuildings.github.io/Crypto/Shamir门限方案/#more">(<em>^▽^</em>)我藏好了哦~Shamir门限方案 | W’Blog (wbuildings.github.io)</a></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="PsychoRandom"><a href="#PsychoRandom" class="headerlink" title="PsychoRandom"></a>PsychoRandom</h2><blockquote>
<p>题目</p>
<p><strong>task.py</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># Problem by rec, with a toy generator.</span></span><br><span class="line"><span class="keyword">import</span> os, utils</span><br><span class="line"></span><br><span class="line">seed = <span class="built_in">int</span>(os.urandom(<span class="number">16</span>).<span class="built_in">hex</span>(), <span class="number">16</span>)</span><br><span class="line">gen = utils.ToyGen(seed)</span><br><span class="line"></span><br><span class="line">sec = <span class="string">b&#x27;#####&#x27;</span></span><br><span class="line"><span class="keyword">assert</span> <span class="string">b&#x27;nkctf&#x27;</span> <span class="keyword">in</span> sec</span><br><span class="line"></span><br><span class="line">msg = <span class="string">b&#x27;##MSG FROM NK: &#x27;</span> + sec</span><br><span class="line">enc = <span class="built_in">bytes</span>(m ^ <span class="built_in">next</span>(gen) <span class="keyword">for</span> m <span class="keyword">in</span> msg).<span class="built_in">hex</span>()</span><br><span class="line"><span class="built_in">print</span>(enc)</span><br><span class="line"><span class="comment"># 9c1250e1fefb6012cf74a7fd0156cd1a2817ee9381d086a1561399f5b7f519e5abf4437739fa254cd35b241375292d73aa8b8e6ff61f4977da3c68a699156e6bfbe2c38d7b08eed07e40e831c25f5327a21847bb156060228e2b</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>utils.py</strong></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ToyGen</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, state</span>):</span><br><span class="line">        self.nbits = <span class="number">128</span></span><br><span class="line">        self.state = state &amp; ((<span class="number">1</span> &lt;&lt; self.nbits) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.mask = <span class="number">230336355081348639216651218083300669636</span></span><br><span class="line"></span><br><span class="line">        self.alpha = <span class="number">237299571639771708626086074576623691999</span></span><br><span class="line">        self.beta = <span class="number">83015690654496181240783151904447565127</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func0</span>(<span class="params">self, steps=<span class="number">1</span></span>):</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(steps):</span><br><span class="line">            res = self.state &amp; self.mask</span><br><span class="line">            bit = <span class="built_in">sum</span>([(res &gt;&gt; i) &amp; <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.nbits)]) &amp; <span class="number">1</span></span><br><span class="line">            self.state = ((self.state &lt;&lt; <span class="number">1</span>) ^ bit) &amp; ((<span class="number">1</span> &lt;&lt; self.nbits) - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func1</span>(<span class="params">self</span>):</span><br><span class="line">        res = (self.state ^ self.beta) &amp; self.alpha</span><br><span class="line">        bit = <span class="built_in">sum</span>([(res &gt;&gt; i) &amp; <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.nbits)]) &amp; <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> bit</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        out = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            self.func0(<span class="number">37</span>)</span><br><span class="line">            bit = self.func1()</span><br><span class="line">            out = (out &lt;&lt; <span class="number">1</span>) ^ bit</span><br><span class="line">        <span class="keyword">return</span> out</span><br></pre></td></tr></table></figure>
<h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><h2 id="Reference："><a href="#Reference：" class="headerlink" title="Reference："></a>Reference：</h2><p><span class="exturl" data-url="aHR0cHM6Ly9oYXJyeTA1OTcuY29tLzIwMjMvMDMvMzAvTktDVEYyMDIzLw==">NKCTF2023·Crypto WP | Harry’s Blog (harry0597.com)<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXh0ZXJqaWUuZ2l0aHViLmlvLzIwMjMvMDcvMTQv6LWb6aKY5aSN546wL05LQ1RGLyNtb3Jl">NKCTF | DexterJie’Blog<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Wp</tag>
      </tags>
  </entry>
  <entry>
    <title>RSA之共模攻击</title>
    <url>/Crypto/RSA%E4%B9%8B%E5%85%B1%E6%A8%A1%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<p>最近遇到几种不同的共模攻击变形，记录一下</p>
<span id="more"></span>
<h2 id="共模攻击"><a href="#共模攻击" class="headerlink" title="共模攻击"></a>共模攻击</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">n= <span class="number">25333966058003377512707481338795714713737652659944601834182685873529702913988641983855700459996104700470621411559153944988952210084014634675583566338568882440708528997808798650962116756969822211586531522430245040013570571043385238601846104615050089457836721437790715225367971106085839523500735480715155424498941150468093083816830215632716244390679417218873179734276657411907216486790815037105108306055794473002315541787461904728375164737225486501009857299717749346279371251245318729951905832578739696926931502225899707226264570557623527701806829827566904224572897378639191756878049342203546309520458672464170859577433</span></span><br><span class="line">e1= <span class="number">2333</span></span><br><span class="line">c1= <span class="number">11355981897781478907853356911752561659125575027336719997290835661089901154031171698660586203170528368228850895159361637188990782030255983633790580700032092629587631108597144196551438410868034739981960656110887650747325311613900008001234835897835613759692146419080113176963747835592656185435741504176116672174539018089139547795447109458469225330809064539216773123671814859510069089532677704482026169178543062578686794346026774853085101278125763460212801929360456888869350105294595904940799522522144740464043605342348269086324747729288399275079874271519208155039364092577755518532799345651172433227745483422620900776136</span></span><br><span class="line">e2= <span class="number">23333</span></span><br><span class="line">c2= <span class="number">1326499538902841116411674554069945581390130048432351353260154261863309471312810811160302458644816390944833633923435634961251092531893503039914793217247984595331920909367627316087404934402312358642315675486438968585084964845763881078835787872160374025547400141298650794551970291119975344578667689961134814676553190178139842507675899262024572370313939107080072875068218336255452161407859907308656094331557912187788276334833723893856310434523337557011032081467262457427167978528280339494077785813461280853735266463152709443731638714219391773144349752633555310299318290576258086971373777118482642702020599928071855133041</span></span><br><span class="line"></span><br><span class="line">s,s1,s2 = gmpy2.gcdext(e1,e2)</span><br><span class="line">m = (<span class="built_in">pow</span>(c1,s1,n) * <span class="built_in">pow</span>(c2 ,s2 ,n)) % n</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;6ed4c74e022cb18c8039e96de93aa9ce&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="e1、e2不互素，开根的共模攻击"><a href="#e1、e2不互素，开根的共模攻击" class="headerlink" title="e1、e2不互素，开根的共模攻击"></a>e1、e2不互素，开根的共模攻击</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">n= <span class="number">19006830358118902392432453595802675566730850352890246995920642811967821259388009049803513102750594524106471709641202019832682438027312468849299985832675191795417160553379580813410722359089872519372049229233732405993062464286888889084640878784209014165871696882564834896322508054231777967011195636564463806270998326936161449009988434249178477100127347406759932149010712091376183710135615375272671888541233275415737155953323133439644529709898791881795186775830217884663044495979067807418758455237701315019683802437323177125493076113419739827430282311018083976114158159925450746712064639569301925672742186294237113199023</span></span><br><span class="line">c1= <span class="number">276245243658976720066605903875366763552720328374098965164676247771817997950424168480909517684516498439306387133611184795758628248588201187138612090081389226321683486308199743311842513053259894661221013008371261704678716150646764446208833447643781574516045641493770778735363586857160147826684394417412837449465273160781074676966630398315417741542529612480836572205781076576325382832502694868883931680720558621770570349864399879523171995953720198118660355479626037129047327185224203109006251809257919143284157354935005710902589809259500117996982503679601132486140677013625335552533104471327456798955341220640782369529</span></span><br><span class="line">c2= <span class="number">11734019659226247713821792108026989060106712358397514827024912309860741729438494689480531875833287268454669859568719053896346471360750027952226633173559594064466850413737504267807599435679616522026241111887294138123201104718849744300769676961585732810579953221056338076885840743126397063074940281522137794340822594577352361616598702143477379145284687427705913831885493512616944504612474278405909277188118896882441812469679494459216431405139478548192152811441169176134750079073317011232934250365454908280676079801770043968006983848495835089055956722848080915898151352242215210071011331098761828031786300276771001839021</span></span><br><span class="line">e1=<span class="number">55</span></span><br><span class="line">e2=<span class="number">200</span></span><br><span class="line">s,s1,s2 = gmpy2.gcdext(e1,e2)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line">m = <span class="built_in">pow</span>(c1,s1,n)*<span class="built_in">pow</span>(c2,s2,n)%n</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(libnum.nroot(m,s))))</span><br><span class="line"><span class="comment"># SICTF&#123;S0_Great_RSA_Have_Y0u_Learned?&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="黑盾杯-2020-Daylight"><a href="#黑盾杯-2020-Daylight" class="headerlink" title="[黑盾杯 2020]Daylight"></a>[黑盾杯 2020]Daylight</h2><blockquote>
<p>附件</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n =<span class="number">24030381175065789627867818021031309186965318861955402618375094156989560631225056400068280970357343617465261811691559275086986164901405512215968447835573713149231336594364799146504286982124850979481910739400555900516891562640944424296188089156508429086638459243074623801424444379741940400624550247210709108293164193827193821978694274672716764474152393429524314859853376325015012885883855819552203740904895242301492787682366135817255276597250505586595070110209229270379691148517421288247672403709484984083988966720494416926899250840012575481136166618973367329708626081023089829778864549053830890201012932527796486827519</span></span><br><span class="line">c1=<span class="number">7706442311376298907118381553814187694306437942337200300920018382827744477296762105669322390236380377042026460058526286493515418722731849971411879053724334926597860433790660568227623266459105700578574867980278136078799958698624620338469216407947276632981229373095281141319203245321172350378427449842394930055529441744690732690189155630980736716300509547085032174345753133838250340838995285142338255951756404101946977370148727459867175980397841996210997274012491629791252693401571504945522427861126234928419824136852180508014703063857673244567242488630499415730763245048617632714296374909199028722650732705222178007385</span></span><br><span class="line">c2=<span class="number">22423938730620301024336096061283705945892027623793660306239291359418958473934583979350384252488494023600239884048653436314101275290157972045454993641659471672605679497398173588217340705125922148550132426481727445141158741816240665812195493040369287582638492321538655028939958996384211181094086886177394010485535445009088322043647955338445795429449360349339936606800994026319620067195422963814641797851423046506617965736694331256799051468484280532276344029152140431817760731420316457245257243157665090587855008596785240088881665435451552191237548113820151383474872494353994135644477990413743416249730006854238049329690</span></span><br><span class="line">e1=<span class="number">35</span></span><br><span class="line">e2=<span class="number">42</span></span><br></pre></td></tr></table></figure>
<h3 id="共模攻击开方解不出"><a href="#共模攻击开方解不出" class="headerlink" title="共模攻击开方解不出"></a>共模攻击开方解不出</h3><p>正常的 $e_1s_1 + e_2s_2 = gcd(e_1,e_2)=1$ ，于是 $m = m^{e_1s_1 + e_2s_2}=c_1^{s_1}c_2^{s_2} \bmod n$ </p>
<p>但如果不互素的话，本题中 $gcd(e_1,e_2)=7$ ，则 $c_1^{s_1}c_2^{s_2}=(m^{7})^{as_1}(m^{7})^{bs_2}=m^7 \bmod n$</p>
<p>所以 $m^7 = c_1^{s_1}c_2^{s_2} + kn$ </p>
<p>这里就踩了一个坑，直接开7次方解不出来，就需要爆破一下 <code>k</code> </p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n =<span class="number">24030381175065789627867818021031309186965318861955402618375094156989560631225056400068280970357343617465261811691559275086986164901405512215968447835573713149231336594364799146504286982124850979481910739400555900516891562640944424296188089156508429086638459243074623801424444379741940400624550247210709108293164193827193821978694274672716764474152393429524314859853376325015012885883855819552203740904895242301492787682366135817255276597250505586595070110209229270379691148517421288247672403709484984083988966720494416926899250840012575481136166618973367329708626081023089829778864549053830890201012932527796486827519</span></span><br><span class="line">c1=<span class="number">7706442311376298907118381553814187694306437942337200300920018382827744477296762105669322390236380377042026460058526286493515418722731849971411879053724334926597860433790660568227623266459105700578574867980278136078799958698624620338469216407947276632981229373095281141319203245321172350378427449842394930055529441744690732690189155630980736716300509547085032174345753133838250340838995285142338255951756404101946977370148727459867175980397841996210997274012491629791252693401571504945522427861126234928419824136852180508014703063857673244567242488630499415730763245048617632714296374909199028722650732705222178007385</span></span><br><span class="line">c2=<span class="number">22423938730620301024336096061283705945892027623793660306239291359418958473934583979350384252488494023600239884048653436314101275290157972045454993641659471672605679497398173588217340705125922148550132426481727445141158741816240665812195493040369287582638492321538655028939958996384211181094086886177394010485535445009088322043647955338445795429449360349339936606800994026319620067195422963814641797851423046506617965736694331256799051468484280532276344029152140431817760731420316457245257243157665090587855008596785240088881665435451552191237548113820151383474872494353994135644477990413743416249730006854238049329690</span></span><br><span class="line">e1=<span class="number">35</span></span><br><span class="line">e2=<span class="number">42</span></span><br><span class="line"></span><br><span class="line">t = gmpy2.gcd(e1,e2)</span><br><span class="line"><span class="keyword">if</span> t == <span class="number">1</span>:</span><br><span class="line">    s,x,y = gmpy2.gcdext(e1,e2)</span><br><span class="line">    m = (<span class="built_in">pow</span>(c1,x,n)*<span class="built_in">pow</span>(c2,y,n))%n</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    s,x,y = gmpy2.gcdext(e1,e2)</span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        m = gmpy2.iroot((<span class="built_in">pow</span>(c1,x,n)*<span class="built_in">pow</span>(c2,y,n))%n +k*n,t)</span><br><span class="line">        <span class="keyword">if</span> m[<span class="number">1</span>]:</span><br><span class="line">            <span class="built_in">print</span>(long_to_bytes(m[<span class="number">0</span>]))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line"><span class="comment"># flag&#123;1_0nly_see_d4ylight_d4ylight&#125;</span></span><br></pre></td></tr></table></figure>
<p>也可以用有限域开根：</p>
<p>共模攻击求出的m等效于我们平时所见的 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = libnum.invmod(e//<span class="number">6</span>,phi)</span><br><span class="line">c = <span class="built_in">pow</span>(c,d,n)</span><br></pre></td></tr></table></figure>
<p>实际他们确实是相等的，都等于 <script type="math/tex">m^{gcd} \bmod n</script> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n =<span class="number">24030381175065789627867818021031309186965318861955402618375094156989560631225056400068280970357343617465261811691559275086986164901405512215968447835573713149231336594364799146504286982124850979481910739400555900516891562640944424296188089156508429086638459243074623801424444379741940400624550247210709108293164193827193821978694274672716764474152393429524314859853376325015012885883855819552203740904895242301492787682366135817255276597250505586595070110209229270379691148517421288247672403709484984083988966720494416926899250840012575481136166618973367329708626081023089829778864549053830890201012932527796486827519</span></span><br><span class="line">c1=<span class="number">7706442311376298907118381553814187694306437942337200300920018382827744477296762105669322390236380377042026460058526286493515418722731849971411879053724334926597860433790660568227623266459105700578574867980278136078799958698624620338469216407947276632981229373095281141319203245321172350378427449842394930055529441744690732690189155630980736716300509547085032174345753133838250340838995285142338255951756404101946977370148727459867175980397841996210997274012491629791252693401571504945522427861126234928419824136852180508014703063857673244567242488630499415730763245048617632714296374909199028722650732705222178007385</span></span><br><span class="line">c2=<span class="number">22423938730620301024336096061283705945892027623793660306239291359418958473934583979350384252488494023600239884048653436314101275290157972045454993641659471672605679497398173588217340705125922148550132426481727445141158741816240665812195493040369287582638492321538655028939958996384211181094086886177394010485535445009088322043647955338445795429449360349339936606800994026319620067195422963814641797851423046506617965736694331256799051468484280532276344029152140431817760731420316457245257243157665090587855008596785240088881665435451552191237548113820151383474872494353994135644477990413743416249730006854238049329690</span></span><br><span class="line">e1=<span class="number">35</span></span><br><span class="line">e2=<span class="number">42</span></span><br><span class="line"></span><br><span class="line">s,s1,s2 = gmpy2.gcdext(e1,e2)</span><br><span class="line"></span><br><span class="line">m_7 = <span class="built_in">pow</span>(c1,s1,n)*<span class="built_in">pow</span>(c2,s2,n) % n</span><br><span class="line"></span><br><span class="line">e = s</span><br><span class="line">P.&lt;a&gt;=PolynomialRing(Zmod(n),implementation=<span class="string">&#x27;NTL&#x27;</span>)</span><br><span class="line">f=a^e-m_7</span><br><span class="line">mps=f.monic().roots()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> mps:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    flag=long_to_bytes(<span class="built_in">int</span>(i[<span class="number">0</span>]))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;flag&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;1_0nly_see_d4ylight_d4ylight&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="三个e的共模攻击"><a href="#三个e的共模攻击" class="headerlink" title="三个e的共模攻击"></a>三个e的共模攻击</h2><p>和两个e的共模攻击同理，只不过再算了一次</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># import gmpy2</span></span><br><span class="line"><span class="comment"># import libnum</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># e1e2,s1,s2 = gmpy2.gcdext(e1,e2)</span></span><br><span class="line"><span class="comment"># c12 = pow(c1,s1,n)*pow(c2,s2,n)%n</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># e2e3,s2,s3 = gmpy2.gcdext(e2,e3)</span></span><br><span class="line"><span class="comment"># c23 = pow(c2,s2,n)*pow(c3,s3,n)%n</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># s12,s23,gcd = gmpy2.gcdext(e1e2,e2e3)</span></span><br><span class="line"><span class="comment"># m = pow(c12,s12,n)*pow(c23,s23,n1)%n</span></span><br><span class="line"><span class="comment"># print(libnum.n2s(m))</span></span><br></pre></td></tr></table></figure>
<h2 id="没有直接给出e1、e2，需要爆破"><a href="#没有直接给出e1、e2，需要爆破" class="headerlink" title="没有直接给出e1、e2，需要爆破"></a>没有直接给出e1、e2，需要爆破</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="comment"># n =24030381175065789627867818021031309186965318861955402618375094156989560631225056400068280970357343617465261811691559275086986164901405512215968447835573713149231336594364799146504286982124850979481910739400555900516891562640944424296188089156508429086638459243074623801424444379741940400624550247210709108293164193827193821978694274672716764474152393429524314859853376325015012885883855819552203740904895242301492787682366135817255276597250505586595070110209229270379691148517421288247672403709484984083988966720494416926899250840012575481136166618973367329708626081023089829778864549053830890201012932527796486827519</span></span><br><span class="line"><span class="comment"># c1=7706442311376298907118381553814187694306437942337200300920018382827744477296762105669322390236380377042026460058526286493515418722731849971411879053724334926597860433790660568227623266459105700578574867980278136078799958698624620338469216407947276632981229373095281141319203245321172350378427449842394930055529441744690732690189155630980736716300509547085032174345753133838250340838995285142338255951756404101946977370148727459867175980397841996210997274012491629791252693401571504945522427861126234928419824136852180508014703063857673244567242488630499415730763245048617632714296374909199028722650732705222178007385</span></span><br><span class="line"><span class="comment"># c2=22423938730620301024336096061283705945892027623793660306239291359418958473934583979350384252488494023600239884048653436314101275290157972045454993641659471672605679497398173588217340705125922148550132426481727445141158741816240665812195493040369287582638492321538655028939958996384211181094086886177394010485535445009088322043647955338445795429449360349339936606800994026319620067195422963814641797851423046506617965736694331256799051468484280532276344029152140431817760731420316457245257243157665090587855008596785240088881665435451552191237548113820151383474872494353994135644477990413743416249730006854238049329690</span></span><br><span class="line"><span class="comment"># e1=35</span></span><br><span class="line"><span class="comment"># e2=42</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_sharemoudle</span>(<span class="params">n,c1,c2,e1,e2</span>):</span><br><span class="line">    t = gmpy2.gcd(e1,e2)</span><br><span class="line">    <span class="keyword">if</span> t == <span class="number">1</span>:</span><br><span class="line">        s,x,y = gmpy2.gcdext(e1,e2)</span><br><span class="line">        m = (<span class="built_in">pow</span>(c1,x,n)*<span class="built_in">pow</span>(c2,y,n))%n</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        s,x,y = gmpy2.gcdext(e1,e2)</span><br><span class="line">        k = <span class="number">0</span></span><br><span class="line">        <span class="comment"># while 1:</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">            m = gmpy2.iroot((<span class="built_in">pow</span>(c1,x,n)*<span class="built_in">pow</span>(c2,y,n))%n +k*n,t)</span><br><span class="line">            <span class="keyword">if</span> m[<span class="number">1</span>]:</span><br><span class="line">                <span class="built_in">print</span>(long_to_bytes(m[<span class="number">0</span>]))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                k += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">e1e2= <span class="number">83317</span></span><br><span class="line">n= <span class="number">19361442710572745971265661179912428614335978862294499554478708154961900725571203060796104846289397242207304532314240136962004100859120350866177200389723065658762704195258332314791286248842309297348039111045266185355903400590470820183877252896166548216731371364979378507526744861441605219478410567943584909399458417880788827318597539692741384869777249157338164956516233081381729474311604082892186490173033244693551617094635430697205804969501877592642316320873084247185093376277647579480643486369145925195734181193015900482737320548696928588870712293186252013457131251209473809656777543374500592007808404407059561585875569527546497652518580045435210514546460508584320606314122520882426004609258608147903667923350952560862343978526661419457923377730038903725129920335146125419046956321000719022303404018007514471776998828154744785228693422230685108494515083105086516002742258455143048441346760686508352771381755359768486489070279892078844716848637514485979868052449468414483027672075237348001190373461535494802211938683204976566773050049547807712425194913096401165728862378611187510228222428679755307056276133497536735863204478321549958435946853973687386589497836951783399492540878952618631792625025126620608024559471293131768988077589502325651357976822933654550846615039529755326862460868499406888969184042128071</span></span><br><span class="line">c1= <span class="number">8461455935702774839606732696628583481106108739457157757237961493721249315707058365854463354773540401038228236301572933195823206925383589280380438344346918293151928169930134045632956081184945062566817678757614816611860006425866597730747864519352309046720733870943424680296477704991108084039103348714387678260925701357278152801810444616098214964231942511332731906589339642434586792884729500618636404879133808745489823990051381479316035290316511507860259556699539853817794899071305575419968794233519130191693519669424965740754005557268523536259961342893331243822271702601491251166024629032785331163334845458532041066873062181204642511730061193181806412423310871852101503714865811232852678040552266896756835104015126426669170036333066668010437674021104622132437422087899276215087590613842963706972249810831528040008304175911799215946803926073839260039708714727246670180210772138254229999545871929350538204078637835690649108982156556159082202035891312400182426109033284706424624286874595070797624804888642649414098331802113837492380725023537502746076689560748513729573164798419260068335949704460969862627638288475890309143274515210188524564546972793051029662396980537597835874860939675476734819945549433268818379519178647303476509820821756282974287073312744339124424284365074314353072957540119217061097316369179812</span></span><br><span class="line">c2= <span class="number">6204846642785521340470513546335239064256758077473460303136152226321426573866713276868303467627807818878464124001025948893472833684203082226317608116339642653526005250588488719287359040352790572959995584093188339849695217956472022875459556871491299322868787108334073007332501731796096022506406756118808831646084743403979543281704069120640233328839980099290857269846287187888156728145277024309531510105331797866833685076835273931526615042292719970926967658919153638762985362453791732734631621502983351581711188066449777097203043897589205329057225446193852593056040301734809364853181753118739604843784216536562612033307359103893806510482236157475021740603255590914121641809865052126419196638531405221094438510231726208366630512008162663744010330103156199459170979721924714894281792427651932643530734043790246173905509400532261288534889712214483873969552991657537356198890952147322594953541508366871552561029095676172024539741525694906063413062943730465813047155464168544196529490081901356676689826701155342513241655234549380041635792150618405682571311160853526719882812618473055821608217492122688669131559593093840370537049894579011917334477512297137182557102626033423909278319394496823138854073015927815382203590762482110896381565689852266596980436613904791614372199019839459027972129220041158226866818118745059</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fator_e1e2</span>(<span class="params">e1e2</span>):</span><br><span class="line">    <span class="keyword">for</span> e1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, e1e2):</span><br><span class="line">        <span class="keyword">if</span> e1e2 % e1 == <span class="number">0</span>:</span><br><span class="line">            e2 = e1e2 // e1</span><br><span class="line">            solve_sharemoudle(n, c1, c2, e1, e2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># solve_sharemoudle(n, c1, c2, e1, e2)</span></span><br><span class="line">    fator_e1e2(e1e2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;6ff24d84-4310-4ff3-a5d0-d96558f21f18&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>RSA</tag>
      </tags>
  </entry>
  <entry>
    <title>LFSR初探</title>
    <url>/Crypto/LFSR%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<p>回顾</p>
<span id="more"></span>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述:"></a><strong>概述:</strong></h1><p>线性反馈移位寄存器（LFSR）归属于移位寄存器（FSR）,除此之外还有非线性移位寄存器（NFSR）。移位寄存器是流密码产生密钥流的一个主要组成部分。</p>
<p><code>GF(2)</code>上一个n级反馈移位寄存器由<font color=orange>n个二元存储器</font>与一个<font color=orange>反馈函数<br>$f(a_1,a_2,…,a_n)$组成</font>，如下图所示。</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagesimage-20240809212924563.png" alt="image-20240809212924563"></p>
<p>移位寄存器的三要素：</p>
<ul>
<li>初始状态：由用户确定</li>
<li>反馈函数：$f(a_1,a_2,…,a_n)$是n元布尔函数，即函数的自变量和因变量只取0和1这两个可能值</li>
<li>输出序列</li>
</ul>
<p>如果反馈函数是线性的，那么我们称其为 LFSR，此时可以如下表示,：</p>
<script type="math/tex; mode=display">
f(a_1,a_2,...,a_n) = c_1a_n⊕c_2a_{n-1}⊕...⊕c_na_1</script><p>其中 $c_i={0,1}$ </p>
<p>输出序列满足：</p>
<script type="math/tex; mode=display">
\left\{\begin{matrix}
 a_{n+1} = c_1a_n⊕c_2a_{n-1}⊕...⊕c_na_1 \\
 a_{n+2} = c_1a_{n+1}⊕c_2a_n⊕...⊕c_na_2 \\
 \vdots  \\
 a_{n+i} = c_1a_{n+i-1}⊕c_2a_{n+i-2}⊕...⊕c_na_i
\end{matrix}\right.</script><h2 id="举个栗子："><a href="#举个栗子：" class="headerlink" title="举个栗子："></a>举个栗子：</h2><p>下面是一个5级的线性反馈移位寄存器，其初始状态为$(a_1,a_2,…,a_n)= (1,0,0,1,1)$</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagesimage-20240810100603853.png" alt="image-20240810100603853"></p>
<p>反馈函数为：</p>
<script type="math/tex; mode=display">
a_{5+i} = a_{3+i}⊕a_i</script><p><code>(i = 1,2,...)</code> </p>
<p>可以得到输出序列为：</p>
<p><font color=orange>1001101001000010101110110001111</font> 100110…</p>
<p>周期为31。</p>
<blockquote>
<p>对于 n 级线性反馈移位寄存器，最长周期为$2^n-1$（排除全零）。达到最长周期的序列一般称为 m 序列</p>
</blockquote>
<p>代码辅助理解</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;10011&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>-<span class="built_in">len</span>(a)):</span><br><span class="line">    a+= <span class="built_in">str</span>(<span class="built_in">int</span>(a[i])^<span class="built_in">int</span>(a[i+<span class="number">3</span>]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1001101001000010101110110001111</span></span><br></pre></td></tr></table></figure>
<hr>
<hr>
<h1 id="栗子："><a href="#栗子：" class="headerlink" title="栗子："></a>栗子：</h1><h2 id="2018-强网杯-Streamgame1"><a href="#2018-强网杯-Streamgame1" class="headerlink" title="2018 强网杯 Streamgame1"></a>2018 强网杯 Streamgame1</h2><p><strong>考点：已知反馈函数，输出序列，求逆推出初始状态</strong> </p>
<p>题目：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">assert</span> flag.startswith(<span class="string">&quot;flag&#123;&quot;</span>)</span><br><span class="line"><span class="keyword">assert</span> flag.endswith(<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line"><span class="comment"># 作用：判断字符串是否以指定字符 开头或结尾</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag)==<span class="number">25</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr</span>(<span class="params">R,mask</span>):</span><br><span class="line">    output = (R &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xffffff</span> <span class="comment">#将R向左移动1位，bin(0xffffff)=&#x27;0b111111111111111111111111&#x27;</span></span><br><span class="line">    i=(R&amp;mask)&amp;<span class="number">0xffffff</span>          <span class="comment">#按位与运算符&amp;：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</span></span><br><span class="line">    lastbit=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i!=<span class="number">0</span>:</span><br><span class="line">        lastbit^=(i&amp;<span class="number">1</span>)           <span class="comment">#按位异或运算，得到输出序列</span></span><br><span class="line">        i=i&gt;&gt;<span class="number">1</span></span><br><span class="line">    output^=lastbit              <span class="comment">#将输出值写入 output的后面</span></span><br><span class="line">    <span class="keyword">return</span> (output,lastbit)</span><br><span class="line"></span><br><span class="line">R=<span class="built_in">int</span>(flag[<span class="number">5</span>:-<span class="number">1</span>],<span class="number">2</span>)  <span class="comment">#flag为二进制数据</span></span><br><span class="line">mask = <span class="number">0b1010011000100011100</span></span><br><span class="line"></span><br><span class="line">f=<span class="built_in">open</span>(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;ab&quot;</span>)   <span class="comment">#以二进制追加模式打开，如果文件不存在，它将被创建；如果文件已存在，则将在文件末尾追加内容</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">    tmp=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        (R,out)=lfsr(R,mask)</span><br><span class="line">        tmp=(tmp &lt;&lt; <span class="number">1</span>)^out</span><br><span class="line">    f.write(<span class="built_in">chr</span>(tmp))   <span class="comment">#将lfsr输出的序列每8个二进制为一组，转化为字符，共12组</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>
<p>攻防世界找到的题，应该是上传者自己的笔记</p>
<p>分析：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr</span>(<span class="params">R,mask</span>):</span><br><span class="line">    output = (R &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xffffff</span> <span class="comment"># 将R向左移动1位，bin(0xffffff)=&#x27;0b111111111111111111111111&#x27;</span></span><br><span class="line">    i=(R&amp;mask)&amp;<span class="number">0xffffff</span>          <span class="comment"># 按位与运算符&amp;：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</span></span><br><span class="line">    lastbit=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i!=<span class="number">0</span>:</span><br><span class="line">        lastbit^=(i&amp;<span class="number">1</span>)           <span class="comment"># 按位异或运算，得到输出序列</span></span><br><span class="line">        i=i&gt;&gt;<span class="number">1</span></span><br><span class="line">    output^=lastbit              <span class="comment"># 将输出值写入 output的后面</span></span><br><span class="line">    <span class="keyword">return</span> (output,lastbit)</span><br><span class="line"></span><br><span class="line">R=<span class="built_in">int</span>(flag[<span class="number">5</span>:-<span class="number">1</span>],<span class="number">2</span>)  <span class="comment"># flag为二进制数据</span></span><br><span class="line">mask = <span class="number">0b1010011000100011100</span></span><br><span class="line">(R,out)=lfsr(R,mask)</span><br><span class="line">tmp=(tmp &lt;&lt; <span class="number">1</span>)^out</span><br><span class="line"></span><br><span class="line">f.write(<span class="built_in">chr</span>(tmp)) </span><br></pre></td></tr></table></figure>
<p>第一次接触的时候就是因为看似复杂的代码逻辑而暂且放弃的，其实也没啥，读！</p>
<p>最后发现这就是三要素中的反馈函数，关注一下 &amp; 运算的意义就行：</p>
<script type="math/tex; mode=display">
R：a_{n+i} = c_1a_{n+i-1}⊕c_2a_{n+i-2}⊕ \dots ⊕c_na_i</script><p><code>（i=1,2,3...）</code> </p>
<p>此题中，c 就是 mask，R就是a，<code>lastbit</code>也就是 $a_{n+i}$ ，并且将out（<code>lastbit</code>）存入key中，</p>
<p>而<code>R</code>和<code>mask</code>的长度都是19位，所以只需取key的前19个数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;key&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">r = bytes_to_long(f)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;0&#x27;</span>+<span class="built_in">str</span>(<span class="built_in">bin</span>(r)[<span class="number">2</span>:<span class="number">20</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0101010100111000111</span></span><br></pre></td></tr></table></figure>
<p>将 <code>mask</code> 代入进去，只有当 c为 1 的时候  $c_ia_j$ 才可能是 1</p>
<p>$R_{n+i} = (R[-3])⊕(R[-4])⊕(R[-5])⊕(R[-9])⊕(R[-13])⊕(R[-14])⊕(R[-17])⊕(R[-19])$ </p>
<p>现在我们知道了 <code>key = 0101010100111000111</code>，一位一位异或恢复R即可</p>
<p><code>key[-1] = 1</code> </p>
<p>$1 = a_{19}⊕(R[-3])⊕(R[-4])⊕(R[-5])⊕(R[-9])⊕(R[-13])⊕(R[-14])⊕(R[-17])$ </p>
<p>此时 <code>R = key</code> </p>
<p>以此类推  </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mask = <span class="string">&#x27;1010011000100011100&#x27;</span>  <span class="comment">#顺序 c_n,c_&#123;n-1&#125;,。。。,c_1</span></span><br></pre></td></tr></table></figure>
<h3 id="exp1："><a href="#exp1：" class="headerlink" title="exp1："></a>exp1：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;key&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">r = bytes_to_long(f)</span><br><span class="line">key = <span class="string">&#x27;0&#x27;</span>+<span class="built_in">str</span>(<span class="built_in">bin</span>(r)[<span class="number">2</span>:<span class="number">20</span>])</span><br><span class="line"><span class="comment"># bin_out = bin(r)[2:].zfill(12*8)</span></span><br><span class="line"><span class="comment"># key = bin_out[:19]    </span></span><br><span class="line"></span><br><span class="line">mask = <span class="string">&#x27;1010011000100011100&#x27;</span>  </span><br><span class="line"></span><br><span class="line">R = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">19</span>):</span><br><span class="line">    output = <span class="string">&#x27;x&#x27;</span>+key[:<span class="number">18</span>]</span><br><span class="line">    out = <span class="built_in">int</span>(key[-<span class="number">1</span>])^<span class="built_in">int</span>(output[-<span class="number">3</span>])^<span class="built_in">int</span>(output[-<span class="number">4</span>])^<span class="built_in">int</span>(output[-<span class="number">5</span>])^<span class="built_in">int</span>(output[-<span class="number">9</span>])^<span class="built_in">int</span>(output[-<span class="number">13</span>])^<span class="built_in">int</span>(output[-<span class="number">14</span>])^<span class="built_in">int</span>(output[-<span class="number">17</span>])</span><br><span class="line">    R += <span class="built_in">str</span>(out)</span><br><span class="line">    key = <span class="built_in">str</span>(out)+key[:<span class="number">18</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag&#123;&#x27;</span>+R[::-<span class="number">1</span>]+<span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;1110101100001101011&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="exp2："><a href="#exp2：" class="headerlink" title="exp2："></a>exp2：</h3><p>思路与上面一致</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key = <span class="string">&#x27;0101010100111000111&#x27;</span></span><br><span class="line">mask = <span class="number">0b1010011000100011100</span></span><br><span class="line"></span><br><span class="line">R = <span class="string">&quot;&quot;</span></span><br><span class="line">index = <span class="number">0</span></span><br><span class="line">key = key[<span class="number">18</span>] + key[:<span class="number">19</span>]</span><br><span class="line"><span class="keyword">while</span> index &lt; <span class="number">19</span>:</span><br><span class="line">    tmp = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">19</span>):</span><br><span class="line">        <span class="keyword">if</span> mask &gt;&gt; i &amp; <span class="number">1</span>:</span><br><span class="line">            tmp ^= <span class="built_in">int</span>(key[<span class="number">18</span> - i])</span><br><span class="line">    R += <span class="built_in">str</span>(tmp)</span><br><span class="line">    index += <span class="number">1</span></span><br><span class="line">    key = key[<span class="number">18</span>] + <span class="built_in">str</span>(tmp) + key[<span class="number">1</span>:<span class="number">18</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(R[::-<span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<h3 id="exp3"><a href="#exp3" class="headerlink" title="exp3:"></a>exp3:</h3><p>R，即 <code>seed</code>，构成只有 0，1，爆破系数不大，可以接受</p>
<p>我们可以猜测<code>seed</code>的第19位（0或1），如果<code>seed19+R[:18]</code>输出值等于<code>R[:19]</code>，那么就可以确定<code>seed</code>值了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;key&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">c = bytes_to_long(f)</span><br><span class="line">bin_out = <span class="built_in">bin</span>(c)[<span class="number">2</span>:].zfill(<span class="number">12</span>*<span class="number">8</span>)  </span><br><span class="line"></span><br><span class="line">mask = <span class="number">0b1010011000100011100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr</span>(<span class="params">R,mask</span>):</span><br><span class="line">    output = (R &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xffffffff</span></span><br><span class="line">    i=(R&amp;mask)&amp;<span class="number">0xffffffff</span></span><br><span class="line">    lastbit=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i!=<span class="number">0</span>:</span><br><span class="line">        lastbit^=(i&amp;<span class="number">1</span>)</span><br><span class="line">        i=i&gt;&gt;<span class="number">1</span></span><br><span class="line">    output^=lastbit</span><br><span class="line">    <span class="keyword">return</span> (output,lastbit)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">blow_up</span>():</span><br><span class="line">    key = bin_out[<span class="number">0</span>:<span class="number">19</span>]      </span><br><span class="line">    tmp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">19</span>):</span><br><span class="line">        <span class="keyword">if</span> lfsr(<span class="built_in">int</span>(<span class="string">&#x27;0&#x27;</span>+key[<span class="number">0</span>:<span class="number">18</span>],<span class="number">2</span>),mask)[<span class="number">0</span>] == <span class="built_in">int</span>(key,<span class="number">2</span>):	<span class="comment"># 正序</span></span><br><span class="line">            tmp += <span class="string">&#x27;0&#x27;</span></span><br><span class="line">            key = <span class="string">&#x27;0&#x27;</span>+key[<span class="number">0</span>:<span class="number">18</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tmp += <span class="string">&#x27;1&#x27;</span></span><br><span class="line">            key = <span class="string">&#x27;1&#x27;</span> + key[<span class="number">0</span>:<span class="number">18</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(tmp[::-<span class="number">1</span>],<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">r = blow_up()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(r))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1110101100001101011</span></span><br></pre></td></tr></table></figure>
<h1 id="B-M-算法"><a href="#B-M-算法" class="headerlink" title="B-M 算法"></a>B-M 算法</h1><p>如果我们知道了长度为 2n 的输出序列，那么就可以通过构造矩阵来求出 <code>mask</code>,</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagesimage-20240811200355681.png" alt="B-M"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">R = <span class="string">&#x27;1000010001101010011111100000110111010011001100011001101100011100000101001000000000000110000011101011100000111010111011101100001001110110001100111010110111011101010111111011011111110010011010010011000011100100010110000011001001011000010111001110010010110001&#x27;</span></span><br><span class="line"></span><br><span class="line">X = []</span><br><span class="line">S = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">    X.append([<span class="built_in">int</span>(j) <span class="keyword">for</span> j <span class="keyword">in</span> (R[i:i+<span class="number">128</span>])])</span><br><span class="line">    S.append(<span class="built_in">int</span>(R[<span class="number">128</span>+i]))</span><br><span class="line">    </span><br><span class="line">X = matrix(GF(<span class="number">2</span>), X)</span><br><span class="line">S = vector(GF(<span class="number">2</span>), S)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(X.nrows())     # 矩阵行数</span></span><br><span class="line"><span class="comment"># print(X.ncols())	   # 矩阵列数</span></span><br><span class="line"></span><br><span class="line">X = X.inverse()</span><br><span class="line">mask = X * S</span><br><span class="line"><span class="comment"># print(mask)</span></span><br><span class="line"></span><br><span class="line">flag = [<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> mask]</span><br><span class="line">flag = <span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(flag),<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">b&#x27;flag&#123;&#x27;</span> + long_to_bytes(flag) + <span class="string">b&#x27;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="Reference："><a href="#Reference：" class="headerlink" title="Reference："></a>Reference：</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYW5xdWFua2UuY29tL3Bvc3QvaWQvMTgxODExI2gyLTA=">深入分析CTF中的LFSR类题目（一）-安全客 - 安全资讯平台<i class="fa fa-external-link-alt"></i></span> </p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZnJlZWJ1Zi5jb20vYXJ0aWNsZXMvbmV0d29yay8yNjgwMTUuaHRtbA==">CTF竞赛密码学之 LFSR - FreeBuf网络安全行业门户<i class="fa fa-external-link-alt"></i></span> </p>
<p><span class="exturl" data-url="aHR0cHM6Ly9jdGYtd2lraS5vcmcvY3J5cHRvL3N0cmVhbWNpcGhlci9mc3IvbGZzci8jYi1t">线性反馈移位寄存器 - LFSR - CTF Wiki (ctf-wiki.org)<i class="fa fa-external-link-alt"></i></span> </p>
<hr>
<h1 id="彩蛋："><a href="#彩蛋：" class="headerlink" title="彩蛋："></a><strong>彩蛋：</strong></h1><h2 id="加法-和-异或-的异同"><a href="#加法-和-异或-的异同" class="headerlink" title="加法 和 异或 的异同"></a>加法 和 异或 的<strong>异同</strong></h2><p>异或</p>
<ul>
<li>0⊕0=0 </li>
<li>0⊕1=1 </li>
<li>1⊕0=1 </li>
<li>1⊕1=0 </li>
</ul>
<p>加法</p>
<ul>
<li>0+0=0 </li>
<li>0+1=1 </li>
<li>1+0=1 </li>
<li>1+1=10（在二进制下进位，结果是 0 且产生进位 1） </li>
</ul>
<h2 id="exp1-理解图"><a href="#exp1-理解图" class="headerlink" title="exp1 理解图"></a>exp1 理解图</h2><p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagesa539c12f541078dbda14824076d0b516.png" alt="img"></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/images9605354f004c487ac512b2e1f2b5e819.png" alt="9605354f004c487ac512b2e1f2b5e819"></p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>LFSR</tag>
      </tags>
  </entry>
  <entry>
    <title>SICTF Round#3</title>
    <url>/Crypto/SICTF-Round-3/</url>
    <content><![CDATA[<p>新年都未有芳华，二月初惊见草芽。</p>
<span id="more"></span>
<h2 id="签到-Vigenere"><a href="#签到-Vigenere" class="headerlink" title="[签到]Vigenere"></a>[签到]Vigenere</h2><blockquote>
<p>出题人：树木</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Gn taj xirly gf Fxgjuakd, oe igywnd mt tegbs mnrxxlrivywd sngearbsw wakksre. Bs kpimj gf tank, it bx gur bslenmngn th jfdetagur mt ceei yze Ugnled Lystel tx Amxwaca gjmtrtq.</span><br><span class="line"></span><br><span class="line">An taj wvegy gf tank nom xmccxjvinz, bw prhugse ts sllbffce hs lhe ytdlopnfg btxas wbyz Meqnuo: Tafl we lmsll ffce wtw logxyzer tsv madj heavj logxyzer. Pj khaeq yivLNUTF&#123;4695vft9-fd68-<span class="number">4684</span>-uj81-u6c1avg6uaft&#125;j yenxwgus ynfanvnsl snuhorm, ffd ag zfdekxlanwnfg og tmr ptwl thty Eexbhg <span class="keyword">is</span> mt jechsiuek yze lhxl tekwatokd an Nxb Eexbhg, Teqfk, anw Fjizhss. Thx iwtabqk of ljltlxrwnt tww leyy lo yhz.</span><br><span class="line"></span><br><span class="line">Qou tww inlyjucmjv to bsxorf yze Pkjkidxsl [of Fjpich] tx thx ftovx nf thx ljeamjkt chsxidxsue al xgon tx at il hwrttnf thty lhekj oile gw an hzlbrxfc of pfj wimm lhe Nsatew Xlatxx snd lzygely lham yze Pkjkidxsl, on ank owg nfitbflivx, nfvimj Bapts lo ifrwdityw adajjenvj oita yzis iqsn; am yze strw tifj, gffxw lo mxiaatx gwtwxjf Jaiff anw tmrsxqnes.</span><br><span class="line"></span><br><span class="line">Iqwasx hsll mt lhe tylenmngn oy yze Pkjkidxsl thty lhe kzlhlxxk emiqgymxsl of hzj suursrigjk nop txfekx lhe iwgspxhl of vtepeeqang Xsylagi lo mtpw pethw <span class="keyword">in</span> t kww mhslhs.</span><br></pre></td></tr></table></figure>
<p>常见的维吉尼亚在线爆破密钥</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZ3ViYWxsYS5kZS92aWdlbmVyZS1zb2x2ZXI=">https://www.guballa.de/vigenere-solver<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">On the first of February, we intend to begin unrestricted submarine warfare. In spite of this, it <span class="keyword">is</span> our intention to endeavour to keep the United States of America neutral.</span><br><span class="line"></span><br><span class="line">In the event of this <span class="keyword">not</span> succeeding, we propose an alliance on the following basis <span class="keyword">with</span> Mexico: That we shall make war together <span class="keyword">and</span> make peace together. We shall givSICTF&#123;4695cab9-fd68-<span class="number">4684</span>-be81-c6c1acb6cafa&#125;e generous financial support, <span class="keyword">and</span> an understanding on our part that Mexico <span class="keyword">is</span> to reconquer the lost territory <span class="keyword">in</span> New Mexico, Texas, <span class="keyword">and</span> Arizona. The details of settlement are left to you.</span><br><span class="line"></span><br><span class="line">You are instructed to inform the President [of Mexico] of the above <span class="keyword">in</span> the greatest confidence <span class="keyword">as</span> soon <span class="keyword">as</span> it <span class="keyword">is</span> certain that there will be an outbreak of war <span class="keyword">with</span> the United States <span class="keyword">and</span> suggest that the President, on his own initiative, invite Japan to immediate adherence <span class="keyword">with</span> this plan; at the same time, offer to mediate between Japan <span class="keyword">and</span> ourselves.</span><br><span class="line"></span><br><span class="line">Please call to the attention of the President that the ruthless employment of our submarines now offers the prospect of compelling England to make peace <span class="keyword">in</span> a few months.</span><br><span class="line"></span><br><span class="line"><span class="comment"># SICTF&#123;4695cab9-fd68-4684-be81-c6c1acb6cafa&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="签到，确信！"><a href="#签到，确信！" class="headerlink" title="签到，确信！"></a>签到，确信！</h2><blockquote>
<p>出题人：3tefanie</p>
</blockquote>
<p>附件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> enc <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_keys</span>(<span class="params">bits</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        p = getPrime(bits)</span><br><span class="line">        q = <span class="built_in">sum</span>([p**i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>)])</span><br><span class="line">        <span class="keyword">if</span> isPrime(q):</span><br><span class="line">            r = getPrime(<span class="number">1024</span>)</span><br><span class="line">            n = p*q*r</span><br><span class="line">            <span class="keyword">return</span> p,n</span><br><span class="line">p,n = gen_keys(<span class="number">512</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e = <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 8361361624563191168612863710516449028280757632934603412143152925186847721821552879338608951120157631182699762833743097837368740526055736516080136520584848113137087581886426335191207688807063024096128001406698217998816782335655663803544853496060418931569545571397849643826584234431049002394772877263603049736723071392989824939202362631409164434715938662038795641314189628730614978217987868150651491343161526447894569241770090377633602058561239329450046036247193745885174295365633411482121644408648089046016960479100220850953009927778950304754339013541019536413880264074456433907671670049288317945540495496615531150916647050158936010095037412334662561046016163777575736952349827380039938526168715655649566952708788485104126900723003264019513888897942175890007711026288941687256962012799264387545892832762304320287592575602683673845399984039272350929803217492617502601005613778976109701842829008365226259492848134417818535629827769342262020775115695472218876430557026471282526042545195944063078523279341459199475911203966762751381334277716236740637021416311325243028569997303341317394525345879188523948991698489667794912052436245063998637376874151553809424581376068719814532246179297851206862505952437301253313660876231136285877214949094995458997630235764635059528016149006613720287102941868517244509854875672887445099733909912598895743707420454623997740143407206090319567531144126090072331</span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string">c = 990174418341944658163682355081485155265287928299806085314916265580657672513493698560580484907432207730887132062242640756706695937403268682912083148568866147011247510439837340945334451110125182595397920602074775022416454918954623612449584637584716343806255917090525904201284852578834232447821716829253065610989317909188784426328951520866152936279891872183954439348449359491526360671152193735260099077198986264364568046834399064514350538329990985131052947670063605611113730246128926850242471820709957158609175376867993700411738314237400038584470826914946434498322430741797570259936266226325667814521838420733061335969071245580657187544161772619889518845348639672820212709030227999963744593715194928502606910452777687735614033404646237092067644786266390652682476817862879933305687452549301456541574678459748029511685529779653056108795644495442515066731075232130730326258404497646551885443146629498236191794065050199535063169471112533284663197357635908054343683637354352034115772227442563180462771041527246803861110504563589660801224223152060573760388045791699221007556911597792387829416892037414283131499832672222157450742460666013331962249415807439258417736128976044272555922344342725850924271905056434303543500959556998454661274520986141613977331669376614647269667276594163516040422089616099849315644424644920145900066426839607058422686565517159251903275091124418838917480242517812783383</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>随机多项式中找到n的因子</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">k = <span class="number">7</span></span><br><span class="line">n=<span class="number">8361361624563191168612863710516449028280757632934603412143152925186847721821552879338608951120157631182699762833743097837368740526055736516080136520584848113137087581886426335191207688807063024096128001406698217998816782335655663803544853496060418931569545571397849643826584234431049002394772877263603049736723071392989824939202362631409164434715938662038795641314189628730614978217987868150651491343161526447894569241770090377633602058561239329450046036247193745885174295365633411482121644408648089046016960479100220850953009927778950304754339013541019536413880264074456433907671670049288317945540495496615531150916647050158936010095037412334662561046016163777575736952349827380039938526168715655649566952708788485104126900723003264019513888897942175890007711026288941687256962012799264387545892832762304320287592575602683673845399984039272350929803217492617502601005613778976109701842829008365226259492848134417818535629827769342262020775115695472218876430557026471282526042545195944063078523279341459199475911203966762751381334277716236740637021416311325243028569997303341317394525345879188523948991698489667794912052436245063998637376874151553809424581376068719814532246179297851206862505952437301253313660876231136285877214949094995458997630235764635059528016149006613720287102941868517244509854875672887445099733909912598895743707420454623997740143407206090319567531144126090072331</span></span><br><span class="line"></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">c=<span class="number">990174418341944658163682355081485155265287928299806085314916265580657672513493698560580484907432207730887132062242640756706695937403268682912083148568866147011247510439837340945334451110125182595397920602074775022416454918954623612449584637584716343806255917090525904201284852578834232447821716829253065610989317909188784426328951520866152936279891872183954439348449359491526360671152193735260099077198986264364568046834399064514350538329990985131052947670063605611113730246128926850242471820709957158609175376867993700411738314237400038584470826914946434498322430741797570259936266226325667814521838420733061335969071245580657187544161772619889518845348639672820212709030227999963744593715194928502606910452777687735614033404646237092067644786266390652682476817862879933305687452549301456541574678459748029511685529779653056108795644495442515066731075232130730326258404497646551885443146629498236191794065050199535063169471112533284663197357635908054343683637354352034115772227442563180462771041527246803861110504563589660801224223152060573760388045791699221007556911597792387829416892037414283131499832672222157450742460666013331962249415807439258417736128976044272555922344342725850924271905056434303543500959556998454661274520986141613977331669376614647269667276594163516040422089616099849315644424644920145900066426839607058422686565517159251903275091124418838917480242517812783383</span></span><br><span class="line"></span><br><span class="line">R = Zmod(n)[<span class="string">&quot;x&quot;</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    Q = R.quo(R.random_element(k))</span><br><span class="line">    pp1 = gcd(ZZ(<span class="built_in">list</span>(Q.random_element() ^ n)[<span class="number">1</span>]), n)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> pp1 != <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(pp1)</span><br><span class="line">        qq = <span class="built_in">sum</span>([pp1**i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k)])</span><br><span class="line">        rr = n // (pp1 * qq)</span><br><span class="line">        <span class="keyword">assert</span> n == pp1 * qq * rr</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">phi = (pp1 - <span class="number">1</span>) * (qq - <span class="number">1</span>) * (rr - <span class="number">1</span>)</span><br><span class="line">d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br><span class="line"><span class="comment"># SICTF&#123;d9428fc7-fa3a-4096-8ec9-191c0a4562ff&#125;</span></span><br></pre></td></tr></table></figure>
<ol>
<li><code>R = Zmod(n)[&quot;x&quot;]</code>：创建了一个环<code>R</code>，它是整数模n（即Z/nZ）上的多项式环，变量为<code>x</code>。这样我们可以进行多项式运算。</li>
<li><code>Q = R.quo(R.random_element(k))</code>：创建了一个多项式<code>Q</code>，<code>R.random_element(k)</code>生成一个随机多项式。 即 <script type="math/tex">Z_n[x]/f(x)</script></li>
</ol>
<p>抽象代数，商环？推理具体看</p>
<p><span class="exturl" data-url="aHR0cHM6Ly90YW5nY3V4aWFvamlrdWFpLnh5ei9wb3N0L2VhNDQ1MzM1Lmh0bWw=">Crypto趣题-RSA(一)<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="easyLattice"><a href="#easyLattice" class="headerlink" title="easyLattice"></a>easyLattice</h2><blockquote>
<p>出题人：DexterJie</p>
</blockquote>
<p>附件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">47</span></span><br><span class="line"></span><br><span class="line">f = bytes_to_long(flag)  </span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">g = getPrime(<span class="number">128</span>)</span><br><span class="line">h = gmpy2.invert(f, p) * g % p</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;h =&#x27;</span>, h)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p =&#x27;</span>, p)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">h = 9848463356094730516607732957888686710609147955724620108704251779566910519170690198684628685762596232124613115691882688827918489297122319416081019121038443</span></span><br><span class="line"><span class="string">p = 11403618200995593428747663693860532026261161211931726381922677499906885834766955987247477478421850280928508004160386000301268285541073474589048412962888947     </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>一道格的入门题</p>
<font color='orange'>格（Lattice）</font>

<p>给定一组线性无关的基向量<script type="math/tex">v_1,v_2,···,v_n</script>,那么这些基向量的所有整系数线性组合：<script type="math/tex">a_1v_1+a_2v_2+···+a_nv_n</script></p>
<p>所形成的集合，就称作<strong>格（Lattice）</strong></p>
<font color='cornflowerblue'>线性组合：</font>

<p>两个数乘向量的和，被称为这两个向量的线性组合</p>
<font color='cornflowerblue'>线性无关：</font>

<p>所有向量都给张成的空间增添了新的维度</p>
<font color='cornflowerblue'>张成的空间：</font>

<p>所有可以表示为给定向量线性组合的向量的集合</p>
<script type="math/tex; mode=display">f*h=g \bmod p</script><p>=&gt;<script type="math/tex">f*h-k*p=g</script></p>
<p>我们尝试构造一个SVP问题，构造一个矩阵M（由两个线性无关的基构成），我们希望<code>(f,g)</code></p>
<p>是<code>M</code>张成的格上的最短向量，这样我们或许可以求出未知的<code>(f,g)</code></p>
<p>增加一个式子 <script type="math/tex">f*1+k*0=f</script>  ，即构造一个矩阵 <script type="math/tex">M=\begin{bmatrix} 1 & h\\ 0 & p \end{bmatrix}</script></p>
<p>可以发现 <script type="math/tex">(f,-k)\begin{bmatrix} 1 & h\\ 0 & p \end{bmatrix}=(f*1-k*0,f*h-k*p)=(f，g）</script></p>
<p>也就是说，<code>(f,g)</code>可以用两组向量基 <code>M</code>的某种整系数线性组合<code>(f,−u)</code>来表示，因此<code>(f,g)</code>确实在这个<strong>格</strong>上</p>
<ul>
<li>SVP(最短向量问题，Shortest Vector Problem)：给定lattice和基向量，找到lattice中的一个长度最短的非零向量。低维可以利用LLL算法求解</li>
</ul>
<p>最短向量<script type="math/tex">||(f,g)||=\sqrt{f_{bit}^2+g_{bit}^2}\approx 2^{376}</script>, p为512位，可能 f 稍大了，没有直接求出flag来</p>
<p>因为 搞出来的f和g与原f和g存在倍数关系</p>
<p>f 376位，g 128 位，差距 248位</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagesimage-20240226033237586.png" alt="image-20240226033237586"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">h = <span class="number">9848463356094730516607732957888686710609147955724620108704251779566910519170690198684628685762596232124613115691882688827918489297122319416081019121038443</span></span><br><span class="line">p = <span class="number">11403618200995593428747663693860532026261161211931726381922677499906885834766955987247477478421850280928508004160386000301268285541073474589048412962888947</span>     </span><br><span class="line">T = <span class="number">2</span>^<span class="number">248</span></span><br><span class="line"></span><br><span class="line">Ge = Matrix(ZZ,[[T*h,<span class="number">1</span>],[T*p,<span class="number">0</span>]])</span><br><span class="line"><span class="built_in">print</span>(Ge.LLL())</span><br><span class="line">g,f = Ge.LLL()[<span class="number">0</span>]</span><br><span class="line">g,f = <span class="built_in">abs</span>(g),<span class="built_in">abs</span>(f)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(f)))</span><br><span class="line"><span class="comment"># SICTF&#123;e3fea01c-18f3-4638-9544-9201393940a9&#125;</span></span><br></pre></td></tr></table></figure>
<p>还需要注意一点的是 <strong>最短向量的上界：</strong><script type="math/tex">||\overrightarrow{v}||\le \sqrt{\frac{n}{2\pi e}}\det(L)^{\frac{1}{n}}=\sigma (L)</script>     (应该是)</p>
<p>于是换了连分数来求解</p>
<script type="math/tex; mode=display">f*h-k*p=g \Rightarrow   \frac{h}{p}逼近于\frac{k}{f}</script><p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">h = <span class="number">9848463356094730516607732957888686710609147955724620108704251779566910519170690198684628685762596232124613115691882688827918489297122319416081019121038443</span></span><br><span class="line">q = <span class="number">11403618200995593428747663693860532026261161211931726381922677499906885834766955987247477478421850280928508004160386000301268285541073474589048412962888947</span>     </span><br><span class="line"></span><br><span class="line"><span class="comment"># Construct lattice.</span></span><br><span class="line"></span><br><span class="line">N = <span class="number">20000</span></span><br><span class="line">fra = (h/q).n(N).exact_rational().continued_fraction()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(fra)):</span><br><span class="line">    k = fra.numerator(i)</span><br><span class="line">    f = fra.denominator(i)</span><br><span class="line">    m = libnum.n2s(<span class="built_in">int</span>(<span class="built_in">abs</span>(f)))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;SICTF&#x27;</span> <span class="keyword">in</span> m:</span><br><span class="line">        <span class="built_in">print</span>(f)</span><br><span class="line">        <span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment"># SICTF&#123;e3fea01c-18f3-4638-9544-9201393940a9&#125;</span></span><br></pre></td></tr></table></figure>
<p><span class="exturl" data-url="aHR0cHM6Ly90b3Zlci54eXovcC93aWVuZXJzLWxhdHRpY2VzLWVxdWF0aW9ucy8j5YmN6KiA">Wiener’s v.s Lattices —— Ax≡y(mod P)的方程解法笔记 | Tover’ Blog<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc0NoM24vcC8xNTkxNzM4OC5odG1s">NTRU格密码 - 上辰 - 博客园 (cnblogs.com)<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hlYXJ0YmV3aXRoL2FydGljbGUvZGV0YWlscy8xMjY0NTc1OTI=">格密码（Lattice）与NTRUEncrypt介绍_getrandomnbitinteger-CSDN博客<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXh0ZXJqaWUuZ2l0aHViLmlvLzIwMjMvMDcvMjgv5Yid6K+G5qC8Lz9oaWdobGlnaHQ95qC8I+WFpemXqOmimA==">初识格 | DexterJie’Blog<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="SuperbRSA"><a href="#SuperbRSA" class="headerlink" title="SuperbRSA"></a>SuperbRSA</h2><blockquote>
<p>出题人：Kicky_Mu</p>
</blockquote>
<p>附件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#user:mumu666</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p=getPrime(<span class="number">1024</span>)</span><br><span class="line">q=getPrime(<span class="number">1024</span>)</span><br><span class="line">n=p*q</span><br><span class="line">e1=<span class="number">55</span></span><br><span class="line">e2=<span class="number">200</span></span><br><span class="line">m=bytes_to_long(<span class="string">&quot;flag&quot;</span>)</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">pow</span>(m,<span class="number">5</span>) &lt; n)</span><br><span class="line">c1 = <span class="built_in">pow</span>(m, e1, n)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m, e2, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c1=&quot;</span>,c1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c2=&quot;</span>,c2)</span><br><span class="line"></span><br><span class="line">n= <span class="number">19006830358118902392432453595802675566730850352890246995920642811967821259388009049803513102750594524106471709641202019832682438027312468849299985832675191795417160553379580813410722359089872519372049229233732405993062464286888889084640878784209014165871696882564834896322508054231777967011195636564463806270998326936161449009988434249178477100127347406759932149010712091376183710135615375272671888541233275415737155953323133439644529709898791881795186775830217884663044495979067807418758455237701315019683802437323177125493076113419739827430282311018083976114158159925450746712064639569301925672742186294237113199023</span></span><br><span class="line">c1= <span class="number">276245243658976720066605903875366763552720328374098965164676247771817997950424168480909517684516498439306387133611184795758628248588201187138612090081389226321683486308199743311842513053259894661221013008371261704678716150646764446208833447643781574516045641493770778735363586857160147826684394417412837449465273160781074676966630398315417741542529612480836572205781076576325382832502694868883931680720558621770570349864399879523171995953720198118660355479626037129047327185224203109006251809257919143284157354935005710902589809259500117996982503679601132486140677013625335552533104471327456798955341220640782369529</span></span><br><span class="line">c2= <span class="number">11734019659226247713821792108026989060106712358397514827024912309860741729438494689480531875833287268454669859568719053896346471360750027952226633173559594064466850413737504267807599435679616522026241111887294138123201104718849744300769676961585732810579953221056338076885840743126397063074940281522137794340822594577352361616598702143477379145284687427705913831885493512616944504612474278405909277188118896882441812469679494459216431405139478548192152811441169176134750079073317011232934250365454908280676079801770043968006983848495835089055956722848080915898151352242215210071011331098761828031786300276771001839021</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>共模攻击 e1,e2不互素</p>
<p>这里公约数为5，较小，直接开根</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">n= <span class="number">19006830358118902392432453595802675566730850352890246995920642811967821259388009049803513102750594524106471709641202019832682438027312468849299985832675191795417160553379580813410722359089872519372049229233732405993062464286888889084640878784209014165871696882564834896322508054231777967011195636564463806270998326936161449009988434249178477100127347406759932149010712091376183710135615375272671888541233275415737155953323133439644529709898791881795186775830217884663044495979067807418758455237701315019683802437323177125493076113419739827430282311018083976114158159925450746712064639569301925672742186294237113199023</span></span><br><span class="line">c1= <span class="number">276245243658976720066605903875366763552720328374098965164676247771817997950424168480909517684516498439306387133611184795758628248588201187138612090081389226321683486308199743311842513053259894661221013008371261704678716150646764446208833447643781574516045641493770778735363586857160147826684394417412837449465273160781074676966630398315417741542529612480836572205781076576325382832502694868883931680720558621770570349864399879523171995953720198118660355479626037129047327185224203109006251809257919143284157354935005710902589809259500117996982503679601132486140677013625335552533104471327456798955341220640782369529</span></span><br><span class="line">c2= <span class="number">11734019659226247713821792108026989060106712358397514827024912309860741729438494689480531875833287268454669859568719053896346471360750027952226633173559594064466850413737504267807599435679616522026241111887294138123201104718849744300769676961585732810579953221056338076885840743126397063074940281522137794340822594577352361616598702143477379145284687427705913831885493512616944504612474278405909277188118896882441812469679494459216431405139478548192152811441169176134750079073317011232934250365454908280676079801770043968006983848495835089055956722848080915898151352242215210071011331098761828031786300276771001839021</span></span><br><span class="line">e1=<span class="number">55</span></span><br><span class="line">e2=<span class="number">200</span></span><br><span class="line">s,s1,s2 = gmpy2.gcdext(e1,e2)</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line">m = <span class="built_in">pow</span>(c1,s1,n)*<span class="built_in">pow</span>(c2,s2,n)%n</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(libnum.nroot(m,s))))</span><br><span class="line"><span class="comment"># SICTF&#123;S0_Great_RSA_Have_Y0u_Learned?&#125;</span></span><br></pre></td></tr></table></figure>
<p>如果 e1,e2存在极大的公约数，且有e3</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">e1e2,s1,s2 = gmpy2.gcdext(e1,e2)</span><br><span class="line">c12 = <span class="built_in">pow</span>(c1,s1,n)*<span class="built_in">pow</span>(c2,s2,n)%n</span><br><span class="line"></span><br><span class="line">e2e3,s2,s3 = gmpy2.gcdext(e1,e2)</span><br><span class="line">c23 = <span class="built_in">pow</span>(c2,s2,n)*<span class="built_in">pow</span>(c3,s3,n)%n</span><br><span class="line"></span><br><span class="line">s12,s23,gcd = gmpy2.gcdext(e1e2,e2e3)</span><br><span class="line">m = <span class="built_in">pow</span>(c12,s12,n)*<span class="built_in">pow</span>(c23,s23,n1)%n</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(m))</span><br></pre></td></tr></table></figure>
<h2 id="gggcccddd"><a href="#gggcccddd" class="headerlink" title="gggcccddd"></a>gggcccddd</h2><blockquote>
<p>出题人：3tefanie</p>
</blockquote>
<p>附件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> enc <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c1 = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line">c2 = <span class="built_in">pow</span>(<span class="number">233</span>*m+<span class="number">9527</span>,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c1 = <span class="subst">&#123;c1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c2 = <span class="subst">&#123;c2&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e = <span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n = 71451784354488078832557440841067139887532820867160946146462765529262021756492415597759437645000198746438846066445835108438656317936511838198860210224738728502558420706947533544863428802654736970469313030584334133519644746498781461927762736769115933249195917207059297145965502955615599481575507738939188415191</span></span><br><span class="line"><span class="string">c1 = 60237305053182363686066000860755970543119549460585763366760183023969060529797821398451174145816154329258405143693872729068255155086734217883658806494371105889752598709446068159151166250635558774937924668506271624373871952982906459509904548833567117402267826477728367928385137857800256270428537882088110496684</span></span><br><span class="line"><span class="string">c2 = 20563562448902136824882636468952895180253983449339226954738399163341332272571882209784996486250189912121870946577915881638415484043534161071782387358993712918678787398065688999810734189213904693514519594955522460151769479515323049821940285408228055771349670919587560952548876796252634104926367078177733076253</span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>一眼 Franklin-Reiter（太慢了）</p>
<p>所以我用half gcd</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> shared.polynomial <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">71451784354488078832557440841067139887532820867160946146462765529262021756492415597759437645000198746438846066445835108438656317936511838198860210224738728502558420706947533544863428802654736970469313030584334133519644746498781461927762736769115933249195917207059297145965502955615599481575507738939188415191</span></span><br><span class="line">c1 = <span class="number">60237305053182363686066000860755970543119549460585763366760183023969060529797821398451174145816154329258405143693872729068255155086734217883658806494371105889752598709446068159151166250635558774937924668506271624373871952982906459509904548833567117402267826477728367928385137857800256270428537882088110496684</span></span><br><span class="line">c2 = <span class="number">20563562448902136824882636468952895180253983449339226954738399163341332272571882209784996486250189912121870946577915881638415484043534161071782387358993712918678787398065688999810734189213904693514519594955522460151769479515323049821940285408228055771349670919587560952548876796252634104926367078177733076253</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">P = Zmod(n)[<span class="string">&quot;x&quot;</span>]</span><br><span class="line">x = P.gen()</span><br><span class="line">f = x**e - c1</span><br><span class="line">g = (<span class="number">233</span>*x+<span class="number">9527</span>) ** e - c2</span><br><span class="line">h = fast_polynomial_gcd(f, g)</span><br><span class="line">m = -h[<span class="number">0</span>] // h[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br><span class="line"><span class="comment"># SICTF&#123;45115fb2-84d6-4369-88c2-c8c3d72b4c55&#125;</span></span><br></pre></td></tr></table></figure>
<p>或者这个脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">HGCD</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="number">2</span> * b.degree() &lt;= a.degree() <span class="keyword">or</span> a.degree() == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    m = a.degree() // <span class="number">2</span></span><br><span class="line">    a_top, a_bot = a.quo_rem(x^m)</span><br><span class="line">    b_top, b_bot = b.quo_rem(x^m)</span><br><span class="line">    R00, R01, R10, R11 = HGCD(a_top, b_top)</span><br><span class="line">    c = R00 * a + R01 * b</span><br><span class="line">    d = R10 * a + R11 * b</span><br><span class="line">    q, e = c.quo_rem(d)</span><br><span class="line">    d_top, d_bot = d.quo_rem(x^(m // <span class="number">2</span>))</span><br><span class="line">    e_top, e_bot = e.quo_rem(x^(m // <span class="number">2</span>))</span><br><span class="line">    S00, S01, S10, S11 = HGCD(d_top, e_top)</span><br><span class="line">    RET00 = S01 * R00 + (S00 - q * S01) * R10</span><br><span class="line">    RET01 = S01 * R01 + (S00 - q * S01) * R11</span><br><span class="line">    RET10 = S11 * R00 + (S10 - q * S11) * R10</span><br><span class="line">    RET11 = S11 * R01 + (S10 - q * S11) * R11</span><br><span class="line">    <span class="keyword">return</span> RET00, RET01, RET10, RET11</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GCD</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="built_in">print</span>(a.degree(), b.degree())</span><br><span class="line">    q, r = a.quo_rem(b)</span><br><span class="line">    <span class="keyword">if</span> r == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    R00, R01, R10, R11 = HGCD(a, b)</span><br><span class="line">    c = R00 * a + R01 * b</span><br><span class="line">    d = R10 * a + R11 * b</span><br><span class="line">    <span class="keyword">if</span> d == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> c.monic()</span><br><span class="line">    q, r = c.quo_rem(d)</span><br><span class="line">    <span class="keyword">if</span> r == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> d</span><br><span class="line">    <span class="keyword">return</span> GCD(d, r)</span><br><span class="line"></span><br><span class="line">sys.setrecursionlimit(<span class="number">500000</span>)</span><br><span class="line"></span><br><span class="line">n = <span class="number">71451784354488078832557440841067139887532820867160946146462765529262021756492415597759437645000198746438846066445835108438656317936511838198860210224738728502558420706947533544863428802654736970469313030584334133519644746498781461927762736769115933249195917207059297145965502955615599481575507738939188415191</span></span><br><span class="line">c1 = <span class="number">60237305053182363686066000860755970543119549460585763366760183023969060529797821398451174145816154329258405143693872729068255155086734217883658806494371105889752598709446068159151166250635558774937924668506271624373871952982906459509904548833567117402267826477728367928385137857800256270428537882088110496684</span></span><br><span class="line">c2 = <span class="number">20563562448902136824882636468952895180253983449339226954738399163341332272571882209784996486250189912121870946577915881638415484043534161071782387358993712918678787398065688999810734189213904693514519594955522460151769479515323049821940285408228055771349670919587560952548876796252634104926367078177733076253</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">R.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = x^e - c1</span><br><span class="line">g = (<span class="number">233</span>*x+<span class="number">9527</span>)^e - c2</span><br><span class="line"></span><br><span class="line">res = GCD(f,g)</span><br><span class="line"></span><br><span class="line">m = -res.monic().coefficients()[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line">flag = long_to_bytes(<span class="built_in">int</span>(m))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># SICTF&#123;45115fb2-84d6-4369-88c2-c8c3d72b4c55&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="铜匠"><a href="#铜匠" class="headerlink" title="*铜匠"></a>*铜匠</h2><blockquote>
<p>出题人：3tefanie</p>
</blockquote>
<p>附件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> enc <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Decimal_conversion</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;0&#x27;</span></span><br><span class="line">    digits = []</span><br><span class="line">    <span class="keyword">while</span> num:</span><br><span class="line">        digits.append(<span class="built_in">str</span>(num % <span class="number">5</span>))</span><br><span class="line">        num //= <span class="number">5</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">reversed</span>(digits))</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = p*q</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;leak = <span class="subst">&#123;Decimal_conversion(p)[:<span class="number">112</span>]&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e = <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">leak = 2011133132443111302000224204142244403203442000141102312242343143241244243020003333022112141220422134444214010012</span></span><br><span class="line"><span class="string">n = 85988668134257353631742597258304937106964673395852009846703777410474172989069717247424903079500594820235304351355706519069516847244761609583338251489134035212061654870087550317540291994559481862615812258493738064606592165529948648774081655902831715928483206013332330998262897765489820121129058926463847702821</span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string">c = 64708526479058278743788046708923650158905888858865427385501446781738669889375403360886995849554813207230509920789341593771929287415439407977283018525484281064769128358863513387658744063469874845446480637925790150835186431234289848506337341595817156444941964510251032210939739594241869190746437858135599624562</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>爆不出来，只能写一下思路了</p>
<p>p转5进制给出前112位，经过测试，可以补零得到高位</p>
<p>猜测进位差，舍弃三到四位，爆破八到九位就可解，实际没出来，</p>
<p>最后猜测可能要五进制的形式解这题，不会写脚本，g</p>
<hr>
<p>以五进制的形式爆破：</p>
<p>求解未知bit的理论上界</p>
<p>$p_{未知位数}&lt;n^{\frac{\beta^2}{d}-\epsilon}$   </p>
<p>$epsilon = \epsilon $ </p>
<p>d 是造的多项式的度，这个多项式x是变量，度为1</p>
<p>n就是大数 n</p>
<p>$beta=\beta$ </p>
<p>beta是指copper理想的模数大于实际模数的多少次幂</p>
<p>如此题，理想模数是p，实际模数是 n， $p&gt;n^{0.49}$ </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">t = <span class="number">0.5</span>*getPrime(<span class="number">1024</span>)**(<span class="number">0.49</span>**<span class="number">2</span>-<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Decimal_conversion</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">if</span> num == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;0&#x27;</span></span><br><span class="line">    digits = []</span><br><span class="line">    <span class="keyword">while</span> num:</span><br><span class="line">        digits.append(<span class="built_in">str</span>(num % <span class="number">5</span>))</span><br><span class="line">        num //= <span class="number">5</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">reversed</span>(digits))</span><br><span class="line"></span><br><span class="line">cc = Decimal_conversion(<span class="built_in">int</span>(t))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(cc))</span><br><span class="line"><span class="comment"># 102</span></span><br></pre></td></tr></table></figure>
<p>可以看到未知位数的理论上界是102，而我们未知位数有109位，理论上要爆破7位</p>
<p>不过copper一般界会松散一点，从低位开始试试</p>
<p>这里爆破两位</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">leak = <span class="string">&quot;2011133132443111302000224204142244403203442000141102312242343143241244243020003333022112141220422134444214010012&quot;</span></span><br><span class="line">n = <span class="number">85988668134257353631742597258304937106964673395852009846703777410474172989069717247424903079500594820235304351355706519069516847244761609583338251489134035212061654870087550317540291994559481862615812258493738064606592165529948648774081655902831715928483206013332330998262897765489820121129058926463847702821</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">64708526479058278743788046708923650158905888858865427385501446781738669889375403360886995849554813207230509920789341593771929287415439407977283018525484281064769128358863513387658744063469874845446480637925790150835186431234289848506337341595817156444941964510251032210939739594241869190746437858135599624562</span></span><br><span class="line"></span><br><span class="line">ph = <span class="built_in">int</span>(leak+(<span class="number">221</span>-<span class="number">112</span>)*<span class="string">&quot;0&quot;</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">5</span>^<span class="number">2</span>):</span><br><span class="line">    PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    f = ph + <span class="number">5</span>^<span class="number">2</span>*x + i</span><br><span class="line">    f = f.monic()</span><br><span class="line">    res = f.small_roots(beta = <span class="number">0.49</span>,X = <span class="number">5</span>^(<span class="number">109</span>-<span class="number">2</span>),epsilon = <span class="number">0.01</span>)</span><br><span class="line">    <span class="keyword">if</span> res:</span><br><span class="line">        p = ph + <span class="number">5</span>^<span class="number">2</span>*res[<span class="number">0</span>] + i</span><br><span class="line">        <span class="built_in">print</span>(p)</span><br><span class="line">p = <span class="number">12170789707638469557363249767228204966074269830454332436369564884472290413677820876733675261757160662428920138919536054003455470370040518528641001253487453</span></span><br><span class="line">q = n // p</span><br><span class="line">d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,n)))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(m)	</span><br><span class="line">	</span><br><span class="line"><span class="comment">#SICTF&#123;1d213ffc-d5dc-42d0-b206-e9a0c1a3cb69&#125;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>最开始以十进制的形式爆破没出可能是因为5进制转成十进制出了问题</p>
<p>5进制转成十进制：$temp =\sum_{i}^{n}x*5^i $ </p>
<p>抹3位，也就是从109位开始 ，即 i=109</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">leak = <span class="string">&quot;2011133132443111302000224204142244403203442000141102312242343143241244243020003333022112141220422134444214010012&quot;</span></span><br><span class="line">n = <span class="number">85988668134257353631742597258304937106964673395852009846703777410474172989069717247424903079500594820235304351355706519069516847244761609583338251489134035212061654870087550317540291994559481862615812258493738064606592165529948648774081655902831715928483206013332330998262897765489820121129058926463847702821</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">64708526479058278743788046708923650158905888858865427385501446781738669889375403360886995849554813207230509920789341593771929287415439407977283018525484281064769128358863513387658744063469874845446480637925790150835186431234289848506337341595817156444941964510251032210939739594241869190746437858135599624562</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">five_to_ten</span>(<span class="params">num</span>):</span><br><span class="line">    temp = <span class="number">0</span></span><br><span class="line">    i = <span class="number">109</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">reversed</span>(num):</span><br><span class="line">        temp += <span class="built_in">int</span>(j) * <span class="number">5</span>**i</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line"></span><br><span class="line">leak = five_to_ten(leak)</span><br><span class="line">gift = leak &gt;&gt; <span class="number">256</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">2</span>^<span class="number">8</span>):</span><br><span class="line">    ph = gift &lt;&lt; <span class="number">8</span></span><br><span class="line">    phigh = ph + i</span><br><span class="line">    phigh = phigh &lt;&lt; <span class="number">248</span></span><br><span class="line">    R.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    f = phigh + x</span><br><span class="line">    res = f.small_roots(X=<span class="number">2</span>^<span class="number">248</span>, beta=<span class="number">0.4</span>, epsilon=<span class="number">0.01</span>)</span><br><span class="line">    <span class="keyword">if</span> res != []:</span><br><span class="line">        p = phigh + <span class="built_in">int</span>(res[<span class="number">0</span>])</span><br><span class="line">        q = n // p</span><br><span class="line">        d = gmpy2.invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">        m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;i = <span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># SICTF&#123;1d213ffc-d5dc-42d0-b206-e9a0c1a3cb69&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="BabyRSA"><a href="#BabyRSA" class="headerlink" title="*BabyRSA"></a>*BabyRSA</h2><blockquote>
<p>出题人：Kicky_Mu</p>
</blockquote>
<p>附件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = random_prime(<span class="number">1</span>&lt;&lt;<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;ffllaagg.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag = <span class="built_in">int</span>.from_bytes(f.read().strip(), <span class="string">&quot;big&quot;</span>)</span><br><span class="line"><span class="keyword">assert</span> flag &lt; p</span><br><span class="line"></span><br><span class="line">a = randint(<span class="number">2</span>, p-<span class="number">1</span>)</span><br><span class="line">b = randint(<span class="number">2</span>, p-<span class="number">1</span>)</span><br><span class="line">x = randint(<span class="number">2</span>, p-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">h</span>():</span><br><span class="line">    <span class="keyword">global</span> a, b, x</span><br><span class="line">    x = (a*x + b) % p</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">PR.&lt;X&gt; = PolynomialRing(GF(p))</span><br><span class="line">f = h() + h()*X + h()*X**<span class="number">2</span> + h()*X**<span class="number">3</span> + h()*X**<span class="number">4</span> + h()*X**<span class="number">5</span></span><br><span class="line">v_me_50 = [(i, f(i)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"><span class="built_in">print</span>(v_me_50)</span><br><span class="line"><span class="built_in">print</span>(f(flag))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = <span class="number">8432316544210923620966806031040552674652729976238765323782536889706914762471638598119051165931563126522925761119650997703305509546949570434637437942542827</span></span><br><span class="line">v_me_50 = [(<span class="number">1</span>, <span class="number">5237331460408741346823741966490617418367283531029963248255318507187035341590236835730694472064897540292182231844047116067936691956970631907605500080014355</span>), (<span class="number">2</span>, <span class="number">5798977431976767515500795413771120575460553181185728489626756434911307088093739452469315524092208822863785429164219547384598943937099787390543171055679780</span>), (<span class="number">3</span>, <span class="number">5030862375386942201139427367618716490378481408210696947331523552250206476805124204780313138835912303941204343248384742875319182761611109448446270069831113</span>), (<span class="number">4</span>, <span class="number">4705360705603328842229554954026497175574981026785287316439514185860486128679614980330307863925942038530792583274904352630757089631411920876914529907563209</span>)]</span><br><span class="line">f_flag = <span class="number">7251453750672416392395590357197330390627853878488142305852099080761477796591562813165554150640801022882531891827653530623183405183605476913024545431842867</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>给了四个lcg用来求a、b、x</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagesimage-20240226033053986.png" alt="image-20240226033053986"></p>
<p>以为给了四个式子来求六个未知数，因为是lcg，实际每个$x_i$ 都可以用a、b、x代替，也即 四个式子解三个未知数（都在 模 p下），所以用sage的groebner_basis 来求<br>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">8432316544210923620966806031040552674652729976238765323782536889706914762471638598119051165931563126522925761119650997703305509546949570434637437942542827</span></span><br><span class="line">c = [(<span class="number">1</span>, <span class="number">5237331460408741346823741966490617418367283531029963248255318507187035341590236835730694472064897540292182231844047116067936691956970631907605500080014355</span>), (<span class="number">2</span>, <span class="number">5798977431976767515500795413771120575460553181185728489626756434911307088093739452469315524092208822863785429164219547384598943937099787390543171055679780</span>), (<span class="number">3</span>, <span class="number">5030862375386942201139427367618716490378481408210696947331523552250206476805124204780313138835912303941204343248384742875319182761611109448446270069831113</span>), (<span class="number">4</span>, <span class="number">4705360705603328842229554954026497175574981026785287316439514185860486128679614980330307863925942038530792583274904352630757089631411920876914529907563209</span>)]</span><br><span class="line">enc_flag = <span class="number">7251453750672416392395590357197330390627853878488142305852099080761477796591562813165554150640801022882531891827653530623183405183605476913024545431842867</span></span><br><span class="line"></span><br><span class="line">PR.&lt;a,b,x&gt; = PolynomialRing(GF(p))</span><br><span class="line"></span><br><span class="line">L = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    x = a*x+b</span><br><span class="line">    L.append(x)</span><br><span class="line"></span><br><span class="line">f1 = L[<span class="number">0</span>]+L[<span class="number">1</span>]+L[<span class="number">2</span>]+L[<span class="number">3</span>]+L[<span class="number">4</span>]+L[<span class="number">5</span>]-c[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">f2 = L[<span class="number">0</span>]+L[<span class="number">1</span>]*<span class="number">2</span>+L[<span class="number">2</span>]*<span class="number">2</span>^<span class="number">2</span>+L[<span class="number">3</span>]*<span class="number">2</span>^<span class="number">3</span>+L[<span class="number">4</span>]*<span class="number">2</span>^<span class="number">4</span>+L[<span class="number">5</span>]*<span class="number">2</span>^<span class="number">5</span>-c[<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line">f3 = L[<span class="number">0</span>]+L[<span class="number">1</span>]*<span class="number">3</span>+L[<span class="number">2</span>]*<span class="number">3</span>^<span class="number">2</span>+L[<span class="number">3</span>]*<span class="number">3</span>^<span class="number">3</span>+L[<span class="number">4</span>]*<span class="number">3</span>^<span class="number">4</span>+L[<span class="number">5</span>]*<span class="number">3</span>^<span class="number">5</span>-c[<span class="number">2</span>][<span class="number">1</span>]</span><br><span class="line">f4 = L[<span class="number">0</span>]+L[<span class="number">1</span>]*<span class="number">4</span>+L[<span class="number">2</span>]*<span class="number">4</span>^<span class="number">2</span>+L[<span class="number">3</span>]*<span class="number">4</span>^<span class="number">3</span>+L[<span class="number">4</span>]*<span class="number">4</span>^<span class="number">4</span>+L[<span class="number">5</span>]*<span class="number">4</span>^<span class="number">5</span>-c[<span class="number">3</span>][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">res = Ideal([f1,f2,f3,f4]).groebner_basis()</span><br><span class="line"></span><br><span class="line">a = -res[<span class="number">0</span>].coefficients()[<span class="number">1</span>]</span><br><span class="line">b = -res[<span class="number">1</span>].coefficients()[<span class="number">1</span>]</span><br><span class="line">x = -res[<span class="number">2</span>].coefficients()[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">L = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    x = a*x+b</span><br><span class="line">    L.append(x)</span><br><span class="line">    </span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(GF(p))</span><br><span class="line">f = L[<span class="number">0</span>]+L[<span class="number">1</span>]*x+L[<span class="number">2</span>]*x^<span class="number">2</span>+L[<span class="number">3</span>]*x^<span class="number">3</span>+L[<span class="number">4</span>]*x^<span class="number">4</span>+L[<span class="number">5</span>]*x^<span class="number">5</span>-enc_flag</span><br><span class="line">roots = f.roots()</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(roots[<span class="number">0</span>][<span class="number">0</span>])))</span><br><span class="line"><span class="comment"># SICTF&#123;Th3s_1s_a_high_l3vel_p0lyn0mial&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="进阶-easy-or-baby-RSA"><a href="#进阶-easy-or-baby-RSA" class="headerlink" title="*[进阶]easy_or_baby_RSA"></a>*[进阶]easy_or_baby_RSA</h2><blockquote>
<p>出题人：3tefanie</p>
<p>hint：论文地址：<span class="exturl" data-url="aHR0cHM6Ly93d3QubGFuem91dC5jb20vaTdsVTAxb215OHVm">https://wwt.lanzout.com/i7lU01omy8uf<i class="fa fa-external-link-alt"></i></span></p>
</blockquote>
<p>附件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> enc <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">256</span>)</span><br><span class="line">q = getPrime(<span class="number">256</span>)</span><br><span class="line">n = (p**<span class="number">5</span>)*(q**<span class="number">3</span>)</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)*p**<span class="number">4</span> * q**<span class="number">2</span></span><br><span class="line">d = getPrime(<span class="number">1380</span>)</span><br><span class="line">e = gmpy2.invert(d,phi)</span><br><span class="line">p1 = gmpy2.next_prime(p)</span><br><span class="line">q1 = gmpy2.next_prime(q)</span><br><span class="line">c = <span class="built_in">pow</span>(m,<span class="number">65537</span>,p1*q1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e = <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c = 6027704939934795526809476320408984749353451163184148193613218899917989403800738729505135647560822568147775955030636790796412038749080589962404088890138</span></span><br><span class="line"><span class="string">n = 2345049742327685796181532105032554795628696111708534285951012187089560814230641663133312117797131139088986342455315166062482479446527815702735474197358418746066993291802284464812612727625991647573889402281825863578807474887341632160586307943897790827019291411639756252138594856687013363652094621849674259604512491449809337670874218320926522274379234396955495643125680407916326561528774056618181536326260093822819468635513422755218190798616168156924793527386350080400722536575372660262573683231490166520738579903818495107264328324326819989553511070207494208500239603511665056894947107356065440333537271115434438827753</span></span><br><span class="line"><span class="string">e = 1560967245790387854530279132085915310737094193704812456970549221459036227794862560384548159924112528879771688534015861357630951162558357151823378870345945435342412220708167081427844035498174919749839232806280901968067512188264340755833308035745702731211924571583963089915893479992177245815565483658484702813753029786985027579475059989141119719224961817402605977566829967197490932672021566512826377376988752959467389833419735737545201988916590880487156074463948048461415870071893002222885078350961871888123567241990517365430474025391208925638731208820904957752596249597885523540692851123131898267246576902438472358221</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>paper题</p>
<p>特点是 $n=p^rq^s$ ，可以根据 注释里的调参</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bound,r,s,N,m</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    small private d RSA with moduli N=p^r*q^s,that d &lt; 1-(3*r+s)/(r+s)^2 - eps</span></span><br><span class="line"><span class="string">    the eps is</span></span><br><span class="line"><span class="string">    ((15*s+1)*r^4-(2*s^2-10*s)*r^3-(s^3-6*s^2+8*s)*r^2+(2*s^3-12*s^2+6*s)*r+s^4-4*s^3+s^2)</span></span><br><span class="line"><span class="string">    /(4*m*(r-s)*(r+s)^3) in theory,by this we can choose the proper m which is lower than theory.</span></span><br><span class="line"><span class="string">    return : one factor of N.you can factor N by this</span></span><br><span class="line"><span class="string">    for example:</span></span><br><span class="line"><span class="string">    p,q : 256</span></span><br><span class="line"><span class="string">    r,s : 5,3</span></span><br><span class="line"><span class="string">    d : 1300,m = 9</span></span><br><span class="line"><span class="string">    d : 1350,m = 14</span></span><br><span class="line"><span class="string">    d : 1360,m = 20</span></span><br><span class="line"><span class="string">    d : 1370,m = 30</span></span><br><span class="line"><span class="string">    d &gt; 1370,m = 40 # spend long time to do this(2800s)</span></span><br><span class="line"><span class="string">    you can choose the larger m to approach the theory solution</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    t1 = <span class="built_in">int</span>((r*(r+s-<span class="number">2</span>))/((r-<span class="number">1</span>)*(r+s))*m)</span><br><span class="line">    t2 = m</span><br><span class="line">    bounds = [bound ,<span class="number">1</span>]</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line">    G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line">    x = f.variables()[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(t2+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t2+<span class="number">1</span>-k):</span><br><span class="line">            d=<span class="built_in">max</span>([<span class="number">0</span>,ceil((r-<span class="number">1</span>)*(t1-k)/r),ceil((s-<span class="number">1</span>)*(t2-k)/s)])</span><br><span class="line">            base=N ^ d * f ^ k * x ^ i</span><br><span class="line">            G.append(base)</span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line">    factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line"><span class="comment">#     B = flatter(B)</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    another question is can&#x27;t use flatter because flatter not support </span></span><br><span class="line"><span class="string">    the matrix that its row far greater than its cols</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, <span class="number">1</span> / factor)</span><br><span class="line">    H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B * monomials):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> h.coefficients():</span><br><span class="line">            <span class="keyword">if</span> gcd(i,N)!=<span class="number">1</span> <span class="keyword">and</span> gcd(i,N)!=N:</span><br><span class="line">                <span class="keyword">return</span> gcd(h.coefficients()[<span class="number">0</span>],N)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">6027704939934795526809476320408984749353451163184148193613218899917989403800738729505135647560822568147775955030636790796412038749080589962404088890138</span></span><br><span class="line">n = <span class="number">2345049742327685796181532105032554795628696111708534285951012187089560814230641663133312117797131139088986342455315166062482479446527815702735474197358418746066993291802284464812612727625991647573889402281825863578807474887341632160586307943897790827019291411639756252138594856687013363652094621849674259604512491449809337670874218320926522274379234396955495643125680407916326561528774056618181536326260093822819468635513422755218190798616168156924793527386350080400722536575372660262573683231490166520738579903818495107264328324326819989553511070207494208500239603511665056894947107356065440333537271115434438827753</span></span><br><span class="line">e = <span class="number">1560967245790387854530279132085915310737094193704812456970549221459036227794862560384548159924112528879771688534015861357630951162558357151823378870345945435342412220708167081427844035498174919749839232806280901968067512188264340755833308035745702731211924571583963089915893479992177245815565483658484702813753029786985027579475059989141119719224961817402605977566829967197490932672021566512826377376988752959467389833419735737545201988916590880487156074463948048461415870071893002222885078350961871888123567241990517365430474025391208925638731208820904957752596249597885523540692851123131898267246576902438472358221</span></span><br><span class="line"></span><br><span class="line">r,s=<span class="number">5</span>,<span class="number">3</span></span><br><span class="line">edge = <span class="number">1380</span></span><br><span class="line">a= -<span class="built_in">int</span>(inverse(e,n)) %n</span><br><span class="line">PR.&lt;x,y&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f=a-x</span><br><span class="line">m=<span class="number">40</span></span><br><span class="line">res=small_roots(f, <span class="number">2</span>^edge,r,s,n,m)</span><br><span class="line"><span class="built_in">print</span>(res) <span class="comment"># 3880841886154333953773650424963616396441043690868788265611642694520916610789745536631157643368280831495777902173955747450998897753151868119085453880516169</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这次求出的不是素数，拿去分解一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">c = <span class="number">6027704939934795526809476320408984749353451163184148193613218899917989403800738729505135647560822568147775955030636790796412038749080589962404088890138</span></span><br><span class="line">n = <span class="number">2345049742327685796181532105032554795628696111708534285951012187089560814230641663133312117797131139088986342455315166062482479446527815702735474197358418746066993291802284464812612727625991647573889402281825863578807474887341632160586307943897790827019291411639756252138594856687013363652094621849674259604512491449809337670874218320926522274379234396955495643125680407916326561528774056618181536326260093822819468635513422755218190798616168156924793527386350080400722536575372660262573683231490166520738579903818495107264328324326819989553511070207494208500239603511665056894947107356065440333537271115434438827753</span></span><br><span class="line">e = <span class="number">1560967245790387854530279132085915310737094193704812456970549221459036227794862560384548159924112528879771688534015861357630951162558357151823378870345945435342412220708167081427844035498174919749839232806280901968067512188264340755833308035745702731211924571583963089915893479992177245815565483658484702813753029786985027579475059989141119719224961817402605977566829967197490932672021566512826377376988752959467389833419735737545201988916590880487156074463948048461415870071893002222885078350961871888123567241990517365430474025391208925638731208820904957752596249597885523540692851123131898267246576902438472358221</span></span><br><span class="line"></span><br><span class="line">q=<span class="number">62296403476880862016690545256535671712771160075146460730605631039440772133987</span></span><br><span class="line"></span><br><span class="line">p=<span class="built_in">int</span>(gmpy2.iroot(n//q**<span class="number">3</span>,<span class="number">5</span>)[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">assert</span> n==p**<span class="number">5</span>*q**<span class="number">3</span></span><br><span class="line">p1 = gmpy2.next_prime(p)</span><br><span class="line">q1 = gmpy2.next_prime(q)</span><br><span class="line">d=inverse(<span class="number">65537</span>,(p1-<span class="number">1</span>)*(q1-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c,d,p1*q1)))</span><br><span class="line"><span class="comment"># SICTF&#123;4d41abf4-c48a-4b82-aefe-0e05d59933a0&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="进阶-2024-New-Setback"><a href="#进阶-2024-New-Setback" class="headerlink" title="*[进阶]2024_New_Setback"></a>*[进阶]2024_New_Setback</h2><blockquote>
<p>出题人：Kicky_Mu</p>
</blockquote>
<p>附件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#user:mumu666</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag, Curve</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">happy</span>(<span class="params">C, P</span>):</span><br><span class="line">    c, d, p = C</span><br><span class="line">    u, v = P</span><br><span class="line">    <span class="keyword">return</span> (u**<span class="number">2</span> + v**<span class="number">2</span> - c**<span class="number">2</span> * (<span class="number">1</span> + d * u**<span class="number">2</span>*v**<span class="number">2</span>)) % p == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">new</span>(<span class="params">C, P, Q</span>):</span><br><span class="line">    c, d, p = C</span><br><span class="line">    u1, v1 = P</span><br><span class="line">    u2, v2 = Q</span><br><span class="line">    <span class="keyword">assert</span> happy(C, P) <span class="keyword">and</span> happy(C, Q)</span><br><span class="line">    u3 = (u1 * v2 + v1 * u2) * inverse(c * (<span class="number">1</span> + d * u1 * u2 * v1 * v2), p) % p</span><br><span class="line">    v3 = (v1 * v2 - u1 * u2) * inverse(c * (<span class="number">1</span> - d * u1 * u2 * v1 * v2), p) % p</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">int</span>(u3), <span class="built_in">int</span>(v3))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">year</span>(<span class="params">C, P, m</span>):</span><br><span class="line">    <span class="keyword">assert</span> happy(C, P)</span><br><span class="line">    c, d, p = C</span><br><span class="line">    B = <span class="built_in">bin</span>(m)[<span class="number">2</span>:]</span><br><span class="line">    l = <span class="built_in">len</span>(B)</span><br><span class="line">    u, v = P</span><br><span class="line">    PP = (-u, v)</span><br><span class="line">    O = new(C, P, PP)</span><br><span class="line">    Q = O</span><br><span class="line">    <span class="keyword">if</span> m == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> O</span><br><span class="line">    <span class="keyword">elif</span> m == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> P</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(l-<span class="number">1</span>):</span><br><span class="line">            P = new(C, P, P)</span><br><span class="line">        m = m - <span class="number">2</span>**(l-<span class="number">1</span>)</span><br><span class="line">        Q, P = P, (u, v)</span><br><span class="line">        <span class="keyword">return</span> new(C, Q, year(C, P, m))</span><br><span class="line"></span><br><span class="line">c, d, p = Curve</span><br><span class="line"></span><br><span class="line">flag = flag.lstrip(<span class="string">b&#x27;SICTF&#123;&#x27;</span>).rstrip(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line">l = <span class="built_in">len</span>(flag)</span><br><span class="line">l_flag, r_flag = flag[:l // <span class="number">2</span>], flag[l // <span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">m1, m2 = bytes_to_long(l_flag), bytes_to_long(r_flag)</span><br><span class="line"><span class="keyword">assert</span> m1 &lt; p <span class="keyword">and</span> m2 &lt; p</span><br><span class="line"></span><br><span class="line">P = (<span class="number">398011447251267732058427934569710020713094</span>, <span class="number">548950454294712661054528329798266699762662</span>)</span><br><span class="line">Q = (<span class="number">139255151342889674616838168412769112246165</span>, <span class="number">649791718379009629228240558980851356197207</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;happy(C, P) = <span class="subst">&#123;happy(Curve, P)&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;happy(C, Q) = <span class="subst">&#123;happy(Curve, Q)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;P = <span class="subst">&#123;P&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Q = <span class="subst">&#123;Q&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;m1 * P = <span class="subst">&#123;year(Curve, P, m1)&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;m2 * Q = <span class="subst">&#123;year(Curve, Q, m2)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">happy(C, P) = True</span></span><br><span class="line"><span class="string">happy(C, Q) = True</span></span><br><span class="line"><span class="string">P = (398011447251267732058427934569710020713094, 548950454294712661054528329798266699762662)</span></span><br><span class="line"><span class="string">Q = (139255151342889674616838168412769112246165, 649791718379009629228240558980851356197207)</span></span><br><span class="line"><span class="string">m1 * P = (730393937659426993430595540476247076383331, 461597565155009635099537158476419433012710)</span></span><br><span class="line"><span class="string">m2 * Q = (500532897653416664117493978883484252869079, 620853965501593867437705135137758828401933) </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>这里先求曲线的参数<code>c，d，p</code> </p>
<p>同 BabyRSA ，四个点得到四个多项式方程，再次 groebner_basis </p>
<p>会出现问题，发现 <code>p</code> 有两个小因子，处理掉</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">P = (<span class="number">398011447251267732058427934569710020713094</span>, <span class="number">548950454294712661054528329798266699762662</span>)</span><br><span class="line">Q = (<span class="number">139255151342889674616838168412769112246165</span>, <span class="number">649791718379009629228240558980851356197207</span>)</span><br><span class="line">C1 = (<span class="number">730393937659426993430595540476247076383331</span>, <span class="number">461597565155009635099537158476419433012710</span>)</span><br><span class="line">C2 = (<span class="number">500532897653416664117493978883484252869079</span>, <span class="number">620853965501593867437705135137758828401933</span>) </span><br><span class="line"></span><br><span class="line">PR.&lt;c,d&gt; = PolynomialRing(ZZ)</span><br><span class="line">f1 = P[<span class="number">0</span>]**<span class="number">2</span> + P[<span class="number">1</span>]**<span class="number">2</span> - c**<span class="number">2</span> * (<span class="number">1</span> + d * P[<span class="number">0</span>]**<span class="number">2</span>*P[<span class="number">1</span>]**<span class="number">2</span>)</span><br><span class="line">f2 = Q[<span class="number">0</span>]**<span class="number">2</span> + Q[<span class="number">1</span>]**<span class="number">2</span> - c**<span class="number">2</span> * (<span class="number">1</span> + d * Q[<span class="number">0</span>]**<span class="number">2</span>*Q[<span class="number">1</span>]**<span class="number">2</span>)</span><br><span class="line">f3 = C1[<span class="number">0</span>]**<span class="number">2</span> + C1[<span class="number">1</span>]**<span class="number">2</span> - c**<span class="number">2</span> * (<span class="number">1</span> + d * C1[<span class="number">0</span>]**<span class="number">2</span>*C1[<span class="number">1</span>]**<span class="number">2</span>)</span><br><span class="line">f4 = C2[<span class="number">0</span>]**<span class="number">2</span> + C2[<span class="number">1</span>]**<span class="number">2</span> - c**<span class="number">2</span> * (<span class="number">1</span> + d * C2[<span class="number">0</span>]**<span class="number">2</span>*C2[<span class="number">1</span>]**<span class="number">2</span>)</span><br><span class="line">res = Ideal([f1,f2,f3,f4]).groebner_basis()</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line">p = <span class="number">18983346087633426019400112058348303476269889</span></span><br><span class="line">d = p-<span class="number">1267506405851766513801807982398420823635884</span></span><br><span class="line">c2 = p-<span class="number">11256226422403535024125759760236595858726933</span></span><br><span class="line">p = p//<span class="number">3</span>//<span class="number">7</span></span><br><span class="line">PR.&lt;cc&gt; = PolynomialRing(Zmod(p))</span><br><span class="line">f = cc^<span class="number">2</span> - c2</span><br><span class="line">c = f.roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>朴实无华而又细致无比的出题人的wp：<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbXVtdWhoaC9wLzE4MDE5MjAw">2024 SICTF Round#3出题 crypto misc osint - Kicky_Mu - 博客园<i class="fa fa-external-link-alt"></i></span></p>
<p>看着复杂实则条理清晰的推理过程</p>
<p>一切准备工作(结论)都已做好的 <font color='orange'>La佬</font> ，直接拿来用即可  :<span class="exturl" data-url="aHR0cHM6Ly9sYXp6emFyby5naXRodWIuaW8vMjAyMS8wMS8yMC9jcnlwdG8t5puy57q/Lw==">曲线<i class="fa fa-external-link-alt"></i></span></p>
<hr>
<p>解题思路：</p>
<ul>
<li><p>将Edcurve通过换元映射，变换为常见的椭圆曲线的形式 (<strong>Edwards ——&gt; Montgomery ——&gt;Weierstrass </strong>)</p>
</li>
<li><p>求Dlp  <code>discrete_log</code> ，（在椭圆曲线中，<code>Q = nP</code> 存在两种意思，一种是标量积，一种是对数）</p>
</li>
</ul>
<hr>
<h3 id="Edwards-Curves-爱德华曲线"><a href="#Edwards-Curves-爱德华曲线" class="headerlink" title="Edwards  Curves(爱德华曲线)"></a>Edwards  Curves(爱德华曲线)</h3><p>一般方程：$x^2+y^2=c^2(1+dx^2y^2)$ </p>
<p>变换：$(\frac{x}{c})^2+(\frac{y}{c})^2=1+(dc^4(\frac{x}{c})^2(\frac{y}{c})^2)=&gt;X^2+Y^2=1+DX^2Y^2$ </p>
<p>其中：$X=\frac{x}{c},Y=\frac{y}{c},D = dc^4$</p>
<p>加法：$(x_1,y_1)+(x_2,y_2)=(\frac{x_1y_2+y_1x_2}{c(1+dx_1x_2y_1y_2)},\frac{y_1y_2-x_1x_2}{c(1-dx_1x_2y_1y_2)})$ </p>
<p>映射：$x^2+y^2=1+dx^2y^2\longmapsto Bv^2=u^3+Au^2+u$   (<strong>Edwards Curve ——&gt; Montgomery Curve</strong>)</p>
<p>其中：</p>
<p>$u=\frac{1+y}{1-y},v=\frac{2(1+y)}{x(1-y)}=\frac{2u}{x}$ </p>
<p>$A=\frac{4}{1-d}-2,B=\frac{1}{1-d}$ </p>
<h3 id="Montgomery-Curves-蒙哥马利曲线"><a href="#Montgomery-Curves-蒙哥马利曲线" class="headerlink" title="Montgomery  Curves(蒙哥马利曲线)"></a>Montgomery  Curves(蒙哥马利曲线)</h3><p>映射：$By^2=x^3+Ax^2+x \longmapsto v^2=u^3+au+b$   （<strong>Montgomery ——-&gt; Weierstrass</strong>)</p>
<p>其中：</p>
<p>$(x,y) \longmapsto (u,v)=(\frac{x}{B}+\frac{A}{3B},\frac{y}{B})$ </p>
<p>$a=\frac{3-A^2}{3B^2},b=\frac{2A^3-9A}{27B^3}$ </p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">P = (<span class="number">398011447251267732058427934569710020713094</span>, <span class="number">548950454294712661054528329798266699762662</span>)</span><br><span class="line">Q = (<span class="number">139255151342889674616838168412769112246165</span>, <span class="number">649791718379009629228240558980851356197207</span>)</span><br><span class="line">C1 = (<span class="number">730393937659426993430595540476247076383331</span>, <span class="number">461597565155009635099537158476419433012710</span>)</span><br><span class="line">C2 = (<span class="number">500532897653416664117493978883484252869079</span>, <span class="number">620853965501593867437705135137758828401933</span>) </span><br><span class="line"></span><br><span class="line">PR.&lt;c,d&gt; = PolynomialRing(ZZ)</span><br><span class="line">f1 = P[<span class="number">0</span>]**<span class="number">2</span> + P[<span class="number">1</span>]**<span class="number">2</span> - c**<span class="number">2</span> * (<span class="number">1</span> + d * P[<span class="number">0</span>]**<span class="number">2</span>*P[<span class="number">1</span>]**<span class="number">2</span>)</span><br><span class="line">f2 = Q[<span class="number">0</span>]**<span class="number">2</span> + Q[<span class="number">1</span>]**<span class="number">2</span> - c**<span class="number">2</span> * (<span class="number">1</span> + d * Q[<span class="number">0</span>]**<span class="number">2</span>*Q[<span class="number">1</span>]**<span class="number">2</span>)</span><br><span class="line">f3 = C1[<span class="number">0</span>]**<span class="number">2</span> + C1[<span class="number">1</span>]**<span class="number">2</span> - c**<span class="number">2</span> * (<span class="number">1</span> + d * C1[<span class="number">0</span>]**<span class="number">2</span>*C1[<span class="number">1</span>]**<span class="number">2</span>)</span><br><span class="line">f4 = C2[<span class="number">0</span>]**<span class="number">2</span> + C2[<span class="number">1</span>]**<span class="number">2</span> - c**<span class="number">2</span> * (<span class="number">1</span> + d * C2[<span class="number">0</span>]**<span class="number">2</span>*C2[<span class="number">1</span>]**<span class="number">2</span>)</span><br><span class="line">res = Ideal([f1,f2,f3,f4]).groebner_basis()</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line">p = <span class="number">18983346087633426019400112058348303476269889</span></span><br><span class="line">d = p-<span class="number">1267506405851766513801807982398420823635884</span></span><br><span class="line">c2 = p-<span class="number">11256226422403535024125759760236595858726933</span></span><br><span class="line">p = p//<span class="number">3</span>//<span class="number">7</span></span><br><span class="line">PR.&lt;cc&gt; = PolynomialRing(Zmod(p))</span><br><span class="line">f = cc^<span class="number">2</span> - c2</span><br><span class="line">c = f.roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">F = GF(p)</span><br><span class="line">dd = F(d*c^<span class="number">4</span>)</span><br><span class="line">A = F(<span class="number">2</span>) * F(a+dd) / F(a-dd)</span><br><span class="line">B = F(<span class="number">4</span>) / F(a-dd)</span><br><span class="line">a = F(<span class="number">3</span>-A^<span class="number">2</span>) / F(<span class="number">3</span>*B^<span class="number">2</span>)</span><br><span class="line">b = F(<span class="number">2</span>*A^<span class="number">3</span>-<span class="number">9</span>*A) / F(<span class="number">27</span>*B^<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edwards_to_ECC</span>(<span class="params">x,y</span>):</span><br><span class="line">    x1 = F(x) / F(c)</span><br><span class="line">    y1 = F(y) / F(c)</span><br><span class="line">    <span class="comment">#now curve is a*x^2+y^2 = 1+dd*x^2*y^2</span></span><br><span class="line"></span><br><span class="line">    x2 = F(<span class="number">1</span>+y1) / F(<span class="number">1</span>-y1)</span><br><span class="line">    y2 = F(x2) / F(x1)</span><br><span class="line">    <span class="comment">#now curve is By^2 = x^3 + Ax^2 + x</span></span><br><span class="line"></span><br><span class="line">    x3 = (F(<span class="number">3</span>*x2) + F(A)) / F(<span class="number">3</span>*B)</span><br><span class="line">    y3 = F(y2) / F(B)</span><br><span class="line">    <span class="comment">#now curve is y^2 = x^3 + ax + b</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (x3,y3)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ECC_to_edwards</span>(<span class="params">x,y</span>):</span><br><span class="line">    x2 = (F(x) * F(<span class="number">3</span>*B) - F(A)) / F(<span class="number">3</span>)</span><br><span class="line">    y2 = F(y) * F(B)</span><br><span class="line">    <span class="comment">#now curve is By^2 = x^3 + Ax^2 + x</span></span><br><span class="line"></span><br><span class="line">    x1 = F(x2) / F(y2)</span><br><span class="line">    y1 = F(<span class="number">1</span>) - (F(<span class="number">2</span>) / F(x2+<span class="number">1</span>))</span><br><span class="line">    <span class="comment">#now curve is a*x^2+y^2 = 1+dd*x^2*y^2</span></span><br><span class="line"></span><br><span class="line">    x_ = F(x1) * F(c)</span><br><span class="line">    y_ = F(y1) * F(c)</span><br><span class="line">    <span class="comment">#now curve is a*x^2+y^2 = c^2(1+d*x^2*y^2)</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (x_,y_)</span><br><span class="line"> </span><br><span class="line">E = EllipticCurve(GF(p), [a, b])</span><br><span class="line">P = E(edwards_to_ECC(P[<span class="number">0</span>],P[<span class="number">1</span>]))</span><br><span class="line">Q = E(edwards_to_ECC(Q[<span class="number">0</span>],Q[<span class="number">1</span>]))</span><br><span class="line">C1 = E(edwards_to_ECC(C1[<span class="number">0</span>],C1[<span class="number">1</span>]))</span><br><span class="line">C2 = E(edwards_to_ECC(C2[<span class="number">0</span>],C2[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m1 = <span class="built_in">int</span>(P.discrete_log(C1))</span><br><span class="line">m2 = <span class="built_in">int</span>(Q.discrete_log(C2))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m1)+long_to_bytes(m2))</span><br><span class="line"><span class="comment"># #SICTF&#123;nOt_50_3a5Y_Edw4rDs_3LlipT!c_CURv3&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="常见形式的椭圆曲线-Weierstrass-求法：eG-e-G-gx-gy-gx即为flag"><a href="#常见形式的椭圆曲线-Weierstrass-求法：eG-e-G-gx-gy-gx即为flag" class="headerlink" title="常见形式的椭圆曲线(Weierstrass)求法：eG = e*G(gx,gy) (gx即为flag)"></a>常见形式的椭圆曲线(Weierstrass)求法：<code>eG = e*G(gx,gy)</code> (gx即为flag)</h3><p>给出<code>eG、e</code></p>
<p>步骤：</p>
<ul>
<li>用sage中的order()函数求解出该椭圆曲线的阶n</li>
<li>求出e关于阶n的逆元，记为t</li>
<li>求倍点<code>G=t*(eG)</code> ，横坐标即为所求</li>
</ul>
<p>参考：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly90YW5nY3V4aWFvamlrdWFpLnh5ei9wb3N0LzY3OGQ1ZWMuaHRtbA==">2024-SICTF-#Round3-wp-crypto<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXh0ZXJqaWUuZ2l0aHViLmlvLzIwMjQvMDIvMTYv6LWb6aKY5aSN546wL1NJQ1RGcm91bmQzLyPpk5zljKA=">SICTFround3<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Wp</tag>
      </tags>
  </entry>
  <entry>
    <title>SCTF2024</title>
    <url>/Crypto/SCTF2024/</url>
    <content><![CDATA[<p>好久没更新了，之前的补一篇</p>
<span id="more"></span>
<h1 id="Signin"><a href="#Signin" class="headerlink" title="Signin"></a>Signin</h1><blockquote>
<p>Oops! Ψ is not good for encrypt, but good for gift.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSA</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, nbits</span>):</span><br><span class="line">        self.nbits = nbits</span><br><span class="line">        self.p, self.q = self.getPrimes()</span><br><span class="line">        self.n = self.p*self.q</span><br><span class="line">        self.Gift = self.Gift()</span><br><span class="line">        self.priv, self.pub = self.keyGen()</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getPrimes</span>(<span class="params">self</span>):</span><br><span class="line">        nbits = self.nbits</span><br><span class="line">        p = random_prime(<span class="number">2</span>^(nbits-<span class="number">1</span>),lbound=<span class="number">2</span>^(nbits-<span class="number">2</span>))</span><br><span class="line">        q = random_prime(<span class="number">2</span>^(nbits-<span class="number">1</span>),lbound=<span class="number">2</span>^(nbits-<span class="number">2</span>))</span><br><span class="line">        <span class="keyword">while</span> p == q:</span><br><span class="line">            q = random_prime(<span class="number">2</span>^(nbits-<span class="number">1</span>),lbound=<span class="number">2</span>^(nbits-<span class="number">2</span>))</span><br><span class="line">        <span class="keyword">return</span> p,q</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Gift</span>(<span class="params">self</span>):</span><br><span class="line">        p,q = self.p, self.q</span><br><span class="line">        <span class="keyword">return</span> (p^<span class="number">2</span> + p + <span class="number">1</span>)*(q^<span class="number">2</span> + q + <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">keyGen</span>(<span class="params">self</span>):</span><br><span class="line">        nbits = self.nbits</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            d = randint(<span class="number">2</span>^(nbits//<span class="number">4</span>),<span class="number">2</span>^(nbits//<span class="number">2</span>))</span><br><span class="line">            <span class="keyword">if</span> gcd(d,self.Gift) != <span class="number">1</span>:</span><br><span class="line">                d = randint(<span class="number">2</span>^(nbits//<span class="number">4</span>),<span class="number">2</span>^(nbits//<span class="number">2</span>))</span><br><span class="line">            e = <span class="built_in">pow</span>(d,-<span class="number">1</span>,self.phi)</span><br><span class="line">            <span class="keyword">return</span> (self.p,self.q,self.n,e,d),(self.n,e)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">RRR = RSA(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">bp = long_to_bytes(<span class="built_in">int</span>(RRR.p))</span><br><span class="line">FLAG = <span class="string">&#x27;SCTF&#123;&#x27;</span>+md5(bp).hexdigest()+<span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;N = <span class="subst">&#123;RRR.n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e = <span class="subst">&#123;RRR.pub[<span class="number">1</span>]&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">N = 32261421478213846055712670966502489204755328170115455046538351164751104619671102517649635534043658087736634695616391757439732095084483689790126957681118278054587893972547230081514687941476504846573346232349396528794022902849402462140720882761797608629678538971832857107919821058604542569600500431547986211951</span></span><br><span class="line"><span class="string">e = 334450817132213889699916301332076676907807495738301743367532551341259554597455532787632746522806063413194057583998858669641413549469205803510032623432057274574904024415310727712701532706683404590321555542304471243731711502894688623443411522742837178384157350652336133957839779184278283984964616921311020965540513988059163842300284809747927188585982778365798558959611785248767075169464495691092816641600277394649073668575637386621433598176627864284154484501969887686377152288296838258930293614942020655916701799531971307171423974651394156780269830631029915305188230547099840604668445612429756706738202411074392821840</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>题目描述猜测 gift 就是 phi</p>
<script type="math/tex; mode=display">
ed= 1 +k(p^2+p+1)(q^2+q+1)</script><p>令 s = p+q，最后得到表达式</p>
<script type="math/tex; mode=display">
ed= 1 +k(n^2+ns+s+s^2-n+1)</script><p>二元copper算出 s 和 k ，最后解方程得到 p</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">        d = f.degree()</span><br><span class="line"></span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality()</span><br><span class="line"></span><br><span class="line">    f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">    G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line">        base = N ^ (m - i) * f ^ i</span><br><span class="line">        <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">            g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">            G.append(g)</span><br><span class="line"></span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line">    factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line"></span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line"></span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, <span class="number">1</span> / factor)</span><br><span class="line"></span><br><span class="line">    H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B * monomials):</span><br><span class="line">        H.append(h)</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">            H.pop()</span><br><span class="line">        <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">            roots = []</span><br><span class="line">            <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">                root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">                roots.append(root)</span><br><span class="line">            <span class="keyword">return</span> roots</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">n = <span class="number">32261421478213846055712670966502489204755328170115455046538351164751104619671102517649635534043658087736634695616391757439732095084483689790126957681118278054587893972547230081514687941476504846573346232349396528794022902849402462140720882761797608629678538971832857107919821058604542569600500431547986211951</span></span><br><span class="line">e = <span class="number">334450817132213889699916301332076676907807495738301743367532551341259554597455532787632746522806063413194057583998858669641413549469205803510032623432057274574904024415310727712701532706683404590321555542304471243731711502894688623443411522742837178384157350652336133957839779184278283984964616921311020965540513988059163842300284809747927188585982778365798558959611785248767075169464495691092816641600277394649073668575637386621433598176627864284154484501969887686377152288296838258930293614942020655916701799531971307171423974651394156780269830631029915305188230547099840604668445612429756706738202411074392821840</span></span><br><span class="line"></span><br><span class="line">R.&lt;s,k&gt; = PolynomialRing(Zmod(e))</span><br><span class="line">f = <span class="number">1</span>+k*(n^<span class="number">2</span>+n*s+s+s^<span class="number">2</span>-n+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">bounds=(<span class="number">2</span>^<span class="number">512</span>,<span class="number">2</span>^<span class="number">256</span>)</span><br><span class="line"><span class="built_in">print</span>(small_roots(f , bounds , m=<span class="number">1</span> , d=<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(root)</span><br><span class="line"></span><br><span class="line">bp = long_to_bytes(<span class="built_in">int</span>(p))</span><br><span class="line">flag = <span class="string">&#x27;SCTF&#123;&#x27;</span>+hashlib.md5(bp).hexdigest()+<span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<h1 id="不完全阻塞干扰"><a href="#不完全阻塞干扰" class="headerlink" title="不完全阻塞干扰"></a>不完全阻塞干扰</h1><blockquote>
<p>Our support forces had a hard time recovering some of the information, hard but useful.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The ship crashed into the sun, causing a massive magnetic storm</span></span><br><span class="line"><span class="comment">#part of script</span></span><br><span class="line">msg = bytes_to_long(FLAG)</span><br><span class="line">n = p^<span class="number">5</span>*q^<span class="number">2</span></span><br><span class="line">phi = p^<span class="number">4</span>*(p-<span class="number">1</span>)*q*(q-<span class="number">1</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = inverse(d,phi)</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="comment"># c = 145554802564989933772666853449758467748433820771006616874558211691441588216921262672588167631397770260815821197485462873358280668164496459053150659240485200305314288108259163251006446515109018138298662011636423264380170119025895000021651886702521266669653335874489612060473962259596489445807308673497717101487224092493721535129391781431853820808463529747944795809850314965769365750993208968116864575686200409653590102945619744853690854644813177444995458528447525184291487005845375945194236352007426925987404637468097524735905540030962884807790630389799495153548300450435815577962308635103143187386444035094151992129110267595908492217520416633466787688326809639286703608138336958958449724993250735997663382433125872982238289419769011271925043792124263306262445811864346081207309546599603914842331643196984128658943528999381048833301951569809038023921101787071345517702911344900151843968213911899353962451480195808768038035044446206153179737023140055693141790385662942050774439391111437140968754546526191031278186881116757268998843581015398070043778631790328583529667194481319953424389090869226474999123124532354330671462280959215310810005231660418399403337476289138527331553267291013945347058144254374287422377547369897793812634181778309679601143245890494670013019155942690562552431527149178906855998534415120428884098317318129659099377634006938812654262148522236268027388683027513663867042278407716812565374141362015467076472409873946275500942547114202939578755575249750674734066843408758067001891408572444119999801055605577737379889503505649865554353749621313679734666376467890526136184241450593948838055612677564667946098308716892133196862716086041690426537245252116765796203427832657608512488619438752378624483485364908432609100523022628791451171084583484294929190998796485805496852608557456380717623462846198636093701726099310737244471075079541022111303662778829695340275795782631315412134758717966727565043332335558077486037869874106819581519353856396937832498623662166446395755447101393825864584024239951058366713573567250863658531585064635727070458886746791722270803893438211751165831616861912569513431821959562450032831904268205845224077709362068478</span></span><br></pre></td></tr></table></figure>
<p>cert.pem</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIIIFQKCA4AGfwqk6XSmOh/+jVwj5dPEMWU65BzHRvMF9iqfGT8iSGy37xsnVjSB</span><br><span class="line">j0bQdSpROeGZGCcfoNfSe8Zg0rckFNCOpSyIN/lJx7rswwKboxcn7zvxINmSbALX</span><br><span class="line">QS8YfpjcVt0HuYfSzBka1WFkoUTyiy9woV0QVYik8n+7KJH8UnvWiQpfeVtcSEdq</span><br><span class="line">a/nftnt+Hrx7Gwhs0otYxolVv99E7M4R/6zfZUVRsVm3gyBAzCjujr6kj4Zy1T49</span><br><span class="line">6I/Pu1+ydrUDiA3TTVmTM13fjMuWwbTXn1AtchBHZa2cKxhYoXrz1b5E+jy/S47r</span><br><span class="line">lCqjlCo4cdLGWscCiRI/wun5sly/y9eEEJYGD6UEw6B7WRSTxkyI0LtFKFqFtffV</span><br><span class="line">nbmPqgDCzT+7Y9pZkgXxyrDfUs97QxoO5KfjVpZUbOnQPvWV7O6S0hQskul9J0ST</span><br><span class="line">lwNFW0xw3sJ8Mh7GuDwCliLoOp4NVdCyWNldTmEpGGXdp23GGfzpV3mQQpxud+nU</span><br><span class="line">B4HjsvRJcBuD6LDGxm6zgPlkc+XUIu/uiysOiLcWsAp5ydUUyjrZ0t7lJmCf+VQX</span><br><span class="line">MqQZjRG52/uy5Vwk2A6lItB4bjNV8jYGpdOKct5O78i2v8SCJIooYstp2ODj0xZZ</span><br><span class="line">fanYCCi+hQVPrxX8NpyqyvuBXGlzwXGUBoPVahoZZ7Cbf/o/vlsuCGmXWdhNcWA/</span><br><span class="line">UWRHaWuycyKmnzn2yiU+ANyVVdX5cygHDEZ/NmPMSJqtEw8oxC81v4jFcZIKuSrL</span><br><span class="line">j3XQPjWnUQPFvZbwYclr0Cr24dGRsN0WS8chN3AD7b9dPvZaXpBGOFNWtSFiO+<span class="number">43</span></span><br><span class="line">8WSFCgp6+w7U5+i9mv4SmPfVMrya2UGBLTMq7OddHMyx/2n9QrMfJIrledng1qFL</span><br><span class="line">BUbnhLqUDjK9AcOV34/0WEBARitUefoHM21QPcMy5w/AbZRjKX/AQrYj1W+H76pS</span><br><span class="line">WptYDjFNkNEhGJPtQHomUI3qoKE8nujJArnhw6Av6aUUUsAu573MhcDv9jiR4kcD</span><br><span class="line">vSZdnJ2/RW4q+UCVOLzg/sx+urICZqqrBsdmw+ps2py5ul4dAkt9w9c+dvajMxl7</span><br><span class="line">rYfE+zTVZaABSqxygl5Brc/q2tyHrO9ArYS3xVaRq61WG+BVDqCpiEcMQnQyrLj+</span><br><span class="line">srnS0lmPsgibuRu9nLGZ6JLTYWTYvz7NVFdqlxNAR6EtqEIHSFu05QIDAQABAoID</span><br><span class="line">gAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoGBAIBj0KIYduXOHiEB</span><br><span class="line">wgAVUpBm7Zl2iC0QAqKe/g8v38wnQ/yaS1tlHMlxCGmeyi+x89kxdbrjQ+fJLkpB</span><br><span class="line">xy0F5XAZQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAoGBAOTw/kn5rhSSwJegqYj6cYdmJf5PzgWw</span><br><span class="line">IE8f30PsZLTaxpnSjhZu/fx1YtGeWMNJPZEANlzyhAtGwPbujZZIBxcP8sE8TrgB</span><br><span class="line">LsqzeGKjkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAA</span><br></pre></td></tr></table></figure>
<p>私钥证书的一部分，手动转换成16进制，</p>
<p>根据c的大小判断出p，q是1024bit 的，n是 7168 bit 的</p>
<p>根据他们的大小按顺序提取出n、e、d、p、q</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">30</span> <span class="number">82</span> 08 <span class="number">15</span></span><br><span class="line">02 <span class="number">82</span> 03 <span class="number">80</span></span><br><span class="line">06 7f 0a a4 e9 <span class="number">74</span> a6 3a 1f fe 8d 5c <span class="number">23</span> e5 d3 c4 <span class="number">31</span> <span class="number">65</span> 3a e4 1c c7 <span class="number">46</span> f3 05 f6 2a 9f <span class="number">19</span> 3f <span class="number">22</span> <span class="number">48</span> 6c b7 ef 1b <span class="number">27</span> <span class="number">56</span> <span class="number">34</span> <span class="number">81</span> 8f <span class="number">46</span> d0 <span class="number">75</span> 2a <span class="number">51</span> <span class="number">39</span> e1 <span class="number">99</span> <span class="number">18</span> <span class="number">27</span> 1f a0 d7 d2 7b c6 <span class="number">60</span> d2 b7 <span class="number">24</span> <span class="number">14</span> d0 8e a5 2c <span class="number">88</span> <span class="number">37</span> f9 <span class="number">49</span> c7 ba ec c3 02 9b a3 <span class="number">17</span> <span class="number">27</span> ef 3b f1 <span class="number">20</span> d9 <span class="number">92</span> 6c 02 d7 <span class="number">41</span> 2f <span class="number">18</span> 7e <span class="number">98</span> dc <span class="number">56</span> dd 07 b9 <span class="number">87</span> d2 cc <span class="number">19</span> 1a d5 <span class="number">61</span> <span class="number">64</span> a1 <span class="number">44</span> f2 8b 2f <span class="number">70</span> a1 5d <span class="number">10</span> <span class="number">55</span> <span class="number">88</span> a4 f2 7f bb <span class="number">28</span> <span class="number">91</span> fc <span class="number">52</span> 7b d6 <span class="number">89</span> 0a 5f <span class="number">79</span> 5b 5c <span class="number">48</span> <span class="number">47</span> 6a 6b f9 df b6 7b 7e 1e bc 7b 1b 08 6c d2 8b <span class="number">58</span> c6 <span class="number">89</span> <span class="number">55</span> bf df <span class="number">44</span> ec ce <span class="number">11</span> ff ac df <span class="number">65</span> <span class="number">45</span> <span class="number">51</span> b1 <span class="number">59</span> b7 <span class="number">83</span> <span class="number">20</span> <span class="number">40</span> cc <span class="number">28</span> ee 8e be a4 8f <span class="number">86</span> <span class="number">72</span> d5 3e 3d e8 8f cf bb 5f b2 <span class="number">76</span> b5 03 <span class="number">88</span> 0d d3 4d <span class="number">59</span> <span class="number">93</span> <span class="number">33</span> 5d df 8c cb <span class="number">96</span> c1 b4 d7 9f <span class="number">50</span> 2d <span class="number">72</span> <span class="number">10</span> <span class="number">47</span> <span class="number">65</span> ad 9c 2b <span class="number">18</span> <span class="number">58</span> a1 7a f3 d5 be <span class="number">44</span> fa 3c bf 4b 8e eb <span class="number">94</span> 2a a3 <span class="number">94</span> 2a <span class="number">38</span> <span class="number">71</span> d2 c6 5a c7 02 <span class="number">89</span> <span class="number">12</span> 3f c2 e9 f9 b2 5c bf cb d7 <span class="number">84</span> <span class="number">10</span> <span class="number">96</span> 06 0f a5 04 c3 a0 7b <span class="number">59</span> <span class="number">14</span> <span class="number">93</span> c6 4c <span class="number">88</span> d0 bb <span class="number">45</span> <span class="number">28</span> 5a <span class="number">85</span> b5 f7 d5 9d b9 8f aa <span class="number">00</span> c2 cd 3f bb <span class="number">63</span> da <span class="number">59</span> <span class="number">92</span> 05 f1 ca b0 df <span class="number">52</span> cf 7b <span class="number">43</span> 1a 0e e4 a7 e3 <span class="number">56</span> <span class="number">96</span> <span class="number">54</span> 6c e9 d0 3e f5 <span class="number">95</span> ec ee <span class="number">92</span> d2 <span class="number">14</span> 2c <span class="number">92</span> e9 7d <span class="number">27</span> <span class="number">44</span> <span class="number">93</span> <span class="number">97</span> 03 <span class="number">45</span> 5b 4c <span class="number">70</span> de c2 7c <span class="number">32</span> 1e c6 b8 3c 02 <span class="number">96</span> <span class="number">22</span> e8 3a 9e 0d <span class="number">55</span> d0 b2 <span class="number">58</span> d9 5d 4e <span class="number">61</span> <span class="number">29</span> <span class="number">18</span> <span class="number">65</span> dd a7 6d c6 <span class="number">19</span> fc e9 <span class="number">57</span> <span class="number">79</span> <span class="number">90</span> <span class="number">42</span> 9c 6e <span class="number">77</span> e9 d4 07 <span class="number">81</span> e3 b2 f4 <span class="number">49</span> <span class="number">70</span> 1b <span class="number">83</span> e8 b0 c6 c6 6e b3 <span class="number">80</span> f9 <span class="number">64</span> <span class="number">73</span> e5 d4 <span class="number">22</span> ef ee 8b 2b 0e <span class="number">88</span> b7 <span class="number">16</span> b0 0a <span class="number">79</span> c9 d5 <span class="number">14</span> ca 3a d9 d2 de e5 <span class="number">26</span> <span class="number">60</span> 9f f9 <span class="number">54</span> <span class="number">17</span> <span class="number">32</span> a4 <span class="number">19</span> 8d <span class="number">11</span> b9 db fb b2 e5 5c <span class="number">24</span> d8 0e a5 <span class="number">22</span> d0 <span class="number">78</span> 6e <span class="number">33</span> <span class="number">55</span> f2 <span class="number">36</span> 06 a5 d3 8a <span class="number">72</span> de 4e ef c8 b6 bf c4 <span class="number">82</span> <span class="number">24</span> 8a <span class="number">28</span> <span class="number">62</span> cb <span class="number">69</span> d8 e0 e3 d3 <span class="number">16</span> <span class="number">59</span> 7d a9 d8 08 <span class="number">28</span> be <span class="number">85</span> 05 4f af <span class="number">15</span> fc <span class="number">36</span> 9c aa ca fb <span class="number">81</span> 5c <span class="number">69</span> <span class="number">73</span> c1 <span class="number">71</span> <span class="number">94</span> 06 <span class="number">83</span> d5 6a 1a <span class="number">19</span> <span class="number">67</span> b0 9b 7f fa 3f be 5b 2e 08 <span class="number">69</span> <span class="number">97</span> <span class="number">59</span> d8 4d <span class="number">71</span> <span class="number">60</span> 3f <span class="number">51</span> <span class="number">64</span> <span class="number">47</span> <span class="number">69</span> 6b b2 <span class="number">73</span> <span class="number">22</span> a6 9f <span class="number">39</span> f6 ca <span class="number">25</span> 3e <span class="number">00</span> dc <span class="number">95</span> <span class="number">55</span> d5 f9 <span class="number">73</span> <span class="number">28</span> 07 0c <span class="number">46</span> 7f <span class="number">36</span> <span class="number">63</span> cc <span class="number">48</span> 9a ad <span class="number">13</span> 0f <span class="number">28</span> c4 2f <span class="number">35</span> bf <span class="number">88</span> c5 <span class="number">71</span> <span class="number">92</span> 0a b9 2a cb 8f <span class="number">75</span> d0 3e <span class="number">35</span> a7 <span class="number">51</span> 03 c5 bd <span class="number">96</span> f0 <span class="number">61</span> c9 6b d0 2a f6 e1 d1 <span class="number">91</span> b0 dd <span class="number">16</span> 4b c7 <span class="number">21</span> <span class="number">37</span> <span class="number">70</span> 03 ed bf 5d 3e f6 5a 5e <span class="number">90</span> <span class="number">46</span> <span class="number">38</span> <span class="number">53</span> <span class="number">56</span> b5 <span class="number">21</span> <span class="number">62</span> 3b ee <span class="number">37</span> f1 <span class="number">64</span> <span class="number">85</span> 0a 0a 7a fb 0e d4 e7 e8 bd 9a fe <span class="number">12</span> <span class="number">98</span> f7 d5 <span class="number">32</span> bc 9a d9 <span class="number">41</span> <span class="number">81</span> 2d <span class="number">33</span> 2a ec e7 5d 1c cc b1 ff <span class="number">69</span> fd <span class="number">42</span> b3 1f <span class="number">24</span> 8a e5 <span class="number">79</span> d9 e0 d6 a1 4b 05 <span class="number">46</span> e7 <span class="number">84</span> ba <span class="number">94</span> 0e <span class="number">32</span> bd 01 c3 <span class="number">95</span> df 8f f4 <span class="number">58</span> <span class="number">40</span> <span class="number">40</span> <span class="number">46</span> 2b <span class="number">54</span> <span class="number">79</span> fa 07 <span class="number">33</span> 6d <span class="number">50</span> 3d c3 <span class="number">32</span> e7 0f c0 6d <span class="number">94</span> <span class="number">63</span> <span class="number">29</span> 7f c0 <span class="number">42</span> b6 <span class="number">23</span> d5 6f <span class="number">87</span> ef aa <span class="number">52</span> 5a 9b <span class="number">58</span> 0e <span class="number">31</span> 4d <span class="number">90</span> d1 <span class="number">21</span> <span class="number">18</span> <span class="number">93</span> ed <span class="number">40</span> 7a <span class="number">26</span> <span class="number">50</span> 8d ea a0 a1 3c 9e e8 c9 02 b9 e1 c3 a0 2f e9 a5 <span class="number">14</span> <span class="number">52</span> c0 2e e7 bd cc <span class="number">85</span> c0 ef f6 <span class="number">38</span> <span class="number">91</span> e2 <span class="number">47</span> 03 bd <span class="number">26</span> 5d 9c 9d bf <span class="number">45</span> 6e 2a f9 <span class="number">40</span> <span class="number">95</span> <span class="number">38</span> bc e0 fe cc 7e ba b2 02 <span class="number">66</span> aa ab 06 c7 <span class="number">66</span> c3 ea 6c da 9c b9 ba 5e 1d 02 4b 7d c3 d7 3e <span class="number">76</span> f6 a3 <span class="number">33</span> <span class="number">19</span> 7b ad <span class="number">87</span> c4 fb <span class="number">34</span> d5 <span class="number">65</span> a0 01 4a ac <span class="number">72</span> <span class="number">82</span> 5e <span class="number">41</span> ad cf ea da dc <span class="number">87</span> ac ef <span class="number">40</span> ad <span class="number">84</span> b7 c5 <span class="number">56</span> <span class="number">91</span> ab ad <span class="number">56</span> 1b e0 <span class="number">55</span> 0e a0 a9 <span class="number">88</span> <span class="number">47</span> 0c <span class="number">42</span> <span class="number">74</span> <span class="number">32</span> ac b8 fe b2 b9 d2 d2 <span class="number">59</span> 8f b2 08 9b b9 1b bd 9c b1 <span class="number">99</span> e8 <span class="number">92</span> d3 <span class="number">61</span> <span class="number">64</span> d8 bf 3e cd <span class="number">54</span> <span class="number">57</span> 6a <span class="number">97</span> <span class="number">13</span> <span class="number">40</span> <span class="number">47</span> a1 2d a8 <span class="number">42</span> 07 <span class="number">48</span> 5b b4 e5</span><br><span class="line">02 03</span><br><span class="line">01 <span class="number">00</span> 01</span><br><span class="line">02 <span class="number">82</span> 03</span><br><span class="line"><span class="number">80</span> 04 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">02 <span class="number">81</span> <span class="number">81</span></span><br><span class="line"><span class="number">00</span> <span class="number">80</span> <span class="number">63</span> d0 a2 <span class="number">18</span> <span class="number">76</span> e5 ce 1e <span class="number">21</span> 01 c2 <span class="number">00</span> <span class="number">15</span> <span class="number">52</span> <span class="number">90</span> <span class="number">66</span> ed <span class="number">99</span> <span class="number">76</span> <span class="number">88</span> 2d <span class="number">10</span> 02 a2 9e fe 0f 2f df cc <span class="number">27</span> <span class="number">43</span> fc 9a 4b 5b <span class="number">65</span> 1c c9 <span class="number">71</span> 08 <span class="number">69</span> 9e ca 2f b1 f3 d9 <span class="number">31</span> <span class="number">75</span> ba e3 <span class="number">43</span> e7 c9 2e 4a <span class="number">41</span> c7 2d 05 e5 <span class="number">70</span> <span class="number">19</span> <span class="number">40</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">02 <span class="number">81</span> <span class="number">81</span></span><br><span class="line"><span class="number">00</span> e4 f0 fe <span class="number">49</span> f9 ae <span class="number">14</span> <span class="number">92</span> c0 <span class="number">97</span> a0 a9 <span class="number">88</span> fa <span class="number">71</span> <span class="number">87</span> <span class="number">66</span> <span class="number">25</span> fe 4f ce 05 b0 <span class="number">20</span> 4f 1f df <span class="number">43</span> ec <span class="number">64</span> b4 da c6 <span class="number">99</span> d2 8e <span class="number">16</span> 6e fd fc <span class="number">75</span> <span class="number">62</span> d1 9e <span class="number">58</span> c3 <span class="number">49</span> 3d <span class="number">91</span> <span class="number">00</span> <span class="number">36</span> 5c f2 <span class="number">84</span> 0b <span class="number">46</span> c0 f6 ee 8d <span class="number">96</span> <span class="number">48</span> 07 <span class="number">17</span> 0f f2 c1 3c 4e b8 01 2e ca b3 <span class="number">78</span> <span class="number">62</span> a3 <span class="number">90</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br></pre></td></tr></table></figure>
<p>可以看出是p和q的高位泄露攻击，也用二元copper解</p>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">        d = f.degree()</span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality()</span><br><span class="line">    f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line">    G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>):</span><br><span class="line">        base = N ^ (m - i) * f ^ i</span><br><span class="line">        <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">            g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">            G.append(g)</span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line">    factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, <span class="number">1</span> / factor)</span><br><span class="line">    H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B * monomials):</span><br><span class="line">        H.append(h)</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">            H.pop()</span><br><span class="line">        <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">            roots = []</span><br><span class="line">            <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">                root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">                roots.append(root)</span><br><span class="line">            <span class="keyword">return</span> roots</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">n = <span class="number">0x0067f0aa4e974a63a1ffe8d5c23e5d3c431653ae41cc746f305f62a9f193f22486cb7ef1b275634818f46d0752a5139e19918271fa0d7d27bc660d2b72414d08ea52c8837f949c7baecc3029ba31727ef3bf120d9926c02d7412f187e98dc56dd07b987d2cc191ad56164a144f28b2f70a15d105588a4f27fbb2891fc527bd6890a5f795b5c48476a6bf9dfb67b7e1ebc7b1b086cd28b58c68955bfdf44ecce11ffacdf654551b159b7832040cc28ee8ebea48f8672d53e3de88fcfbb5fb276b503880dd34d5993335ddf8ccb96c1b4d79f502d72104765ad9c2b1858a17af3d5be44fa3cbf4b8eeb942aa3942a3871d2c65ac70289123fc2e9f9b25cbfcbd7841096060fa504c3a07b591493c64c88d0bb45285a85b5f7d59db98faa00c2cd3fbb63da599205f1cab0df52cf7b431a0ee4a7e35696546ce9d03ef595ecee92d2142c92e97d2744939703455b4c70dec27c321ec6b83c029622e83a9e0d55d0b258d95d4e61291865dda76dc619fce9577990429c6e77e9d40781e3b2f449701b83e8b0c6c66eb380f96473e5d422efee8b2b0e88b716b00a79c9d514ca3ad9d2dee526609ff9541732a4198d11b9dbfbb2e55c24d80ea522d0786e3355f23606a5d38a72de4eefc8b6bfc482248a2862cb69d8e0e3d316597da9d80828be85054faf15fc369caacafb815c6973c171940683d56a1a1967b09b7ffa3fbe5b2e08699759d84d71603f516447696bb27322a69f39f6ca253e00dc9555d5f97328070c467f3663cc489aad130f28c42f35bf88c571920ab92acb8f75d03e35a75103c5bd96f061c96bd02af6e1d191b0dd164bc721377003edbf5d3ef65a5e9046385356b521623bee37f164850a0a7afb0ed4e7e8bd9afe1298f7d532bc9ad941812d332aece75d1cccb1ff69fd42b31f248ae579d9e0d6a14b0546e784ba940e32bd01c395df8ff4584040462b5479fa07336d503dc332e70fc06d9463297fc042b623d56f87efaa525a9b580e314d90d1211893ed407a26508deaa0a13c9ee8c902b9e1c3a02fe9a51452c02ee7bdcc85c0eff63891e24703bd265d9c9dbf456e2af9409538bce0fecc7ebab20266aaab06c766c3ea6cda9cb9ba5e1d024b7dc3d73e76f6a333197bad87c4fb34d565a0014aac72825e41adcfeadadc87acef40ad84b7c55691abad561be0550ea0a988470c427432acb8feb2b9d2d2598fb2089bb91bbd9cb199e892d36164d8bf3ecd54576a97134047a12da84207485bb4e5</span></span><br><span class="line">c = <span class="numberspan></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">p_h = <span class="number">0x008063d0a21876e5ce1e2101c20015529066ed9976882d1002a29efe0f2fdfcc2743fc9a4b5b651cc97108699eca2fb1f3d93175bae343e7c92e4a41c72d05e57019400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</span></span><br><span class="line">q_h = <span class="number">0x00e4f0fe49f9ae1492c097a0a988fa71876625fe4fce05b0204f1fdf43ec64b4dac699d28e166efdfc7562d19e58c3493d9100365cf2840b46c0f6ee8d964807170ff2c13c4eb8012ecab37862a3900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</span></span><br><span class="line"></span><br><span class="line">R.&lt;x,y&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = (p_h + x)^<span class="number">5</span> * (q_h + y)^<span class="number">2</span></span><br><span class="line">res = small_roots(f,(<span class="number">2</span>^<span class="number">496</span>,<span class="number">2</span>^<span class="number">400</span>),m=<span class="number">2</span>,d=<span class="number">3</span>)</span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line">p = p_h + res[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">q = q_h + res[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">phi = p^<span class="number">4</span>*(p-<span class="number">1</span>)*q*(q-<span class="number">1</span>)</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"><span class="comment"># SCTF&#123;0ne_4rgum3nt_1s_r0tt3n_0r4ng3s,_th3_wh0le_cert1fic4t3_1s_r0tt3n_0r4ng3s:XD&#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="Whisper"><a href="#Whisper" class="headerlink" title="Whisper"></a>Whisper</h1><blockquote>
<p>Two public key certificates were monitored. And Mr. Dual intercepted a ciphertext. Just when he was in the rough, a Careless Whisper told that the length of a key parameter is carelessly set to 345 bits.</p>
<p>cipher.txt</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CO麲鄌i棩T赁|熠漾?t紎m|L_??`[玩鉝o`&#123;鍼<span class="number">81</span>?T拵A囅瘭鲐Fq[麲暡.!n庆?m丁漝檋??ｅ?z螨丼O媍虱亻鳧蹌&#123;ｋV</span><br></pre></td></tr></table></figure>
<blockquote>
<p>cert1.pem</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIIBHjANBgkqhkiG9w0BAQEFAAOCAQsAMIIBBgKBgBtdT+CqZ4LiddTOEqbVdWLv</span><br><span class="line">u+fbb1J3JVuJFym/oqGNPttJhD15iaN7lRa+LfjKk5BY5l9ktfsgcb6k9fjROSiV</span><br><span class="line">syvwN32Z9PeZeRJeXbAc21CAocLWZcmsMbWCMCVJnJUTJ3uuXnqEbNJxxDluK6IZ</span><br><span class="line">Ag5YqQVcsYoo02oAv3F7AoGAB59czGZXZ7SiV+XB/1bpgD3y5WUDAtqtQgEF/mck</span><br><span class="line">R3Q70/C+ocRqSYeTLpqIbKh6ev13lqvx5WKcSYb+TyLonNznq7BmJEZRRqLitsqa</span><br><span class="line">sxls6rdGeXTB3EVgiiAEEbKR/a+Z99gNzk2zVm9Kni5XTGIkzQfYBjjSj3ggvPS0</span><br><span class="line">kUM=</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure>
<blockquote>
<p>cert2.pem</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIIBHjANBgkqhkiG9w0BAQEFAAOCAQsAMIIBBgKBgAccMk6HaUkxh8FfctXMaVcp</span><br><span class="line">tISI7j+9AdsA1cR48Ix88yCTumF0UFHT6dFpUjqpFDgYH0dnmv9e3SKVD3Sh6xRD</span><br><span class="line">MgqqXZf1wegbXvmj5pumaavExsS0BfUIimA6dPm874iCO0UjV0EUyBBgCDhygZb4</span><br><span class="line">5eDUru7qt53YaDpy88AXAoGAB59czGZXZ7SiV+XB/1bpgD3y5WUDAtqtQgEF/mck</span><br><span class="line">R3Q70/C+ocRqSYeTLpqIbKh6ev13lqvx5WKcSYb+TyLonNznq7BmJEZRRqLitsqa</span><br><span class="line">sxls6rdGeXTB3EVgiiAEEbKR/a+Z99gNzk2zVm9Kni5XTGIkzQfYBjjSj3ggvPS0</span><br><span class="line">kUM=</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure>
<p>考点：<font color='orange'>Dual RSA</font> </p>
<p>本质上是不同的模数共享同一个公钥和私钥指数</p>
<p>代码表示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> <span class="built_in">int</span>(<span class="built_in">pow</span>(<span class="built_in">pow</span>(<span class="number">0xdeadbeef</span>, e, n1), d)) == <span class="number">0xdeadbeef</span></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">int</span>(<span class="built_in">pow</span>(<span class="built_in">pow</span>(<span class="number">0xdeadbeef</span>, e, n2), d)) == <span class="number">0xdeadbeef</span></span><br></pre></td></tr></table></figure>
<p>同上题一样提取出n，e，发现 e是一样的，而且  d的大小在n 的0.337左右</p>
<p>exp：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcDIwMTcyMTQxMDAxMy9wLzEyNzQ1MzE1Lmh0bWw=">[61dctf]rsa - S4tan - 博客园 (cnblogs.com)<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix_overview</span>(<span class="params">BB</span>):</span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">        a = <span class="string">f&#x27;<span class="subst">&#123;ii:02d&#125;</span> &#x27;</span></span><br><span class="line">        <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">1</span>]):</span><br><span class="line">            a += <span class="string">&#x27; &#x27;</span> <span class="keyword">if</span> BB[ii, jj] == <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;X&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> BB.dimensions()[<span class="number">0</span>] &lt; <span class="number">60</span>:</span><br><span class="line">                a += <span class="string">&#x27; &#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dual_rsa_liqiang_et_al</span>(<span class="params">e, n1, n2, delta, mm, tt</span>):</span><br><span class="line">    N = (n1 + n2) // <span class="number">2</span></span><br><span class="line">    A = ZZ(math.floor(N**<span class="number">0.5</span>))</span><br><span class="line"></span><br><span class="line">    _XX = ZZ(math.floor(N**delta))</span><br><span class="line">    _YY = ZZ(math.floor(N**<span class="number">0.5</span>))</span><br><span class="line">    _ZZ = ZZ(math.floor(N**(delta - <span class="number">1.</span>/<span class="number">4</span>)))</span><br><span class="line">    _UU = _XX * _YY + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    M = Matrix(ZZ, [[A, e], [<span class="number">0</span>, n1]])</span><br><span class="line">    B = M.LLL()</span><br><span class="line">    l11, l12 = B[<span class="number">0</span>]</span><br><span class="line">    l21, l22 = B[<span class="number">1</span>]</span><br><span class="line">    l_11 = ZZ(l11 // A)</span><br><span class="line">    l_21 = ZZ(l21 // A)</span><br><span class="line"></span><br><span class="line">    modulo = e * l_21</span><br><span class="line">    F = Zmod(modulo)</span><br><span class="line"></span><br><span class="line">    PR = PolynomialRing(F, <span class="string">&#x27;u, x, y, z&#x27;</span>)</span><br><span class="line">    u, x, y, z = PR.gens()</span><br><span class="line"></span><br><span class="line">    PK = PolynomialRing(ZZ, <span class="string">&#x27;uk, xk, yk, zk&#x27;</span>)</span><br><span class="line">    uk, xk, yk, zk = PK.gens()</span><br><span class="line"></span><br><span class="line">    PQ = PK.quo(xk * yk + <span class="number">1</span> - uk)</span><br><span class="line">    f = PK(x * (n2 + y) - e * l_11 * z + <span class="number">1</span>)</span><br><span class="line">    fbar = PQ(f).lift()</span><br><span class="line"></span><br><span class="line">    gijk = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(mm + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(mm - k + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(mm - k - i + <span class="number">1</span>):</span><br><span class="line">                gijk[i, j, k] = PQ(xk**i * zk**j * PK(fbar)**k * modulo**(mm - k)).lift()</span><br><span class="line"></span><br><span class="line">    hjkl = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, tt + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(math.floor(mm / tt) * j, mm + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(k + <span class="number">1</span>):</span><br><span class="line">                hjkl[j, k, l] = PQ(yk**j * zk**(k - l) * PK(fbar)**l * modulo**(mm - l)).lift()</span><br><span class="line"></span><br><span class="line">    monomials = []</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> gijk.keys():</span><br><span class="line">        monomials += gijk[k].monomials()</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> hjkl.keys():</span><br><span class="line">        monomials += hjkl[k].monomials()</span><br><span class="line"></span><br><span class="line">    monomials = <span class="built_in">sorted</span>(<span class="built_in">set</span>(monomials), reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(monomials) == <span class="built_in">len</span>(gijk) + <span class="built_in">len</span>(hjkl)</span><br><span class="line">    dim = <span class="built_in">len</span>(monomials)</span><br><span class="line"></span><br><span class="line">    M = Matrix(ZZ, dim)</span><br><span class="line">    row = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> gijk.keys():</span><br><span class="line">        <span class="keyword">for</span> i, monomial <span class="keyword">in</span> <span class="built_in">enumerate</span>(monomials):</span><br><span class="line">            M[row, i] = gijk[k].monomial_coefficient(monomial) * monomial.subs(uk=_UU, xk=_XX, yk=_YY, zk=_ZZ)</span><br><span class="line">        row += <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> hjkl.keys():</span><br><span class="line">        <span class="keyword">for</span> i, monomial <span class="keyword">in</span> <span class="built_in">enumerate</span>(monomials):</span><br><span class="line">            M[row, i] = hjkl[k].monomial_coefficient(monomial) * monomial.subs(uk=_UU, xk=_XX, yk=_YY, zk=_ZZ)</span><br><span class="line">        row += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    matrix_overview(M)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;=&#x27;</span> * <span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    B = M.LLL()</span><br><span class="line"></span><br><span class="line">    matrix_overview(B)</span><br><span class="line"></span><br><span class="line">    H = &#123;i: <span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(dim)&#125;</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(dim):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(dim):</span><br><span class="line">            H[i] += PK((monomials[j] * B[i, j]) / monomials[j].subs(uk=_UU, xk=_XX, yk=_YY, zk=_ZZ))</span><br><span class="line">    H = <span class="built_in">list</span>(H.values())</span><br><span class="line"></span><br><span class="line">    PQ = PolynomialRing(QQ, <span class="string">&#x27;uq, xq, yq, zq&#x27;</span>)</span><br><span class="line">    uq, xq, yq, zq = PQ.gens()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(dim):</span><br><span class="line">        H[i] = PQ(H[i].subs(uk=xk * yk + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    I = Ideal(*H[<span class="number">1</span>:<span class="number">20</span>])</span><br><span class="line">    g = I.groebner_basis(<span class="string">&#x27;giac&#x27;</span>)[::-<span class="number">1</span>]</span><br><span class="line">    mon = [t.monomials() <span class="keyword">for</span> t <span class="keyword">in</span> g]</span><br><span class="line"></span><br><span class="line">    PX = PolynomialRing(ZZ, <span class="string">&#x27;xs&#x27;</span>)</span><br><span class="line">    xs = PX.gen()</span><br><span class="line"></span><br><span class="line">    x_pol = y_pol = z_pol = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(g)):</span><br><span class="line">        <span class="keyword">if</span> mon[i] == [xq, <span class="number">1</span>]:</span><br><span class="line">            <span class="built_in">print</span>(g[i] / g[i].lc())</span><br><span class="line">            x_pol = g[i] / g[i].lc()</span><br><span class="line">        <span class="keyword">elif</span> mon[i] == [yq, <span class="number">1</span>]:</span><br><span class="line">            <span class="built_in">print</span>(g[i] / g[i].lc())</span><br><span class="line">            y_pol = g[i] / g[i].lc()</span><br><span class="line">        <span class="keyword">elif</span> mon[i] == [zq, <span class="number">1</span>]:</span><br><span class="line">            <span class="built_in">print</span>(g[i] / g[i].lc())</span><br><span class="line">            z_pol = g[i] / g[i].lc()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> x_pol <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> y_pol <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> z_pol <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[-] Failed: we cannot get a solution...&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    x0 = x_pol.subs(xq=xs).roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    y0 = y_pol.subs(yq=xs).roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    z0 = z_pol.subs(zq=xs).roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> f(x0 * y0 + <span class="number">1</span>, x0, y0, z0) % modulo == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    a0 = z0</span><br><span class="line">    a1 = (x0 * (n2 + y0) + <span class="number">1</span> - e * l_11 * z0) // (e * l_21)</span><br><span class="line"></span><br><span class="line">    d = a0 * l_11 + a1 * l_21</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    delta = <span class="number">0.334</span></span><br><span class="line">    mm = <span class="number">4</span></span><br><span class="line">    tt = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    n1 = <span class="number">0x1b5d4fe0aa6782e275d4ce12a6d57562efbbe7db6f5277255b891729bfa2a18d3edb49843d7989a37b9516be2df8ca939058e65f64b5fb2071bea4f5f8d1392895b32bf0377d99f4f79979125e5db01cdb5080a1c2d665c9ac31b5823025499c9513277bae5e7a846cd271c4396e2ba219020e58a9055cb18a28d36a00bf717b</span></span><br><span class="line">    e = <span class="number">0x079f5ccc665767b4a257e5c1ff56e9803df2e5650302daad420105fe672447743bd3f0bea1c46a4987932e9a886ca87a7afd7796abf1e5629c4986fe4f22e89cdce7abb06624465146a2e2b6ca9ab3196ceab7467974c1dc45608a200411b291fdaf99f7d80dce4db3566f4a9e2e574c6224cd07d80638d28f7820bcf4b49143</span></span><br><span class="line">    n2 = <span class="number">0x071c324e8769493187c15f72d5cc695729b48488ee3fbd01db00d5c478f08c7cf32093ba61745051d3e9d169523aa91438181f47679aff5edd22950f74a1eb1443320aaa5d97f5c1e81b5ef9a3e69ba669abc4c6c4b405f5088a603a74f9bcef88823b4523574114c810600838728196f8e5e0d4aeeeeab79dd8683a72f3c017</span></span><br><span class="line"></span><br><span class="line">    d = dual_rsa_liqiang_et_al(e, n1, n2, delta, mm, tt)</span><br><span class="line">    <span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;ciphertext.txt&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        c = (libnum.s2n(f.read()))</span><br><span class="line">    m = <span class="built_in">pow</span>(c,d,n1)</span><br><span class="line">    <span class="built_in">print</span>(libnum.n2s(m))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;SCTF&#123;Ju5t_3njoy_th3_Du4l_4nd_Copper5m1th_m3thod_w1th_Ur_0wn_1mplem3nt4t10n&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<h1 id="LinearARTs"><a href="#LinearARTs" class="headerlink" title="LinearARTs"></a>LinearARTs</h1><blockquote>
<p>Young people should have martial arts ethics. I see u are exceptionally gifted and has an astonishing constitution.</p>
<p>chall.sage</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choices</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sage.groups.perm_gps.permgroup_named <span class="keyword">import</span> SymmetricGroup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Young</span>(<span class="params">FLAG</span>):</span><br><span class="line">    f = <span class="built_in">int</span>.from_bytes(FLAG, <span class="string">&quot;big&quot;</span>)</span><br><span class="line">    q = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">    s = []</span><br><span class="line">    <span class="keyword">while</span> f:</span><br><span class="line">        s.append(f % q)</span><br><span class="line">        f //= q</span><br><span class="line">    s = vector(GF(q), s)</span><br><span class="line"></span><br><span class="line">    n, m = <span class="built_in">len</span>(s), <span class="built_in">len</span>(s) ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    A = Matrix(GF(q), m, n, <span class="keyword">lambda</span> i, j: randint(<span class="number">0</span>, q - <span class="number">1</span>))</span><br><span class="line">    e = vector(choices(<span class="built_in">range</span>(<span class="number">2</span>^<span class="number">8</span>), k=m), GF(q))*Matrix(ZZ,PermutationGroupElement(SymmetricGroup(m).random_element()).matrix())</span><br><span class="line">    b = (A*s) + e</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> A,b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Old</span>(<span class="params">m, nbits</span>):</span><br><span class="line">    Sn = SymmetricGroup(m)</span><br><span class="line">    p = [getPrime(<span class="number">360</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">    N = <span class="built_in">sorted</span>([getRandomNBitInteger(nbits) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)])</span><br><span class="line">    S = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        r = [N[_] % p[i] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)]</span><br><span class="line">        r = vector(ZZ,r)</span><br><span class="line"></span><br><span class="line">        Per = Sn.random_element()</span><br><span class="line">        P = PermutationGroupElement(Per)</span><br><span class="line">        Pm = Matrix(ZZ,P.matrix())</span><br><span class="line">        r *= Pm</span><br><span class="line">        S.append(r)</span><br><span class="line">    S = matrix(ZZ,S)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;Old.matrix&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json.dump(&#123;<span class="string">&quot;S&quot;</span>: <span class="built_in">str</span>(<span class="built_in">list</span>(S)),<span class="string">&quot;p&quot;</span>: <span class="built_in">str</span>(p)&#125;, f)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> N</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chall</span>(<span class="params">nn</span>):</span><br><span class="line">    <span class="comment"># The challenge lasted nn rounds</span></span><br><span class="line">    <span class="comment"># Young_level * virtue &gt;= Old_level , where virtue = nn + 1</span></span><br><span class="line"></span><br><span class="line">    h = []</span><br><span class="line">    HP = []</span><br><span class="line">    MP = []</span><br><span class="line">    Old_level = <span class="number">625</span>*<span class="number">2</span>*<span class="number">2</span></span><br><span class="line">    Young_level = <span class="number">25</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">2</span></span><br><span class="line"></span><br><span class="line">    M = getPrime(Old_level)</span><br><span class="line">    XP = getRandomRange(<span class="number">1</span>,M)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(nn):</span><br><span class="line">        a = getRandomRange(<span class="number">1</span>,M)</span><br><span class="line">        b = a*XP % M</span><br><span class="line">        HP.append(a)</span><br><span class="line">        MP.append(b)</span><br><span class="line">        delta_level = Old_level - Young_level</span><br><span class="line">        h.append(b &gt;&gt; delta_level &lt;&lt; delta_level)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> XP,M,HP,MP,h</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">mm = <span class="number">16</span></span><br><span class="line">nn = <span class="number">9</span></span><br><span class="line">nbits = <span class="number">3840</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">A,b = Young(FLAG)</span><br><span class="line">N = Old(mm, nbits)</span><br><span class="line"></span><br><span class="line">XP,M,HP,MP,h = chall(nn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># MP is useful ,I can use him to cast five lightning spells</span></span><br><span class="line">D = diagonal_matrix(GF(<span class="number">0x10001</span>),N+MP)</span><br><span class="line">Sn = SymmetricGroup(<span class="number">5</span>*<span class="number">5</span>)</span><br><span class="line">Per = Sn.random_element()</span><br><span class="line"></span><br><span class="line">P = PermutationGroupElement(Per)</span><br><span class="line">PM = Matrix(GF(<span class="number">0x10001</span>),P.matrix())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AA = A*D*PM</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;D.matrix&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(&#123;<span class="string">&quot;D&quot;</span>: <span class="built_in">str</span>(<span class="built_in">list</span>(D))&#125;, f)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># OK! Find your martial arts, and then you can get the flag.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(&#123;<span class="string">&quot;AA&quot;</span>: <span class="built_in">str</span>(<span class="built_in">list</span>(AA)), <span class="string">&quot;b&quot;</span>: <span class="built_in">str</span>(b)&#125;, f)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;My SymmetricGroup is <span class="subst">&#123;Sn&#125;</span>, and my element is <span class="subst">&#123;Per&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;M = <span class="subst">&#123;M&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;h = <span class="subst">&#123;h&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;HP = <span class="subst">&#123;HP&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">My SymmetricGroup is Symmetric group of order 25! as a permutation group, and my element is (1,23,2,13,3,16,15,6,22,18,14,4,25,11,20,24,21,9,5,17,7,19,10,12,8)</span></span><br><span class="line"><span class="string">M = 309169501373330124045649100152326414225457160505584328527283516968464416389302355829097052128714780092162406614467026044744098784954762500832278190406881802198303575338158311874491341970444579146638248815636164413771772581964591833455055886833879504320098506335328910379223983277573694356846337961823081287986674791459748001014087760336006966850192999063236788568848765812192775492248445517060690151700498331622538367493718859724934115228375142396923937735633684527869745420378950550480692200706066019831688796077313463059296313396035429537407627377675974680696279162072713257960965681304091009329215383850223530139165455326927677102783057396241883175412729216204807235187239596365892879371542214145426492827777125727970815789114727245511828912252143569</span></span><br><span class="line"><span class="string">h = [3565625090222584896920916237461241765625829204082396377386021101162536812411479309464325956424849651112502540095796665989782448302150047491000013081443589381171861802823657878857754676608742927932812781165716659755896099505195018830422885342733139127785165794897376463794696074605473512720672450888626374504772116915620258088753289255996096552892614801083370595759624402874902282635442418547645823133641783382626721416313803991932439793168113855890150599332984583295219543856049901518912201443065300476561372304830840276820139993555523469165273121628823953454126151208689489078628524850757272649061955436843893289237414654732290904213005377463766762255194199607599718375650615493280298611532927519686558670313416090562438894368509350896602591065538560, 286740894693471986151090603562932147965458822098297907353215124508138484491994267754471216888566417392843923796488725160656461314962959042706124173470952968241147487040483767911639159119505992553207913863135028688626896196178757909088128827455625174341894140582939848620368540355056452428553556546413465430152617836247505772663758606552662729528340901377490256234099815707208769579251833692482247933846648593307680305448986314447242583396656418769737861680456297522358131674037354880608888487272985141452871763297604747444764332049229204365395410106847606241968638474099061876569990163879954288002836750959104349076854993248516655758322107956062243468530601256243967323153547535726777712582210098524981336526310800007425464476736381605758610129914167296, 202445786178968197828946112166667682571891905248793492278433983415264905988886412319222803698650008275405441752508434114212113517053913972304515710532012288036732448805044856628337036478357496484044773293960097063848568051250774170422935810965491124102107450786197166927290614807575403261921855599437944525251033428950982061449203659272914014109623656149839199935645660386382459896840619916225080206084500617856222897968865436783548821187873430635315967325778835200418210099836625362334832448337496843986398001079590846483593452928602841826412074751479179471599709999916393508418744578599831517548843854866251289525136765297969136698285441109232446206843977149859059568434871554288377088102779550812057943402777376610057499017696210394059743209313009664, 114630215368349491250326648494149748728124718005857201833657753308980378360823813480094685056650954220208569495921715772409260048257134505583210349697604470912610748671738387322753221966031149012764535612682778184882174392537951540598166408100353995693537007226929298573802177602978136134506604598926968767277963229517115896872176785224081721198822306288029114228955110090342800494317915814873698062519566559427796027618459996738296291782097320521350172532923653864250838232011730592925952612867718426259229217480911558421879422300001641170190840092379605603655701803649801243406059797147753118709730213303123683329677068533772082060407549189564758770771711148071596602056935716438347268248190581386987972757911856155781563899140822797888004226036006912, 128249367678574240079270694387429301574447189368221420750047602082333294620192478593526403955673394674124614483528399397766799072294205407818283464218350759458734269850052374022374583516046462573242829813776315162366850512131805663098817008453376098230770350796562755291771240680188153978483320771657621585572523650775437065002970862224206343896650474078023744187172724827284900132434561870157274624749481073656218832950661419154809116630241897087363941068977482336058825222409922455565132842885044852488100437379745993397785019888492704177085025661715401393223084613786993440233186999961708361656323625565518221228007812487647507152403406194060777071074419667727156839380340460479471882700515901974677682591933244024896502221255164137619867236474814464, 59331241745881917257932833661253483407124868132789104057434303748460794035055450167305496229505776497962206681068504038089886777631651664100577079680933516972657892279730519042800959265778075851643260975944157575808540832473360789304763830393990596483325556391563383526131388426655998362610795663009444329530380313582369506744601127066018505286584082074112032220681653032998814836135211241601616761559477125123260865574463289315537641250468595444847485104869371846138937594815717839233479424297762637589843061706537365341325349697086472650360732699495909942722893269089976271337217878676728476285757191230122449283410993290558727101211299826258005529280347023431637543174327095221833097882251371141896661614980087581376418853642047359092191718247759872, 194175487858295065586566223420720835354218714701012787036868166885106803179611016852320235121944886794854103233580220709024806072743993477154116046455972680314714490810103482613775169723949822599089353607462687446238694112422779778557153306320141326888706724709408146840971915646939721136724368012432988045478440516756541030644897102338343015620307071124895653986756365725579987250601332133147888516462970772662004254372283824275049130754409522022155104472953510056515893487814795314057133448327072939691256835996305152489881345263632544581620669637374642183724635278556621665654137071320546871015687481523597402928763713183489458838102245889150936728919959706046092027960728825776566021949524779914956226078468441681639597976295123311554992063660425216, 115807966653135071136266364151575193370063353963428994232152558690537462513652457844803096649471511022423130391640990718769139833768597282872892832632006932256100725142377601958457582836326282142674470340977659300588249614977457789078637672424804434580082554677223019302922992562279282682989740074843377451539592513262883913515900320935326048141177654658002842824967867990878423576079246988742657580816398545604320575322509216636723893917401586976250940528255869144608693606581992658961868351662299980182039083401570931369157275822911645710245831972301615048181855392924402552747776587682847866506513589721569586179062186510923857682304736484524409943982860419833114775174973677241133994963586243092033231181717755422868113246798964708435895447826989056, 35892864763676162390876495832131732661057713103645821857653105944898881372368808709419507620431545862639883539544774550258981962490994311035563824804791343118179784911204081384298523734092852978345353083620780025983844560713535542579917199852557029443606552741189260726705956142592472777625642697686483587065598383553745177190736612246797880186504227507540789056735743669295160656843457591270441961646851151123270490417727787782300206183313402455683157806373799412772262389178947152383087432869175216907112201344491993073522598897459497720231382736974467891671184580545749653915968971302794570679028312275641136161418552643700105215949462752782765599606395043723535992514850129235084780569665298381129831228968986167487292913320768400938041503014453248]</span></span><br><span class="line"><span class="string">HP = [182123398439336131233484419016500805950625530876289136147992418330368556518782504528500478328506268530182121028338611308706301778495117293952384271741141930454826813234222655694969514594179399691491676343267560926415204796892285953757083137635724586246679285504584200603423040990857955982592545447321735123888380669252758270022750955484747603018957220340523162322224297824154306196315662236519394066376582303992842999145368668536271548561974662730580382535581064544751603313110317522142473855128127879421866476758202400277448627166191464212616826131845112048518089279156877724351779259697512559047606602356481432326384500230304234630224805224043299183292854524931957718694768306272627669496947333830650701612740067754226344379590044087735385490127725862, 143170049879066655087340950742576943114220056125957541251904657597420632960015895981469092773424062349481612793313849969949143634455140221504418524950906026552571808412365313452770620316647140315635576351924131570731151371864300979486246561311374091503771233474221846682477948158595874825046725186096019808916856990568087679235183223125111635340379631262792582193894921427748477534899648278496684573736979116799130367368459501772350225298850161734598992871658808303947946703790369232633550983464071710073626283163523659905448412753809088559015473221667463885047754120012784534383142422681768521744011385759111784771218858429141270195947803513052066866898605116497618560152428747336114471742600059289342252682494024257280492765302681978041917175224445454, 181932081065216017223259767432026159751069100962417675256904857171174594214631105569878401257202843288868067795959660425655397502682572819329811836847256980387967545675607257191386494389870983892416162767006265255985611267066664459013834260578459679814704254643652527448346657946799415019242620362556994094217501805852227552561431064112972359577708305419407712233651342990435225577864469921706228376386943352990854043536613387681781610381704457332320684886669558444649325853462867815167473502469305672972117003639658784729134706896312010708005781941993559519054971159338636279746679220293668476785752715272037394473281514117697060980377364913173031572794672785720241295564153405600993322639561228795731008971285970805298272968367327982292736365952177736, 152197501838094386559667505260111556746524794647762036036984156853293482749405051706379215782024625767996604204199239858042655575156447769644733342469940464962491758196879181740442958683860120188153222622045687386550968060691333980045707578681522952010130720785366069103645756481641865768541014660604224000448808608848607142992914438243019336580286597455942208546183871629991237012627078724041815698483916930337697145596477943636313719062754662224057190310995369364817444976298713991954316505112491477110025799278176478205958831032614361098570277711286905522504386261323350696026797810604096448605140635754896533192146402989175530945145957561334345659035675075518654525640506611082619111666729303712983450765181951782352125875791130477959487243678637091, 13260127114160132039578764564277724908293717164091148143281881592450508800268944502885346275659282139962084615098549527321116911955505649119891798866789702019684393024690093331965422247341532921411724247274538089836518071897735012248880718279028139698315282234778842097294789834605571276706239190589177804771135138639650083317735678737873354475068162084129555751126946723880482765306519620594499615623179141020788167278111494656031619604249830332631535459164808166638124806843052957919064456863967475953053614347964520430672883482509352453640521720313380086324061829310129198351733197836811498655541708077300463414261809122652381872563486116022996781876662952751320598808796685963865092538114154484684417346701057121540968905340884852819266786655758589, 7726965701613058376939617426173930484905424609871511448979899585789330472291184137208473525618669017229437131718602138062693323242254540169837667647945751730728109543890184121875756549720616016417689684297714982752898170211522441794931085191911567142756874944612942983995000585648922927662513704308624388978740497618316239028274910398075357992565743563209649419566296437582035744561981287334953927069851636537379718348745797306743042426246174030053256711319421877929342022143063981126785133505358707977994735220823800241921524140116409926290245600210702333580796340264633188699655847265231481741281891892263047439742010063674785264961945504178892794083333407945969304699309469264200568906760592035714702098416830232068808480043043046899584880476365211, 180019050945153380400290419089497765220330628588910896281952550416089875088850281952204916892735263785902815673400396668990373595469072648699918494008065197996354855591310768398651316061183602708507734278231600299784123286043254063248471261126675877896352754705297219631260970186401862696837291306580096200621090959901083133979809165850290006958174043988594120292941019793669119321273860506863788556691180109910206811333775009617945993184652622929206661236756401337666271307645630166144277622050610823301758570383783302397752531144991093835433241988398747399949918853848203882961092951831645541246295873588649289531107814613167236073250185453276804880016561013769084225682634383784489652871867815664211238325551136693769474979447466046146633345857611195, 153629149463789849413429112784055293255734339122176408662359601604336509143473758509975758863274395783633189549584941125392600362702091233425733911049553699926215208790821097092121122480643207790283486114884596194662369389215802952635756543090033023067139610689568413680910122744788001731552268160061684744631583107942765508030881967516350806276166348479082293252825499156766363138008724860360262292088895234376252334258828427316419408016153682496909981178280572676774045522450227853270448821337580837554794712541359286413423248459963738684095208415746808201768526760043282181933350859027227907243501251390338333188167931974689538439823388790515993422873395205982049903304374197483641428361419371833919139638015039992779119950859870347438758668679332495, 276427336329209668688130277925589460360311327851014652110707325284581770430564994121969230515633704248812997375123175470056237355182594647858048847262042361717893313893682161435196235153101006253340527909451448103893104917041136181377802230394106849393237486928849495116195885563734324888330607632821513438897200091110205098807840437587357564885934968344589488833398453563587665373858111713149172110412979734635024012258145628247175689960363707897865274630069427102722542299814253018238192096822853168130596686909789751383470674093768125446566821380042192204089190375373896356618809538058749144194802493153530124585829617231928160073305696376878930156414497547968857648212679322981790227182840452493558367673102471438871220031633314842129410346869161197]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>D.matrix</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;D&quot;</span>: <span class="string">&quot;[(41793, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 60167, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 4171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 47491, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 51848, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 61108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 3645, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 27453, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 31091, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 52391, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 567, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26744, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8374, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58306, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30198, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10258, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39097, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62336, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48264, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6386, 0, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16791, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34934, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19762)]&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Old.matrix</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;S&quot;</span>: <span class="string">&quot;[(108032701991161449851369002312715580973354179025631833045125920330341444336132442627369167910196499846245375, 536708156806056194339800940453431360309948744802961091477684592805557756940577780671965778135111037727024460, 1092908539163523128210211825513206434685729471033351288310817570413536030332936913121881436496682004163218561, 319681218899114691143952029933390929281094479463796376994923082695907785812861868813064052001648547956430773, 1491469717762965437203234107675304739260134332073261473787166051408478205091597260393509384628194825690384017, 1373831114788217760848815706926510177900812033455370113335228787592380681943495789200016044894484593753473793, 721749134747261598156945357302901463050568624661297095403296472280731478071009708971832640575096673851818368, 1860163764050401633727513573627217696972941984286848985572281249857942774623702194570023403287105671073489060, 154984136256332584966107344852839904503587225305261779832283480159849061688311452179481908517673432437277241, 1561939838062660892618339034341951346106257548745672265144871883988280932734601893314037783804475701266891293, 1196621210864420273010964492926788183563258771458649486943239707342155163532184200078478415282614629395227800, 418140199208035988378436961769638766691045254816780694434194995467625611261074562013654661647238861824195187, 1566865563381296633840183260419394895718650714211270127110339192873464656390177925048966057251100807853472205, 591765854512223923173381833993118081655482569860165937279009553758243886824330666933325098097909951941773363, 1621194715625482277240801603470708569317091835690367023874070253760241984371512903868391207817859394152312002, 1853919209784660031160850930352771886269300975251430020793116172679096829612113956371814479169815876124349500), (429873231732555141667240718587687999822857219084121172009626130310358943388885080601718909981680593606929592, 696661257924439276997527001346014167032958774864009281004980339623413640279240542438501016146643735870840200, 705077116321796552136313163950148514272481595449062490800965253320667803690854999857493736016740764844951855, 36759636718531135702894811812498288161339459911344005228982773190594494346457316668225373274587742986714394, 199617109272238821758248859791496856102696174698246601793036123989271809739396262465329953679772767556175349, 748305044943665754868843090133175750486758697161694063451745527234017037314999816420606532108167584070014650, 128713556531371763123849284738409764132111189857502611935232398816796618991882300550609541403882964822025197, 720294314730287284918332403206366390340674935575928437196947060809525523697555946855032892796717502508756244, 772169734387893586465583421665818938650077225148817036618409173104456878749345815499342643475174237365342088, 485704538257264318281616202446430879022758621467258744613654741872135241670088891039125785177734123506788864, 1049386623703990774779796004447122771056640068769982963039740391255206084894449612397763605343929886627187755, 1353791534940584582018886955223018991871124918503240637355081780112975543362795028582394093562125315687397117, 96922325977204245215966615509244830479352553017235612165102140203380652402877156933626056845508236232145474, 1491547721205063194329451603221117324835280653935458186449353861087354977686600897202090908965745312062496462, 657985609407219294871212287937819792392394243075603163798767913815753294714053803551989285171175046026021292, 1321750505787806228413096336073233274921046205768894526421731637298008087552230154604733661782305913950019758), (1086778637488893363555155897651776469669479648114718713027748026839195873829973285681739101838980868002956926, 1603798106276423628680411507040686545422004273861779510586832810301991479137460804045160999460099332509348272, 1032596573594908905682883741312054579360541498136380107452641965336593376163298589305748612869488444382282785, 1722871599310215842537874903061856170822910917071612533538758545930106429737859314184812107888570570514436817, 888612741358369537511403754406447724251960233741122239049680647261856619404416530595695189652109281384865551, 272210091239236373983366324215208566923182631266812430374542000868950822203456368709019668399773194130115582, 998340433312163849536880381773142598561110062084017535938298827399228054526060914037893418142610051549344149, 416561209542736085163087421985348135859148177916787887874024056410059456662972557534961467733006653686852270, 12588651533966392617982800355146650879738320880541134139166541021872185894667746916875855764202920352998332, 239155589045658762407997613376641052079067501577649334701928033885172818297939378539262342760726229932149102, 1712700772384296868424330714519998133456916631419429384710641521922451158914619767158484746435503528247198201, 973460793536380374905536216000279457254227413270258748292701993424187048976790644495166672795707977339193401, 298374738199736157379773918814268251577739944514215745671393904924422066180617518790938312830200625034492336, 1084149657600176924628380982516941510886461179594063721146617624251927480674370653365654346812040758416587254, 1455486290142480470333195218741425003901972373269012398794854208385742131684661811551770676387271330305840033, 1317616016751494143133911076475028074618881097289669566979706802061473591757960790365356311174253283568545171), (511902046345644666272587656834397557926585465865594799110299385517243337669760460710245197553437169107076465, 1308330383856237915365466642984283736169698388215802844201751246880103558237647553782829473002257961428836670, 1155713813790080552487939803696106101790310975411071299829183870773444388451785801500623912616242544692680962, 1224908750816908679021939739243701563153232819921843770261166611815141376759933697069591681336679313105729046, 452063111929995491255412240376860357091791634348346543674689097860541694702190428064670811147941474189515940, 243905199413971842010848437083883170120387967869945489727874891785274619523120687843469628111008333520281173, 218012047981557163160906385736965875971834228229268545141409957804110200175228120318440102572613964108852241, 72449390352553126882641989616711201258083728722073811669248333042484356858555217373026830154484599675673166, 1744077638109996915648335389542463821997796324708102976212623303084662144503419047177392858024029202496884056, 1562406863302128494306184675628052746736729226148455257287537831013528914148133192444813931611184513898761964, 1370809565011874548553736664131319308120113144756404775592948258246558844114463308790143707574202284352297700, 619582693502976159201142244983464537147959560539005191107859790886253434688472547727851180959778494649468347, 1439935211405443869676158269127460181688799184642555475680575584652080501734744148715596139324976221138373651, 90545837187619363498470568359275825840618056784074308739892174914423452949587594590059370188451502082946781, 482428410735918416738432316622337711063850733413329084474254412765173029163913604186737203649136909991911512, 565434332235923074300308595897761005070298372508007151970717410598099167866385478749744466175454834261310565), (104491799965715411013561142125662618371589863368220043903880063313450364721340353778253423882215372628063760, 995180834506623008467226233521869342403315180509957213686517153423463062453889353398616389051090749137685843, 829565021944997397018498002084161459259275942202921212249684154592702614408845709428138511390580330061002946, 534327621921588874889149990448038480344105599605667358128347364437354685222101199440058722509498308377029012, 1132330464934751558500840836525167035985136508412935213102713347379055094835345081148822225633094652420795588, 450074048099726665802238274851908045566712843397793274051290281351600335456664818882443154184755479919306880, 799650301333724197381856809928105802660976183437036834013098030038374988250871838187978763436682367937424064, 186144160986287531641216966101956370994842371362686292130413967390643062283174363969086648192162770707299860, 908534860213206841686157605935550514698866576053159893786895113561156202467655121726907189182979000098180930, 45172777025563801245002587177051647086647015775396329903238685443215301743159050121404543533110450927794409, 764812910167477106544110492707407657402757978897081341870134647618267941562053074583099500973988509251503866, 725981463002339136952211983895345042866512126776025275961573441253428056712570870615698244996644709842695281, 835069084199672363874718204938215438544707590888115425961659825606911679990035477671978178973889650313585055, 1191875778351256270634615082284082976487567969444268263184598475937048145998543269062890189570330392643703428, 83818590739829464348451185348616535829221962242907104691853650713849624215858867979607119022934848835272741, 845663971836096838373625947207777962185246822459741259152503695147222855185127535612579592810063372388393425), (730080740708716696869611500305945729582831639692674576181815669256588053495445644654846273425696381106798213, 1211401865625606862892141164094862255157602687290011401877324564094913451780788011572602838694851127273686199, 761750678069382705088989341593202296445602247339072406661067951708499074600129843633749860027539961169263821, 958488935282214627573417363369674085278816875474745585966084121728154471973830854061042022718110987983758533, 1000154070884484290117374350945928521584252400077614217868317402688302271277639661314255973413082836976423525, 452737780943126759615159828372843517970855322695027226969144987933644903011529013014573924533431359051256850, 5805599200676249107157522629732437488517848218120336534559572461215244230092132165434652875158210784360605, 1069648823350032633271251526144211153517485574227702676510205431642788090278206667447057508392521720178991564, 464345016404000464145764099641622835761022772300106935701609296071422986154529936480523330102784677377267972, 887532013540448997976095141800168404616145524208067918411064213199200246544405630618505727647904031437367765, 764896944683051632934376964111352690545726493595561980325842532869416551338993800555386022016655600198592863, 834595492951168051763345064768685082923666710575447603461271875560636579185091403924607285606904089495798238, 97747066740378772563805036049036560981941178276358675793741851520890271416061851970734762331332677029558286, 1291639614271453651479090561671509420789047119165785858217334853499388375967049382736266913449874753320474210, 801271538360332225899343978692624588068282915247341176248413743892071353524747855777605347936971072256796883, 583118453726128867307239318601314573717226612564585476755251111771273736693625440352334611064633212563236599), (1007558687762692623401107502108785671552540294554027553075253821535448496219183688214829259558409405603001724, 82954089525210775107785196754975536343868930175076975506233700714273434584908468192257652423060749000141288, 427447460947692981480247356494758073766902779792449397588581408107838459193575936867213556781504157624146419, 1374117754996529221098536377009433889631952516241548318835190450059797631046672640835049895872866758924481496, 156038208432623159135025608204515658053054306527311311313875093413737186414935362808963926062607056191492625, 1515640320653109406794405070206667431846552825063179966889387609909437205938636205039178430345232101643703029, 1001238386683833647397450794067318370920199592087688426532041695022589977781759577351271154279661457711401139, 9286812100870995351874739983837536749531703373251036760857092007083527341690165710076770799982026349469295, 781398522411624239036136435439321625771428352649403511374119891867804110627699867915291152830172439999673301, 288390340485689855297713282913031890061650435198757756679240034152731783902546010542111152853837802947107198, 1282499438978850273310621141487984553225042108684339648738689012516484353852213933474138478066589426905792640, 1206882588472439544838766692591222446845991327532088581599851103973276440986865610584267969223571059209838017, 716745202356877068654799969764658910268422168331996123562556456205494558399089053935448159249370428497961068, 986593095310489014203641425333005980037776378229232672361107883934927730326718162983564623505526232068548290, 103772617718005675720056677269973171337468439536802857689497610845701001446000293596756576084101670871872394, 579163101347014044284264738999794759737770512095227857962630915400460939984272909004056647376161945305737747), (288435034175969956020092056225392604045743897118720404871671986231084818165458292729640648522613169661689467, 842274139270535842409744945935128951705359842639982830775234202022927766509101371734465485773595508746113280, 700418817778098786277078342411520118692346350422606462723911114006419955720829707854379756502697131673319406, 569340337737117832121418471593902796598875993869214230094417664010492029193566188439149404136072598861993782, 311402606048606137904298548604483824215396754817621627161525397920627489469424683846450586021906438112211863, 387556851872999917791805837107172465053410831946704411441234136279016670150248420130484443911023416474044825, 926757025438911433753408433626135280565795754689622472147862347099349687223800534911582014085258437224209910, 1200730550518343100475397485248562827037665594135578219083390443869303562262076428424675489345048272331540918, 853763541787064913980724960667413489272081221293636460056478608052421032518647566798408815952868230194038338, 101239479653925653679074333030959394747942224986065362367651805089673854173857409456735028763240747273162552, 47121618175135904684072490541732295428491460965542084558472179206885868302518875995103252249901230211543525, 982857581226299143840954166901835590289581958403367749920630419874452320611289908335828280671343750955279622, 811158165015249537987500368246254094251025296798974323499510891442047224515941233490537351722658420472211406, 190329661527190452974427725241771623761097473044383743958766087362063693259351495833117766854793893313562091, 50142672419825251936694820690428751885608034385161146860936149367718248528534064819383444639850833791987235, 303074295943054006201261314482928767581154579713194119273091027835447157940166620065183762076400863876771618), (1079372098255337688887136508726900390205048294920188450514628679918679463674406107209346812192726950726526095, 1185407402236867425841849519771446165946457212261250741849109704048981912211308244902430988525473241626691376, 841449701483451008458666118133003457345663684791358742412512477100467235117244326687250726234511967835213312, 947580146274192515572496516072653825873017616320635389497290350126027652146744723140627689652187761111324722, 119701810379427632902947235248083296107591243190851146608219622795996254840540272877119978122901453247704831, 1640347806216480803403265325130213955203137215028089484587105315192029771752510728839945151370945087147585891, 132249802108051544701535447313025681301951421902989862817119883237200082396640574742757738128092983379391192, 222015024534828263520557570979535921258670062891839524631837193227865004386250245701652729081402110107343213, 574045525239164646488552167939702566130627137278663509529342693657266762662320399075679168964197800875153680, 9484269602968566121096790600370029517627994135450856762373752676667516556085799114664479005324973494415028, 1233903272461676350245321015676982196376541150525344451565454505261564207710591321827100801836574162863320101, 1148801053084576503181167454811439762743688828522853724573620157831506900806010782322188583027710897929400855, 1215932391694160648245705883928262594648092322383337933840246087760359598672361289173906269225985279432329413, 1256312697161815430876406109440773985803220898059915842809050363551861707962446265001460104545875429415188571, 872437290854895473828669647489120707661030662446214686039744557281742237010820123691242130056373279816418223, 1152504352689745273833849365904838499734041820598612058887413417408375952316351943382602922195063490977108643), (710963262741981151820936850518208399242203827946566243778081082652103950765186323857775548839335091162334870, 1456629029412002617034972369163460599977456975519008830537020404598366361266406883048353122402136998033965378, 16210930934876839488825850002875991819998003905202118064600427478988072592144130697157997625511415256307363, 270428172771482397506264701557858536676609324837517143183553201495149542640445267791184678417415736435998954, 849877849071009557937204357275192288430487696593090949890966075681654171368216057356945570659434491278721274, 552620920720515058560474932264018680445939377267909570543604994142303109067032086804888256059644299353469259, 1172127755569012152057329884978219429036349809157746825385122333254835103162162825165494896169153369293261353, 411671306380066471819720700550244415062425059661769246453503317934644249097679366952285018648871841314934569, 402751953198228508151317654119142703515415046161021988593791144762527354103153471097112572211022718546278586, 766801594113742202593740150497848890462669867082716753718908389103589627909820578043565509568785779049218055, 797931710812718040702146757192489993108919934337204902859533844054220052514095634360789107051511556938992653, 256266683996681594597141537434560889801561902972841661123996099001842861984074656394526155375881352817334296, 1418258257142479430747867834021373209498823909476696372006454504116466387484456504969162467214870003218548093, 404210566834668025438526175366143398913809348454169783995888818764258941987118278616050245839417646478639395, 1124315278703311203910253162758503257319860043824222656290539806527988308952238570582388061003539053283572317, 31271013457852406387457908247212294447150322908910202024391938488810830594827404698941451758903033151739305), (548040572051344376515276589131924583544500173392618971080814926510006336050708851946164444215551993653085559, 625548909252967533735849839010612868036138065774462061438762751772756816905614389595526904873401107330945781, 1691072562255106837879679641865899852020852750546650376805631545200564107660856702442704801403013254039741569, 1202012272195706005158418331650181482011843322779113997244205689517798278846032040147415770067172225826668913, 150921370600945669819511437694954238255973349434792437308411767994329401311792429847861423651135286847713713, 1081961677217384177165919288637329442102000700465921211931830210416642976436505857583147668075896913252875900, 38632177474960713645129923487571475415432359356662267792821760890850300033591793689594738256015530177371155, 1938890600587173893505401800316209462990331410030406162509017807707491700220029026718794390924558159879325929, 1229683571480518162665771834260511788435892562017987248959417363680402504200735302566356076064181245050609719, 1413469344912570390840315618128490201700779301153932364796221898469284008600385792913106541878951550172812412, 1603029001236324174565529401277703840486413251539616667351366375992862845333710947994522282396247706689372612, 1312758180969033170349160258170632626914169138097284308377628285441990421588369514659056847472785376422032509, 420630504359244172568640650703118406520051803679165798526263777300947905179710846980565379197700977880435719, 1585809275814789433535721083967397645766740283392075276186763802353434721723652579350998943546412586002101517, 589210671463132192681719552822630237990180990772437934057045440386799228059672695104509559337510094293921851, 930311739285308931463277260997251754864363249024137932070462953287695059475197620094345118725029808434080647), (1467336759171283069626565411462398975366496846832073813368207088887535151209170863516635004538662162471343762, 977074540452559328447962038595860262505507375287943059556072116746789487913192871746080153669811094853532543, 248650173456825688417957774461661449303260122768178786152237705032396522955301949686829800599729957124936881, 1575141265084365943986079682243623659177381136848989044089310647747968289751919614920688971461354420388159314, 787447705570464488319993501786605650852712556006717975039783792984896866011280674498846348134268287187830884, 661441381812931924846748272167364237789611518544035906523025481686525617167205320161832280314277716928159938, 713730377306644084040092474766578448161880233899851837176624863065798544631483002502432026196641108684529802, 678127349747227597169480575382795227664094828375789580467264872090685308013465629197529880718542771111962085, 713346890417527875247397732148633974225980066787252539001278528256033329879214523269733008776540235645258616, 247766390946758644831951312737583234549767619079720848362262835109239728499038516392540238454397695238919141, 222705566395366047399107473153762271285577494629225535376316438586692339782315068484531721893605469117790911, 1167884170034239946155932241100371322938666487622727711102849910832028974675686714637275598120136818289661580, 932355528178259401857913753619901059996671717365121827133186058111555002840548732397926137817560930059114770, 1002746708088820961204612547451117005094490428961711590997242233612795804195894564433549670531755192704377784, 1679333740390330063990893123547127749235201034112770813357092856319834835071400803617023235189669738802029304, 392242968045894054394410450448222234277751637234090312939171392505401592465971560873369509814497556456004427), (992468551424268052973878019321034098395629270356898670428754992273976085327043949634823897407999881749733525, 1451715409910944943601462101816705970560866315969026142750871006351008564752030350792755878689749793232050135, 1157009611084371602570908328606510003229611538486635093673400888168806076758399348412361589040924760249605165, 973495747254748476179115555073571696121985220451730406501150178959729503505597527610925614459285006121361402, 658639350805308777150470408771425787492359455148463053354655386025849573731791445060202388386991444927738961, 1971053413102762878789808762083387327923437569500667206884595783469944908304113399563798234198010177066652742, 2115317009351535055976145874152453249874377928041776362924821587295001750589961370153217409957345893981016872, 2234391928340953996585129136832544559226500428847567089886903639518503721330552899247101854148266339819317188, 95072622447945887900832352837970706552989337874284483457123454853555569418515739360750605423996449645105107, 1875846203425953685568066514593452384199151872393675498259844146377412020045792635132008533335688986283672883, 1810914367567014038914603180161768355184164085528312813795257698944266962072856602341302516572423400651692332, 199467426284808218867281478238942162630473707920489559716102969301577891302451826382304815567177368764269462, 1702858806121853895873612873027468484445637308444414982865712291274495592467886617988854786928674988921911946, 974805688584434752190621523541453157436916884469405725317513726173004242595140529349594953961249312833707385, 1563386402665143107620951148197814309632711706132670874925320046005197489375705725978209339748911734754574512, 9176208496797520354591828022203217543780592247378582726844977716549360683455502116572757173493442942031259), (233445330763035713906480406558126679912369584387609168775775009002471869774809156648369750200202982292450110, 1368815767827926042586853692745612271551227815728536321062147470922660524586014022932653135440512072849734316, 384817387960742369820850831236493763489057262900417346331312192757646380527152649103439831363756430268212632, 397496835668788385513140511380523318193705211763259441405319027544230424059467351506182237622329904982387715, 698110549303594315292020493881564774109817641862010152125384093754339939993582331419363730859850611879969915, 1605164779311866241282121191148498603150640021145381378570376215574622721447700807491428199428586193250231478, 183289800466565443527759722034380747076340683994766781001250154775016249854621154061869569618175611639903701, 1150055471085650022911275723850717353026238077245380241936809820048468325748232815290091481729807017284552381, 620603888284975571831631670369627892585626390577575455138594479292012594683550062832525870724842983985770747, 1141328685248613112603867626739876650489649831411725855910037151420885700357073101388703693467739668094282156, 624960745989505135902341328405609018059617712001038139854396706552761169916956343895696631019491737540425263, 563529618847514880940393862944843314371586107587203186648893576096997599582868166110130990825643297466007343, 303984049882076688174095718097426318142423827941965036899905826287812216266056955154997043369442371230205564, 1078658398740303308773443996075991099257452827614150807223915130507432012180318161902329283469259552998132456, 537873127629863133215961576717191616451542237544837768039490490426253210893390806083040946873190554913432278, 169827329251258085772690777190607029224657639816497950869244582534669264355479002364217211861513540611966251), (1096245533475537361190288774520023066028944190947416838212035157548679351561405521968403358714145944584630399, 1279522123404803133336059116798495103535564541817111467998685969195461307732488357939481563472485600907763277, 1621837589082192223743462826999866153643367040938611577504635652882478237855735236683796485402281552828564582, 313242446386229290517631456915969842064339663908557260803068874835492915635010632958561104764179416843832161, 578485247743964493116232317100459206200994787373794324513012647234668115712570705116452853082031543244068838, 219236836922423209713975639747607435338261033480938547612396078378825597472824554607631157060224948270436605, 979376137173103622620811921408735178993536617946054941969002748851996870693909895946038600886242442551160010, 1658962387074248584465660456576639004572633758113833020219450181488960527172176749430939869777912514216215008, 918251986210568868284757564587914989414930967922138557622606681330218265588255276030855013898182774363764198, 416145177416426209139713794767532287475150472389752288032134927843857792069932225643904301155189056410493405, 1346241144466810519932765660177492393372766698799833323172412119406803241967611867883756378782484642242570189, 386044859254038630462329030959102689573511312525928529436140682252354194273696092297158967704938034048108529, 1484764098293658918774711805629994556483924451761564995022607799099721232009570720017552575816071384460602164, 1038730041745536343360704248505932016034663062624529750511404210052634999557834948325392848734950387651599858, 840891087158618754558051176285252692949387956006228734495878738266601769957106869402114856213091762226629917, 154290307227368077749870332568887647430659666317555291698382581129904308224189689828380085709625178546228569), (957542186457140429878719718043221941900755820226325043983141960244787673981451575491224713734494596866261378, 724047722558649330730843109648231137501160718812738945124027170000449368988489179074784908592741358980048275, 859691367287711190756246276405852338601741033988752600016986903642679515575127575700961271435459772059797413, 700326697100002173963353478913834231346709568898840509699454481415437420831870839656574933271416282890802499, 1212799233481683655114268450576868631340238725268953631719891739166990447791141389709487362430025981929525475, 434223116592471574825271824097577518464718630519588487323509231423950783528915761191895287228657263954146704, 217358723385922851738144743498951415510775556931588600580907447804579013546360116371411758271211755732813673, 1298302755143305654862242351853763864348853855493677603188749853805882418947261680899385729883193441043359755, 1068567433966576654450031707464914827557285166837067988549886717564803805511104947509349083926244852733075655, 387252452536150691159164650119964238247624960830148325826046315786865241210396695679059829317531866257898261, 508839717431096857213637104691635167536835851969398382071457470260649594681556257203954946581750028844005177, 1206518168075280470635211428031620060153968523722913415228454624000108732714232864597004081584662635882607853, 648865561108057369649107548455893267620716326822663875048533849791081284682513605169317071254138817423411253, 328899686789173295020724462964824410189118431101862924515424446992402687451336506312251501354303725597785390, 328255320088054790647176014272991149866112991817392189633550739280062827106546437881018772832904512686978965, 106174800100391915811859026646635920353821529620342998961153251213838054034659090497687918002957863429970430)]&quot;</span>, <span class="string">&quot;p&quot;</span>: <span class="string">&quot;[1865995351449738305568020175407782211399961865380593201418385016005093079577037578689379305647217584283793443, 1697242394344178603938736175613701840668178871025357188746023984007769445558252186408395718968869377260650881, 2022468188670479218398009972496559844211210519349164350277452667428806390007291454178121579812497234805510519, 1834829294267612129864230457016540640249954796220974248612636878892248451710372726854088698756567786846212703, 1405518966688306890692028628042659763908744036265874596824103451217948291402053599048649577166902926927583703, 1306908379818841354811802528108647022225114028771004539878749636527088666316005228226849317157868863492789557, 1616789308818449288058724288899930420024001530178051122904515573455195995874365002006013181396637101496249781, 1253980640197082323669506507875908153359037006012151867601133670891700927532100671469629678831658698780894267, 1903682307023943435426747954611546184832717459394865637878168715826293943923848159869800611686232172365018581, 1456734579850607615224565915938092349853802772768941452254929266785318676489306434153019311316107310595518281, 2086165420905105719392664388281307744562262795619197207857331245823719830703952955965374642455778791010644509, 1726023515056798169515795231206459220148735483137609272433351313501296592963022379572602085340729076332028431, 2321143867752465622995689244649230653121108609695672723739436709976291791473903654863830072020811159448364217, 1654702076906300292576294228173753061411836852146848089290417136859589687837314338726356779964670865195828343, 1907313129296467305635718505435422104472615990939772968829964204948404573958217594528354537082412412899627617, 1320309629971476331896561625690122232816350401607709796615097327024821433804124798985230849347309403103099677]&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>output.txt</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;AA&quot;</span>: <span class="string">&quot;[(1189, 10015, 48675, 15975, 31817, 26015, 24250, 18821, 50214, 50017, 75, 28732, 10257, 5455, 32069, 32003, 45003, 39819, 30035, 37850, 39903, 21043, 8687, 50970, 48905), (20794, 45724, 35989, 24379, 7208, 59121, 56688, 17926, 49764, 54939, 39552, 33784, 40662, 41878, 61413, 11020, 48377, 55636, 27284, 46849, 51507, 39309, 31205, 30147, 27390), (8891, 44176, 3116, 28266, 61310, 7861, 60115, 17072, 61389, 28216, 8681, 25263, 23085, 47312, 5606, 27801, 32616, 47700, 33738, 30823, 49772, 5402, 1340, 52348, 58993), (59729, 14749, 37529, 46046, 4920, 50580, 26744, 8050, 55570, 27500, 17842, 37757, 22392, 22232, 25725, 12528, 17681, 8000, 52605, 31240, 61798, 13548, 29336, 8562, 63604), (62818, 3170, 32754, 11215, 25744, 13912, 38104, 5172, 54208, 35180, 55607, 16626, 42687, 25363, 11701, 3901, 8207, 31948, 48488, 11573, 57550, 40087, 63839, 19719, 15723), (52273, 56854, 33393, 33910, 44783, 33936, 50006, 60028, 49899, 16067, 25566, 11597, 39668, 52732, 3024, 27439, 50039, 26424, 64367, 20331, 34933, 37601, 16343, 46722, 1336), (64238, 24453, 64780, 31971, 14105, 9730, 55314, 64004, 27281, 35422, 24395, 21198, 65439, 36958, 63153, 32784, 53301, 27430, 38742, 12846, 62864, 10713, 6909, 27043, 59107), (37610, 25432, 44610, 7077, 32903, 46884, 424, 23310, 36950, 4672, 26311, 4134, 60778, 57046, 62145, 13373, 61257, 57634, 33850, 32777, 3813, 34086, 58147, 18906, 49309), (59705, 30936, 61109, 21077, 49611, 20689, 6512, 20992, 35917, 8675, 18204, 30551, 2962, 36546, 56258, 53604, 29277, 63461, 14239, 63156, 26182, 45023, 19121, 21590, 14042), (63345, 60395, 30249, 54797, 22971, 53638, 45089, 5737, 50861, 1615, 7745, 7453, 25322, 10013, 9169, 48005, 65311, 61522, 41889, 65084, 25635, 52713, 9209, 51490, 45475), (2749, 8590, 49969, 52657, 36740, 11611, 39325, 59332, 4772, 20837, 49963, 52870, 49573, 14177, 34052, 51096, 26262, 669, 32596, 50328, 46253, 10664, 15017, 5469, 29587), (59594, 31977, 45606, 35783, 9846, 28769, 17791, 21444, 65356, 217, 1122, 51359, 64757, 12133, 29430, 6393, 22444, 17366, 61872, 47809, 42245, 5572, 54609, 50011, 15060), (54153, 59275, 22418, 19462, 285, 58937, 10415, 42536, 13880, 25909, 34947, 27477, 16119, 56351, 8650, 55100, 58424, 24098, 26924, 55766, 19002, 30119, 17349, 28884, 34024), (5900, 49521, 36902, 20406, 57851, 51299, 41603, 7915, 45259, 33933, 27106, 53886, 14958, 4865, 33344, 51406, 32415, 8015, 45647, 19083, 60188, 37968, 39697, 46185, 39218), (38952, 55178, 48419, 47334, 44855, 51768, 35749, 11544, 25826, 48403, 3166, 60905, 28119, 14824, 55122, 36964, 1615, 36166, 4075, 33143, 24879, 59618, 58514, 44750, 28773), (64561, 22819, 8135, 20029, 13338, 48351, 59271, 18434, 27753, 41685, 19274, 43772, 44806, 35061, 39441, 19719, 48228, 22571, 44298, 45194, 22885, 48082, 42131, 65306, 8463), (12767, 5415, 58017, 23812, 48236, 54213, 35283, 8251, 46681, 23031, 19179, 30985, 46917, 45270, 58973, 23415, 10282, 2702, 31577, 47355, 28461, 38212, 14595, 15208, 1648), (37521, 48562, 51345, 56722, 50929, 27913, 27658, 31149, 41608, 45971, 49939, 4274, 15391, 31038, 37515, 37228, 27125, 17032, 45011, 55555, 36759, 45464, 53475, 30184, 41318), (18405, 53048, 40180, 53547, 14826, 24617, 62340, 30899, 51386, 15970, 24481, 33994, 10935, 2388, 22561, 27227, 979, 33956, 59469, 32633, 38421, 52969, 44228, 2457, 13279), (53755, 1191, 44720, 32125, 25207, 28056, 63746, 28210, 49219, 64276, 42315, 43245, 39917, 16763, 23644, 36518, 29708, 15962, 2903, 5470, 22374, 9163, 64824, 59128, 38235), (49029, 49355, 12072, 53296, 39533, 31956, 19436, 60040, 42794, 22320, 56603, 14705, 26792, 39027, 16086, 53646, 9212, 47035, 21225, 16382, 12414, 53774, 16357, 24971, 46005), (60961, 34411, 26246, 40253, 58966, 61483, 48631, 48495, 59314, 29588, 28734, 21734, 21504, 2784, 6302, 57415, 43851, 54560, 17437, 40932, 61615, 51417, 48661, 30311, 51102), (61544, 53894, 2859, 9261, 22614, 59926, 36388, 4567, 31634, 6584, 11934, 909, 38644, 15050, 53300, 28488, 62550, 29049, 22195, 50873, 15564, 54009, 1478, 13428, 9145), (46419, 29156, 59679, 41979, 53194, 57408, 7575, 58563, 17202, 41640, 40217, 26776, 5967, 39283, 49698, 23519, 39532, 39447, 62562, 4054, 58126, 65010, 45471, 19836, 23237), (41376, 36392, 19809, 27103, 49777, 44334, 15650, 60198, 63803, 9526, 10968, 24203, 31417, 35908, 57491, 50411, 42059, 16550, 3622, 34719, 59948, 59493, 51674, 15016, 61116), (60917, 25045, 47964, 36966, 32799, 29830, 16873, 46700, 31038, 47603, 26419, 64721, 4308, 27321, 64761, 16960, 852, 20569, 22674, 195, 50338, 10897, 30541, 27368, 17336), (16086, 53709, 42690, 17394, 36943, 34642, 58049, 37847, 64058, 24727, 35345, 54732, 46452, 45738, 58450, 12057, 34214, 33740, 35651, 19284, 61643, 56416, 58701, 62087, 42011), (34826, 63713, 19350, 50850, 18550, 59239, 25732, 2020, 30369, 32049, 40105, 51435, 29021, 56535, 3432, 10731, 29324, 63256, 34699, 51845, 41535, 56049, 59295, 39883, 6911), (22807, 8740, 19862, 19169, 33019, 47892, 42482, 41262, 58435, 4892, 52040, 22938, 24592, 63989, 44473, 38782, 52940, 11598, 12639, 28560, 61610, 31395, 14651, 35852, 58419), (43257, 57644, 6122, 23183, 25662, 16235, 58736, 33686, 62573, 29569, 28556, 38839, 11432, 534, 42490, 19287, 17843, 55879, 23186, 43763, 31409, 849, 34135, 35126, 57341), (27779, 24005, 49611, 64975, 62775, 39305, 8490, 21370, 40109, 61420, 21895, 26749, 20303, 54286, 11468, 51973, 1635, 50706, 35698, 64949, 62716, 53567, 14115, 19032, 694), (35318, 2659, 57515, 7332, 40279, 62339, 28636, 54671, 12911, 51113, 4753, 7568, 51696, 7480, 62069, 62169, 38477, 40065, 63635, 45087, 7336, 8949, 29661, 26512, 1408), (61778, 18372, 22916, 6421, 23075, 20384, 22924, 27725, 47168, 64944, 14721, 28032, 33492, 25969, 32179, 11111, 15362, 46787, 40104, 62498, 60748, 56007, 30557, 51383, 49402), (44507, 22297, 15626, 11138, 16243, 34975, 59593, 29742, 28338, 7152, 3361, 39687, 3100, 3899, 64632, 40184, 20990, 53437, 9967, 24828, 12958, 59996, 36130, 61328, 49741), (46419, 8775, 38978, 25207, 49714, 33095, 61362, 45982, 2980, 66, 7210, 36122, 61835, 14814, 63472, 51343, 57338, 19357, 15635, 61860, 20688, 51655, 24199, 40564, 14126), (36094, 62752, 62745, 671, 54792, 35251, 32569, 29945, 61833, 28101, 42665, 19473, 40919, 17448, 40478, 25718, 49028, 55652, 25081, 3836, 49942, 6671, 47646, 54503, 46628), (43021, 29427, 12640, 20309, 28712, 6921, 52820, 25287, 13171, 29863, 6148, 18846, 39304, 12660, 48191, 37007, 65429, 64575, 35424, 16317, 36733, 43015, 5976, 2348, 20529), (26396, 22225, 47971, 27284, 61466, 18856, 11275, 55373, 23257, 47561, 22340, 34273, 64321, 59056, 40976, 45388, 33707, 54272, 21138, 36293, 6887, 29576, 57913, 5683, 52878), (35322, 49931, 39571, 12911, 10564, 13215, 51929, 48907, 31753, 49800, 52523, 43658, 60805, 45781, 31078, 59931, 50406, 48612, 9262, 52380, 12869, 44495, 37759, 35238, 64654), (51744, 23690, 61871, 40623, 56836, 47970, 52786, 3677, 53133, 14507, 65141, 32996, 11637, 917, 567, 4072, 50318, 17295, 756, 60530, 3513, 27806, 9362, 49621, 17465), (28912, 24557, 47100, 49673, 1840, 39141, 28867, 62941, 56031, 35779, 32658, 28476, 35210, 29027, 43279, 45177, 17684, 6605, 19589, 42506, 46170, 25807, 64243, 62907, 49740), (62693, 12022, 31061, 29880, 59706, 8593, 54752, 61927, 65091, 50452, 31285, 44448, 48296, 25513, 29515, 19206, 60356, 3724, 11054, 33890, 2075, 3182, 6513, 15992, 23389), (37048, 24550, 53143, 64535, 5484, 50995, 36812, 49481, 39082, 55441, 42268, 2179, 63279, 40520, 38, 25575, 49328, 19231, 11554, 55024, 32685, 51805, 31044, 5213, 60012), (58493, 26844, 55535, 11896, 53877, 230, 14124, 43884, 61059, 25080, 63582, 41528, 4167, 32497, 50901, 24647, 60267, 56582, 18928, 16462, 37992, 20417, 31843, 28987, 11501), (32947, 39920, 22571, 48651, 2491, 51179, 43149, 17170, 51739, 17402, 2117, 23149, 13252, 65479, 24840, 14658, 46214, 5365, 8979, 22938, 63016, 11220, 21817, 36473, 47998), (1033, 7295, 33096, 15709, 6470, 26664, 26961, 17754, 48988, 6944, 61031, 59519, 24613, 18224, 59805, 34045, 53322, 48966, 6215, 63013, 37270, 3702, 45911, 18471, 41793), (44049, 52929, 22215, 40602, 55329, 59732, 45509, 56877, 21911, 4007, 39188, 27720, 45269, 19329, 7566, 44285, 11421, 6887, 45138, 47046, 38229, 57521, 19116, 55114, 11116), (14015, 39772, 32331, 35406, 49627, 24421, 592, 50328, 60751, 47704, 63152, 26872, 19622, 40431, 16318, 47335, 41746, 47762, 49605, 59460, 12533, 30479, 15090, 38698, 59449), (44029, 52891, 38354, 37813, 37020, 57441, 54459, 60842, 17425, 51577, 316, 38017, 59380, 5239, 38384, 19661, 50345, 41230, 39509, 8401, 65229, 54097, 53578, 32693, 12734), (58852, 33428, 280, 20439, 15757, 41997, 52470, 60567, 63969, 50724, 6995, 64357, 23787, 26807, 16690, 65509, 16946, 42181, 15672, 22593, 18573, 56922, 17055, 34481, 39070), (4258, 1875, 50905, 65155, 60637, 59925, 60381, 45498, 58783, 707, 3011, 55554, 27993, 33427, 63501, 44797, 54992, 34007, 4394, 48782, 59888, 5892, 45084, 43044, 39549), (47800, 45880, 38963, 57213, 62669, 63292, 29216, 16951, 28952, 32098, 25444, 49971, 41892, 37988, 61714, 10615, 21529, 5874, 42354, 33931, 5770, 55071, 22008, 15321, 48563), (7666, 63315, 27867, 38191, 51517, 34526, 8705, 45915, 61406, 37274, 30932, 19538, 22988, 843, 10899, 16471, 55748, 11337, 60897, 1151, 47726, 20191, 27764, 33011, 281), (44491, 56739, 41425, 47202, 52342, 23378, 63825, 6633, 11898, 32141, 41201, 50496, 4966, 37384, 29162, 27943, 46501, 32712, 54328, 3898, 16830, 52100, 22176, 21840, 7099), (36547, 50240, 51608, 59796, 17285, 38400, 43056, 3033, 33641, 29543, 8347, 30294, 55755, 57125, 36192, 45853, 63701, 43882, 54613, 52197, 38572, 736, 1753, 33176, 10888), (17126, 14777, 49957, 11609, 2260, 57808, 1505, 42332, 7819, 22706, 49046, 49187, 3105, 36193, 29855, 47703, 1667, 12235, 58881, 39267, 14025, 18957, 16677, 23494, 20531), (65126, 4463, 29789, 38411, 42426, 64920, 13285, 1069, 28747, 21619, 17200, 56729, 39609, 26687, 1870, 46670, 64502, 47955, 45636, 32500, 62260, 27511, 46195, 44502, 64638), (22953, 15164, 46166, 40119, 9342, 17289, 8942, 44913, 55593, 34458, 26211, 20373, 57136, 27022, 17417, 4428, 58718, 16575, 29576, 25699, 32528, 64101, 3629, 50773, 12475), (6281, 33672, 13970, 51347, 7111, 59686, 29700, 65236, 13373, 1667, 38767, 791, 17028, 10850, 43187, 52400, 45239, 23128, 5190, 14282, 62990, 48007, 48210, 62375, 21723), (57871, 8903, 65120, 6023, 42084, 37817, 56778, 3838, 37299, 62112, 15304, 11160, 57614, 4333, 32146, 8273, 7681, 50186, 52355, 47884, 15351, 25092, 34186, 23518, 64604), (31207, 38513, 62642, 61622, 1055, 51323, 58740, 32182, 3913, 25882, 25263, 16810, 1280, 53505, 24807, 49426, 5486, 26362, 19982, 35555, 22541, 35060, 52809, 32532, 37624), (40577, 33733, 18676, 39922, 31732, 26761, 12977, 46375, 62675, 10345, 62268, 15946, 39764, 17015, 40324, 42457, 45383, 1015, 5396, 34510, 63481, 33456, 29458, 20949, 1599), (61540, 29175, 63557, 5405, 57593, 3846, 5442, 26745, 13537, 47100, 64065, 34056, 143, 29955, 29987, 8459, 35854, 48752, 14759, 24859, 33300, 61949, 954, 40980, 15608), (25209, 60170, 34259, 45675, 28885, 27034, 13603, 53924, 23568, 9217, 28915, 26783, 65338, 7518, 33357, 1146, 56433, 20112, 32451, 7959, 49350, 34694, 3240, 22514, 31827), (49018, 49762, 54715, 41874, 30640, 32419, 36736, 26242, 18587, 54536, 18194, 31589, 48986, 10622, 6150, 12689, 55556, 21808, 13106, 14561, 10137, 59467, 58344, 55524, 20716), (59760, 12330, 4736, 32604, 22399, 3209, 22257, 10063, 56794, 61560, 9386, 1316, 8713, 38511, 54391, 64128, 31262, 12402, 14926, 10065, 57568, 18716, 56893, 50431, 38452), (41775, 43406, 15840, 26889, 52878, 14767, 45258, 44226, 46316, 22753, 35617, 30370, 61519, 17456, 51855, 57899, 44411, 36646, 26232, 46923, 32210, 31101, 57918, 31491, 48305), (31932, 8195, 20264, 22185, 12341, 32450, 40468, 40194, 5236, 15393, 23692, 26274, 44912, 23664, 39876, 6288, 14416, 47884, 23942, 21356, 47045, 2355, 7174, 55793, 5899), (41179, 43376, 59022, 31588, 63752, 47138, 59457, 17939, 44100, 50900, 21604, 3241, 50463, 16341, 995, 55792, 8171, 6173, 62050, 60712, 8716, 57675, 471, 51461, 52279), (60906, 35728, 12887, 7680, 15544, 33531, 38108, 33929, 38830, 32916, 61235, 43886, 44066, 33046, 49859, 51975, 29168, 26073, 7855, 1682, 7697, 53757, 5100, 20482, 12294), (20744, 62533, 32040, 32864, 34801, 38760, 12455, 59871, 47787, 55564, 37671, 55868, 4038, 23412, 4161, 8945, 48324, 21462, 53808, 32447, 55560, 52403, 6204, 16074, 25759), (62136, 59381, 56589, 20239, 32177, 17307, 2162, 39791, 62888, 65094, 55009, 18557, 445, 40699, 43117, 14984, 2503, 36601, 3263, 3117, 56379, 57234, 62303, 21544, 33527), (49420, 33908, 51697, 31351, 39412, 36749, 15400, 60266, 24219, 33971, 38693, 15254, 36910, 16958, 11124, 62317, 7172, 37531, 39852, 21372, 51734, 24247, 8349, 18451, 31683), (11290, 57344, 20620, 33350, 22734, 46032, 62460, 10717, 14455, 45269, 38724, 1088, 39797, 48599, 27154, 30079, 53063, 26217, 11728, 27377, 22768, 33007, 18338, 30332, 35422), (27810, 54576, 31210, 37790, 49868, 51271, 53119, 56226, 31321, 41885, 18631, 33718, 6319, 31291, 23157, 17316, 64768, 23388, 41674, 32586, 26816, 11418, 50941, 11395, 20161), (14924, 11414, 980, 45398, 42331, 14658, 46974, 19201, 33329, 32736, 49787, 55325, 11785, 58637, 24957, 18789, 16678, 9732, 41963, 9221, 14904, 36059, 5322, 26555, 23280), (31960, 27764, 60888, 41252, 40017, 54501, 14889, 35216, 23078, 14200, 35821, 54519, 26086, 18133, 59219, 480, 24325, 40260, 37716, 51049, 24763, 620, 31828, 25187, 46109), (45544, 54064, 1155, 11568, 55850, 47596, 49554, 37128, 32113, 25839, 59323, 3306, 48313, 29777, 43114, 43218, 31951, 19636, 41033, 48677, 37912, 4439, 52672, 45945, 61273), (6583, 15612, 56560, 27457, 37885, 811, 27472, 35620, 23307, 47595, 12821, 37839, 2295, 3148, 33868, 26635, 55788, 1902, 10752, 10522, 56669, 59010, 667, 35734, 3302), (47602, 362, 40408, 20685, 33561, 48382, 2602, 28508, 59065, 41452, 6471, 56497, 55740, 45242, 15009, 8004, 45641, 60657, 23504, 23392, 56348, 55434, 31140, 57807, 44624), (11574, 33546, 6425, 24309, 61960, 547, 61735, 44861, 6394, 35242, 61500, 62210, 8161, 33717, 24827, 20736, 6109, 36710, 13108, 47615, 2365, 23469, 50554, 33929, 10213), (38514, 11905, 9818, 48320, 7648, 15444, 31945, 7820, 39340, 37854, 64397, 24218, 22594, 19014, 870, 30798, 23310, 29514, 62976, 12858, 7289, 54096, 26351, 46809, 5704), (31863, 8845, 31045, 18400, 33116, 53627, 35080, 22970, 2674, 59192, 43938, 31962, 56161, 51886, 52096, 15059, 47933, 20121, 61878, 1658, 63622, 18800, 49684, 38180, 13948), (55875, 10322, 45271, 38967, 39026, 40012, 7690, 46309, 17709, 30357, 56975, 15716, 24265, 6937, 15201, 8204, 40586, 6204, 9783, 65197, 47792, 11948, 28125, 63292, 623), (24258, 53571, 56730, 33791, 22863, 31834, 25850, 65322, 2867, 47206, 17379, 60559, 14113, 59729, 58067, 40837, 16440, 31203, 21282, 30949, 57561, 34713, 43238, 10328, 35991), (34961, 24798, 1480, 43232, 27933, 50909, 14501, 20690, 33991, 31459, 18322, 55750, 23286, 43000, 62349, 9101, 37568, 49874, 55500, 59424, 10515, 8170, 35689, 19390, 12676), (23767, 49835, 15539, 26257, 39179, 55785, 5614, 38587, 16929, 4026, 19696, 28503, 57066, 22454, 5027, 43182, 3245, 53774, 44590, 6508, 33713, 52722, 25326, 44262, 5171), (24630, 46000, 44776, 27926, 62198, 6858, 43391, 402, 30017, 43391, 30978, 26976, 54914, 44273, 39785, 12178, 10762, 22018, 47653, 34252, 41764, 19470, 34404, 28501, 53312), (27703, 64263, 30241, 62133, 20977, 7576, 63936, 31824, 23898, 944, 58873, 12088, 29477, 5183, 54045, 11336, 18024, 59893, 31274, 13946, 17506, 6000, 40409, 7813, 23687), (10846, 55583, 21891, 45062, 28668, 21070, 61955, 58729, 2999, 64957, 16401, 49269, 25283, 57011, 6817, 34021, 45700, 9433, 55562, 35313, 64081, 22759, 12313, 37994, 12354), (46908, 61208, 21549, 36717, 47801, 25502, 17436, 11717, 27258, 60403, 17176, 62643, 47511, 6568, 51014, 1359, 10202, 64019, 38271, 13682, 6991, 60060, 21187, 6808, 8308), (2522, 40767, 18351, 34686, 41850, 26592, 20099, 4596, 7264, 43184, 65107, 6807, 24395, 31384, 58845, 41893, 39376, 31013, 26578, 30904, 8544, 38937, 29885, 53250, 43138), (11430, 25113, 10732, 49353, 54369, 9622, 8053, 50345, 12686, 19757, 39378, 40728, 58021, 60258, 38064, 47680, 60532, 56982, 5432, 33250, 951, 28976, 64551, 52352, 25121), (60151, 22317, 59487, 17393, 29261, 41470, 33925, 1898, 49703, 23814, 27357, 57173, 41835, 21588, 44686, 32544, 58418, 59456, 52458, 60669, 28896, 59545, 45667, 54902, 12351), (39983, 63788, 2900, 29247, 25359, 53575, 29078, 65393, 24080, 27200, 46267, 21854, 20164, 42105, 16435, 28613, 45919, 54966, 28981, 65223, 63064, 26992, 36997, 41605, 6976), (15500, 34867, 50495, 29389, 55660, 21194, 1822, 52615, 51842, 61201, 35680, 22971, 2629, 1890, 22358, 24604, 17905, 38551, 39103, 3036, 65139, 51662, 11973, 60710, 64773), (38500, 27088, 47974, 12887, 30022, 50699, 58037, 29612, 64140, 12208, 21887, 54465, 14381, 3719, 10848, 39152, 49050, 42917, 14671, 3088, 48870, 27616, 42935, 19636, 22425), (4890, 47931, 42696, 21026, 53065, 63018, 27022, 14329, 14887, 50745, 63957, 5828, 58542, 29718, 38148, 41826, 61722, 62179, 5349, 40926, 44925, 54125, 31089, 982, 3246), (56941, 25301, 36482, 58770, 26231, 39551, 9758, 24846, 61039, 36742, 22094, 51029, 53396, 33273, 20989, 55246, 5190, 35667, 39283, 15560, 2424, 39178, 7610, 502, 61668), (45955, 64649, 57091, 23326, 30513, 52722, 22456, 25636, 59178, 61951, 4600, 17039, 63795, 54564, 63825, 28934, 40751, 57808, 13007, 41406, 59819, 56352, 62022, 63436, 4496), (38991, 27726, 30784, 61933, 59633, 6981, 22, 61572, 31857, 63602, 34143, 46712, 27497, 27736, 25125, 31324, 34009, 8349, 35433, 5002, 42784, 60860, 18768, 25631, 57072), (59036, 64992, 59070, 22401, 47588, 6986, 17938, 4462, 36225, 54626, 17833, 26335, 5219, 11314, 18744, 10801, 33623, 28413, 39095, 15729, 49249, 64799, 14711, 44422, 23661), (50577, 49517, 45107, 2003, 2578, 2448, 9961, 36675, 2871, 59923, 6620, 42295, 13897, 16128, 47243, 19572, 49484, 29328, 52898, 58744, 22900, 39176, 4831, 52660, 21535), (47256, 5116, 4297, 62579, 14968, 9674, 28051, 34737, 18568, 60931, 15044, 60714, 27944, 64681, 51273, 48485, 44973, 42499, 14256, 60956, 37783, 22616, 30113, 28339, 15223), (15658, 45438, 27030, 44854, 1254, 52651, 37189, 2959, 60247, 18336, 58405, 63846, 60392, 53945, 45997, 62580, 51488, 24983, 50331, 51126, 53320, 53885, 32972, 17324, 464), (16355, 37700, 17527, 24445, 14604, 4654, 37393, 46292, 15379, 54510, 31120, 23868, 28267, 12078, 13973, 28581, 33010, 10613, 38960, 2573, 26949, 64948, 46690, 24233, 23032), (1887, 64933, 29753, 38644, 46928, 21001, 47120, 57250, 39069, 60845, 15932, 14914, 46297, 1721, 51279, 39630, 43716, 12441, 38389, 143, 65358, 36523, 14392, 37640, 30380), (25481, 39140, 62717, 21583, 46470, 21758, 13338, 4255, 58299, 23091, 33226, 3860, 26889, 48949, 49793, 9383, 3938, 16099, 40421, 39022, 31454, 43500, 58488, 63728, 25075), (46697, 38622, 52989, 26121, 19587, 48206, 6388, 38920, 56593, 3667, 51564, 13608, 62171, 43786, 14880, 5709, 22048, 58228, 6008, 53677, 13325, 5874, 6131, 621, 33004), (48311, 46271, 11438, 47367, 14229, 37620, 8542, 56905, 16562, 57503, 64873, 39978, 5037, 51789, 6427, 4571, 9452, 63563, 921, 47551, 54173, 43863, 27574, 32684, 15168), (10750, 65112, 55772, 48980, 65125, 19230, 33247, 22789, 54209, 13356, 10726, 53229, 15018, 49679, 39109, 64282, 26720, 36376, 48420, 37427, 46543, 28156, 458, 57450, 55038), (21790, 17739, 43411, 6198, 13795, 34492, 46749, 36992, 59189, 61949, 33808, 19569, 59362, 26166, 62372, 22094, 52647, 13589, 21635, 18821, 54718, 57728, 26270, 40682, 25371), (2, 24573, 14402, 12875, 52743, 28860, 46402, 11996, 17939, 20762, 25882, 50582, 30869, 13478, 8913, 54608, 16803, 2650, 16470, 63451, 29753, 31845, 63017, 48074, 51680), (46273, 44706, 9367, 17509, 34524, 7436, 5248, 26773, 40395, 61715, 6949, 44716, 25629, 49605, 36784, 56697, 29968, 36952, 50060, 9912, 21533, 53079, 49279, 50264, 37715), (31119, 17015, 43118, 34860, 49113, 63960, 7648, 44282, 29967, 27990, 49105, 36321, 16465, 33104, 54481, 45810, 11618, 36971, 49837, 20655, 23679, 49667, 37948, 6962, 2423), (13345, 51212, 11335, 44015, 56326, 35100, 8690, 54753, 51413, 23009, 47453, 63381, 13897, 17266, 46005, 29189, 15568, 64486, 2238, 19229, 49532, 41128, 13917, 12795, 29964), (26527, 48890, 16051, 27837, 23979, 56510, 64077, 1769, 63022, 35609, 64783, 32770, 14041, 57732, 9942, 19357, 62592, 19753, 44636, 60598, 18488, 15705, 26966, 490, 61251), (62129, 5327, 11284, 49790, 19148, 32420, 35448, 35688, 39647, 59442, 5312, 41868, 32015, 14723, 63712, 54547, 27902, 56674, 33958, 20071, 28477, 10310, 38093, 62848, 57982), (21417, 45979, 55689, 57192, 11998, 31573, 22900, 15552, 50550, 11213, 13159, 55202, 949, 19090, 63947, 47013, 54188, 54409, 1831, 1417, 7477, 29238, 13250, 62086, 23298), (6365, 21620, 52484, 548, 44802, 55191, 2183, 28772, 37477, 33684, 16630, 53340, 34614, 22639, 46170, 37917, 59249, 3976, 16136, 4952, 45850, 60937, 58712, 2672, 10184), (51843, 13570, 60205, 13755, 9356, 37438, 42268, 59424, 43700, 35541, 9387, 59770, 30162, 53631, 2874, 54916, 54697, 27888, 45975, 17306, 5361, 10039, 11324, 47882, 8125), (3903, 3529, 9237, 21707, 16154, 54194, 4646, 15685, 26628, 9247, 21401, 47742, 14912, 15561, 50069, 50572, 16338, 46281, 58048, 14891, 37746, 9667, 12857, 7355, 63226), (37185, 14011, 37646, 15052, 50449, 44716, 11773, 36588, 32502, 52759, 24230, 28284, 729, 59297, 53332, 10315, 3025, 59663, 30642, 318, 18288, 16822, 9809, 22029, 32709), (37052, 15035, 44022, 20314, 43252, 13065, 9670, 55590, 63456, 39718, 10528, 17391, 28881, 52461, 34551, 47153, 6621, 702, 40, 40748, 5168, 3912, 57443, 23282, 29028), (21868, 44234, 15108, 4882, 26849, 53607, 18328, 40632, 46021, 23037, 13917, 40278, 12851, 57985, 20285, 16101, 40554, 3542, 4146, 12473, 26115, 37025, 27608, 65151, 16183), (689, 10992, 40723, 8520, 21176, 39019, 42296, 5766, 4262, 27969, 27622, 17638, 49095, 21547, 16205, 59984, 60809, 12294, 57604, 15460, 52426, 40337, 47431, 56864, 48610), (41349, 20290, 20093, 36447, 13023, 19213, 29555, 21866, 7959, 15722, 59781, 23215, 55135, 54993, 762, 23978, 43471, 14877, 5450, 8823, 60439, 53793, 38113, 52597, 10613), (60004, 48600, 38055, 53266, 2239, 45101, 14562, 56058, 22769, 34856, 43069, 21170, 12164, 6159, 60534, 56317, 50748, 53747, 54160, 52837, 41518, 28595, 26609, 5019, 31754), (54993, 37810, 44612, 24956, 35693, 46729, 35200, 45087, 44646, 12973, 4996, 38485, 28662, 21625, 24060, 26138, 43365, 61688, 17282, 12399, 43370, 46646, 61654, 8277, 60707), (47305, 42503, 29161, 23817, 18244, 63054, 35011, 34863, 19519, 57132, 1798, 3587, 50194, 28019, 62819, 34290, 42888, 15937, 56994, 52387, 10733, 57404, 4653, 15709, 49695), (50753, 32360, 12260, 64160, 53263, 48934, 59204, 63449, 29227, 47692, 18865, 10695, 4176, 51655, 63210, 18482, 6483, 4912, 22234, 38249, 11112, 63955, 49850, 8447, 21918), (43821, 24366, 55701, 15894, 5393, 59354, 59073, 46463, 41196, 40231, 12631, 12135, 42302, 5928, 337, 62275, 60594, 59580, 15803, 7944, 7169, 19807, 4469, 57579, 39026), (11736, 19557, 57341, 1675, 26652, 39128, 61467, 30135, 20264, 36551, 16104, 61716, 51718, 19479, 29315, 39188, 10777, 24811, 53709, 19531, 7346, 50374, 32322, 2805, 215), (43143, 268, 58101, 46773, 4522, 26032, 3973, 39357, 38081, 58733, 3415, 31719, 35713, 40073, 64118, 34582, 41330, 6028, 45748, 4561, 59839, 64992, 44437, 41621, 63118), (11822, 15688, 55019, 29794, 40154, 10567, 48700, 17056, 48001, 35882, 10800, 10566, 59714, 39598, 37599, 30652, 8587, 2154, 29101, 4140, 65323, 21019, 41729, 11535, 17703), (65466, 28762, 2675, 48244, 18893, 29255, 64651, 33843, 38688, 8189, 50214, 31683, 52273, 33390, 47096, 3696, 25433, 52219, 40115, 49717, 56077, 31995, 46708, 57882, 25178), (60573, 11376, 41467, 33940, 46107, 18848, 28730, 6184, 49925, 15927, 28552, 18569, 36265, 35104, 50227, 16447, 34109, 43489, 30662, 25947, 42608, 46143, 40230, 1033, 47754), (40350, 42944, 54500, 13453, 63371, 54415, 53888, 45999, 48543, 2471, 25628, 17997, 11409, 15531, 45796, 39659, 9373, 13640, 44408, 21993, 35855, 26046, 60782, 20833, 62842), (65028, 25670, 48366, 48130, 8316, 37983, 52619, 44778, 824, 55331, 62647, 42551, 42016, 22032, 14080, 33979, 16718, 64104, 3636, 24609, 30941, 18414, 4917, 2909, 55065), (40890, 36529, 63797, 5496, 62595, 6997, 2958, 47080, 38311, 34519, 44360, 34016, 30097, 16456, 3951, 25711, 2732, 41412, 62550, 44487, 41189, 60044, 28827, 10701, 36779), (22237, 54647, 44861, 28678, 51579, 1770, 52158, 31676, 16390, 48019, 34582, 37775, 11377, 56088, 32469, 39684, 9087, 8956, 44310, 34763, 6366, 12385, 52953, 48994, 10409), (55616, 62767, 50898, 63462, 3543, 28074, 50374, 54156, 5418, 56396, 62662, 53186, 29349, 14819, 19002, 44406, 36054, 1485, 25235, 41490, 44526, 500, 37866, 5828, 15471), (26832, 31976, 2084, 15062, 43893, 51714, 1777, 9176, 19539, 42023, 24186, 13795, 45907, 65253, 37868, 15628, 42579, 18722, 19105, 21260, 40603, 60266, 47298, 4460, 36071), (21719, 26951, 64384, 2132, 53088, 13132, 62940, 50460, 10516, 55411, 1758, 24845, 54841, 57079, 56731, 56764, 26606, 10813, 12673, 6906, 12182, 13224, 46131, 62680, 42668), (15852, 23354, 1308, 25192, 60710, 39038, 16095, 4955, 62978, 33997, 22639, 51031, 13416, 60604, 45103, 14622, 53903, 59220, 17323, 37949, 6405, 37651, 6014, 17322, 21123), (6563, 14917, 49972, 58362, 64979, 24731, 35191, 29030, 32793, 44462, 13251, 12937, 4926, 53609, 8762, 30171, 24097, 22315, 63868, 32159, 51036, 65524, 38289, 6917, 59659), (7753, 37615, 24528, 9982, 60887, 47577, 32025, 2383, 55857, 61048, 32953, 4803, 49168, 22891, 14580, 23152, 13598, 32470, 4859, 24616, 42021, 39527, 31212, 25294, 39905), (11971, 46288, 50315, 7553, 17548, 56280, 18364, 59994, 20454, 20513, 40749, 9857, 50241, 9080, 7636, 13742, 5526, 13445, 23824, 45944, 11435, 563, 12888, 5217, 49263), (25298, 56789, 64354, 51543, 5218, 29948, 36896, 31789, 38076, 55659, 26511, 12706, 19351, 43263, 53305, 63472, 63142, 10130, 47146, 35688, 13690, 10093, 27704, 36080, 63557), (13681, 10624, 18990, 62410, 12498, 41572, 37012, 8426, 14195, 16326, 16853, 2139, 26531, 32405, 7853, 10932, 61893, 4722, 54321, 10735, 5881, 587, 2940, 62155, 18849), (13387, 47370, 63812, 33792, 58978, 33891, 40030, 59705, 51481, 25121, 26179, 36727, 46754, 38675, 39033, 15423, 14913, 4492, 30617, 23760, 12686, 63261, 32106, 23205, 14719), (51689, 31129, 24334, 53841, 6402, 43519, 28676, 20731, 14116, 12402, 52858, 58964, 17431, 41357, 7484, 56929, 28203, 21573, 8239, 59125, 40420, 50746, 48851, 46182, 7472), (33759, 13180, 61857, 44161, 39785, 2407, 13390, 50930, 52209, 39019, 33280, 29974, 51760, 49754, 63668, 17554, 23466, 40786, 60674, 34122, 30870, 1846, 37251, 56741, 53215), (12013, 5634, 63034, 18046, 31162, 39531, 55354, 42913, 7190, 56639, 44622, 3893, 9014, 39720, 36859, 35309, 19915, 59809, 21268, 23049, 4400, 38391, 41722, 5113, 11063), (27790, 50670, 39382, 19520, 13030, 29137, 22313, 22686, 41668, 18915, 43918, 32143, 40063, 45818, 1568, 26587, 27219, 6256, 19819, 7149, 43359, 34307, 55464, 20489, 56888), (43985, 29761, 19983, 25501, 6795, 63727, 20427, 53990, 33829, 57274, 39582, 30265, 36033, 32052, 20766, 31612, 53458, 45566, 11712, 56761, 31457, 13928, 41597, 28588, 43494), (37295, 52920, 53779, 7505, 23246, 56869, 59012, 35903, 44740, 57007, 57475, 3357, 59708, 55846, 65051, 923, 57563, 47603, 63010, 61825, 30122, 33295, 5130, 50210, 11487), (47891, 35045, 33943, 62526, 439, 32300, 39573, 54601, 63415, 27563, 26557, 25355, 28399, 8840, 40894, 19715, 26090, 27554, 53860, 49247, 58938, 56360, 45266, 57580, 36123), (6083, 64562, 35185, 64708, 20918, 56066, 45010, 190, 35893, 35706, 25398, 21744, 59159, 4860, 53017, 38968, 40552, 38943, 42684, 31593, 62997, 30752, 23036, 33353, 3167), (37572, 33478, 36632, 23123, 25117, 51523, 4424, 11604, 5773, 11377, 24038, 19004, 14013, 53406, 5355, 6457, 2672, 42845, 22793, 21748, 9746, 42130, 29319, 2769, 22701), (27527, 62884, 37510, 21281, 10981, 4638, 34155, 41792, 63989, 1876, 27302, 18799, 44068, 11593, 50906, 40865, 49071, 12867, 24399, 14481, 19587, 28184, 48564, 45425, 7905), (55327, 30080, 30191, 48087, 39072, 14671, 58252, 3224, 30070, 52228, 11763, 34327, 4400, 35921, 42476, 38294, 19715, 55056, 61956, 37851, 7587, 35657, 9340, 37829, 54169), (51933, 6073, 53935, 12895, 55593, 12530, 44542, 61233, 60062, 22663, 42592, 10780, 14249, 50837, 38734, 33239, 15860, 31407, 29182, 43907, 14844, 38785, 24267, 26783, 64798), (55517, 20584, 17945, 53621, 64214, 2917, 5802, 59910, 53445, 37728, 55920, 59969, 58424, 35722, 55222, 15616, 35769, 34670, 20957, 34902, 17395, 37370, 10887, 23206, 49992), (37978, 58015, 16416, 14124, 47475, 27015, 38713, 18591, 34708, 42217, 62669, 58317, 64339, 25675, 17690, 41607, 29533, 24483, 55578, 57964, 41306, 56104, 55851, 48956, 8774), (22019, 27418, 54944, 50505, 19245, 20876, 14210, 18039, 28407, 11086, 6347, 17101, 35523, 35936, 39772, 40012, 8384, 36420, 54902, 21945, 6190, 177, 24802, 27178, 5492), (50519, 18630, 14295, 7962, 10410, 54499, 2849, 32734, 13750, 48281, 13649, 52739, 8010, 39736, 3683, 12160, 12087, 1093, 22075, 58169, 29209, 6529, 6478, 32426, 46547), (48083, 18917, 28158, 28322, 35740, 63287, 3077, 55031, 31895, 48070, 44569, 49778, 35721, 246, 47073, 59126, 55949, 32729, 10633, 54288, 41567, 52586, 59551, 35337, 61843), (13064, 65282, 13169, 1996, 6476, 47666, 65305, 31123, 56901, 62372, 6200, 36609, 35978, 46025, 44264, 59591, 13445, 37009, 13695, 26167, 42517, 5037, 7438, 41049, 13441), (423, 21191, 46381, 31547, 53040, 15630, 20459, 64961, 46048, 27761, 27462, 33211, 43423, 52431, 51780, 40986, 24212, 41497, 40513, 13345, 49125, 2822, 14108, 23954, 6149), (42967, 27474, 24769, 43781, 43960, 27583, 17271, 11520, 2320, 37899, 60357, 58574, 37507, 20828, 25031, 44323, 3828, 31119, 33923, 23068, 52129, 31813, 3958, 53643, 64993), (9577, 39703, 11596, 30874, 7507, 46494, 16874, 41234, 58191, 61849, 2751, 5770, 38449, 15772, 4853, 48960, 48572, 1719, 58079, 33744, 46348, 28951, 9744, 21933, 21282), (21691, 33604, 56484, 38509, 63020, 46523, 39199, 29612, 36300, 33025, 39572, 53789, 29709, 50446, 13847, 50700, 39780, 33649, 17766, 25483, 14593, 52638, 33704, 44349, 35663), (18300, 13467, 33961, 25407, 27856, 15593, 40467, 16401, 62199, 7145, 50201, 489, 46765, 35183, 31813, 37070, 45328, 17551, 24687, 9718, 49272, 12308, 46988, 48519, 29085), (23830, 44880, 31344, 36477, 63209, 55858, 19715, 23522, 40181, 31872, 57383, 21773, 19853, 52944, 26193, 24820, 17338, 28949, 25186, 41240, 45882, 15326, 53655, 25302, 55795), (22227, 48584, 64449, 29674, 64503, 32106, 10988, 36419, 24358, 56798, 19567, 42252, 1050, 10411, 12194, 4091, 8466, 46776, 1487, 54167, 34834, 45587, 35919, 24760, 56443), (25245, 57306, 63132, 31366, 18284, 63396, 36528, 29061, 20462, 7081, 58145, 24580, 44360, 13573, 38520, 25828, 5878, 14181, 9670, 30754, 33403, 35190, 60366, 27974, 22971), (13476, 35146, 59114, 48217, 11407, 61845, 22831, 27818, 44652, 46067, 52919, 3684, 25362, 37786, 13934, 1496, 13811, 51774, 56160, 37005, 35796, 18838, 52014, 58439, 48318), (42566, 36556, 48463, 35309, 27761, 57655, 42313, 15533, 2484, 21133, 32981, 58714, 24570, 28853, 44241, 27355, 12877, 18885, 29932, 8798, 35904, 32775, 32372, 15923, 21041), (35125, 8054, 24820, 17263, 23759, 14476, 62409, 51293, 47615, 40735, 58844, 61582, 38169, 57508, 36167, 32700, 9848, 21465, 3000, 42532, 32854, 57997, 45612, 57820, 54858), (10739, 29014, 43584, 12085, 13138, 63632, 21186, 46848, 33075, 54034, 22025, 63789, 50420, 7721, 57285, 43249, 17709, 61257, 23789, 37898, 44264, 4316, 49702, 7420, 60823), (16612, 54678, 54279, 49487, 29796, 57118, 14760, 54863, 39848, 46770, 27616, 34694, 30541, 42991, 50194, 7689, 23812, 15776, 33395, 65079, 9743, 26229, 47642, 14866, 57491), (30143, 22159, 42875, 11025, 23615, 9859, 17542, 41187, 47108, 57968, 29889, 44007, 49083, 55801, 9985, 13291, 11478, 51895, 27161, 53692, 46230, 38077, 50445, 11510, 7387), (8306, 18, 23880, 56789, 33292, 12622, 33678, 19680, 19628, 21100, 2032, 35934, 58561, 45446, 17218, 59857, 38896, 10691, 33386, 24910, 18911, 3873, 8607, 16424, 15006), (43793, 422, 60890, 15057, 25110, 31402, 54732, 39006, 21053, 22910, 53593, 59332, 36578, 35611, 34224, 39812, 2968, 9814, 52586, 43887, 59136, 16793, 28277, 64633, 42882), (34587, 58560, 46837, 26386, 32962, 24741, 11060, 30031, 37282, 34819, 51773, 22453, 52012, 31794, 28734, 8660, 18762, 39696, 24417, 6678, 57542, 10747, 42737, 56259, 63247), (29542, 60060, 2528, 14800, 9178, 28216, 43008, 11309, 37409, 25293, 31729, 57745, 51753, 13865, 53944, 4679, 15926, 28792, 18034, 19445, 25398, 54124, 37769, 33585, 9771), (26111, 58318, 43611, 21501, 43758, 3041, 35855, 34550, 64441, 35010, 14687, 39657, 21323, 17134, 32475, 3973, 38922, 3240, 23080, 15693, 8703, 8095, 25797, 46815, 34916), (18027, 46554, 16941, 9060, 20593, 22254, 44684, 20069, 32743, 58939, 9375, 1718, 50129, 56034, 33371, 18547, 16613, 43742, 36222, 55198, 37465, 61031, 21604, 63409, 46693), (48279, 61287, 41313, 10599, 42410, 34482, 42531, 3521, 62836, 17930, 52821, 57826, 47922, 46637, 59914, 30231, 58619, 49880, 22143, 52099, 47903, 15637, 12797, 11068, 33241), (36498, 54883, 3611, 34180, 12920, 58424, 45575, 42098, 2526, 55901, 64879, 32172, 40498, 63611, 36512, 62469, 54218, 63965, 12138, 38993, 25804, 31160, 30662, 7875, 9522), (60174, 49418, 35968, 10654, 49995, 27839, 53551, 63322, 18449, 4739, 51937, 38608, 25038, 16611, 1897, 17938, 4104, 52133, 23170, 7704, 25020, 4061, 63399, 42296, 18092), (17187, 15286, 5596, 9842, 3370, 58586, 8310, 29188, 28896, 34546, 36759, 42396, 12643, 30138, 64505, 41365, 30084, 24157, 20642, 50533, 45302, 37420, 5745, 34752, 16350), (11263, 34967, 37597, 7389, 48285, 26245, 21016, 55433, 40514, 1863, 51022, 58691, 20263, 4983, 6867, 51217, 53803, 41877, 47646, 17301, 9053, 51786, 43607, 9173, 5499), (40243, 13456, 37953, 59312, 35213, 7802, 3538, 45675, 60253, 34356, 12561, 57935, 48390, 60784, 12977, 27579, 17944, 47399, 29603, 35058, 49245, 814, 62328, 59524, 56058), (59413, 56241, 42432, 55047, 49572, 31130, 58717, 31975, 39399, 50981, 28173, 6771, 28110, 43506, 32496, 38558, 8512, 40623, 26467, 35014, 27175, 43600, 29107, 50250, 49744), (55251, 41510, 13846, 41304, 25657, 4496, 29780, 27565, 39811, 31600, 50486, 60831, 51481, 9490, 18069, 61991, 54089, 61429, 23168, 59862, 64778, 8840, 31692, 31083, 58861), (26698, 21116, 34922, 61540, 60568, 24706, 62570, 17141, 45390, 60168, 16464, 58400, 7216, 46930, 24693, 9840, 15245, 30304, 45700, 47322, 44717, 2451, 34909, 28251, 56925), (17124, 41630, 9249, 45077, 59808, 42902, 20125, 6712, 64805, 21611, 11916, 58052, 33368, 9376, 18851, 65182, 51342, 9001, 64995, 41634, 61533, 52984, 52599, 45734, 58894), (9179, 30817, 4044, 54775, 46602, 21628, 49228, 49047, 61637, 35538, 9276, 24155, 54213, 31306, 6107, 63132, 25546, 9174, 63468, 194, 20405, 7028, 13056, 43492, 56397), (17270, 5, 25946, 50928, 50994, 15162, 28510, 44769, 64877, 65081, 61375, 23405, 62531, 25229, 33310, 64358, 35269, 46830, 38236, 52803, 38843, 62649, 51120, 65135, 8365), (12200, 5770, 55023, 33456, 23859, 64550, 54633, 36962, 5572, 11250, 58121, 3037, 46744, 43918, 34459, 16159, 57401, 27866, 60569, 9556, 11394, 18150, 29026, 38961, 24158), (17131, 32806, 63894, 51616, 27370, 16552, 29915, 31781, 37746, 59186, 5254, 23488, 31754, 29687, 42381, 30135, 8319, 42920, 13186, 39381, 52983, 15047, 33962, 9249, 49485), (43024, 42920, 4630, 6000, 38644, 50367, 5416, 14331, 28429, 27344, 28142, 42350, 49229, 57146, 131, 43908, 44564, 23284, 6467, 17714, 29508, 58482, 10640, 35539, 18769), (64904, 524, 18943, 54026, 65080, 61014, 1047, 6543, 36946, 64890, 57183, 18269, 61763, 56540, 59067, 36732, 41768, 53384, 20568, 25496, 46360, 26544, 19344, 8349, 47389), (57195, 63758, 64494, 18502, 45060, 48817, 9195, 3826, 63294, 64411, 15452, 6073, 9679, 22078, 18023, 42131, 23006, 12299, 31060, 28079, 2667, 62074, 62225, 26748, 35933), (25379, 57939, 38867, 56640, 30147, 50781, 20769, 39963, 324, 62907, 37986, 13058, 41842, 21771, 9958, 15943, 15194, 59049, 11203, 46413, 63163, 12643, 35589, 38782, 35223), (4187, 3539, 33239, 50728, 10210, 4822, 21130, 50240, 40217, 47035, 44267, 54159, 34807, 17695, 58790, 45281, 21541, 40647, 35100, 10556, 54318, 54736, 5257, 18998, 47146), (26883, 36794, 44708, 55353, 32689, 45264, 3208, 51543, 60076, 22760, 40427, 57416, 62009, 65536, 24333, 11223, 10107, 57091, 14429, 14947, 61834, 23129, 1628, 55113, 54919), (41196, 10203, 60818, 25976, 42692, 20247, 51591, 52643, 24346, 40852, 55842, 47972, 24058, 47236, 17840, 7820, 47954, 4144, 24958, 49254, 18267, 35965, 50711, 49862, 52331), (41074, 48172, 34107, 20079, 30796, 55788, 57031, 35024, 13372, 60828, 9554, 56376, 56974, 31749, 55596, 33799, 27869, 60773, 43615, 24563, 17849, 4651, 43749, 53529, 4550), (5188, 27484, 55636, 21007, 37545, 51718, 16782, 32246, 36515, 44007, 43416, 11355, 15947, 43557, 18922, 23580, 7951, 63622, 56371, 26215, 22417, 33453, 51941, 47166, 23854), (64365, 15806, 15515, 53768, 12919, 35271, 61190, 46223, 36598, 24860, 27832, 49904, 34883, 6600, 30275, 51069, 43855, 43734, 28549, 41102, 18160, 16962, 18696, 65057, 24338), (57476, 37966, 58447, 17431, 44822, 16692, 53568, 49349, 39116, 17266, 54820, 28916, 49601, 45956, 37576, 18512, 12887, 12410, 25219, 35982, 61772, 31404, 61058, 26109, 43366), (14581, 27731, 47434, 50399, 22240, 54558, 2880, 32742, 45420, 15495, 39501, 59713, 62527, 57026, 24376, 26798, 25556, 36241, 48445, 62267, 65527, 11124, 2246, 51860, 14861), (42347, 45735, 61464, 30171, 29424, 61234, 32638, 29876, 9104, 65014, 5477, 45721, 29624, 4174, 30479, 13076, 54574, 39717, 9921, 27729, 12961, 12523, 26933, 50994, 13530), (35740, 27010, 35929, 7552, 33214, 16798, 54298, 41957, 59358, 42355, 41053, 37027, 50235, 32070, 917, 13466, 63683, 1485, 40881, 54845, 56655, 55439, 48579, 1184, 25122), (47526, 29793, 43119, 64547, 59549, 53721, 64139, 46604, 35810, 32616, 38399, 12220, 43927, 39471, 3224, 5410, 10810, 52811, 40784, 1295, 59055, 51529, 51840, 53467, 50303), (59306, 9403, 54790, 45782, 63263, 7291, 49836, 61967, 40079, 293, 61457, 59154, 31501, 56823, 33541, 50337, 793, 7008, 23635, 61904, 27902, 60790, 9767, 18265, 20796), (62595, 1220, 20077, 38776, 62809, 11098, 30185, 32725, 61184, 29780, 21806, 21386, 22743, 36044, 8094, 11374, 63385, 44589, 40247, 22147, 10825, 20654, 46024, 14353, 10004), (27366, 43515, 19009, 46535, 64803, 1782, 54998, 14052, 42703, 59599, 31314, 39610, 56031, 35436, 48120, 59845, 9825, 27191, 14158, 38081, 14024, 9981, 46647, 58640, 9044), (60895, 27990, 37796, 17120, 29514, 50650, 62677, 57766, 19084, 41015, 6935, 29971, 43301, 48077, 44722, 1504, 5159, 33897, 12633, 64566, 61083, 60871, 39851, 54363, 28475), (10114, 17273, 38124, 37220, 38266, 59384, 13446, 61370, 62512, 32545, 37904, 62890, 54929, 26869, 50554, 47039, 33514, 37746, 3286, 51799, 22369, 55937, 4749, 14141, 1318), (39312, 45880, 42228, 10853, 65257, 9040, 35255, 18147, 35627, 55616, 4449, 63275, 180, 35150, 32462, 57118, 46208, 57800, 27701, 41090, 17365, 14769, 33055, 26557, 26639), (50195, 34247, 36418, 41347, 31143, 58916, 25908, 23639, 29044, 43988, 20316, 49908, 53920, 56964, 63705, 22012, 49612, 49273, 21605, 6796, 13613, 17193, 55144, 38480, 22324), (9298, 63759, 43302, 34288, 15813, 14504, 54310, 47754, 56555, 65497, 16817, 7521, 48298, 12694, 57050, 51643, 28210, 48506, 49967, 19847, 35817, 61062, 64531, 51113, 11954), (43518, 21302, 58426, 64849, 8299, 3230, 39611, 30271, 45644, 65399, 24703, 6826, 22731, 28661, 20366, 53966, 35290, 25924, 32477, 43849, 5298, 52503, 42319, 1296, 41700), (50625, 5867, 41995, 52339, 32437, 53416, 29738, 61817, 47199, 1515, 24211, 24945, 21058, 56100, 38268, 17578, 32107, 34032, 59035, 59166, 45746, 18355, 60934, 18951, 64197), (63059, 46052, 3743, 50317, 17948, 5469, 46272, 13720, 17204, 41692, 63321, 7372, 64768, 23292, 27849, 22773, 42711, 44563, 59400, 50578, 44875, 53653, 43097, 7656, 35046), (32984, 3558, 28078, 31246, 48000, 27946, 45800, 2838, 9154, 62073, 50941, 28314, 55008, 45774, 22157, 19461, 21108, 2751, 25505, 4314, 62576, 50659, 3332, 13709, 24882), (11089, 48129, 2076, 57822, 57947, 43216, 55285, 13737, 37444, 9449, 9611, 49775, 15455, 11797, 45541, 3302, 33134, 4840, 20712, 48527, 19673, 7431, 18594, 23592, 42620), (16979, 33064, 18042, 62024, 6536, 7746, 56881, 63544, 40245, 65228, 10249, 25115, 50054, 30670, 4502, 46929, 1829, 50659, 39180, 2406, 48036, 33358, 7692, 26836, 3747), (62828, 30921, 43733, 1718, 33746, 5393, 38355, 58203, 21985, 55470, 58403, 61745, 62998, 40133, 38132, 5130, 51991, 35320, 41817, 11462, 11270, 32769, 51303, 20037, 46074), (47747, 649, 46390, 10909, 46370, 61118, 54735, 7791, 54576, 61155, 61628, 2810, 1646, 56671, 59303, 36601, 1844, 51204, 39865, 31197, 42895, 34455, 23747, 46672, 27047), (63976, 24868, 15777, 11304, 55868, 41172, 51128, 22202, 11365, 29619, 45443, 1741, 19381, 58844, 6023, 57944, 26863, 61104, 41145, 50122, 11642, 52229, 44876, 40031, 35052), (12311, 13872, 51675, 17033, 34645, 37542, 3113, 27980, 24138, 14526, 40808, 63301, 29445, 42041, 6303, 52467, 42514, 61615, 41268, 27284, 206, 20470, 30620, 33982, 28540), (22952, 14707, 11088, 45653, 57488, 34656, 22512, 12613, 26816, 12746, 24959, 489, 55993, 42177, 31086, 60865, 46804, 15705, 5998, 1569, 62369, 39265, 32549, 18269, 15220), (21352, 4964, 5233, 33427, 54443, 34385, 35728, 35075, 25243, 48986, 23896, 57454, 62814, 38177, 18277, 5013, 18376, 52856, 51719, 48018, 50630, 54524, 44418, 21328, 61147), (37887, 44863, 20314, 31151, 597, 44635, 9005, 9958, 22827, 15109, 65100, 40749, 49835, 64545, 36536, 52945, 7136, 61371, 3145, 60819, 40050, 48386, 21060, 62099, 28804), (39021, 45276, 58991, 57326, 55036, 48436, 23301, 8305, 41320, 59540, 64294, 49344, 16734, 12291, 29706, 50864, 38028, 61467, 51552, 6036, 33463, 45106, 6790, 3348, 37341), (25563, 19121, 32293, 32662, 37844, 17171, 59928, 58416, 10745, 12389, 53814, 16068, 48774, 50613, 43099, 46730, 14810, 65323, 43651, 52491, 44549, 43927, 56379, 13229, 1020), (31639, 54790, 47687, 45571, 64200, 5577, 48303, 9090, 65057, 36609, 13212, 32708, 29971, 18362, 38870, 63680, 43200, 10195, 775, 15024, 45388, 53380, 21660, 476, 36029), (52545, 3900, 4290, 64148, 32184, 13523, 14438, 16727, 26361, 31471, 55819, 12766, 40346, 28154, 56210, 25336, 15898, 52050, 19272, 55402, 44839, 217, 53049, 3734, 60842), (909, 48511, 8117, 1861, 18147, 37619, 46713, 42222, 33830, 55219, 31924, 4475, 52721, 2476, 27247, 27735, 42141, 18533, 31973, 32390, 48171, 51985, 17231, 39837, 43028), (14615, 19991, 59944, 1895, 52745, 3228, 60605, 12835, 38951, 24426, 2892, 12023, 37663, 21064, 4493, 19120, 24022, 46482, 20531, 47060, 18899, 58833, 2412, 55287, 6683), (47676, 60978, 62982, 12237, 52328, 10996, 22596, 27842, 51181, 11975, 31246, 61543, 53923, 27280, 5823, 21770, 16966, 57247, 26099, 50514, 8613, 51336, 35575, 55593, 52922), (62719, 48610, 4471, 13946, 36444, 1059, 43270, 7112, 65197, 61315, 20480, 42394, 42225, 14610, 56459, 27241, 29696, 42328, 36135, 33673, 533, 22872, 31157, 60619, 60187), (40961, 47625, 3034, 51494, 49977, 34070, 26517, 55509, 36765, 22284, 43282, 55581, 61725, 24244, 28637, 15899, 25524, 12599, 1890, 44716, 15770, 8103, 1914, 36226, 24436), (43257, 55858, 38007, 50007, 61659, 64256, 1521, 42787, 55461, 47913, 63753, 27450, 39779, 30760, 4849, 63014, 43042, 30005, 27127, 53489, 25960, 23085, 10214, 50430, 15790), (63810, 8194, 39100, 4450, 10501, 58064, 37244, 431, 1471, 8214, 37194, 1428, 40863, 18171, 24941, 11176, 599, 7376, 8924, 47235, 12337, 12560, 32731, 48306, 53048), (37134, 48732, 54049, 35587, 13100, 56820, 32612, 25031, 30514, 40896, 10099, 22580, 54909, 5459, 21942, 999, 3639, 26511, 55606, 57643, 48532, 38816, 7290, 59371, 63761), (43126, 12763, 41439, 17003, 32237, 65078, 63153, 62001, 63914, 22175, 64578, 10856, 28134, 27374, 39008, 47528, 14367, 8901, 39542, 48010, 274, 48297, 13433, 47332, 37045), (4250, 19383, 15695, 47339, 6670, 54355, 30210, 59626, 16614, 64609, 42389, 43557, 42301, 21366, 46469, 11337, 26063, 23435, 45045, 57224, 14790, 34907, 27220, 34733, 58793), (18702, 21535, 16899, 20248, 46872, 38013, 309, 55132, 62272, 27625, 33002, 57086, 50486, 5362, 43687, 44157, 54518, 56305, 20938, 15498, 12572, 54012, 49570, 1121, 31594), (10674, 61967, 30725, 46727, 31556, 19730, 60681, 4387, 65238, 32940, 39165, 25698, 36756, 44546, 62933, 39947, 64032, 27034, 4811, 374, 15867, 28913, 29586, 36541, 30563), (26403, 48639, 43268, 826, 15399, 185, 61849, 53072, 12465, 33347, 48224, 7581, 29516, 24443, 3224, 32145, 4076, 4962, 57916, 63202, 23154, 28326, 43148, 43891, 8327), (9824, 59988, 8699, 44252, 21984, 49600, 17461, 41457, 7579, 44208, 62468, 4393, 20787, 8917, 15674, 47498, 35297, 52753, 28011, 44873, 9803, 23879, 5658, 44282, 46427), (47062, 42967, 57150, 25004, 51237, 65498, 47032, 51249, 26974, 32216, 790, 33592, 47455, 51069, 53988, 55738, 41098, 35272, 11276, 9698, 18666, 26787, 18601, 19967, 15997), (59308, 25393, 54561, 18206, 9617, 15946, 41316, 53014, 13237, 64087, 14075, 24323, 42592, 3233, 21980, 40693, 48062, 4717, 43004, 6265, 62019, 47093, 46018, 23482, 35175), (58753, 57305, 62731, 18802, 62583, 5185, 14875, 49398, 42171, 31482, 29019, 30657, 27379, 10016, 43507, 39770, 58297, 62829, 37302, 53881, 55720, 46626, 57795, 42980, 31241), (58901, 23103, 37456, 18301, 61411, 10580, 15377, 62307, 34526, 51735, 22582, 32560, 41562, 2059, 58443, 40532, 23839, 28598, 60449, 52914, 3396, 60453, 12879, 31387, 45879), (40345, 22651, 7994, 38498, 55254, 62841, 47170, 34514, 3009, 14979, 17475, 7526, 19499, 50783, 15991, 14168, 3453, 58310, 40106, 10045, 10636, 17001, 63246, 63855, 18861), (60659, 14422, 15515, 52224, 4270, 55942, 62587, 27058, 57328, 27406, 147, 21506, 16329, 49090, 6696, 42398, 22823, 14350, 38446, 35681, 13302, 64952, 45361, 26491, 51962), (64479, 30943, 4601, 14316, 18992, 65516, 55528, 37439, 21522, 5819, 17342, 20188, 61318, 32426, 27200, 19511, 49448, 9772, 32800, 65275, 13040, 17349, 2444, 6439, 36753), (34910, 25125, 29495, 34917, 48473, 62897, 47536, 29098, 29574, 44535, 24170, 59716, 23430, 18679, 27716, 63167, 8063, 4815, 55980, 1622, 55095, 45109, 1949, 5896, 60986), (61283, 2452, 39849, 13690, 26027, 39269, 57930, 8698, 16084, 16317, 41970, 56054, 1382, 27280, 26952, 49504, 23990, 10871, 37697, 40664, 52741, 21053, 7048, 31233, 56112), (26674, 32686, 1212, 31269, 39950, 39872, 29258, 7137, 51689, 13017, 64840, 3535, 50386, 13821, 21446, 21950, 61470, 27931, 47173, 22380, 46020, 4117, 15396, 59489, 2909), (55132, 51696, 43642, 34242, 44705, 16232, 60807, 26198, 3531, 31060, 5176, 7584, 53308, 35064, 44459, 27714, 3543, 50992, 39850, 61148, 35488, 45389, 54721, 47403, 15739), (39097, 14986, 7883, 61660, 29132, 9251, 12910, 58870, 29699, 32537, 38785, 14130, 24262, 41001, 35280, 2299, 62964, 6242, 55386, 25771, 50803, 23110, 45857, 56902, 20881), (8631, 45335, 6279, 32475, 25502, 7450, 62555, 22256, 2296, 60254, 45090, 58378, 58647, 36081, 64576, 59119, 16226, 15852, 38831, 44235, 56781, 41709, 11666, 51599, 32087), (44623, 54569, 27776, 1603, 7047, 57895, 23725, 34461, 41437, 32036, 24868, 63680, 24673, 49825, 56022, 18618, 17320, 6607, 41885, 31794, 16650, 48196, 37166, 61959, 56712), (39103, 18449, 14006, 26745, 348, 50946, 6724, 18981, 23055, 63308, 30741, 18070, 39912, 32625, 28731, 52921, 44820, 13776, 46540, 47024, 52892, 21674, 45459, 50547, 2672), (23779, 41364, 14549, 11537, 24837, 36131, 43939, 12562, 448, 37493, 8432, 18984, 35808, 33830, 48391, 46120, 40784, 4393, 44286, 38432, 35139, 6417, 61812, 18666, 47888), (29423, 59876, 46450, 60950, 30243, 41672, 571, 26630, 24227, 63051, 5757, 41999, 54048, 52982, 55138, 25262, 57207, 62183, 4013, 12307, 12908, 50075, 36174, 25283, 56749), (39565, 56106, 23712, 60001, 29255, 35484, 51670, 54630, 54578, 32208, 60200, 45590, 34141, 8191, 55863, 5070, 41527, 5241, 25445, 54154, 41762, 38628, 17597, 7833, 37713), (2172, 3183, 56140, 65135, 58780, 30276, 24649, 34649, 63123, 30296, 5303, 29313, 56097, 62537, 39319, 42667, 1233, 13113, 22653, 21396, 32224, 64459, 51237, 29929, 50744), (63971, 26988, 62122, 40979, 27083, 13102, 9272, 11839, 59655, 50304, 39642, 28989, 22958, 16997, 55006, 65198, 61843, 26535, 23269, 41535, 29410, 34057, 34456, 47372, 32093), (36567, 9259, 53914, 57268, 32128, 54378, 949, 39784, 44438, 56657, 5619, 30363, 56016, 22038, 16671, 62689, 50148, 10726, 61655, 26355, 14354, 29300, 34201, 2496, 54713), (51870, 18307, 25344, 62217, 45181, 63744, 9978, 30098, 28165, 60759, 38466, 23596, 36121, 38305, 26709, 51704, 46279, 28053, 44686, 26032, 25275, 37080, 55503, 5899, 51575), (45819, 62884, 50155, 35625, 33683, 36297, 33367, 43974, 52809, 51616, 64166, 44504, 65379, 64590, 53970, 48115, 10737, 50633, 29595, 528, 1387, 64882, 63595, 24073, 51950), (23392, 30925, 63565, 29319, 45708, 52981, 18077, 21812, 480, 32365, 54601, 28450, 3872, 23443, 19478, 40030, 40813, 55457, 35010, 31477, 61179, 20918, 10736, 57885, 50340), (55622, 40790, 63601, 39127, 13665, 44781, 36092, 5240, 10683, 37153, 1305, 55636, 26638, 13985, 17009, 42313, 55293, 34721, 62646, 54308, 37736, 18180, 12730, 55532, 2110), (34684, 16106, 10537, 5684, 49681, 38220, 50159, 63284, 54313, 34714, 39890, 46718, 53879, 55770, 22899, 26895, 12509, 54472, 52978, 25961, 62700, 52084, 2081, 32252, 54600), (46555, 58835, 221, 19911, 30555, 30983, 32124, 42596, 17553, 24848, 8917, 41457, 35408, 5516, 10669, 9528, 59100, 4427, 5840, 35807, 20687, 11036, 25846, 33594, 31058), (28961, 32788, 59796, 32220, 34559, 53797, 47008, 60589, 47961, 54871, 20330, 38828, 20102, 33637, 43509, 47371, 22288, 33102, 58982, 11734, 1844, 57427, 14513, 1055, 31274), (31577, 16645, 37450, 27530, 45821, 55915, 64062, 29893, 41860, 11473, 41054, 58639, 27557, 18523, 7943, 5704, 61155, 63570, 31665, 52775, 57601, 5624, 29517, 46607, 2288), (46251, 62079, 31611, 33088, 61650, 9166, 61974, 17027, 5101, 38831, 46704, 37671, 32677, 33613, 65497, 35430, 30159, 61612, 53626, 56918, 59183, 11419, 54778, 22895, 16399), (58372, 6278, 15350, 50003, 6403, 44041, 27918, 32026, 44446, 48912, 46667, 39664, 15144, 56228, 6252, 20761, 52713, 17082, 48032, 17414, 15465, 65155, 51914, 38536, 17192), (5612, 13381, 59113, 25154, 24528, 818, 65199, 61092, 23613, 6713, 56937, 19345, 31009, 17505, 48012, 60353, 37459, 51591, 9697, 22700, 6810, 28368, 62507, 11242, 61150), (10660, 60920, 22980, 35924, 4261, 50190, 34911, 33724, 18483, 4546, 57989, 58970, 30532, 64358, 7904, 31792, 30209, 56783, 9896, 37252, 25307, 14192, 30955, 22530, 16901), (19507, 27987, 32086, 23004, 23157, 31652, 48117, 36622, 61371, 37374, 23273, 51879, 25662, 23991, 4004, 30537, 58629, 32279, 51698, 30272, 14069, 42209, 22324, 11061, 63242), (3106, 27200, 23282, 21885, 33153, 61937, 45662, 55607, 22047, 29251, 17789, 3519, 25825, 54858, 30742, 57991, 47770, 58677, 39274, 47963, 59334, 37958, 31012, 63474, 37864), (44963, 40479, 16917, 36471, 37284, 37812, 59772, 57281, 515, 40090, 26652, 9411, 52778, 60856, 22764, 34341, 21189, 61880, 5887, 1663, 61009, 62411, 34785, 50597, 3001), (5123, 50044, 62338, 21726, 39000, 39349, 38980, 11343, 50982, 15155, 6750, 52925, 11633, 2342, 50508, 46964, 63975, 591, 26595, 41183, 19167, 15590, 23552, 24658, 7398), (34449, 46181, 24676, 58914, 27267, 26071, 59236, 59005, 32575, 65430, 22601, 29579, 63313, 26340, 25200, 7190, 15873, 64493, 56548, 47646, 46627, 33634, 46744, 54882, 15043), (12150, 15304, 32548, 19841, 24850, 49499, 59436, 25969, 53866, 22824, 52799, 45085, 62576, 11497, 44601, 48436, 43235, 4755, 40176, 17918, 20271, 25802, 23723, 47457, 32736), (45123, 58964, 41639, 58005, 32551, 1793, 27764, 30696, 61088, 33853, 446, 44007, 63743, 48723, 34828, 54006, 23573, 24623, 10126, 11598, 42728, 41642, 826, 34185, 65530), (52540, 63073, 4837, 45273, 38472, 56611, 34606, 28445, 14680, 44812, 22445, 58004, 61320, 60405, 58276, 20488, 18702, 63052, 3116, 7091, 17219, 31793, 6534, 62066, 15075), (4880, 7115, 56456, 49194, 3177, 8353, 61296, 29169, 18153, 2260, 41957, 28041, 423, 21530, 61436, 29168, 37569, 39065, 30265, 24187, 910, 9973, 43874, 37940, 29283), (27151, 57333, 4199, 60468, 38257, 24346, 29085, 10203, 64008, 20158, 51380, 60687, 11472, 15266, 31680, 16898, 15340, 48415, 59249, 42429, 11336, 32272, 38669, 61347, 11186), (215, 52961, 54735, 62705, 62111, 27796, 19127, 22933, 50099, 9407, 31310, 59074, 47309, 54576, 25961, 22105, 1770, 54380, 58240, 2788, 14728, 22821, 9517, 65325, 41139), (51041, 62817, 52065, 26515, 45088, 52009, 6982, 23671, 27094, 28562, 40182, 50407, 62645, 35450, 43916, 61966, 40381, 1627, 51722, 35171, 56486, 39222, 65058, 31435, 28493), (660, 63661, 42221, 23, 18759, 29256, 41353, 60185, 56449, 60830, 8498, 6411, 60718, 42948, 59185, 18158, 47104, 17810, 61599, 45674, 61394, 44693, 43405, 4421, 663), (33764, 45310, 30003, 41283, 7531, 34882, 47448, 27643, 45765, 61679, 29546, 21504, 23424, 14722, 52571, 46567, 10598, 56891, 24939, 13403, 37688, 20133, 39768, 19705, 33269), (20093, 55118, 11078, 15599, 25680, 18198, 123, 38062, 4148, 52210, 7815, 13641, 2229, 261, 4416, 40529, 55183, 7326, 16651, 10873, 54467, 35190, 2266, 11266, 29929), (26737, 29329, 29596, 32042, 12530, 56810, 47687, 41512, 46545, 21225, 13250, 44012, 22857, 59911, 29331, 5686, 60557, 34521, 22112, 55483, 15383, 8288, 27821, 38448, 21396), (61481, 46113, 33447, 53780, 13613, 16890, 45396, 22748, 45606, 26133, 35988, 47718, 64437, 22416, 5984, 1934, 23481, 34830, 42766, 26658, 31473, 40711, 29347, 22341, 52413), (26019, 40310, 18971, 5416, 1250, 33392, 65090, 10478, 56075, 45048, 13943, 37596, 2392, 47398, 744, 41113, 48158, 11494, 18107, 61881, 15691, 57624, 43719, 43841, 42080), (3145, 39915, 50901, 48035, 55315, 36734, 1201, 16024, 48784, 18286, 7139, 11042, 2524, 11514, 60810, 39294, 37896, 41003, 32627, 28360, 50035, 13318, 26907, 22586, 31125), (36845, 4208, 19450, 20874, 38539, 18097, 16110, 61320, 47555, 4545, 34881, 27567, 18818, 14466, 27977, 29311, 23689, 42846, 11196, 34847, 43056, 28899, 24103, 417, 3477), (40806, 63390, 24480, 47249, 26895, 35083, 48434, 39951, 45873, 16198, 5518, 23551, 50258, 59534, 32745, 43479, 5479, 15038, 42727, 65211, 29659, 799, 55715, 4225, 57678), (19156, 6356, 42091, 28803, 22571, 6748, 59917, 51029, 64698, 46231, 45685, 6906, 58663, 31318, 34777, 82, 21916, 11769, 49161, 63293, 53420, 17641, 56675, 48228, 19496), (47404, 28030, 19852, 46667, 16928, 11422, 62434, 31940, 39707, 51037, 20898, 37944, 39802, 50655, 42138, 41450, 1819, 31052, 47560, 23860, 11820, 62187, 19128, 36648, 57573), (54897, 21448, 55804, 16368, 26837, 36501, 1333, 33454, 26101, 62898, 53562, 8202, 59154, 4467, 8230, 2829, 9641, 21418, 12025, 3525, 28548, 28061, 44734, 18060, 51634), (17007, 37500, 65253, 58547, 52355, 14898, 318, 46677, 49360, 53252, 10293, 15568, 33867, 65158, 6398, 32644, 13795, 58906, 51899, 25865, 27782, 8896, 28653, 24571, 18257), (4695, 61950, 39989, 44970, 54059, 23739, 44633, 35606, 34872, 22663, 24597, 36054, 33672, 41739, 6319, 2631, 14160, 43107, 46118, 47704, 61807, 63074, 11663, 46149, 10001), (17704, 59655, 6139, 39229, 4201, 17078, 18282, 10617, 8382, 10433, 986, 51102, 33772, 20782, 14220, 41020, 12900, 11425, 58242, 13130, 63462, 33595, 16952, 63610, 27359), (39468, 10250, 22224, 58034, 5571, 38027, 13992, 3800, 61456, 55607, 12469, 30158, 1208, 37856, 8040, 47772, 20908, 2385, 22740, 54040, 4951, 9145, 16251, 33328, 18895), (24072, 22921, 51081, 48555, 65285, 288, 39323, 26084, 58413, 57715, 50007, 21627, 12541, 2917, 53983, 45811, 15993, 26505, 29335, 13595, 54881, 44877, 7288, 7589, 65039), (4237, 61018, 16408, 52329, 30446, 17430, 49509, 46665, 13676, 57665, 38199, 21608, 55377, 11165, 36945, 5986, 25665, 63653, 2174, 15105, 39765, 28050, 39036, 37682, 9663), (19736, 32842, 7802, 9801, 18085, 36065, 33846, 36499, 1714, 13764, 22482, 60122, 27665, 12684, 34793, 3615, 27992, 1202, 44757, 35174, 19915, 57496, 24505, 55481, 29454), (14964, 52068, 10246, 21070, 12665, 21399, 24461, 25519, 1686, 61727, 52200, 39969, 4069, 1400, 49038, 9730, 42029, 18642, 7163, 5397, 6437, 51660, 40312, 2491, 13783), (42978, 967, 2070, 13552, 53040, 44222, 14173, 59752, 11199, 26779, 39798, 45774, 23358, 46901, 26583, 4239, 36446, 43829, 21607, 5806, 16799, 5951, 22606, 3342, 36551), (43772, 2157, 50874, 35990, 18910, 31321, 46227, 34378, 19435, 63003, 35057, 10279, 35486, 46177, 41012, 10803, 39848, 2902, 8722, 14212, 18325, 28969, 3481, 54528, 10498), (34777, 26941, 47421, 46380, 36674, 1203, 20714, 57854, 39875, 12223, 31615, 4366, 48417, 11911, 36400, 55238, 35099, 36801, 57740, 61607, 9321, 3177, 26536, 38898, 29786), (26138, 38130, 53, 32293, 23976, 11968, 32466, 18079, 9800, 43526, 58994, 41052, 15752, 49129, 4959, 19094, 18585, 6939, 37999, 64480, 43000, 12113, 5651, 7113, 54921), (1449, 47370, 60675, 7731, 4437, 16191, 54378, 30403, 57329, 33571, 5660, 51439, 21437, 46182, 32787, 33260, 38567, 56753, 43212, 49048, 14576, 18973, 15810, 23847, 59163), (25137, 62313, 50420, 11728, 50133, 26754, 8635, 416, 44633, 23890, 48741, 62155, 8946, 39241, 24470, 59434, 21249, 23744, 16483, 44771, 42412, 61183, 16309, 59233, 61568), (37014, 35736, 13422, 16622, 43872, 48255, 10373, 33179, 32460, 23470, 23633, 42333, 26754, 21496, 1710, 15194, 9548, 3212, 17331, 11662, 51001, 52606, 63025, 30479, 20386), (11993, 32632, 1079, 37037, 46565, 17320, 18807, 22759, 50412, 22524, 22966, 28050, 59996, 19225, 36977, 37646, 55152, 10589, 49742, 22305, 45001, 3969, 6222, 9627, 51969), (6434, 37643, 35889, 15859, 7718, 5250, 23220, 40860, 45047, 36650, 56474, 5258, 46209, 43550, 46571, 11101, 1984, 36156, 55141, 59154, 14570, 65495, 58500, 25748, 48845), (35544, 1147, 54943, 58764, 6970, 15728, 11845, 11800, 22887, 47359, 64179, 31951, 10323, 64171, 53169, 20096, 20909, 60223, 2248, 10496, 13822, 29106, 35926, 5892, 53392), (64023, 16235, 20702, 709, 39469, 22065, 50421, 62408, 46605, 16353, 370, 6550, 56607, 61568, 63766, 19701, 19963, 56410, 58695, 42276, 61998, 3313, 27602, 35136, 13165), (2940, 52533, 60112, 37695, 53776, 7382, 30514, 28259, 42965, 41336, 21072, 53706, 58455, 37276, 33611, 833, 55537, 7241, 64371, 13204, 4736, 10234, 43032, 15132, 18007), (59329, 11759, 42233, 33594, 20400, 54472, 58356, 45076, 24685, 21909, 21023, 31814, 4702, 16259, 58802, 18911, 32775, 12966, 41586, 50158, 26766, 63682, 43585, 12018, 20245), (16244, 23599, 30005, 31779, 6481, 38810, 12950, 10407, 20544, 52384, 29259, 36599, 64898, 8413, 50200, 49072, 30891, 54123, 38399, 12018, 61010, 3412, 42941, 5419, 38746), (64640, 55216, 17734, 58021, 42301, 48293, 60315, 57111, 15332, 7761, 5839, 37829, 23465, 18592, 27214, 23132, 45678, 63827, 28812, 19300, 21915, 29096, 34914, 3712, 14236), (14314, 46645, 6408, 62129, 60528, 35373, 58543, 9085, 30585, 51774, 26448, 10434, 20544, 22099, 25380, 60479, 44540, 8193, 18148, 7244, 62958, 53217, 63966, 20427, 27312), (9763, 65027, 8290, 62557, 28468, 48098, 34584, 19003, 17260, 26997, 60760, 27641, 24301, 30208, 62229, 64905, 36834, 42925, 33319, 4919, 62278, 22794, 59389, 15796, 13601), (38904, 27063, 47554, 44601, 50322, 12079, 33598, 55352, 43863, 41732, 30632, 8350, 56475, 34937, 60682, 30434, 19671, 38721, 29335, 25343, 36914, 15986, 47921, 19073, 29371), (15792, 24716, 54884, 33540, 33515, 8746, 43195, 57997, 40653, 33652, 25610, 8213, 16233, 33126, 33771, 38206, 35464, 12916, 48506, 7888, 53722, 47819, 57071, 62311, 12187), (59100, 60809, 12646, 64493, 1254, 37133, 53839, 44824, 29749, 31781, 3292, 1317, 56456, 43314, 19712, 45563, 17077, 14522, 24656, 694, 18746, 52845, 17178, 29090, 50596), (19240, 47684, 23573, 14298, 970, 16468, 10897, 15703, 2334, 52501, 64468, 40540, 5432, 40011, 12454, 56168, 34054, 64649, 4698, 29365, 53679, 21009, 20082, 62156, 50291), (60202, 29395, 15459, 56724, 31338, 20230, 11210, 35572, 46571, 40067, 16269, 48224, 10634, 2958, 62914, 32502, 21168, 26838, 30149, 12148, 33153, 44383, 64883, 22412, 65465), (23774, 17002, 6082, 42936, 14460, 19118, 47085, 62171, 29970, 4119, 14835, 51283, 10195, 35018, 2834, 36921, 57234, 23818, 17909, 45004, 49723, 7976, 25988, 37511, 29667), (24261, 24015, 52245, 26529, 12432, 57407, 15228, 33235, 44573, 5337, 16263, 31377, 49607, 33321, 10209, 19084, 24743, 45201, 54215, 54066, 13103, 63602, 37000, 2297, 51144), (43658, 15380, 847, 15048, 41366, 35652, 50125, 33609, 47997, 16078, 15246, 47573, 61151, 10266, 35410, 47879, 2054, 9200, 9482, 53958, 12286, 19450, 50466, 553, 63493), (48261, 49712, 33275, 34870, 51997, 62833, 31164, 2270, 64648, 8931, 52963, 41542, 5682, 2618, 11968, 1839, 14144, 1339, 33752, 26840, 10107, 15526, 60842, 43713, 47195), (13861, 57966, 9728, 21495, 51231, 4314, 48674, 42384, 56981, 26718, 35201, 47016, 10038, 22504, 18556, 21560, 1691, 10876, 43190, 60762, 46554, 57421, 41538, 26489, 27062), (43620, 44751, 29179, 1776, 11195, 4579, 32208, 42425, 25055, 46041, 52576, 19310, 16035, 37681, 27872, 55640, 54019, 44771, 4001, 44431, 61402, 36612, 41353, 40292, 29186), (28618, 55946, 53668, 34859, 15126, 55776, 21618, 27107, 57685, 37920, 35077, 8075, 32572, 23570, 65126, 22258, 50767, 24243, 57060, 9587, 45285, 982, 54980, 782, 57156), (13551, 59022, 16773, 53150, 35696, 46755, 634, 53786, 2090, 14867, 50390, 9952, 20055, 64829, 55477, 42483, 32200, 9728, 49643, 24634, 57884, 48925, 1616, 50258, 30899), (53266, 59512, 50251, 65012, 38884, 20782, 37426, 8155, 2769, 10439, 48371, 30174, 10228, 51562, 7323, 28349, 49315, 52374, 46346, 50802, 30339, 51922, 7640, 56817, 22254), (17297, 31720, 11421, 40806, 39205, 16343, 17562, 44849, 13263, 57447, 24724, 29440, 31191, 55769, 45813, 57030, 29151, 55833, 49240, 50484, 55093, 55028, 40833, 62138, 42079), (54058, 31923, 63533, 65254, 23, 12511, 39914, 19413, 24382, 43322, 43796, 63902, 63566, 59017, 41256, 23559, 13428, 30143, 10011, 44624, 40190, 25184, 1409, 38644, 17967), (1753, 26025, 16841, 24880, 53487, 14120, 60974, 32531, 18832, 39533, 1666, 6964, 5496, 2906, 54709, 45434, 16306, 7747, 61826, 37238, 48060, 36910, 35009, 2686, 30230), (23452, 40578, 5854, 57163, 43004, 14965, 63754, 5051, 6371, 19831, 57571, 152, 44252, 671, 17313, 40616, 63055, 33720, 21121, 41171, 3219, 14592, 47213, 58047, 60790), (51805, 19597, 43254, 10323, 18339, 19612, 65389, 48364, 29954, 48542, 64305, 65220, 56755, 26145, 62412, 62517, 39454, 671, 13041, 19522, 53535, 33295, 26260, 10918, 44317), (38338, 56041, 53702, 64423, 45803, 50120, 52285, 13489, 27169, 5102, 62237, 4859, 39380, 22855, 19058, 46799, 31246, 37570, 13063, 44310, 16944, 9937, 9567, 49624, 22496), (43186, 44951, 38937, 55448, 1556, 60862, 7850, 18072, 28904, 37186, 15942, 2575, 13902, 36913, 28979, 55647, 43182, 22426, 42775, 12443, 14071, 42959, 53728, 29510, 25484), (17441, 43859, 35384, 2214, 58195, 30757, 63089, 58613, 42919, 55021, 3747, 16982, 30375, 35179, 32861, 31095, 12898, 56057, 1578, 58553, 58278, 531, 24623, 20598, 59308), (1918, 38063, 57302, 6551, 27800, 59030, 19220, 35633, 25238, 40599, 24616, 3946, 49092, 53921, 37857, 30372, 10626, 29422, 59458, 29957, 7127, 62570, 48495, 16876, 5851), (18273, 21164, 46695, 47829, 10834, 46410, 3584, 59315, 16910, 21340, 44975, 45488, 54244, 8329, 7292, 39577, 46324, 16320, 24721, 46242, 57997, 30485, 33416, 19268, 59499), (60449, 423, 4459, 33337, 41956, 57224, 21728, 48854, 57465, 53481, 8929, 50555, 37278, 27092, 62853, 50882, 1618, 25025, 52980, 6810, 31946, 16015, 33286, 56368, 30589), (26446, 20953, 29959, 9395, 13406, 29613, 13623, 46387, 50721, 27830, 38015, 58423, 39055, 28302, 65436, 3306, 18883, 17076, 22882, 34320, 63431, 12469, 31662, 23185, 17948), (1036, 37869, 13644, 26493, 23623, 52986, 21419, 24327, 31787, 54900, 30245, 42914, 19177, 63890, 31785, 30818, 21710, 14365, 61369, 25041, 24812, 46644, 14526, 33609, 63797), (15059, 21563, 43887, 47026, 29989, 58695, 37128, 49282, 8346, 21840, 30072, 7636, 35585, 56218, 27164, 52883, 48608, 53617, 57323, 40099, 18885, 3406, 18206, 54195, 42856), (6991, 39604, 28525, 37391, 60244, 20879, 20826, 51826, 30553, 60353, 58631, 31149, 23647, 18948, 39411, 15362, 43179, 43171, 58921, 37873, 32404, 29367, 44427, 55565, 146), (51145, 20462, 25381, 63086, 38214, 306, 25571, 52189, 27133, 24706, 47497, 64928, 8691, 12830, 14212, 40774, 50051, 36901, 15975, 17474, 34947, 25766, 740, 37631, 5604), (16167, 59916, 7450, 8041, 19074, 20980, 32311, 55496, 45295, 37573, 39533, 37346, 57033, 34026, 8362, 36567, 6062, 22483, 27006, 38472, 55476, 41701, 60640, 37999, 31030), (830, 31003, 36813, 24164, 35576, 35917, 23457, 12754, 13100, 22337, 35936, 46388, 17065, 5292, 21721, 64985, 10281, 13088, 1294, 62090, 39086, 36294, 49775, 53269, 24581), (31223, 288, 48267, 26351, 17907, 61654, 22323, 32790, 7019, 39015, 45943, 15605, 23097, 10312, 2846, 6619, 13143, 63939, 38705, 12870, 12573, 31433, 17258, 28900, 302), (39710, 2492, 64742, 21993, 31427, 38101, 7854, 37906, 41331, 63489, 60275, 5465, 19905, 32533, 63320, 11536, 33884, 64369, 32178, 65276, 38160, 26542, 23212, 13263, 34842), (22993, 28281, 26429, 6310, 60248, 784, 29722, 23965, 39383, 58948, 6379, 21935, 12817, 51542, 58567, 46467, 24132, 50754, 25057, 14323, 44589, 14475, 33398, 32318, 30905), (57649, 46126, 56519, 53383, 63977, 47993, 48613, 16622, 56893, 38824, 46609, 6547, 34910, 19837, 26129, 43479, 16148, 33446, 11773, 25231, 10129, 9406, 46016, 16573, 55987), (20845, 5671, 24459, 31037, 27131, 40074, 49130, 54831, 51414, 23543, 30613, 50119, 717, 2713, 17786, 15859, 31815, 35878, 11808, 55485, 29975, 6591, 48048, 52947, 25526), (46660, 44657, 2352, 40907, 3318, 3565, 34956, 49067, 61029, 27319, 48113, 1741, 5498, 20496, 40666, 26037, 2379, 65154, 7730, 28447, 42683, 56679, 39399, 6941, 64136), (50326, 57049, 5750, 18480, 34432, 64185, 40687, 41542, 49567, 51147, 59933, 2559, 28292, 26308, 8923, 16699, 48589, 10906, 13590, 26004, 10459, 59913, 36638, 3864, 25633), (37440, 13670, 37232, 44378, 56752, 31411, 7964, 31126, 40701, 13399, 10436, 51543, 37800, 47577, 24319, 40208, 24431, 18733, 25790, 36267, 11300, 44462, 50847, 33264, 27489), (16576, 25659, 6628, 13021, 45330, 23044, 46715, 44261, 49135, 11531, 52710, 64240, 10276, 18330, 47385, 33371, 39305, 51744, 41362, 62947, 62533, 12257, 8024, 39083, 16320), (13916, 57012, 6731, 3892, 13366, 2636, 28438, 29022, 56150, 43500, 2826, 13158, 25287, 26303, 27439, 30036, 49083, 56041, 52696, 48083, 4178, 27546, 53077, 29681, 48923), (61562, 36381, 18757, 25337, 64271, 63139, 19665, 1066, 56098, 14936, 52000, 26398, 21552, 23428, 8447, 36200, 65019, 29449, 25090, 3775, 34394, 64921, 26532, 33830, 54021), (10098, 24300, 45155, 47525, 691, 48431, 34658, 31982, 60096, 59486, 55328, 36187, 16005, 9737, 24974, 19434, 28088, 43907, 53092, 15345, 55318, 51628, 15167, 64864, 7331), (13415, 32505, 61911, 27080, 18194, 37618, 50016, 51023, 57108, 39362, 13248, 32899, 4827, 19485, 29663, 20071, 33175, 43727, 4279, 62120, 60006, 33920, 57749, 8943, 59076), (54157, 62454, 64453, 35718, 52045, 38484, 18923, 61517, 10049, 31748, 10422, 44049, 30769, 9828, 47055, 50938, 44920, 5087, 4819, 48856, 31334, 25178, 12105, 41493, 41428), (62091, 684, 46909, 60760, 15745, 29567, 13223, 16214, 31009, 34727, 17438, 62137, 58723, 37755, 64017, 7756, 35552, 31622, 50790, 28245, 54391, 19748, 5457, 39002, 15928), (43272, 49074, 10483, 56836, 15918, 37245, 3050, 18273, 23373, 33753, 26467, 12117, 29561, 56880, 55384, 57074, 27533, 1591, 41429, 42954, 5934, 30476, 41292, 39781, 59670), (45791, 29102, 42880, 52538, 38135, 32815, 45652, 402, 12230, 21126, 15909, 28290, 27602, 11895, 24114, 15827, 5825, 26456, 4476, 24474, 62117, 31684, 35409, 14581, 17987), (7427, 14486, 10498, 39512, 64977, 38283, 25140, 62270, 46827, 21569, 10663, 19124, 55452, 37505, 28174, 50063, 36858, 53646, 41460, 3910, 21464, 5880, 49375, 17627, 34027), (47667, 28229, 23089, 61518, 32114, 32720, 43194, 29789, 19735, 31021, 31538, 17395, 62672, 52193, 42728, 48416, 30905, 39693, 26887, 30352, 18803, 42691, 63436, 33099, 23741), (39327, 14374, 4187, 43218, 18853, 23606, 46597, 58489, 10663, 6351, 9898, 20636, 2474, 57482, 41004, 25662, 7430, 40614, 56417, 46514, 50582, 25448, 12974, 6806, 17121), (28383, 17949, 38936, 18797, 64953, 28907, 35457, 33803, 40574, 19463, 32168, 50311, 65242, 2799, 23589, 42435, 57204, 47114, 11517, 22307, 12373, 29322, 5328, 20887, 64341), (8316, 64844, 41386, 5044, 61653, 39035, 32908, 26227, 49658, 27670, 42043, 7679, 40197, 4648, 29999, 14832, 58553, 6523, 54270, 63462, 7673, 40345, 43050, 43293, 55299), (6931, 28079, 33293, 42295, 54251, 6868, 34025, 49204, 56964, 62568, 21373, 51802, 45493, 53095, 8540, 257, 15964, 8180, 11519, 6004, 45930, 26401, 57078, 16707, 57387), (61435, 22625, 13931, 34903, 15259, 4346, 58541, 19458, 43857, 12895, 47766, 57556, 7926, 47354, 13255, 33849, 25989, 4652, 37477, 24217, 28706, 14429, 33739, 43017, 43110), (58903, 41394, 49043, 15362, 42950, 25938, 41200, 55442, 35004, 58329, 20621, 39498, 61708, 6570, 9871, 23809, 26960, 11168, 34077, 41187, 64996, 48347, 64206, 15350, 54167), (56435, 7507, 51734, 19631, 45718, 8338, 60722, 24130, 47544, 4544, 18210, 42999, 58706, 30450, 48805, 15340, 24595, 40740, 8985, 39640, 607, 15130, 54973, 59275, 12652), (3809, 32789, 36893, 65439, 22530, 33860, 59931, 31185, 43402, 8303, 57501, 41478, 1849, 20248, 34227, 36139, 35201, 43966, 30078, 28484, 23725, 21442, 31102, 27671, 48475), (49638, 59410, 61719, 26196, 17434, 13641, 25184, 47999, 19402, 21550, 18418, 63150, 23117, 31106, 1081, 47326, 19001, 15456, 60388, 39358, 31667, 32111, 12214, 2455, 57416), (53104, 18057, 16450, 10305, 42515, 16468, 27868, 35732, 6230, 37315, 56659, 34082, 19519, 38998, 34618, 53585, 62757, 6038, 62619, 39618, 44774, 55855, 56626, 55362, 37961), (51787, 5990, 3942, 38551, 44484, 7248, 28127, 21851, 62404, 38850, 55312, 1776, 64507, 38630, 36025, 8693, 20082, 26603, 12194, 36985, 26668, 30900, 19469, 48547, 18250), (15089, 45107, 28350, 50635, 56215, 6967, 17262, 13868, 36959, 42293, 51989, 41518, 26284, 38157, 34658, 49469, 53093, 42058, 15513, 8792, 7828, 48153, 59607, 38057, 2838), (10992, 44898, 37297, 22464, 2759, 34119, 46021, 43919, 41927, 50678, 43262, 52061, 46845, 36943, 13243, 40441, 17383, 28732, 18684, 22544, 19633, 2010, 26330, 56359, 32738), (28604, 13581, 57728, 12925, 12628, 36920, 43952, 49158, 54204, 45668, 54969, 37016, 25142, 52568, 7080, 24925, 64183, 63742, 20332, 20222, 1470, 46426, 59951, 61914, 7829), (57692, 17812, 22921, 46108, 20796, 54611, 61716, 15353, 12253, 28407, 26716, 29657, 36097, 33953, 6137, 61471, 38789, 50739, 6914, 20905, 14195, 47679, 8591, 4434, 34587), (36397, 18482, 4789, 13429, 39519, 34926, 6460, 25408, 31359, 45028, 28675, 22900, 58655, 43687, 28285, 18048, 34921, 29010, 26615, 62016, 130, 40190, 36149, 50116, 56779), (42080, 38452, 26210, 35192, 25817, 41205, 18050, 25846, 3113, 16104, 59135, 16434, 42639, 14406, 25006, 45065, 52814, 7259, 21747, 54687, 16546, 19165, 18066, 222, 5243), (23099, 26420, 35150, 16865, 19171, 14037, 43504, 42411, 499, 42613, 14320, 43247, 42000, 57780, 7640, 46245, 11328, 21688, 20796, 39940, 49376, 49871, 55771, 44214, 13977), (6399, 1212, 46061, 34491, 10718, 58624, 62432, 37011, 61248, 7926, 4609, 31575, 30819, 2718, 57545, 55655, 36586, 60193, 8750, 4497, 53351, 52356, 23273, 24101, 10692), (13784, 25949, 63028, 48657, 21298, 24138, 34764, 21492, 16965, 4121, 31889, 23448, 16713, 38726, 51052, 26415, 14435, 26903, 6, 63776, 54118, 37735, 11718, 56278, 28087), (6294, 16120, 1125, 45344, 14612, 7070, 53634, 41145, 48554, 56287, 65523, 52323, 63997, 51622, 60545, 15546, 28830, 7244, 39932, 52456, 29035, 30067, 13416, 55619, 54414), (43392, 47211, 40679, 43956, 27959, 46326, 44565, 52161, 8795, 35238, 49981, 26182, 13553, 28502, 30518, 12346, 19592, 15068, 11524, 13874, 16496, 49614, 37741, 12554, 48443), (35605, 40231, 46523, 64262, 62455, 1478, 64385, 12454, 8226, 62359, 37365, 43197, 46104, 15468, 14170, 11221, 8399, 1971, 13183, 48631, 6083, 61096, 42574, 57319, 42670), (33845, 34655, 51835, 25660, 47295, 45704, 13184, 12026, 63295, 36116, 33105, 52377, 47580, 8158, 57856, 12663, 8161, 38149, 47834, 43270, 15138, 53324, 62016, 14869, 21146), (25896, 16268, 1309, 10875, 52537, 3992, 60509, 31817, 19975, 44669, 34871, 52811, 568, 64789, 42805, 3793, 53004, 9646, 47482, 26673, 17369, 24473, 32357, 8991, 45373), (18840, 63600, 56874, 37866, 64985, 21465, 35120, 27277, 40115, 54508, 22364, 11688, 65376, 26257, 9013, 34469, 60354, 28365, 64276, 18835, 1436, 5187, 59163, 35833, 10641), (53348, 56069, 11816, 55824, 46964, 1467, 56624, 44821, 60699, 17659, 39486, 46005, 26704, 797, 35774, 41074, 4335, 31852, 49186, 5076, 14088, 51174, 15410, 19180, 14703), (44573, 483, 19483, 58607, 46505, 23558, 48199, 41332, 36181, 37223, 45223, 32511, 59677, 44988, 59468, 11608, 31066, 40249, 31975, 52656, 8042, 36342, 7653, 6755, 51345), (18511, 18238, 39425, 15844, 53208, 37649, 39278, 65035, 24792, 18191, 47667, 41177, 2795, 13977, 25188, 61539, 56690, 40370, 42099, 34268, 39279, 54248, 34233, 7062, 40629), (63737, 23793, 2637, 40536, 27120, 14817, 33897, 39542, 28474, 16254, 26802, 40747, 14181, 62578, 38580, 9416, 45077, 49330, 56257, 53446, 50255, 8371, 15783, 14466, 61794), (63919, 5443, 59789, 34151, 47756, 61963, 5836, 49657, 43692, 28483, 59197, 23037, 42306, 11413, 40497, 51321, 27452, 24476, 50381, 32935, 15304, 20455, 6793, 38025, 27094), (54377, 33021, 42770, 10751, 39409, 22377, 17704, 63959, 3921, 60869, 1926, 13690, 55823, 12812, 45165, 36864, 17613, 33678, 35194, 51764, 50702, 26430, 33017, 30530, 29157), (4500, 33873, 16821, 25117, 31072, 53542, 39633, 55081, 13259, 64116, 30057, 18069, 46706, 15328, 48019, 16765, 57823, 60283, 53217, 26007, 21991, 12275, 48684, 10829, 43052), (19399, 15068, 39469, 57818, 35368, 31944, 6239, 55564, 54498, 21423, 35903, 64690, 25811, 49512, 8579, 17063, 53125, 37650, 54902, 19011, 46588, 64443, 53458, 10496, 33997), (36753, 38254, 35046, 29319, 11315, 4625, 9845, 55471, 10825, 4146, 44701, 26891, 64141, 26381, 20201, 50864, 4373, 9568, 57596, 23733, 29816, 62794, 24209, 56241, 61492), (22189, 23661, 44962, 37661, 65172, 64645, 36788, 15707, 44828, 55464, 24287, 64964, 42224, 25075, 37059, 12140, 37498, 36392, 30652, 15022, 15538, 41552, 16012, 44139, 1187), (2122, 434, 35620, 7877, 61163, 25109, 31300, 36700, 60876, 63635, 20378, 64663, 1142, 22044, 10726, 58010, 43188, 53085, 3559, 57975, 20719, 14957, 10090, 59805, 28586), (47707, 696, 47302, 36666, 18799, 1601, 22511, 28652, 17757, 26012, 52662, 37221, 39813, 19036, 9108, 34362, 64315, 59862, 26579, 53696, 2311, 16402, 59221, 8669, 17083), (45664, 27478, 27405, 47366, 38305, 53909, 47049, 28142, 58776, 27099, 14278, 49777, 64629, 64549, 15050, 21231, 17190, 59355, 44853, 47295, 5956, 35987, 16014, 65521, 8640), (6479, 1540, 53973, 9556, 34233, 41022, 30539, 11423, 11005, 62412, 49253, 40761, 47722, 19009, 24958, 60025, 61544, 8526, 26366, 59330, 50658, 64838, 7310, 28530, 2334), (29498, 20313, 34418, 35993, 56417, 42588, 11158, 31656, 54694, 20709, 44287, 54682, 30062, 14131, 48035, 34634, 11862, 2102, 47380, 16232, 9549, 21473, 13191, 61240, 20271), (9601, 61049, 24213, 19261, 53792, 50407, 61296, 17416, 50976, 61000, 21631, 16559, 28624, 51856, 33824, 22565, 22355, 40642, 55526, 23085, 12943, 49930, 10531, 52853, 34356), (64352, 56398, 58728, 61381, 54473, 56551, 14978, 5009, 6361, 28604, 5976, 43087, 15155, 41930, 22922, 46937, 30621, 52629, 5259, 14654, 31960, 19707, 50238, 49263, 1705), (41072, 37498, 64937, 6495, 1520, 44745, 28575, 25464, 31082, 8866, 11761, 4958, 3675, 27760, 22072, 56788, 606, 14188, 8598, 35894, 2447, 32266, 26085, 42112, 29542), (54819, 28208, 39652, 24095, 7646, 50084, 24108, 9501, 31881, 19725, 9481, 47582, 42615, 50020, 49246, 6909, 20243, 10922, 65085, 61318, 17831, 18341, 8565, 59013, 22519), (51484, 44365, 26216, 17401, 38117, 2951, 42265, 16995, 15512, 15862, 21479, 37165, 46796, 30355, 24936, 16265, 27371, 26654, 31054, 30072, 59341, 27201, 61868, 13299, 51766), (33157, 62613, 56051, 38993, 8471, 41519, 49324, 12476, 14398, 27275, 25152, 34547, 17576, 26953, 56420, 41987, 63769, 24998, 63202, 13236, 19281, 12898, 57457, 47309, 47987), (44202, 1590, 5520, 29268, 54269, 64520, 22572, 27179, 970, 38611, 13925, 61680, 999, 49242, 14446, 51390, 11206, 16950, 16277, 26393, 11206, 46242, 61531, 52116, 27927), (57928, 3423, 20760, 8379, 60064, 9052, 37975, 44550, 20437, 12638, 24077, 46488, 655, 39941, 49454, 62020, 9911, 2126, 21860, 25548, 55822, 12128, 65458, 6236, 12981), (29134, 29271, 23339, 36030, 8335, 8000, 30417, 58188, 64028, 37745, 23901, 6134, 3443, 45373, 17677, 64446, 37318, 30881, 1545, 19574, 4300, 50531, 29845, 30373, 16658), (35197, 24220, 16615, 14708, 57713, 37798, 48494, 43315, 61503, 30667, 3572, 17415, 17926, 15960, 10934, 41062, 588, 15757, 53295, 23747, 37738, 21923, 19027, 52135, 14894), (35901, 20938, 52967, 59895, 32392, 56526, 63764, 10882, 6221, 47023, 7819, 44359, 48463, 57552, 19487, 870, 37789, 24544, 8665, 6796, 37008, 11084, 37071, 37446, 37477), (33581, 9710, 58585, 33477, 52962, 55240, 55682, 52775, 55470, 14493, 29339, 53026, 2246, 45631, 48503, 52770, 64953, 14615, 40850, 43213, 19488, 9934, 36379, 19369, 23062), (53433, 31354, 26729, 4737, 36088, 9556, 39322, 41664, 12281, 17538, 19634, 24009, 39349, 59567, 39317, 45612, 13337, 49526, 2949, 63302, 19332, 16142, 42893, 22500, 31447), (64343, 20448, 24056, 7726, 23523, 47991, 21312, 49127, 28767, 15645, 7959, 10844, 35030, 58296, 24518, 1786, 53695, 51978, 11251, 63390, 54699, 42020, 34624, 59420, 41142), (20583, 14708, 25263, 45546, 15066, 48301, 43891, 269, 27526, 30263, 48686, 50198, 52414, 16563, 16818, 60277, 31314, 40755, 1052, 5180, 36841, 16298, 22102, 6460, 39962), (20237, 10039, 30465, 21473, 2037, 15773, 30226, 36800, 12140, 28784, 6634, 15444, 28948, 46045, 52074, 55100, 31429, 45290, 55316, 49162, 53405, 48906, 65080, 26484, 64677), (50960, 57786, 34540, 30892, 50499, 53269, 36928, 37472, 4159, 43905, 7923, 28785, 13450, 47171, 3914, 30482, 63341, 20474, 35907, 32291, 19621, 26253, 30589, 55942, 50779), (57887, 4687, 38046, 15985, 27517, 3176, 30459, 19945, 48858, 12318, 23117, 14227, 53964, 47342, 51146, 28792, 64125, 22471, 9428, 1302, 30201, 40223, 5317, 63472, 11285), (4845, 11678, 2789, 33554, 41212, 20306, 22631, 6850, 26043, 19695, 46369, 63520, 30036, 12960, 50350, 10218, 53339, 49247, 1826, 1867, 65229, 7161, 33754, 59708, 20449), (27264, 10788, 57987, 55996, 23595, 56582, 20511, 6185, 53863, 55400, 46001, 52404, 10867, 56049, 11926, 46715, 4113, 55196, 42200, 58309, 12156, 64210, 15908, 10723, 24839), (4191, 44116, 10718, 38556, 29366, 33671, 32416, 25247, 3188, 4755, 50893, 60395, 30519, 5171, 46432, 63033, 20200, 17562, 34477, 32951, 20175, 17649, 2093, 17238, 58019), (18543, 3552, 53296, 24168, 56524, 62453, 3836, 35938, 43630, 37176, 53822, 32927, 52252, 57838, 9739, 24869, 40132, 40548, 10321, 9320, 60737, 19541, 155, 2719, 54383), (44200, 54899, 18220, 37752, 4967, 53953, 63730, 8668, 46791, 32391, 20703, 63062, 15403, 8838, 18238, 64706, 43579, 965, 30179, 12809, 42392, 38147, 59588, 50704, 31645), (22546, 34193, 16626, 14039, 7066, 35879, 4941, 5365, 18574, 55579, 22151, 265, 64669, 51358, 17427, 62416, 22595, 61936, 36119, 32721, 45386, 3542, 55720, 24601, 45799), (43097, 60529, 47152, 41891, 64622, 13055, 30231, 4555, 51974, 8146, 16936, 1917, 41399, 30888, 10075, 9160, 53293, 20574, 4619, 2991, 5239, 33018, 56598, 7261, 8789), (29832, 49059, 52393, 46480, 19345, 44070, 10612, 31778, 31501, 4741, 64845, 19162, 9637, 55922, 5024, 27372, 17223, 16041, 58082, 41608, 36057, 14235, 26581, 51856, 5254), (19473, 65302, 1495, 25996, 30360, 12547, 23701, 35656, 2306, 46937, 40991, 11936, 12127, 6463, 35501, 10515, 28103, 13887, 55180, 6764, 62446, 50656, 13493, 18229, 13356), (11989, 55345, 34906, 50967, 20697, 38188, 31056, 17826, 21389, 61224, 27108, 27066, 24181, 13520, 23364, 60542, 19385, 35120, 6873, 57551, 1920, 48390, 4063, 32893, 16), (60018, 47011, 204, 59310, 15419, 19266, 45227, 24399, 8811, 13756, 52827, 54637, 55745, 42389, 47570, 33479, 13416, 24485, 18581, 56926, 9898, 30276, 2727, 2680, 42558), (26062, 16474, 18617, 54588, 62791, 16362, 60899, 22482, 62910, 47603, 25213, 55066, 16867, 56378, 28283, 16993, 2577, 56773, 31101, 45924, 40700, 30243, 31725, 38652, 52094), (31137, 30052, 53675, 27162, 1747, 23364, 1232, 57573, 63764, 9988, 13462, 49834, 26414, 10583, 23560, 36480, 6528, 27315, 40965, 25839, 25162, 11241, 24099, 44973, 63006), (43598, 6595, 49763, 15926, 54795, 61327, 27144, 5926, 28751, 25066, 47030, 54998, 49476, 1985, 55010, 65514, 30528, 24000, 15566, 53043, 54363, 55221, 47656, 3516, 15968), (51304, 24276, 35797, 4532, 53107, 58071, 53335, 3077, 18341, 64517, 2030, 49772, 32830, 56224, 63310, 40939, 56753, 61707, 62727, 1707, 6176, 11754, 57781, 38537, 22589), (10808, 8890, 63023, 9752, 3458, 10047, 36169, 4885, 15659, 48724, 47614, 59642, 60442, 64037, 11253, 30094, 25309, 45477, 62074, 45371, 58769, 37473, 7088, 28835, 30768), (53479, 23226, 29078, 7185, 36072, 62161, 26497, 22940, 44485, 58654, 59709, 50915, 46680, 30964, 11721, 58839, 15932, 31588, 1643, 47285, 56018, 41764, 65423, 24587, 51258), (24579, 54314, 36357, 15517, 50806, 27523, 7198, 41316, 438, 3466, 16417, 31165, 37966, 27325, 40635, 39457, 29974, 29351, 4717, 14305, 21841, 22695, 35556, 4623, 35333), (14145, 20983, 15785, 5159, 31843, 32503, 48088, 19272, 17639, 47969, 38111, 46404, 27021, 27163, 40992, 32640, 10631, 58771, 21183, 55259, 37570, 38600, 24101, 43802, 57268), (30535, 55382, 51790, 65386, 61313, 27009, 47348, 54706, 29345, 57975, 59510, 33283, 12304, 38485, 27854, 42653, 37122, 28343, 62150, 31879, 38341, 48393, 63731, 4580, 1109), (45444, 13078, 47185, 63605, 7407, 4334, 10466, 35410, 47371, 64790, 23651, 58112, 52632, 31865, 36880, 20129, 13196, 42751, 10019, 21009, 33346, 56968, 16165, 15206, 39504), (1219, 55005, 33701, 52885, 59626, 13366, 8447, 13329, 26967, 9617, 42485, 59096, 53649, 22607, 37379, 64470, 17061, 2242, 10197, 54104, 59288, 52121, 15309, 41970, 40246), (39508, 43080, 7848, 13136, 4780, 19837, 18665, 36829, 59185, 14498, 31951, 27579, 27642, 20224, 46712, 45286, 55167, 8667, 29901, 27122, 16165, 42747, 58551, 31235, 32183), (45707, 38719, 36815, 6879, 30558, 22898, 13691, 2300, 55201, 59990, 29705, 14450, 37257, 28887, 35902, 31849, 54982, 55611, 59639, 15908, 38530, 45482, 57002, 17773, 45730), (62021, 58401, 17579, 6417, 5135, 50093, 29279, 63562, 27849, 14624, 40420, 52121, 17163, 30438, 59789, 18376, 7746, 52363, 62553, 13032, 62220, 19809, 52254, 2098, 59282), (62493, 61647, 1926, 29120, 43100, 16998, 41266, 18718, 64362, 64064, 45443, 33656, 57598, 22626, 22080, 65148, 40538, 40040, 19069, 55032, 52555, 11510, 32425, 50772, 46211), (40803, 2773, 31433, 3309, 58410, 21744, 55647, 31192, 1046, 60950, 22313, 4743, 64606, 18215, 42874, 23846, 56122, 2195, 62198, 41788, 45712, 19626, 57164, 42436, 64465), (36368, 24800, 22506, 51673, 62864, 62363, 14848, 13531, 47741, 54656, 24671, 25068, 22645, 17549, 2028, 5926, 49775, 5422, 59820, 29867, 43471, 26193, 46524, 10141, 64570), (31805, 52969, 56561, 47888, 17215, 9773, 60022, 56381, 30297, 5195, 2496, 58131, 52640, 37647, 10996, 60211, 52083, 45669, 8017, 15569, 59443, 9148, 940, 6163, 5303), (63300, 585, 25333, 36089, 48961, 61153, 50554, 56821, 52443, 39873, 56484, 16733, 53382, 34124, 34907, 7765, 43127, 6779, 52300, 10118, 25321, 28876, 17177, 50337, 51315), (48165, 55490, 52266, 56535, 39226, 11789, 15117, 60668, 30404, 48325, 414, 22460, 25112, 61371, 46061, 13736, 46151, 4199, 11284, 41663, 60761, 43235, 37089, 37715, 45975), (24640, 16563, 50500, 62927, 58652, 46050, 51168, 55386, 22623, 60594, 43859, 46831, 48574, 17377, 18753, 44020, 30142, 26084, 24454, 55198, 41207, 46533, 4890, 64327, 567), (11905, 14146, 13555, 4639, 39965, 7133, 60113, 20299, 60764, 26710, 30328, 37973, 8736, 50336, 26853, 31923, 50957, 34096, 14998, 27602, 22115, 33284, 7474, 50537, 61184), (57095, 14078, 50459, 58839, 38690, 10149, 1270, 63037, 21592, 33211, 22715, 30312, 59778, 52192, 11410, 47463, 44306, 28062, 8127, 61444, 30819, 52504, 2280, 13173, 21883), (28002, 12306, 37574, 42363, 24697, 38318, 43166, 12468, 11769, 7603, 39355, 10085, 23862, 30533, 3870, 43629, 54085, 17822, 29085, 56024, 48215, 2856, 63543, 25306, 56316), (11165, 40608, 17619, 41345, 62315, 14107, 27414, 10293, 43194, 37317, 33706, 27892, 40302, 57229, 19381, 52201, 18348, 38638, 48042, 24108, 43174, 35660, 12364, 35266, 31022), (65431, 20193, 9566, 1717, 5974, 34413, 25325, 1479, 5896, 46275, 29653, 18121, 2756, 46753, 37842, 63892, 22045, 37685, 22138, 23870, 18115, 45866, 27016, 28023, 17793), (11792, 12428, 62376, 18639, 58505, 31247, 25480, 50819, 2634, 25135, 52265, 12888, 18374, 54119, 62910, 18010, 43899, 14775, 14785, 19883, 54759, 53822, 65233, 13593, 4225), (53095, 18737, 51631, 33057, 48158, 5981, 5993, 10050, 3810, 36124, 44134, 32226, 16377, 23753, 15955, 54085, 12105, 33606, 56549, 56883, 48277, 51042, 42694, 29299, 38955), (35530, 36974, 27769, 18370, 16640, 21320, 65238, 38088, 56090, 46654, 51091, 34856, 23008, 40052, 40167, 56590, 55441, 60227, 29597, 62672, 61219, 27385, 23299, 34897, 38540), (27000, 22157, 19146, 40435, 61938, 45106, 57876, 29202, 54095, 63743, 58981, 46861, 55535, 63048, 48488, 60554, 49144, 38301, 23682, 63503, 14032, 6367, 42334, 64792, 5323), (56215, 28393, 16004, 35290, 46141, 23712, 12606, 40011, 6712, 14539, 52877, 29295, 53409, 17778, 999, 23886, 5953, 4222, 42071, 65490, 30649, 3234, 7893, 7850, 41844), (51649, 47385, 27315, 19926, 49812, 57784, 7593, 56021, 52273, 46071, 8651, 20519, 63643, 49441, 52394, 45014, 28195, 50957, 63208, 25564, 7041, 40403, 7042, 19126, 20366), (64394, 27123, 18034, 3124, 45656, 35262, 1404, 14605, 42104, 48585, 17474, 59750, 3434, 15797, 19035, 18466, 23607, 43619, 36405, 13782, 20076, 4647, 45588, 39001, 29795), (14144, 19743, 9060, 61969, 58792, 51720, 18869, 46280, 47392, 51070, 37802, 31855, 37003, 42430, 10939, 33540, 55555, 4524, 32804, 21960, 44063, 15613, 53729, 37215, 62294), (17464, 44934, 5979, 61466, 29900, 49802, 49674, 2591, 42291, 43398, 8520, 29710, 5994, 38263, 25534, 49483, 48103, 23489, 48675, 47138, 50255, 4492, 10662, 24991, 19740), (33550, 42594, 56864, 32488, 39986, 4156, 34366, 1155, 52853, 52065, 44096, 47709, 63285, 50686, 36845, 3748, 13669, 21954, 28552, 5628, 9348, 59662, 60560, 11067, 36396), (30710, 51488, 40147, 12808, 323, 8116, 26055, 50339, 27067, 5612, 25283, 34056, 61330, 54673, 19212, 13312, 53930, 36825, 10810, 58231, 54068, 64347, 31033, 2781, 56981), (63093, 51098, 57120, 2545, 13254, 64827, 15054, 58194, 37199, 24356, 45269, 11933, 34767, 33345, 2279, 46423, 35416, 60372, 18528, 6444, 19588, 26012, 38065, 29013, 19252), (56782, 45952, 34278, 43015, 403, 35449, 65316, 25864, 23538, 40134, 25821, 51645, 49040, 61454, 17525, 46462, 58009, 31321, 7272, 42792, 23329, 5820, 24724, 43406, 4892), (28486, 48757, 60524, 2943, 5118, 61453, 49364, 43452, 41766, 13875, 27551, 39465, 62949, 29719, 31446, 61710, 4074, 60121, 36112, 4650, 1376, 36501, 5526, 23258, 11917), (38742, 1380, 24354, 36801, 16178, 38038, 41073, 30667, 8101, 14433, 7593, 4382, 57010, 62351, 63239, 53018, 34957, 46385, 43738, 56474, 35887, 9044, 33924, 28049, 12187), (35026, 29826, 7068, 48114, 37818, 11406, 53102, 49117, 22145, 7189, 65065, 19311, 36075, 13533, 39977, 60094, 7636, 8631, 25030, 47694, 62972, 57467, 42573, 16774, 37748), (14511, 27904, 16509, 17349, 54912, 59810, 24019, 34223, 52550, 15893, 34843, 19918, 60054, 52498, 25105, 3063, 48744, 12549, 30939, 14687, 51683, 17807, 9595, 29249, 37264), (13807, 51198, 41212, 7357, 4834, 9408, 14593, 46990, 27074, 19200, 2371, 43594, 52466, 33055, 28264, 8804, 23777, 65421, 49828, 45959, 62422, 25018, 46877, 52451, 34966), (907, 37645, 58526, 2354, 54693, 2869, 7955, 17118, 48696, 63776, 28853, 33882, 3897, 60555, 2622, 25113, 43973, 8808, 15097, 34124, 44904, 36855, 30353, 27253, 16364), (26049, 62381, 33274, 31697, 55168, 40549, 10999, 51072, 58412, 50211, 61513, 58402, 23544, 36817, 52233, 1962, 20255, 43284, 10973, 61400, 19482, 57805, 39956, 12845, 25140), (42961, 3864, 44461, 45102, 22005, 2845, 16886, 4144, 31880, 44179, 42814, 51550, 59142, 23255, 50068, 64831, 60010, 8109, 51989, 43109, 38490, 60650, 9343, 60654, 9148), (53968, 38587, 4962, 53888, 22619, 16838, 52124, 55461, 5926, 24631, 60607, 46306, 17612, 21616, 54880, 959, 65238, 11519, 15381, 60287, 6053, 58516, 1697, 18722, 44295), (5411, 38574, 60167, 65408, 6036, 34636, 8846, 18036, 58589, 113, 6940, 53867, 37181, 52157, 15203, 22592, 10704, 54970, 28114, 45098, 54680, 21187, 17446, 24002, 16579), (46692, 64564, 59352, 38164, 45080, 46654, 48991, 35837, 20725, 63647, 3606, 63853, 34612, 54250, 21100, 6361, 7356, 44914, 4691, 50918, 25115, 60784, 56854, 65439, 63336), (64989, 38734, 22601, 61882, 8545, 59988, 22135, 12639, 41492, 20050, 6016, 2530, 10238, 24120, 10420, 39747, 46627, 63980, 12182, 34431, 39290, 18018, 44497, 47552, 924), (55830, 40159, 252, 29960, 49498, 57379, 32230, 59538, 62195, 30657, 58226, 26804, 10105, 11513, 14642, 55493, 62605, 6599, 22954, 52546, 54144, 63152, 57986, 54772, 18641), (49093, 59757, 42990, 19532, 20042, 41578, 30774, 62347, 30690, 9598, 47965, 56463, 56323, 5220, 20986, 33614, 37839, 47766, 37748, 42781, 59983, 9466, 54269, 46086, 41695), (43585, 7333, 12821, 17777, 25411, 37960, 43487, 10002, 16800, 32312, 47763, 19146, 57636, 36831, 15344, 683, 11209, 57821, 29739, 53816, 43772, 42476, 6549, 1074, 40189), (64853, 42245, 47372, 490, 12846, 8213, 15840, 43297, 39798, 62096, 63795, 20183, 50077, 6869, 41071, 4653, 34874, 34072, 51696, 36866, 2004, 18996, 29444, 61213, 58394), (37046, 26443, 52443, 12772, 41608, 56488, 15957, 3483, 32741, 1629, 46230, 57175, 16903, 5970, 55901, 2004, 35343, 8376, 24779, 43520, 22304, 52771, 21989, 57490, 40425), (12721, 53907, 10845, 39406, 18937, 29435, 59593, 19223, 54855, 6700, 21921, 54557, 37631, 48234, 7196, 60297, 65302, 6953, 9106, 5414, 24110, 31677, 15889, 38563, 38839), (60629, 57141, 6697, 54731, 380, 58083, 64262, 7828, 56574, 17224, 21967, 34863, 33933, 47622, 21848, 16840, 64791, 8664, 19923, 40325, 46603, 28943, 3906, 39946, 646), (48618, 21741, 12300, 10508, 25457, 48369, 23014, 60313, 29452, 20889, 43589, 17734, 30098, 15802, 58159, 28253, 55249, 27257, 32675, 59426, 20176, 4559, 8509, 65443, 26938), (64738, 42836, 32012, 55006, 57480, 52374, 38391, 15937, 20094, 40601, 1455, 19582, 16423, 20390, 46079, 11518, 22249, 38053, 31044, 7091, 4809, 11675, 24474, 42338, 10320), (9746, 40619, 55174, 6745, 23394, 39554, 59409, 8465, 704, 64830, 51311, 36502, 28727, 21456, 56099, 13446, 16937, 62816, 58039, 62135, 20061, 14400, 35539, 56462, 10078), (57647, 42157, 9908, 28903, 4838, 58084, 46069, 61109, 14638, 10078, 32428, 17519, 61025, 6241, 36949, 23125, 51499, 11415, 63224, 45493, 55821, 9494, 50427, 6089, 50981), (48629, 38912, 25599, 59443, 51504, 34332, 17881, 46187, 2932, 63955, 6765, 51194, 60478, 27771, 22382, 57859, 23622, 28476, 38432, 27736, 31909, 13886, 38244, 17686, 45651), (31147, 26495, 26924, 59568, 40273, 51823, 10210, 22384, 63797, 7201, 34132, 40641, 15057, 34564, 15138, 57696, 32464, 39727, 17133, 64551, 14196, 36197, 64210, 29465, 55654), (8624, 57726, 62330, 33604, 47055, 7238, 53611, 60343, 63968, 17666, 15735, 38962, 31112, 25135, 24546, 40369, 18141, 51773, 52040, 197, 60809, 40081, 64081, 13812, 57609), (39116, 18593, 3763, 24094, 17588, 31585, 26876, 54295, 31877, 22686, 47319, 54515, 23340, 40473, 47714, 50508, 27424, 36753, 58900, 1013, 50158, 1570, 8825, 40692, 43087), (639, 16476, 38997, 59210, 19995, 29853, 27897, 53271, 19195, 913, 10460, 3688, 64737, 24595, 24213, 44686, 63851, 47962, 20031, 43957, 35128, 56447, 25833, 51570, 6945), (55552, 22971, 65098, 43078, 32013, 6335, 63879, 49770, 31365, 36230, 55044, 22024, 57298, 27523, 1379, 40305, 28731, 51343, 34131, 14628, 22560, 55332, 9591, 18207, 61872), (539, 38199, 11560, 12892, 2081, 23775, 12739, 56368, 40554, 15822, 57922, 36214, 38258, 12916, 11690, 62341, 40008, 58613, 1773, 61907, 34867, 21438, 13113, 51723, 50163), (45650, 36054, 9701, 23398, 15793, 59676, 26566, 56694, 430, 47097, 57787, 55058, 3369, 34561, 17427, 49961, 50057, 51949, 56750, 20778, 21981, 61980, 64556, 4590, 29394), (28399, 7215, 60684, 7774, 64222, 37024, 28793, 34398, 64463, 52295, 21001, 36281, 30198, 13328, 63363, 18806, 39086, 51972, 22332, 35674, 20881, 47135, 50635, 59558, 50760), (58774, 48444, 35982, 44995, 20011, 43715, 3242, 53666, 6898, 13300, 46487, 45066, 221, 65247, 8618, 6983, 1292, 61162, 55386, 3867, 28575, 47386, 44186, 52571, 14131), (17590, 29569, 17370, 60537, 51022, 34229, 40322, 23999, 30306, 42915, 9410, 16320, 1499, 14833, 10452, 26834, 28018, 28019, 1731, 35956, 54589, 63186, 36169, 55097, 62006), (10371, 3217, 24235, 19974, 49359, 43961, 6038, 2041, 51541, 27519, 43639, 19541, 52769, 47981, 61492, 30429, 39138, 57556, 64607, 52802, 28936, 20311, 31591, 40855, 17578), (33223, 49962, 56508, 6799, 8915, 35939, 51716, 9107, 61708, 48229, 17619, 27932, 1370, 36706, 42163, 18716, 7599, 44442, 16888, 16413, 55348, 3574, 33156, 59104, 40488), (11674, 43758, 9786, 64306, 4525, 36004, 57032, 35989, 46835, 33168, 9176, 47820, 25442, 31303, 45378, 22946, 4664, 63455, 18682, 24020, 17260, 32108, 47643, 50203, 111), (13151, 33416, 42829, 40239, 25525, 206, 38727, 18861, 10906, 39380, 65242, 7211, 34898, 11083, 1629, 45330, 40209, 26651, 1904, 20045, 29436, 32311, 50213, 17590, 56641), (16004, 13599, 39844, 1233, 58102, 4003, 33943, 4754, 33211, 36073, 1077, 26746, 18696, 40727, 49200, 1999, 63949, 40143, 698, 6008, 29548, 24597, 17802, 45, 36334), (3730, 49122, 45996, 32364, 51038, 35556, 35731, 35632, 29334, 8738, 4075, 49443, 57022, 19089, 60494, 36305, 32103, 34364, 52546, 12875, 9740, 52125, 35067, 8855, 36592), (34722, 38177, 61583, 47674, 34999, 43928, 33125, 31372, 31868, 43696, 31691, 61371, 47424, 2943, 61275, 60426, 34144, 24193, 51167, 47365, 35412, 59688, 5631, 20426, 17465), (25300, 12759, 29572, 2197, 20890, 28993, 2554, 5999, 44311, 39333, 8759, 15311, 32362, 60493, 57165, 45054, 20715, 17084, 2088, 10313, 46837, 2093, 180, 61763, 16621), (23302, 23640, 32196, 44155, 35613, 35675, 12363, 60517, 62169, 12166, 6432, 11265, 38404, 5394, 31287, 5137, 31693, 35866, 64645, 1372, 25262, 8181, 23234, 57660, 15205), (56503, 17355, 48345, 21408, 51201, 62629, 52436, 54993, 28695, 62833, 12366, 65000, 12566, 12831, 13616, 457, 12229, 29342, 15139, 13939, 7349, 36184, 14658, 9127, 62970), (22139, 37536, 28772, 18191, 47723, 10766, 8184, 43, 31899, 3357, 64274, 60620, 44767, 35766, 5922, 11938, 10523, 63452, 17636, 40529, 38506, 41460, 61913, 62018, 24648), (17327, 58384, 8598, 33614, 22357, 2308, 54730, 15161, 54166, 56774, 56583, 15783, 47393, 29447, 54019, 22505, 33456, 41112, 56660, 44933, 26561, 29202, 26109, 12736, 36699), (33823, 24649, 28840, 50533, 28664, 59287, 40051, 41143, 56501, 39260, 30744, 19827, 42608, 26271, 27591, 42231, 41615, 24018, 19784, 48158, 42870, 3211, 41869, 49499, 65256), (18139, 48550, 14673, 60711, 51836, 44499, 28571, 61466, 54938, 14157, 10665, 24865, 31284, 32528, 61022, 45504, 14057, 11290, 62420, 10209, 41507, 49066, 36868, 59100, 34745), (60379, 54941, 2357, 36116, 61350, 51436, 36128, 1666, 4884, 42558, 38813, 25150, 54935, 45856, 28604, 51450, 46275, 65194, 50416, 18510, 12568, 53145, 63241, 60217, 32922), (63114, 65015, 36918, 48938, 42993, 61792, 10166, 36332, 44998, 29899, 19745, 48854, 40311, 46868, 4303, 18334, 47969, 55416, 1876, 34473, 4869, 44526, 22767, 47450, 1539), (28764, 7817, 22338, 56824, 46900, 46546, 50070, 19976, 44258, 20842, 2138, 49540, 58585, 28381, 10927, 25646, 50562, 20895, 59209, 12103, 878, 57871, 24423, 49638, 21152), (35152, 40018, 9434, 29882, 33686, 30514, 63173, 33718, 57739, 35704, 21221, 30572, 35030, 58742, 3746, 48598, 10634, 39186, 51004, 59387, 56350, 30359, 2973, 4675, 65040), (10438, 56454, 52659, 30094, 11537, 45407, 53495, 41606, 37502, 41647, 1715, 26427, 22608, 63180, 36133, 18087, 26983, 57554, 54730, 49178, 35475, 38014, 60893, 52608, 20002), (48140, 652, 35235, 42554, 35370, 12347, 52436, 58033, 23864, 12802, 36052, 1617, 52972, 14200, 1862, 58804, 51704, 26744, 48092, 22939, 35518, 26934, 56336, 11701, 31470), (29453, 4986, 55345, 43240, 55124, 62674, 37113, 24304, 45423, 31452, 3853, 10268, 53685, 48246, 10669, 5181, 35370, 48540, 39830, 4680, 7037, 37041, 52275, 20449, 63888), (62419, 44507, 25658, 48725, 49144, 5134, 39525, 42258, 17853, 32028, 11992, 16158, 46441, 35446, 43517, 6127, 57341, 41877, 42833, 53075, 31294, 9571, 19996, 20608, 20487), (36380, 50578, 37067, 6242, 29594, 63655, 193, 10313, 6406, 19989, 57440, 29924, 5907, 47961, 51420, 5550, 34031, 33155, 62979, 47412, 42139, 44386, 62876, 20699, 52870), (27813, 30843, 50114, 54680, 27403, 14688, 7381, 40849, 51850, 61494, 966, 47731, 34755, 51148, 13844, 13323, 19173, 26086, 42951, 22460, 41890, 53246, 5244, 16633, 53657), (37028, 4214, 46571, 682, 36671, 40301, 20958, 45740, 32686, 11806, 23284, 3810, 3004, 55663, 18929, 11757, 65010, 6745, 573, 9240, 24868, 62836, 24699, 8706, 8414), (8564, 14317, 50707, 51490, 12220, 2273, 28746, 12348, 54405, 48634, 64661, 27716, 34604, 21525, 30902, 3408, 38889, 13340, 62371, 53733, 21018, 24059, 27720, 2043, 62729), (13508, 23824, 28770, 22589, 10559, 53661, 56342, 30949, 22561, 64890, 58993, 35487, 26496, 15908, 47928, 51183, 28839, 57808, 50208, 29200, 24389, 38298, 9497, 12388, 63563), (41317, 40918, 63242, 30438, 56650, 34485, 56180, 8503, 25194, 56821, 28597, 19280, 1725, 18857, 18070, 19445, 48962, 7118, 34477, 23735, 44147, 32363, 54874, 56445, 9375), (10327, 23042, 64591, 20995, 8861, 43987, 34143, 3153, 36160, 39005, 60469, 44216, 60884, 11758, 6604, 20798, 11946, 53801, 43765, 30162, 37655, 37919, 17112, 12274, 45332), (40412, 30944, 35887, 9439, 22921, 30322, 11267, 48729, 37338, 32903, 24089, 25185, 55494, 43174, 36919, 32592, 57854, 55634, 61855, 56916, 11730, 3103, 15468, 36951, 27688), (33826, 38770, 43046, 60838, 64619, 26274, 11503, 20547, 10266, 11168, 38932, 17007, 29833, 45248, 30643, 15543, 39839, 6267, 13540, 28238, 53798, 22444, 14902, 8793, 7725), (45130, 86, 26390, 5007, 25326, 64833, 53042, 20194, 1569, 49929, 26988, 27965, 56376, 55541, 27387, 28056, 22833, 48015, 41700, 60507, 17023, 47081, 56233, 64707, 4821), (51925, 59659, 25270, 11111, 25434, 58861, 2643, 54173, 40056, 20931, 29562, 60296, 16544, 44444, 2256, 2073, 43692, 6818, 36193, 16267, 30606, 3123, 5095, 5232, 46001), (55063, 60666, 52958, 64369, 18377, 734, 35708, 54444, 57051, 9314, 3849, 45283, 42791, 43209, 27265, 34139, 65209, 2238, 22083, 53469, 44002, 10697, 13018, 16431, 16496), (65182, 8374, 48381, 63148, 43414, 27940, 40601, 12900, 40501, 19288, 16703, 28635, 30265, 62119, 8551, 30799, 15742, 13200, 25990, 18990, 8049, 6850, 46060, 34671, 42620), (33498, 24921, 61696, 2598, 121, 6308, 26521, 7148, 43317, 12463, 8685, 32081, 27528, 30272, 54506, 18043, 11888, 4078, 40816, 12409, 27661, 60648, 12241, 17804, 40091), (64563, 55753, 15205, 23029, 4150, 60385, 45097, 2139, 7235, 56113, 43594, 45738, 15185, 53807, 41441, 30797, 48511, 30729, 34659, 31847, 13403, 44982, 41261, 40048, 54013), (49825, 10307, 21680, 63047, 7349, 62617, 61106, 41928, 8187, 44472, 28442, 50126, 47071, 63172, 55244, 9090, 29603, 60989, 15987, 58339, 39264, 53001, 35911, 53076, 52539), (21480, 19418, 27677, 15409, 59432, 32980, 7675, 35185, 57867, 40097, 27755, 58451, 64970, 18601, 24789, 10611, 53803, 54080, 25328, 65072, 35253, 22835, 20373, 3774, 46332), (21444, 16704, 41788, 53804, 41790, 48287, 43660, 10494, 2456, 12012, 58875, 11174, 2977, 52129, 33710, 55448, 5116, 11440, 40909, 34498, 4189, 28422, 20482, 34308, 62807), (20879, 7473, 55740, 33169, 30651, 12084, 18625, 48523, 17629, 6779, 52717, 32363, 37238, 15599, 9234, 36450, 3207, 6730, 25625, 8335, 7291, 12550, 9432, 12141, 62104), (15772, 43090, 25192, 24302, 61234, 65221, 7658, 59186, 29259, 49446, 55283, 10570, 53203, 41685, 53169, 25129, 35909, 31853, 15524, 15553, 18234, 29103, 35911, 1679, 10625), (52985, 33011, 1349, 57191, 47918, 4333, 35305, 33775, 39171, 26471, 44081, 15400, 56465, 36574, 12143, 64037, 56513, 63645, 16999, 47033, 53806, 31178, 33577, 58267, 208), (41326, 52945, 31473, 38934, 33849, 25190, 38964, 37053, 60552, 959, 38782, 30020, 34187, 39070, 60098, 24382, 48887, 21373, 35300, 40100, 58512, 13878, 56510, 5909, 20563), (15735, 5533, 59780, 46975, 53637, 47935, 39961, 6934, 35588, 19318, 13583, 13518, 45830, 47378, 21020, 41516, 1024, 27606, 47388, 52350, 7507, 24193, 60391, 27047, 38725), (3940, 58610, 11366, 65101, 64164, 8402, 24612, 18944, 3585, 41475, 24297, 45391, 26763, 38377, 1329, 64078, 21468, 9344, 779, 4091, 36868, 35255, 34373, 48655, 35088), (48721, 45499, 59213, 21814, 2364, 10166, 29895, 46414, 53632, 58153, 28109, 10763, 51625, 104, 32429, 29595, 51965, 52491, 13130, 36553, 24482, 19377, 3501, 48832, 19286), (62098, 49746, 44012, 37172, 49406, 50735, 17665, 4346, 17617, 65267, 26139, 40351, 18371, 33715, 62570, 32195, 43353, 43487, 57279, 14427, 927, 49121, 33383, 6389, 53095), (65264, 62790, 45101, 22186, 24554, 1565, 9649, 39637, 27106, 41747, 33474, 35708, 15445, 12630, 64713, 12945, 11779, 3197, 52523, 35539, 48810, 447, 47969, 17128, 36413), (35329, 5228, 19003, 62052, 18397, 49443, 20378, 32490, 6074, 25966, 53812, 29218, 39645, 60583, 8922, 37578, 55121, 11063, 33622, 52168, 60236, 25858, 4147, 7625, 17965), (51693, 12669, 803, 30942, 56038, 46161, 31328, 231, 6133, 21491, 4068, 31995, 31055, 64821, 1145, 13763, 52228, 40063, 16656, 4023, 2453, 16528, 16395, 39998, 23279), (7901, 26673, 23798, 47144, 38088, 62307, 39041, 38747, 41064, 33271, 8193, 59351, 5603, 17565, 7078, 43830, 58420, 37442, 25460, 8510, 37681, 8286, 47274, 32967, 1361), (8928, 1982, 37264, 28546, 14249, 1170, 6158, 34984, 39279, 62776, 10509, 46165, 50456, 33384, 34909, 30638, 45417, 33202, 16892, 53007, 53042, 29596, 17731, 50070, 38934), (5365, 32000, 18420, 31282, 11948, 60917, 10774, 35499, 26682, 16627, 18312, 16331, 11995, 4049, 12802, 50051, 2137, 64322, 18734, 2623, 22908, 23914, 63943, 44327, 10564), (47967, 51042, 1063, 5874, 41500, 16470, 14662, 34258, 29493, 39598, 56192, 50362, 53022, 64376, 46379, 43744, 14746, 18686, 49601, 28669, 39536, 38975, 51537, 31736, 24331), (37920, 42251, 51847, 58922, 61939, 17764, 11013, 60580, 12153, 43799, 25393, 13821, 46245, 31938, 48703, 4816, 51019, 55376, 37527, 52242, 56868, 21636, 5942, 43823, 29986), (57400, 33806, 39667, 51219, 41460, 11624, 60932, 6626, 31106, 49680, 5616, 9481, 31341, 64409, 39701, 49605, 19492, 8886, 52072, 44449, 3775, 18487, 63176, 64827, 12468), (52847, 10630, 61217, 3340, 23632, 15794, 4313, 70, 29002, 44264, 12838, 6167, 49818, 12960, 40490, 19569, 32087, 52310, 5104, 44508, 32366, 41374, 36207, 62710, 19683), (40855, 51098, 61807, 56767, 11605, 55492, 44769, 17157, 55883, 25144, 14786, 56907, 15775, 50114, 54384, 63813, 33319, 7599, 42500, 38057, 52202, 48986, 43628, 25072, 55294), (8692, 11685, 33418, 25500, 35779, 33369, 53122, 26318, 50024, 513, 43138, 28335, 1125, 32834, 49909, 51939, 22116, 51285, 1079, 20085, 40771, 6206, 35893, 42478, 45992), (54195, 59637, 41308, 63939, 15375, 50398, 57156, 9050, 62478, 10564, 59199, 28716, 39709, 18920, 41988, 21113, 12969, 7174, 30110, 25887, 34802, 64204, 16654, 50956, 37391), (12382, 5582, 51552, 27009, 29792, 5465, 39610, 34643, 7445, 57211, 3771, 54617, 38343, 23587, 20035, 17190, 40369, 27372, 8035, 8701, 21422, 44806, 21261, 44298, 42759), (29964, 24637, 9692, 16698, 35728, 38773, 23095, 4281, 59023, 42704, 28560, 58757, 36087, 3893, 31645, 64467, 20347, 25854, 53633, 57812, 44002, 7152, 26664, 13034, 39235), (63968, 24302, 5960, 59289, 52848, 18882, 18670, 47082, 19571, 13558, 13093, 65028, 26036, 43529, 39195, 23277, 9393, 15869, 1828, 47883, 12478, 923, 42765, 16150, 60034), (45410, 2854, 63576, 22111, 49166, 15323, 24559, 28193, 13277, 37025, 46466, 16069, 4706, 4894, 27900, 16917, 30527, 60520, 16671, 25054, 52572, 41565, 17899, 65408, 49554), (19223, 41368, 4535, 21403, 21973, 14350, 54121, 25290, 30626, 4290, 39185, 50967, 33564, 29405, 9896, 14745, 34854, 64476, 62560, 59510, 23219, 13999, 60301, 44603, 54519), (15837, 37732, 17623, 64721, 43424, 27057, 24573, 42846, 16814, 49782, 18578, 50830, 62572, 21200, 27609, 43847, 36508, 51106, 40822, 16682, 38696, 34841, 60706, 61029, 1743), (14399, 51103, 49671, 9714, 9137, 41792, 29933, 24013, 30136, 55028, 47559, 24243, 49062, 22923, 60378, 55215, 35577, 19071, 19442, 15445, 3725, 7554, 10320, 42365, 50918), (6457, 19918, 14520, 5695, 24028, 45944, 19217, 16666, 5538, 30783, 14918, 54215, 6861, 10595, 4889, 52017, 17416, 38688, 35696, 2764, 58196, 20874, 8442, 21629, 10234), (4901, 31038, 54842, 6993, 14700, 45372, 20423, 61549, 6139, 44339, 21732, 33845, 65419, 35364, 14795, 34339, 2928, 60612, 1748, 7490, 43442, 25167, 6274, 56968, 42498), (13442, 6678, 35337, 64004, 33898, 40461, 35354, 51665, 33337, 36175, 48165, 45335, 11454, 38822, 44056, 16749, 11938, 12779, 31961, 19682, 26000, 1035, 61408, 40395, 58077), (10528, 11295, 49498, 49764, 54699, 52841, 27423, 27692, 46941, 19256, 3575, 43111, 58025, 15125, 45230, 20597, 22409, 13472, 46198, 3634, 2330, 2649, 35969, 9741, 59794), (57942, 52943, 20744, 11399, 3056, 15620, 17375, 9404, 16544, 51167, 23857, 64622, 6904, 62482, 5476, 38500, 33655, 58110, 36382, 12247, 58960, 59808, 42953, 37305, 851), (18760, 58499, 12037, 40754, 673, 65468, 317, 38925, 6851, 44669, 6071, 34069, 8377, 10725, 4754, 6262, 18890, 1152, 18816, 4402, 55082, 34299, 18145, 29150, 23527), (47389, 14949, 44758, 34041, 56449, 52559, 63736, 14126, 20975, 42313, 46369, 8668, 28749, 29647, 64139, 48154, 1893, 36105, 40608, 49352, 45569, 1755, 22758, 23347, 42833), (62208, 48866, 37461, 64231, 37966, 58062, 14541, 21389, 46633, 42987, 20605, 24987, 44944, 45318, 6841, 31789, 34928, 53276, 28333, 54738, 1188, 19326, 7257, 12776, 60560), (24067, 25711, 45810, 56775, 19650, 38142, 24904, 41042, 15759, 8313, 29000, 29685, 51693, 9405, 26242, 21087, 61433, 29000, 32881, 7946, 27879, 45055, 28938, 14805, 41050), (61110, 12541, 32233, 20329, 60930, 10946, 6452, 10751, 53809, 18056, 35280, 22917, 46024, 35593, 30260, 12909, 37614, 15790, 5100, 58556, 49378, 50699, 5948, 35774, 22655), (36040, 60462, 3164, 2137, 14304, 34193, 37257, 38998, 23258, 24117, 45996, 35613, 63245, 18166, 16487, 15583, 61069, 19689, 64406, 64075, 17487, 58614, 7051, 5848, 50631), (61729, 53681, 47545, 28744, 52663, 17933, 16930, 3281, 25719, 50046, 62960, 48131, 35822, 15430, 13996, 33219, 61679, 9923, 8025, 2128, 8729, 41276, 62753, 1136, 42778), (14394, 11126, 28650, 63291, 65399, 58264, 60817, 45389, 11212, 36242, 24620, 52865, 55021, 42086, 4252, 32689, 50573, 58039, 63885, 48584, 35000, 2911, 374, 18079, 53262), (3769, 62868, 47984, 54177, 48876, 1887, 46228, 54306, 20195, 27794, 53594, 62696, 36949, 39106, 29120, 14849, 58758, 8003, 47246, 26419, 25626, 59938, 55706, 47343, 50678), (7021, 13808, 46420, 16268, 10572, 32380, 6401, 34145, 18814, 30163, 26088, 23907, 4065, 32479, 59254, 59530, 28894, 44249, 1822, 29418, 42255, 42921, 42825, 23428, 2179), (47859, 43925, 50252, 57599, 62671, 49562, 11713, 19608, 30797, 42869, 16279, 65448, 8817, 28348, 57485, 10206, 8575, 58125, 40544, 39903, 36477, 38081, 21069, 61709, 931), (44725, 27389, 36543, 33035, 7949, 2122, 62120, 63010, 48270, 41213, 27651, 23037, 47211, 59639, 34808, 12920, 46364, 54882, 15746, 19222, 13393, 47210, 3507, 23216, 54610), (34238, 44068, 11029, 45988, 61663, 41806, 52025, 149, 356, 57229, 2111, 50553, 20448, 49964, 1663, 58358, 18549, 8276, 16324, 22151, 6716, 21132, 36170, 14708, 62661), (44161, 42838, 24786, 51725, 41790, 12964, 30983, 29751, 60378, 61296, 22664, 19479, 48307, 57772, 180, 64406, 16790, 17046, 42570, 11472, 49176, 54687, 10300, 64603, 63948), (56860, 55834, 17838, 2466, 44953, 65427, 39517, 10130, 52008, 24548, 45676, 6662, 56109, 60149, 41616, 47933, 56672, 63565, 61057, 7171, 48242, 57889, 732, 7303, 33775), (24716, 15787, 40267, 24350, 34408, 53993, 14370, 36418, 37434, 18513, 51954, 3744, 22650, 55014, 18589, 47507, 3708, 52556, 6527, 36632, 63975, 23233, 30912, 65137, 55937), (58721, 37423, 28105, 1180, 64142, 14907, 65103, 44286, 12223, 13270, 13569, 15399, 23544, 14691, 4712, 5898, 2134, 15746, 26017, 4381, 15214, 44797, 119, 17170, 33655), (27703, 24488, 52826, 38106, 61871, 36204, 61619, 52441, 47943, 40509, 21140, 6008, 7950, 15304, 30091, 52240, 64497, 39026, 15756, 58906, 43869, 39114, 29924, 39932, 51976), (58533, 34010, 62560, 37596, 48414, 8955, 51449, 4198, 26574, 49689, 62845, 48955, 26314, 1609, 15030, 58739, 57509, 25457, 25794, 31837, 10544, 5816, 52749, 32611, 32898)]&quot;</span>, <span class="string">&quot;b&quot;</span>: <span class="string">&quot;(11852, 40039, 61221, 5696, 17099, 14562, 55346, 24521, 416, 35663, 23856, 24647, 13107, 7521, 51455, 58642, 33535, 44484, 37656, 48854, 42195, 1308, 63347, 59701, 28030, 31542, 26059, 50134, 55345, 44748, 3842, 33871, 16793, 6286, 39608, 5457, 20485, 3567, 8168, 34256, 25223, 6415, 20080, 30336, 8848, 59707, 13262, 29709, 14596, 62602, 63386, 3827, 19507, 12452, 24685, 54285, 52438, 28929, 56574, 28561, 25717, 23923, 61018, 58933, 27128, 25843, 13247, 39971, 10576, 39854, 61019, 38557, 53816, 10965, 17248, 57949, 7647, 18572, 39844, 43080, 37216, 54036, 18092, 51799, 29800, 3831, 32640, 52752, 54334, 47114, 23999, 63426, 35409, 6725, 35138, 611, 6343, 32554, 47441, 51995, 20627, 34208, 59523, 15423, 60577, 8577, 56130, 47819, 14444, 56929, 38101, 9739, 29166, 28463, 12652, 22462, 35326, 13440, 59746, 1207, 43882, 24120, 27102, 52356, 31830, 15592, 44657, 48958, 32867, 8892, 46502, 21090, 52511, 32619, 22922, 48915, 21674, 64327, 51958, 46676, 12863, 10512, 16039, 30091, 59779, 34719, 14311, 50715, 29678, 44376, 29631, 56860, 48974, 20037, 26098, 5284, 27542, 47172, 43764, 18451, 3263, 25830, 2926, 28343, 58647, 16515, 15335, 58666, 29106, 1406, 33913, 37911, 15982, 34556, 10982, 27882, 27757, 29930, 38500, 33448, 38453, 9745, 18200, 41092, 42055, 9758, 52276, 17265, 19940, 11277, 21090, 6473, 45768, 24909, 24577, 20043, 57739, 64145, 42296, 57394, 35014, 7510, 27676, 33453, 50441, 12646, 56144, 27805, 40516, 3166, 4649, 15125, 3329, 61754, 31426, 62120, 64994, 49076, 40920, 52502, 27858, 44887, 33034, 18523, 20572, 48449, 17993, 31161, 38692, 46532, 43382, 31086, 52760, 58239, 20511, 63662, 34385, 64754, 31340, 7817, 7925, 62468, 14102, 8897, 57085, 21282, 31424, 23070, 16375, 5081, 59000, 62711, 1559, 10184, 26565, 18232, 49036, 28899, 24721, 48155, 39456, 22957, 48313, 14579, 35483, 20248, 4218, 15647, 29873, 43251, 18108, 5607, 16129, 46448, 30421, 46554, 4355, 48089, 39527, 14731, 33222, 18328, 12914, 30188, 59710, 1168, 15763, 28014, 16019, 62362, 33445, 52360, 26174, 25300, 46178, 58779, 9457, 47277, 57732, 22475, 24157, 65435, 36452, 1248, 64663, 10301, 56700, 10176, 8436, 13027, 14493, 16129, 54871, 64243, 36832, 64269, 25810, 60247, 14368, 26154, 17881, 20932, 39373, 51088, 51334, 54154, 32771, 57346, 4199, 59130, 34447, 53487, 15647, 3160, 65020, 19196, 62035, 45262, 65128, 62302, 57896, 62398, 24696, 37237, 52966, 41938, 61626, 53222, 47046, 22868, 3294, 40114, 49910, 2997, 16339, 24335, 8406, 29568, 51388, 13031, 20114, 20393, 38655, 17408, 56918, 8070, 56300, 37248, 32428, 3535, 56734, 53590, 34975, 25470, 63388, 32317, 33244, 58451, 57760, 19552, 5913, 35267, 58273, 33286, 9758, 18038, 13483, 18722, 15900, 65430, 64453, 20836, 35913, 63476, 21980, 2640, 174, 15632, 58250, 50263, 25277, 20557, 21974, 44194, 4401, 44431, 111, 55798, 34275, 23980, 21805, 12520, 29968, 32463, 20932, 62738, 126, 61414, 49719, 62041, 7973, 63793, 44161, 39931, 57845, 5248, 3353, 59633, 25634, 34262, 38935, 55423, 57017, 35859, 32984, 34761, 18603, 8280, 62355, 54037, 35031, 34161, 21867, 11730, 40771, 24174, 43433, 21832, 22219, 41759, 45711, 52981, 322, 48561, 23634, 43810, 51549, 12411, 30193, 43445, 62341, 30797, 32034, 43668, 18076, 42291, 58967, 2507, 3694, 34995, 43204, 55921, 28421, 32042, 32041, 29489, 20959, 3591, 57503, 46729, 6756, 4001, 27079, 21977, 41714, 27990, 32042, 41630, 188, 58107, 56671, 37021, 55834, 28330, 30198, 14634, 26376, 54094, 9778, 47259, 52172, 413, 57322, 32947, 24301, 40103, 47805, 63460, 45027, 58687, 29368, 50857, 33177, 56299, 22794, 34339, 1352, 34550, 2809, 51218, 30240, 13605, 61472, 61264, 46662, 49333, 15947, 49470, 13229, 10793, 27146, 11497, 61800, 26086, 16123, 5144, 25205, 51901, 23717, 34252, 31111, 19235, 20281, 12791, 4478, 44855, 15024, 32110, 29904, 24536, 44187, 64477, 14582, 6203, 36710, 19553, 51294, 35794, 32941, 28169, 33228, 39747, 54759, 52243, 970, 35198, 5045, 21100, 21560, 65239, 9032, 21242, 35101, 34463, 47540, 37675, 51999, 32603, 20893, 48324, 56325, 47725, 30794, 26058, 58492, 37103, 26744, 36667, 57968, 4879, 18033, 44946, 35929, 15560, 37254, 16685, 42421, 54565, 53191, 47432, 23308, 30977, 8870, 50576, 61308, 38765, 52591, 59677, 36136, 26062, 37722, 36608, 34034, 51084, 39613, 57142, 5221, 35690, 37847, 30269, 30642, 34530, 41738, 53860, 62063)&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<p>LWE，b给了，还差个 A</p>
<p><code>AA = A*D*PM</code>，其中 AA，D，PM 都给了，A 可求</p>
<h2 id="exp："><a href="#exp：" class="headerlink" title="exp："></a>exp：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.groups.perm_gps.permgroup_named <span class="keyword">import</span> SymmetricGroup</span><br><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choices</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">q = <span class="number">65537</span></span><br><span class="line">Per = (<span class="number">1</span>,<span class="number">23</span>,<span class="number">2</span>,<span class="number">13</span>,<span class="number">3</span>,<span class="number">16</span>,<span class="number">15</span>,<span class="number">6</span>,<span class="number">22</span>,<span class="number">18</span>,<span class="number">14</span>,<span class="number">4</span>,<span class="number">25</span>,<span class="number">11</span>,<span class="number">20</span>,<span class="number">24</span>,<span class="number">21</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">17</span>,<span class="number">7</span>,<span class="number">19</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">8</span>)</span><br><span class="line">P = PermutationGroupElement(Per)</span><br><span class="line">PM = Matrix(GF(q),P.matrix())</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:    </span><br><span class="line">    data = json.loads(f.read())    </span><br><span class="line">    AA = <span class="built_in">eval</span>(data[<span class="string">&#x27;AA&#x27;</span>])   </span><br><span class="line">    b = <span class="built_in">eval</span>(data[<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;D.matrix&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:    </span><br><span class="line">    data = json.loads(f.read())    </span><br><span class="line">    D = <span class="built_in">eval</span>(data[<span class="string">&#x27;D&#x27;</span>])</span><br><span class="line"></span><br><span class="line">AA = Matrix(GF(q),AA)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(len(list(AA)))</span></span><br><span class="line"><span class="comment"># print(len(list(AA)[0]))</span></span><br><span class="line"></span><br><span class="line">b = vector(GF(q),b)</span><br><span class="line">D = Matrix(GF(q),D)</span><br><span class="line"></span><br><span class="line">A = AA * PM^(-<span class="number">1</span>) * D^(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">primal_attack2</span>(<span class="params">A,b,m,n,p,esz</span>):</span><br><span class="line">    L = block_matrix(</span><br><span class="line">        [</span><br><span class="line">            [matrix(Zmod(p), A).T.echelon_form().change_ring(ZZ), <span class="number">0</span>],</span><br><span class="line">            [matrix.zero(m - n, n).augment(matrix.identity(m - n) * p), <span class="number">0</span>],</span><br><span class="line">            [matrix(ZZ, b), <span class="number">1</span>],</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line">    Q = diagonal_matrix([<span class="number">1</span>]*m + [esz])</span><br><span class="line">    L *= Q</span><br><span class="line">    L = L.LLL()</span><br><span class="line">    L /= Q</span><br><span class="line">    <span class="keyword">for</span> res <span class="keyword">in</span> L:</span><br><span class="line">        <span class="keyword">if</span>(res[-<span class="number">1</span>] == <span class="number">1</span>):</span><br><span class="line">            e = vector(GF(p), res[:m])</span><br><span class="line">        <span class="keyword">elif</span>(res[-<span class="number">1</span>] == -<span class="number">1</span>):</span><br><span class="line">            e = -vector(GF(p), res[:m])</span><br><span class="line">        </span><br><span class="line">        s = matrix(Zmod(p), A).solve_right((vector(Zmod(p), b) - e))</span><br><span class="line">        </span><br><span class="line">        ss = vector(ZZ,s).<span class="built_in">list</span>()</span><br><span class="line">        msg = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ss)):</span><br><span class="line">            msg += ss[i] * <span class="number">65537</span>**i</span><br><span class="line"></span><br><span class="line">        flag = long_to_bytes(<span class="built_in">int</span>(msg))</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&quot;SCTF&quot;</span> <span class="keyword">in</span> flag:</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">m = <span class="number">625</span></span><br><span class="line">n = <span class="number">25</span></span><br><span class="line">primal_attack2(A,b,m,n,q,<span class="number">2</span>^<span class="number">8</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Wp</tag>
        <tag>Dual RSA</tag>
      </tags>
  </entry>
  <entry>
    <title>WKCTF 2024</title>
    <url>/Crypto/WKCTF-2024/</url>
    <content><![CDATA[<p>深刻的让我意识到了自己搜索能力的不足+数学菜鸡</p>
<span id="more"></span>
<h1 id="fl-g"><a href="#fl-g" class="headerlink" title="fl@g"></a>fl@g</h1><blockquote>
<p>源码</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> factorial</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">table = string.ascii_letters + string.digits + <span class="string">&quot;@?!*&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myprime</span>():</span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(permutations(table) , total=factorial(<span class="built_in">len</span>(table))):</span><br><span class="line">        temp = <span class="string">&quot;&quot;</span>.join(<span class="built_in">list</span>(i))</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;flag&quot;</span> <span class="keyword">in</span> temp <span class="keyword">or</span> <span class="string">&quot;FLAG&quot;</span> <span class="keyword">in</span> temp <span class="keyword">or</span> <span class="string">&quot;f14G&quot;</span> <span class="keyword">in</span> temp <span class="keyword">or</span> <span class="string">&quot;7!@9&quot;</span> <span class="keyword">in</span> temp <span class="keyword">or</span> <span class="string">&quot;🚩&quot;</span> <span class="keyword">in</span> temp):</span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> nextprime(num)</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">n = myprime()*getPrime(<span class="number">300</span>)</span><br><span class="line">c = <span class="built_in">pow</span>(m,<span class="number">65537</span>,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n =&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>,c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 10179374723747373757354331803486491859701644330006662145185130847839571647703918266478112837755004588085165750997749893646933873398734236153637724985137304539453062753420396973717</span></span><br><span class="line"><span class="string">c = 1388132475577742501308652898326761622837921103707698682051295277382930035244575886211234081534946870195081797116999020335515058810721612290772127889245497723680133813796299680596</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>排列组合，需要注意一下 <code>flag</code> 和 <code>f14G</code> ，<code>FLAG</code> 和 <code>f14G</code> 是不能进行组合的</p>
<p>所以一共就 九种组合</p>
<p><code>flag</code> 、<code>f14G</code> 、<code>FLAG</code> 、<code>7!@9</code> 、<code>flag 和 FLAG</code>  、<code>flag 和 7!@9</code> 、<code>FLAG 和 7!@9</code> 、<code>f14G 和 7!@9</code> 、<code>flag 和FLAG和7!@9</code></p>
<p>这其实就是一个容斥定理</p>
<p>容斥原理核心的计数规则可以记为一句话：<strong>奇加偶减</strong></p>
<p>所以：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = factorial(<span class="number">63</span>)*<span class="number">4</span> - factorial(<span class="number">60</span>)*<span class="number">4</span> + factorial(<span class="number">57</span>)</span><br></pre></td></tr></table></figure>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> nextprime</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> factorial</span><br><span class="line"></span><br><span class="line">f = factorial(<span class="number">63</span>)*<span class="number">4</span> - factorial(<span class="number">60</span>)*<span class="number">4</span> + factorial(<span class="number">57</span>)</span><br><span class="line">p = f</span><br><span class="line">p = nextprime(p)</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">10179374723747373757354331803486491859701644330006662145185130847839571647703918266478112837755004588085165750997749893646933873398734236153637724985137304539453062753420396973717</span></span><br><span class="line">c = <span class="number">1388132475577742501308652898326761622837921103707698682051295277382930035244575886211234081534946870195081797116999020335515058810721612290772127889245497723680133813796299680596</span></span><br><span class="line"></span><br><span class="line">q = n//p</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = libnum.invmod(e,phi)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">pow</span>(c,d,n)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># WKCTF&#123;How_long_does_it_take_to_run_directly?&#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="easy-random"><a href="#easy-random" class="headerlink" title="easy_random"></a>easy_random</h1><blockquote>
<p>源码</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;WKCTF&#123;&#125;&#x27;</span></span><br><span class="line">pad_flag = pad(flag,<span class="number">16</span>)</span><br><span class="line">key = random.randbytes(<span class="number">16</span>)</span><br><span class="line">cipher = AES.new(key,AES.MODE_ECB)</span><br><span class="line"><span class="built_in">print</span>(cipher.encrypt(pad_flag))</span><br><span class="line"><span class="comment"># b&#x27;a\x93\xdc\xc3\x90\x0cK\xfa\xfb\x1c\x05$y\x16:\xfc\xf3+\xf8+%\xfe\xf9\x86\xa3\x17i+ab\xca\xb6\xcd\r\xa5\x94\xeaVM\xdeo\xa7\xdf\xa9D\n\x02\xa3&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;random.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2496</span>):</span><br><span class="line">        f.write(<span class="built_in">str</span>(random.getrandbits(<span class="number">8</span>))+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>移步我的另一篇博客：</p>
<p><a href="https://wbuildings.github.io/Crypto/MT19937实战/">MT19937 实战 | W’Blog (wbuildings.github.io)</a> </p>
<hr>
<h1 id="Meet-me-in-the-summer"><a href="#Meet-me-in-the-summer" class="headerlink" title="Meet me in the summer"></a>Meet me in the summer</h1><blockquote>
<p>源码</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice, randint</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> isPrime, sieve_base <span class="keyword">as</span> primes, getPrime</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;WKCTF&#123;&#125;&#x27;</span></span><br><span class="line">flag = pad(flag,<span class="number">16</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myPrime</span>(<span class="params">bits</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        n = <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> n.bit_length() &lt; bits:</span><br><span class="line">            n *= choice(primes)</span><br><span class="line">        <span class="keyword">if</span> isPrime(n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> n + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">key, message</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(<span class="number">65537</span>, message, key)</span><br><span class="line"></span><br><span class="line">p = myPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">N = p * q</span><br><span class="line">m = [getPrime(<span class="number">512</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1024</span>)]</span><br><span class="line">enc = [encrypt(N, _) <span class="keyword">for</span> _ <span class="keyword">in</span> m]</span><br><span class="line"></span><br><span class="line">a = [randint(<span class="number">1</span>,<span class="number">2</span> ** <span class="number">50</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">70</span>)]</span><br><span class="line">b = [randint(<span class="number">1</span>,<span class="number">2</span> ** <span class="number">50</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>)]</span><br><span class="line">secret = randint(<span class="number">2</span>**<span class="number">119</span>, <span class="number">2</span>**<span class="number">120</span>)</span><br><span class="line"></span><br><span class="line">ra = <span class="number">1</span></span><br><span class="line">rb = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">120</span>):</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">70</span>):</span><br><span class="line">        <span class="keyword">if</span> (secret &gt;&gt; i) &amp; <span class="number">1</span>:</span><br><span class="line">            ra *= a[i]</span><br><span class="line">            ra %= p</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> (secret &gt;&gt; i) &amp; <span class="number">1</span>:</span><br><span class="line">            rb *= b[i-<span class="number">70</span>]</span><br><span class="line">            rb %= q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key = md5(<span class="built_in">str</span>(secret).encode()).hexdigest()[<span class="number">16</span>:].encode()</span><br><span class="line">cipher = AES.new(key,AES.MODE_ECB)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">f&#x27;c = <span class="subst">&#123;cipher.encrypt(flag).<span class="built_in">hex</span>()&#125;</span>\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">f&#x27;m = <span class="subst">&#123;m&#125;</span>\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">f&#x27;enc = <span class="subst">&#123;enc&#125;</span>\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">f&#x27;a = <span class="subst">&#123;a&#125;</span>\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">f&#x27;b = <span class="subst">&#123;b&#125;</span>\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">f&#x27;ra = <span class="subst">&#123;ra&#125;</span>\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="string">f&#x27;rb = <span class="subst">&#123;rb&#125;</span>\n&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="先求N"><a href="#先求N" class="headerlink" title="先求N"></a>先求N</h2><p>原理：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21hcGxlMzE0Mi9NeS1DVEYtQ2hhbGxlbmdlcy9ibG9iL21hc3Rlci9JbWFnaW5hcnlDVEYvUm91bmQgMjYvbm9fbW9kdWx1cy9SRUFETUUubWQ=">My-CTF-Challenges/ImaginaryCTF/Round 26/no_modulus/README.md at master · maple3142/My-CTF-Challenges · GitHub<i class="fa fa-external-link-alt"></i></span></p>
<p>对于</p>
<p>$enc_i = 65537^{m_i} \bmod N $ </p>
<hr>
<p>我们总可以找到一组线性组合 </p>
<script type="math/tex; mode=display">
\sum_{i=0}^{n-1} a_ie_i=0</script><p>令</p>
<script type="math/tex; mode=display">
 \prod_{i=0}^{n-1}c^{a_i}=m^{e_ia_i}=m^0 = 1 \pmod N</script><p>构建格子：</p>
<script type="math/tex; mode=display">
(a_0~~a_1~~\dots~~a_{n-1})\begin{bmatrix}
 1 &  &  &       & Ke_0\\
   & 1 &  &      & Ke_1 \\
   &  & \ddots & &\vdots \\
   &  &  &   1   & Ke_{n-1} 
\end{bmatrix}=(a_0~~a_1~~\dots~~a_{n-1}~~0)</script><p>K 取足够大即可</p>
<p>$a_i$有正有负，甚至负数居多，所以</p>
<script type="math/tex; mode=display">
\prod_{i=0}^{n-1}c^{a_i}</script><p>会是个有理数，可用分数$\frac{x}{y}$表示，那么就存在：</p>
<p>$\frac{x}{y} \equiv1 \pmod N =&gt; x-y \equiv 0 \pmod N$ </p>
<p>找到两个 a 就有 $N = \gcd(x_0-y_0,x_1-y_1)$ </p>
<hr>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f = f.readlines()</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">eval</span>(f[<span class="number">1</span>].strip().split(<span class="string">&#x27;=&#x27;</span>)[-<span class="number">1</span>])</span><br><span class="line">enc = <span class="built_in">eval</span>(f[<span class="number">2</span>].strip().split(<span class="string">&#x27;=&#x27;</span>)[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数取少点，减少运算量</span></span><br><span class="line">m = m[:<span class="number">100</span>]</span><br><span class="line">enc = enc[:<span class="number">100</span>]</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">len</span>(m)</span><br><span class="line">L = Matrix(ZZ,n,n+<span class="number">1</span>)</span><br><span class="line">K = <span class="number">2</span>^<span class="number">512</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    L[i,i] = <span class="number">1</span></span><br><span class="line">    L[i,-<span class="number">1</span>] = K*m[i]</span><br><span class="line"></span><br><span class="line">L = L.LLL()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后一个数不取</span></span><br><span class="line">xx = product([ZZ(y) ^ x <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(L[<span class="number">0</span>][:-<span class="number">1</span>], enc)])</span><br><span class="line">yy = product([ZZ(y) ^ x <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(L[<span class="number">1</span>][:-<span class="number">1</span>], enc)])</span><br><span class="line"></span><br><span class="line">N = gcd(xx.numer() - xx.denom(), yy.numer() - yy.denom())</span><br><span class="line"><span class="built_in">print</span>(N)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3365950545896839807600753681439061096312578337873460615427103468443333055935222147455641892341798604350037357999848711970084367398055755047567367304166808830853176966914407772226194410114093800191521813038405295729046243670270181161836427221727870133145321390846488824416000038564306005700271206427983462394735137</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>根据 p 的构造方式，可知 p -1 光滑，可以分解 N</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">N = <span class="number">3365950545896839807600753681439061096312578337873460615427103468443333055935222147455641892341798604350037357999848711970084367398055755047567367304166808830853176966914407772226194410114093800191521813038405295729046243670270181161836427221727870133145321390846488824416000038564306005700271206427983462394735137</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Pollards_p_1</span>(<span class="params">N</span>):</span><br><span class="line">    a = <span class="number">2</span></span><br><span class="line">    n = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a = <span class="built_in">pow</span>(a, n, N)</span><br><span class="line">        res = gmpy2.gcd(a - <span class="number">1</span>, N)</span><br><span class="line">        <span class="keyword">if</span> res != <span class="number">1</span> <span class="keyword">and</span> res != N:</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">p = Pollards_p_1(N)</span><br><span class="line">q = N // p</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;p = <span class="subst">&#123;p&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;q = <span class="subst">&#123;q&#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">p = 266239931579101788237217833822346198682539336616234011732898866661722928035386747695230192006141430294833011494452114878744414084025005167432139516382471637567</span></span><br><span class="line"><span class="string">q = 12642545864299817932696528548195775137854645688987690739317393212595731628016420449974358672452504599152386464349500792607469701592216257829464295238775711</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="求-secret的低位"><a href="#求-secret的低位" class="headerlink" title="求 secret的低位"></a>求 secret的低位</h2><p><span class="exturl" data-url="aHR0cHM6Ly9qYXl4di5naXRodWIuaW8vMjAyMC8wNi8wOC/lr4bnoIHlrablrabkuaDnrJTorrDkuYtrbmFwc2Fjay8=">密码学学习笔记 之 knapsack | Van1sh的小屋 (jayxv.github.io)<i class="fa fa-external-link-alt"></i></span></p>
<p>因为 p-1 光滑，所以对于解决 dlp 问题 有利，既如此，此题我们可以<font color='orange'>通过 dlp 将 乘法背包 映射 成 加法背包</font>，需要注意的是，取对数之后模数应该变为 p-1</p>
<script type="math/tex; mode=display">
ra=a_0k_{69}·a_1k_{68}· ~~~ \dots ~~ ·a_{69}k_0 \pmod p，k_i\in(0,1)</script><p>随便取一个生成元 g ，两边取对数</p>
<script type="math/tex; mode=display">
\log_{g}{ra} = \log_{g}{a_0k_{69}}+\log_{g}{a_1k_{68}}+\dots+\log_{g}{a_{69}k_{0}} \pmod{p-1}，k_i\in(0,1)</script><p>就是我们常见的加法背包了</p>
<p>构造格子，优化：</p>
<script type="math/tex; mode=display">
(k_{69}~~k_{69}~~\cdots~~k_0~~l~~-1)=\begin{bmatrix}
 2 & 0 & \dots & 0 & 0 & \log_{g}{a_0}\\
 0 & 2 & \dots & 0 & 0 & \log_{g}{a_1}\\
 \vdots & \vdots & \ddots & \vdots & \vdots & \vdots\\
 0 & 0 & \dots & 2 & 0 & \log_{g}{a_{69}}\\
 0 & 0 & \dots & 0 & 1 & p-1\\
 1 & 1 & \dots & 1 & 1 & \log_{g}{ra}
\end{bmatrix}=(2k_{69}-1 ~~ 2k_{69}-1~~\cdots~~ 2k_0-1~~l-1~~ 0)</script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">810922431519561</span>, <span class="number">446272766988725</span>, <span class="number">167807402211751</span>, <span class="number">137130339017755</span>, <span class="number">214986582563833</span>, <span class="number">141074297736993</span>, <span class="number">1116944910925939</span>, <span class="number">827779449967114</span>, <span class="number">887541522977945</span>, <span class="number">698795918391810</span>, <span class="number">180874459256817</span>, <span class="number">42309568567278</span>, <span class="number">148563974468327</span>, <span class="number">43541894027392</span>, <span class="number">369461465628947</span>, <span class="number">226728238060977</span>, <span class="number">902554563386031</span>, <span class="number">369980733296039</span>, <span class="number">495826170604031</span>, <span class="number">202556971656774</span>, <span class="number">1124261777691439</span>, <span class="number">533425503636189</span>, <span class="number">393536945515725</span>, <span class="number">242107802161603</span>, <span class="number">506637008093239</span>, <span class="number">846292038115984</span>, <span class="number">686372167052341</span>, <span class="number">923093823276073</span>, <span class="number">557898577262848</span>, <span class="number">719859369760663</span>, <span class="number">51513645433906</span>, <span class="number">946714837276014</span>, <span class="number">24336055796632</span>, <span class="number">302053499607130</span>, <span class="number">970564601798660</span>, <span class="number">1082742759743394</span>, <span class="number">499339281736843</span>, <span class="number">13407991387893</span>, <span class="number">667336471542364</span>, <span class="number">38809146657917</span>, <span class="number">29069472887681</span>, <span class="number">420834834946561</span>, <span class="number">1044601747029985</span>, <span class="number">854268790341671</span>, <span class="number">918316968972873</span>, <span class="number">737863884666895</span>, <span class="number">1036231016223653</span>, <span class="number">792781009835942</span>, <span class="number">142149344663288</span>, <span class="number">828341073371968</span>, <span class="number">186470549619656</span>, <span class="number">279923049419811</span>, <span class="number">487848895651491</span>, <span class="number">737257307326881</span>, <span class="number">1065005635075133</span>, <span class="number">628186519179693</span>, <span class="number">554767859759026</span>, <span class="number">606623194910240</span>, <span class="number">497855707815081</span>, <span class="number">88176594691403</span>, <span class="number">278020899501967</span>, <span class="number">440746393631841</span>, <span class="number">921270589876795</span>, <span class="number">800698974218498</span>, <span class="number">437669423813782</span>, <span class="number">717945417305277</span>, <span class="number">191204872168085</span>, <span class="number">791101652791845</span>, <span class="number">772875127585562</span>, <span class="number">174750251898037</span>]</span><br><span class="line">ra = <span class="number">215843182933318975496532456029939484729806294336845406882490936458079210569046120528327121994744424727894554328344229010979127024288283698486557728305231262446</span></span><br><span class="line">p = <span class="number">266239931579101788237217833822346198682539336616234011732898866661722928035386747695230192006141430294833011494452114878744414084025005167432139516382471637567</span></span><br><span class="line"></span><br><span class="line">F = GF(p)</span><br><span class="line">g = F.primitive_element() 	<span class="comment">#获取原根g</span></span><br><span class="line"></span><br><span class="line">tmp = discrete_log(mod(ra,p),mod(g,p))</span><br><span class="line">n = <span class="built_in">len</span>(a)</span><br><span class="line">A = [discrete_log(mod(a[i],p),mod(g,p)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"></span><br><span class="line">d = n / log(<span class="built_in">max</span>(A), <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(CDF(d))</span><br><span class="line"><span class="keyword">assert</span> CDF(d) &lt; <span class="number">0.9408</span></span><br><span class="line"></span><br><span class="line">L = Matrix(ZZ,n+<span class="number">2</span>,n+<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    L[i,i] = <span class="number">2</span></span><br><span class="line">    L[i,-<span class="number">1</span>] = A[i]</span><br><span class="line">    L[-<span class="number">1</span>,i] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">L[-<span class="number">1</span>,-<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">L[-<span class="number">2</span>,-<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">L[-<span class="number">2</span>,-<span class="number">1</span>] = p-<span class="number">1</span></span><br><span class="line">L[-<span class="number">1</span>,-<span class="number">1</span>] = tmp</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> L.BKZ(block_size = <span class="number">30</span>):    <span class="comment"># LLL 也行，</span></span><br><span class="line">    <span class="keyword">if</span> line[-<span class="number">1</span>] == <span class="number">0</span>:</span><br><span class="line">        t = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> line[:-<span class="number">2</span>]:</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">1</span>:</span><br><span class="line">                t+= <span class="string">&#x27;0&#x27;</span>   <span class="comment"># 我以为这里是+1呢，可以反过来试试</span></span><br><span class="line">            <span class="keyword">if</span> i == -<span class="number">1</span>:</span><br><span class="line">                t+= <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(t) == <span class="number">70</span>:</span><br><span class="line">        <span class="built_in">print</span>(t[::-<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1100100011000011000001010101000010111110000001000010101010100100011011</span></span><br></pre></td></tr></table></figure>
<h2 id="再求secret的高位"><a href="#再求secret的高位" class="headerlink" title="再求secret的高位"></a>再求secret的高位</h2><p>这次使用 中间相遇攻击 （MITM），顺带学习了波字典的用法</p>
<hr>
<p>这是一种思想，并不固定于某个板子，，移步</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9jdGYtd2lraS5vcmcvY3J5cHRvL2F0dGFjay1zdW1tYXJ5L21lZXQtaW4tdGhlLW1pZGRsZS8=">中间相遇攻击 - MITM - CTF Wiki (ctf-wiki.org)<i class="fa fa-external-link-alt"></i></span> </p>
<p><strong>练习题：</strong> （2024国赛 hash）</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXh0ZXJqaWUuZ2l0aHViLmlvLzIwMjQvMDUvMTgv6LWb6aKY5aSN546wLzIwMjRDSVNDTi8/aGlnaGxpZ2h0PeS4remXtOebuOmBh+aUu+WHuyNoYXNo4oCU4oCU5aSN546w">2024CISCN | DexterJie’Blog<i class="fa fa-external-link-alt"></i></span></p>
<hr>
<p>同上：</p>
<script type="math/tex; mode=display">
rb=b_0k_{49}·b_1k_{48}· ~~~ \dots ~~ ·b_{49}k_0 \pmod q，k_i\in(0,1)</script><p> 记</p>
<script type="math/tex; mode=display">
t_1 = b_0k_{49}·b_1k_{48}· ~~~ \dots ~~ ·b_{24}k_{25} \pmod q</script><script type="math/tex; mode=display">
t_2 = b_{25}k_{24}·b_{26}k_{23}· ~~~ \dots ~~ ·b_{49}k_{0} \pmod q</script><p>那么  $rb = t_1*t_2 \bmod q $ </p>
<p>我们可以通过验证  $rb*t_2^{-1}$ 是否等于 $t_1$ 来进行 中间相遇攻击</p>
<p>$rb*t_2^{-1}=t_1 \bmod q$ </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">q = <span class="number">12642545864299817932696528548195775137854645688987690739317393212595731628016420449974358672452504599152386464349500792607469701592216257829464295238775711</span></span><br><span class="line">rb = <span class="number">3498090364718786308911989083689617571932166777012900779070629523727655934582351599924963383902292211754876835801399401170701861988033911802302715724060488</span></span><br><span class="line">b = [<span class="number">919042075929804</span>, <span class="number">731196114348957</span>, <span class="number">780418394368709</span>, <span class="number">3413259132589</span>, <span class="number">766847233992470</span>, <span class="number">297211103941610</span>, <span class="number">500281126810865</span>, <span class="number">849501916345269</span>, <span class="number">117720599611510</span>, <span class="number">551153334471840</span>, <span class="number">1072866601658568</span>, <span class="number">829727438821072</span>, <span class="number">179087882377496</span>, <span class="number">934984220634910</span>, <span class="number">670865352770561</span>, <span class="number">153859069714096</span>, <span class="number">600663927005680</span>, <span class="number">540242857915696</span>, <span class="number">553340712407662</span>, <span class="number">1113968197194611</span>, <span class="number">272342861356660</span>, <span class="number">1117828067970844</span>, <span class="number">796048575670909</span>, <span class="number">454054034318932</span>, <span class="number">654225458148223</span>, <span class="number">183717820875099</span>, <span class="number">1064983259059879</span>, <span class="number">737236143792316</span>, <span class="number">565414872646761</span>, <span class="number">550812923748544</span>, <span class="number">467970413493147</span>, <span class="number">764197477914194</span>, <span class="number">572611266860917</span>, <span class="number">74578187275404</span>, <span class="number">462057895458922</span>, <span class="number">594841925406302</span>, <span class="number">178813973628003</span>, <span class="number">607180532395162</span>, <span class="number">455598995678785</span>, <span class="number">227757559710253</span>, <span class="number">178207804255926</span>, <span class="number">982118016357442</span>, <span class="number">286821935441865</span>, <span class="number">947088152152874</span>, <span class="number">592190023483880</span>, <span class="number">686189038585889</span>, <span class="number">701809424042029</span>, <span class="number">610206451919836</span>, <span class="number">189925081438758</span>, <span class="number">108664403267133</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(b[<span class="number">0</span>].bit_length())   <span class="comment"># 50</span></span><br><span class="line"></span><br><span class="line">dic = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> secret <span class="keyword">in</span> trange(<span class="number">2</span>**<span class="number">24</span>,<span class="number">2</span>**<span class="number">25</span>):</span><br><span class="line">    t1 = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>):</span><br><span class="line">        <span class="keyword">if</span> (secret &gt;&gt; i) &amp; <span class="number">1</span>:</span><br><span class="line">            t1 *= b[i]</span><br><span class="line">            t1 %= q</span><br><span class="line">    dic[t1] = secret</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> secret <span class="keyword">in</span> trange(<span class="number">2</span> ** <span class="number">24</span>, <span class="number">2</span> ** <span class="number">25</span>):</span><br><span class="line">    t2 = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>):     </span><br><span class="line">        <span class="keyword">if</span> (secret &gt;&gt; i) &amp; <span class="number">1</span>:</span><br><span class="line">            t2 *= b[i+<span class="number">25</span>]</span><br><span class="line">            t2 %= q</span><br><span class="line">            </span><br><span class="line">    tmp = rb * inverse(t2,q) % q    <span class="comment"># mod q</span></span><br><span class="line">    <span class="keyword">if</span> tmp <span class="keyword">in</span> dic.keys():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;low_25 = &#x27;</span>,<span class="built_in">bin</span>(dic[tmp])[<span class="number">2</span>:])</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;high_25 = &#x27;</span>,<span class="built_in">bin</span>(secret)[<span class="number">2</span>:])</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># low_25 =  1011111010011011011100010</span></span><br><span class="line"><span class="comment"># high_25 =  1100010001001011111001111</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">c = <span class="string">&#x27;dc6ba0123102f13a60ec4488d917a53a3c9b61372f39b977e93027fcb735eac38ceea2c0a7d5d6baf3570eea05200ce0&#x27;</span></span><br><span class="line">low = <span class="string">&#x27;1100100011000011000001010101000010111110000001000010101010100100011011&#x27;</span></span><br><span class="line">low_25 = <span class="string">&#x27;1011111010011011011100010&#x27;</span></span><br><span class="line">high_25 = <span class="string">&#x27;1100010001001011111001111&#x27;</span></span><br><span class="line"></span><br><span class="line">high = high_25+low_25</span><br><span class="line">secret = <span class="built_in">int</span>(high+low,<span class="number">2</span>)</span><br><span class="line">c = <span class="built_in">bytes</span>.fromhex(c)</span><br><span class="line"></span><br><span class="line">key = md5(<span class="built_in">str</span>(secret).encode()).hexdigest()[<span class="number">16</span>:].encode()</span><br><span class="line">cipher = AES.new(key,AES.MODE_ECB)</span><br><span class="line"><span class="built_in">print</span>(cipher.decrypt(c))</span><br><span class="line"></span><br><span class="line"><span class="comment"># WKCTF&#123;Hell0_CTFer_Th1s_the_5ignin_fl4g.&#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="Faas"><a href="#Faas" class="headerlink" title="Faas"></a>Faas</h1><blockquote>
<p>源码</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">p = getPrime(<span class="number">256</span>)</span><br><span class="line">q = getPrime(<span class="number">256</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"><span class="comment"># print(p,q)</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(bytes_to_long(flag), e, n))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">6307087428677736357497034459737970959152896262793715778296915427469297166787112126441383726582076126245773277476143478349256813717514008533538716513810511</span></span><br><span class="line"><span class="string">5311161002667378270287698542067235931405307317925963294522517859778084164120335331513838215353575415471218414362372788855224259598970138214133452539914210</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>什么？这题要花六百块才能拿到flag！？</p>
<p>听话，花钱的flag咱不要</p>
<p>算了，标记一下，万一以后有需求呢</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2VuaWFjL2ZhYXM=">GitHub - eniac/faas: Factoring as a Service<i class="fa fa-external-link-alt"></i></span> </p>
<h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuemltYWJsdWUubGlmZS9hcnRpY2xlL3drY3RmMjAyNCMzOGU5ZmYyOTUxNjI0OTVkODc4YjI4ZjU2NDYzZjljMg==">WKCTF2024 | Zimablue’ Blog<i class="fa fa-external-link-alt"></i></span> </p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXh0ZXJqaWUuZ2l0aHViLmlvLzIwMjQvMDcvMTQv6LWb6aKY5aSN546wL1dLQ1RGLyNNZWV0LW1lLWluLXRoZS1zdW1tZXLigJTigJTlpI3njrA=">WKCTF | DexterJie’Blog<i class="fa fa-external-link-alt"></i></span> </p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Wp</tag>
        <tag>Lattice</tag>
        <tag>MITM</tag>
      </tags>
  </entry>
  <entry>
    <title>Shamir门限方案</title>
    <url>/Crypto/Shamir%E9%97%A8%E9%99%90%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p><strong>金风玉露一相逢，便胜却人间无数。</strong> </p>
<blockquote>
<p>始于2024-03-15，新增2024-08-09</p>
</blockquote>
<span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>先来看一个故事，1月8日，贵州省锦屏县平秋镇圭叶村开始了第七届村主任换届选举。这个藏身大山深处的偏僻小山村，最近刚刚因一枚奇特的公章而成为了人们关注的焦点。为了在村里进行民主理财管理，一年多前，村民想出了一个点子，把村财务公章分成五瓣交由5位选出的村民代表掌管，专门审核村干部的开销。近日消息一传出后，顿时引起了外界的广泛热议。这枚“五瓣章”更是被网友称为史上最牛公章。</p>
<p>那么在密码学当中，有没有这种方案，必须满足一定人数才能解出来整个秘密消息，而少于预设的人数阈值则解不出来这个秘密消息呢？</p>
<hr>
<h1 id="Shamir秘密共享方案"><a href="#Shamir秘密共享方案" class="headerlink" title="Shamir秘密共享方案"></a>Shamir秘密共享方案</h1><p><code>Shamir秘密共享方案</code>，叫做<code>Shamir Secret Sharing</code>, <code>SSS</code>。</p>
<p>其有两个参数 n、t（$t\le n$），由此也称作 <code>(t,n)-门限方案</code> 。</p>
<p>秘密 <code>s</code> 被分成 <code>n</code> 份信息，每一份信息被称为一个子密钥，只有至少<code>t</code>份子密钥时才能会出秘密 <code>s</code>，<code>t</code>称为方案的<code>门限值</code></p>
<h2 id="子密钥生成算法"><a href="#子密钥生成算法" class="headerlink" title="子密钥生成算法"></a>子密钥生成算法</h2><ul>
<li>秘密为 <code>s</code></li>
<li>大素数 <code>p</code></li>
<li>确定 <code>n</code>，作为 子密钥的持有者的数量</li>
<li>确定 <code>t</code></li>
<li><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagesimage-20240316203231773.png" alt="image-20240316203231773"></li>
<li><code>n</code>个持有者记作 $P_1,P_2,\dots,P_n$ ，$P_i$ 分到的子密钥为 $f(i)$ </li>
<li>销毁多项式</li>
</ul>
<h2 id="恢复秘密过程"><a href="#恢复秘密过程" class="headerlink" title="恢复秘密过程"></a>恢复秘密过程</h2><p>当 <code>x = 0</code> 时，$f(0)=s$ ，即可恢复出 <code>s</code> ，s即我们所求</p>
<p>恢复秘密至少需要 <code>t</code> 个子密钥</p>
<p>用到 拉格朗日插值公式 ：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagesimage-20240316203101217.png" alt="image-20240316203101217"></p>
<p>计算过程如下：</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagesd796c18983a9d03dae006f6f5370298.png" alt="d796c18983a9d03dae006f6f5370298"></p>
<h2 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h2><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTIxNjU1My9hcnRpY2xlL2RldGFpbHMvMTIyMDczODA5">Shamir 门限方案｜秘密共享｜拉格朗日插值｜密码学_shamir门限方案-CSDN博客<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnNhZ2lyaS50ZWNoL2luZGV4LnBocC9hcmNoaXZlcy81NS8=">Shamir 门限秘密共享方案 - SAGIRI’S BLOG<i class="fa fa-external-link-alt"></i></span></p>
<hr>
<h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="NKCTF2023-Raven"><a href="#NKCTF2023-Raven" class="headerlink" title="[NKCTF2023] Raven"></a>[NKCTF2023] Raven</h2><blockquote>
<p>题目</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env sage</span></span><br><span class="line"><span class="comment"># Problem by rec, with a bad raven.</span></span><br><span class="line"><span class="keyword">import</span> os, hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Raven</span>(<span class="params">n: <span class="built_in">int</span>, secret: <span class="built_in">bytes</span></span>):</span><br><span class="line">    H = <span class="keyword">lambda</span> x: hashlib.md5(os.urandom(<span class="number">8</span>) + x).digest()</span><br><span class="line"></span><br><span class="line">    p = getPrime(<span class="number">728</span>)</span><br><span class="line">    R.&lt;z&gt; = PolynomialRing(GF(p))</span><br><span class="line"></span><br><span class="line">    seed = H(secret)</span><br><span class="line">    f = R(</span><br><span class="line">        [bytes_to_long(secret)] + [bytes_to_long(H(seed)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>)]</span><br><span class="line">    )</span><br><span class="line">    x = [getRandomRange(<span class="number">2</span>, p - <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    y = [ZZ(f(xi)^<span class="number">2</span> + getPrime(<span class="number">256</span>)) <span class="keyword">for</span> xi <span class="keyword">in</span> x]</span><br><span class="line"></span><br><span class="line">    pairs = <span class="built_in">list</span>(<span class="built_in">zip</span>(x, y))</span><br><span class="line">    <span class="keyword">return</span> p, pairs</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;#####&#x27;</span></span><br><span class="line">key = os.urandom(<span class="number">16</span>)</span><br><span class="line">cipher = AES.new(key=key, IV=<span class="built_in">bytes</span>(<span class="built_in">range</span>(<span class="number">16</span>)), mode=AES.MODE_CBC)</span><br><span class="line">ct = cipher.encrypt(flag + os.urandom(<span class="number">16</span> - <span class="built_in">len</span>(flag) % <span class="number">16</span>))</span><br><span class="line">p, pairs = Raven(<span class="number">4</span>, key)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;p = &#125;</span>\n<span class="subst">&#123;pairs = &#125;</span>\n<span class="subst">&#123;ct = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p = 1018551160851728231474335384388576586031917743463656622083024684199383855595168341728561337234276243780407755294430553694832049089534855113774546001494743212076463713621965520780122783825100696968959866614846174188401153</span></span><br><span class="line"><span class="string">pairs = [(615358616404864757405587650175842125441380884418119777842292095751090237848084440177153221092040264723889917863863854377665802549748720692225139890884830475485512763149974948701807492663962748292710803434009673589337265, 84982753624462868217739962129526665082932464631118597651920986288766037499319751354013335054886685186857222944776560264528363811382359242656883760986496856164448940929282013856762706210675691655747370624405968909408102), (528363810186974800127873139379943131424126521611531830591311656948009967709310974894584084912262479395720199930206495204352231804549705720854271566421006481173043064265399467682307971910488405265826107365679757755866812, 496810092723839642457928776423789418365006215801711874210443222720529161066621876103037104247173440072986344011599384793861949574577559989016501090247331146721371126871470611440468688947950954988175225633457347666551944), (68711183101845981499596464753252121346970486988311398916877579778110690480447199642602267233989256728822535174215153145632158860662954277116345331672194812126361911061449082917955000137698138358926301360506687271134873, 995428771589393162202488762223106955302099250561593105620410424291405842350539887383005328242236156038373244928147473800972534658018117705291472213770335998508454938607290279268848513727721410314612261163489156360908800), (61574167546312883246262193556029081771904529137922128124933785599227801608271357738142074310192454183183340219301304405636497744152219785042075198056952749425345561162612590170550454476602892138914473795478531165181812, 618169326093802548516842299173393893046765466917311052414967158839652012130855552015876657514610755108820971877570295328618373296493668146691687291894702228119875561585283226588768969944781923428807766632578060221034862)]</span></span><br><span class="line"><span class="string">ct = b&quot;|2\xf0v7\x05Y\x89\r]\xe93s\rr)#3\xe9\x90%Z\x9a\xd9\x9ck\xba\xec]q\xb8\xf2&#x27;\xc8e~fL\xcf\x93\x00\xd6^s-\xc9\xd6M&quot;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>记 <code>getPrime(256)</code>  为 <code>t</code> ，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = R(</span><br><span class="line">        [bytes_to_long(secret)] + [bytes_to_long(H(seed)) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>)]</span><br><span class="line">    )</span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"><span class="comment"># 267335269824855211160668069721049574997*z^3 + 213474783285830430446771422061600488619*z^2 + 206893878840893771912598891815113528931*z + 269303276331389960303404727575127360280</span></span><br></pre></td></tr></table></figure>
<p>可以得到函数$f(x)=ax^3+bx^2+cx+d\bmod p$ </p>
<p>而 $y=f(x)^2+t$ </p>
<p>根据最高项幂可以看出这里的 门阀值为 <code>4</code>，恰好四组数据，可解得 <code>s</code>，即此处的<code>d</code>，也即 <code>key</code></p>
<p>两式联立得 </p>
<p>$y_i=a^2x_i^6+2abx_i^5+(b^2+2ac)x_i^4+(2ad+2bc)x_i^3+(2bd+c^2)+2cdx_i+d^2+t_i$ </p>
<p>也即：</p>
<p>$a^2x_i^6+2abx_i^5+(b^2+2ac)x_i^4+(2ad+2bc)x_i^3+(2bd+c^2)+2cdx_i+d^2-y_i=-t_i$ </p>
<hr>
<h4 id="构造示例"><a href="#构造示例" class="headerlink" title="构造示例"></a>构造示例</h4><p>$c = mb+r \mod n  $    ,      </p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/images7c94cc56446b6b49053e34b42bc90d5.png" alt="7c94cc56446b6b49053e34b42bc90d5"></p>
<hr>
<p>根据 la 佬的格 构造示例，构造如下格： </p>
<script type="math/tex; mode=display">
d^2~~~ 2cd~~~c^2+2bd~~~2ad+2bc~~~2ac+b^2~~~2ab~~~a^2~~~1~~~k_1\cdots k_4 \begin{bmatrix}
 1 &  &  &  &    &  &  & x_1^0 &\cdots  &  &x_4^0 \\
  &  & \ddots   &  &  &  &  & \vdots & \vdots &  &\vdots \\
  &  &  &  &    & 1 &  & x_1^6 &\cdots  &  &x_4^6 \\
  &  &  &  &    &  & 2^{256} & -y_1 &\cdots  &  &-y_4 \\
  &  &  &  &    &  &  & p &  &  & \\
  &  &  &  &    &  &  &  & \ddots &  & \\
  &  &  &  &    &  &  &  &  &  &p
\end{bmatrix}=d^2~~~ 2cd~~~c^2+2bd~~~2ad+2bc~~~2ac+b^2~~~2ab~~~a^2~~~2^{256}~~~-t_1\cdots -t_4</script><p>这里直接求的d似乎不准确，不能直接用做<code>key</code>求来<code>AES</code>求<code>flag</code>，所幸 求出 <code>a、b、c</code>再求出的<code>d</code>是可以的</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagesimage-20240315223427538.png" alt="image-20240315223427538"></p>
<p><code>LLL</code>算法功能暂且一张截图，后面或许会总结，到时候再写上去，如果不总结，那就。。。。</p>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum, gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">p = <span class="number">1018551160851728231474335384388576586031917743463656622083024684199383855595168341728561337234276243780407755294430553694832049089534855113774546001494743212076463713621965520780122783825100696968959866614846174188401153</span></span><br><span class="line">pairs = [(<span class="number">615358616404864757405587650175842125441380884418119777842292095751090237848084440177153221092040264723889917863863854377665802549748720692225139890884830475485512763149974948701807492663962748292710803434009673589337265</span>, <span class="number">84982753624462868217739962129526665082932464631118597651920986288766037499319751354013335054886685186857222944776560264528363811382359242656883760986496856164448940929282013856762706210675691655747370624405968909408102</span>), (<span class="number">528363810186974800127873139379943131424126521611531830591311656948009967709310974894584084912262479395720199930206495204352231804549705720854271566421006481173043064265399467682307971910488405265826107365679757755866812</span>, <span class="number">496810092723839642457928776423789418365006215801711874210443222720529161066621876103037104247173440072986344011599384793861949574577559989016501090247331146721371126871470611440468688947950954988175225633457347666551944</span>), (<span class="number">68711183101845981499596464753252121346970486988311398916877579778110690480447199642602267233989256728822535174215153145632158860662954277116345331672194812126361911061449082917955000137698138358926301360506687271134873</span>, <span class="number">995428771589393162202488762223106955302099250561593105620410424291405842350539887383005328242236156038373244928147473800972534658018117705291472213770335998508454938607290279268848513727721410314612261163489156360908800</span>), (<span class="number">61574167546312883246262193556029081771904529137922128124933785599227801608271357738142074310192454183183340219301304405636497744152219785042075198056952749425345561162612590170550454476602892138914473795478531165181812</span>, <span class="number">618169326093802548516842299173393893046765466917311052414967158839652012130855552015876657514610755108820971877570295328618373296493668146691687291894702228119875561585283226588768969944781923428807766632578060221034862</span>)]</span><br><span class="line">ct = <span class="string">b&quot;|2\xf0v7\x05Y\x89\r]\xe93s\rr)#3\xe9\x90%Z\x9a\xd9\x9ck\xba\xec]q\xb8\xf2&#x27;\xc8e~fL\xcf\x93\x00\xd6^s-\xc9\xd6M&quot;</span></span><br><span class="line"></span><br><span class="line">L = Matrix(ZZ,<span class="number">12</span>,<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    L[i,i]=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">L[<span class="number">7</span>,<span class="number">7</span>] = <span class="number">2</span>^<span class="number">256</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        L[j,<span class="number">8</span>+i]=pairs[i][<span class="number">0</span>]^j</span><br><span class="line">        </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    L[<span class="number">7</span>,<span class="number">8</span>+i] = -pairs[i][<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>,<span class="number">12</span>):</span><br><span class="line">        L[i,i] = p</span><br><span class="line"></span><br><span class="line">L = L.LLL()[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(L))</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">int</span>(gmpy2.iroot(<span class="built_in">abs</span>(L[<span class="number">6</span>]), <span class="number">2</span>)[<span class="number">0</span>])</span><br><span class="line">b = <span class="built_in">abs</span>(L[<span class="number">5</span>])//(<span class="number">2</span>*a)</span><br><span class="line">c = (<span class="built_in">abs</span>(L[<span class="number">4</span>])-b^<span class="number">2</span>)//(<span class="number">2</span>*a)</span><br><span class="line">d = <span class="built_in">abs</span>(L[<span class="number">1</span>])//(<span class="number">2</span>*c)</span><br><span class="line">key = libnum.n2s(<span class="built_in">int</span>(d))</span><br><span class="line">cipher = AES.new(key=key, IV=<span class="built_in">bytes</span>(<span class="built_in">range</span>(<span class="number">16</span>)), mode=AES.MODE_CBC)</span><br><span class="line"><span class="built_in">print</span>(cipher.decrypt(ct))</span><br><span class="line"></span><br><span class="line"><span class="comment"># nkctf&#123;..escape..&#125;</span></span><br></pre></td></tr></table></figure>
<p><span class="exturl" data-url="aHR0cHM6Ly9oYXJyeTA1OTcuY29tLzIwMjMvMDMvMzAvTktDVEYyMDIzLw==">NKCTF2023·Crypto WP | Harry’s Blog (harry0597.com)<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="EZshamir"><a href="#EZshamir" class="headerlink" title="EZshamir"></a>EZshamir</h2><blockquote>
<p>Shamir + LWE</p>
<p>task.sage</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256, md5</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shamir</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, pbits, noise_bit, n, m</span>):</span><br><span class="line">        self.pbits = pbits</span><br><span class="line">        self.noise_bit = noise_bit</span><br><span class="line">        self.n = n</span><br><span class="line">        self.m = m</span><br><span class="line">        self.p = getPrime(pbits)</span><br><span class="line">        P.&lt;x&gt; = PolynomialRing(Zmod(self.p))</span><br><span class="line">        self.poly = P([bytes_to_long(sha256(os.urandom(<span class="number">32</span>)).digest()) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.n)])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sample</span>(<span class="params">self</span>):</span><br><span class="line">        t = getrandbits(self.pbits)</span><br><span class="line">        y = <span class="built_in">int</span>(self.poly(t))</span><br><span class="line">        noise = getrandbits(noise_bit)</span><br><span class="line">        <span class="keyword">return</span> (t, y | noise)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_msg</span>(<span class="params">self</span>):</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.m):</span><br><span class="line">            res.append(self.sample())</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">pbits = <span class="number">400</span></span><br><span class="line">noise_bit = <span class="number">32</span></span><br><span class="line">n = <span class="number">100</span></span><br><span class="line">m = <span class="number">75</span></span><br><span class="line"></span><br><span class="line">shamir = Shamir(pbits, noise_bit, n, m)</span><br><span class="line">coefficient = shamir.poly()</span><br><span class="line">key = <span class="string">&quot;&quot;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>(coefficient)[<span class="number">1</span>:]])</span><br><span class="line">key = md5(key.encode()).digest()</span><br><span class="line">aes = AES.new(key = key, mode = AES.MODE_ECB)</span><br><span class="line">ct = aes.encrypt(pad(flag, <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">str</span>(shamir.p)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="built_in">str</span>(shamir.get_msg())+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    f.write(<span class="built_in">str</span>(bytes_to_long(ct))+<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>如果我们知道 LWE，就容易看出这题除了是Shamir，还涉及 LWE，低位加噪</p>
<p>何为 LWE？看完这篇想必就有大概的认识</p>
<p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xNTA5MjA1MDE=">初探全同态加密之二：格密码学与LWE问题 - 知乎 (zhihu.com)<i class="fa fa-external-link-alt"></i></span></p>
<p>有点抽象，所以结合 <span class="exturl" data-url="aHR0cHM6Ly90YW5nY3V4aWFvamlrdWFpLnh5ei9wb3N0Lzc1OGRkMzNhLmh0bWw=">LWE | 糖醋小鸡块的blog (tangcuxiaojikuai.xyz)<i class="fa fa-external-link-alt"></i></span> 一起食用</p>
<p><strong>给定矩阵A以及带有误差的乘积$Ax+e$，还原出未知的向量x。</strong> </p>
<script type="math/tex; mode=display">
\vec{b} =A\vec{x}+\vec{e}</script><p>其中e是我们在一个<strong>固定数值范围内随机采集的一个随机噪音向量</strong> ，在模p下要显得数量级较小 </p>
<p>带上了噪音之后，这个问题就变成了已知一个矩阵A，和它与一个向量x相乘得到的乘积再加上一定的<strong>误差（error）</strong>e，即Ax+e，如何有效的<strong>还原（learn）未知的向量，我们把这一类的问题统称为误差还原（Learning With Error， LWE）问题</strong> </p>
<hr>
<p>结合 <code>LWE</code>，我们可以得到如下多项式：</p>
<script type="math/tex; mode=display">
a_0+a_1x_i+a_2x_i^2+\dots+a_{n-1}x_i^{n-1} +e_i=b_i \pmod p</script><p>这里 <code>xi = t，bi = y | noise</code>  </p>
<p>转换一下：</p>
<script type="math/tex; mode=display">
x_{75\times 100}A_{100\times 1}+e_{75\times 1}=b_{75\times 1}</script><p>构造矩阵如下：</p>
<script type="math/tex; mode=display">
(a_0~~~a_1~~~\dots ~~~a_{99}~~~1~~~l_0~~~l_1~~~\dots~~~l_{99})\begin{bmatrix}
 1 &  &  &  &    &  &  & x_1^0 &\cdots  &  &x_{75}^0 \\
  &  & \ddots   &  &  &  &  & \vdots & \vdots &  &\vdots \\
  &  &  &  &    & 1 &  & x_{1}^{99} &\cdots  &  &x_{75}^{99} \\
  &  &  &  &    &  & K & -b_1 &\cdots  &  &-b_{75} \\
  &  &  &  &    &  &  & p &  &  & \\
  &  &  &  &    &  &  &  & \ddots &  & \\
  &  &  &  &    &  &  &  &  &  &p
\end{bmatrix}=(a_0~~~a_1~~~\dots ~~~a_{99}~~~K~~~e_0~~~e_1~~~\dots~~~e_{74})</script><p>为了写的方便点：</p>
<script type="math/tex; mode=display">
(a_0~~~a_1~~~\dots ~~~a_{99}~~~1~~~l_0~~~l_1~~~\dots~~~l_{99})\begin{bmatrix}
x_1^0 &\cdots  &x_{75}^0 &  1 &  &  &          \\
\vdots & \vdots  &\vdots  &  & \ddots   &  &      \\
x_{1}^{99} &\cdots   &x_{75}^{99}  &  &   & 1 &  \\
-b_1 &\cdots    &-b_{75}  &  &  &  &     K  \\
 p &  &  &   &  &  &    \\
& \ddots &  &   &  &  &    \\
  &  & p &  &    &  &  
\end{bmatrix}=(e_1~~~e_2~~~\dots~~~e_{75}~~~a_0~~~a_1~~~\dots ~~~a_{99}~~~K)</script><h3 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256, md5</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flatter</span>(<span class="params">M</span>):</span><br><span class="line">    <span class="keyword">from</span> subprocess <span class="keyword">import</span> check_output</span><br><span class="line">    <span class="keyword">from</span> re <span class="keyword">import</span> findall</span><br><span class="line">    <span class="comment"># compile https://github.com/keeganryan/flatter and put it in $PATH</span></span><br><span class="line">    z = <span class="string">&quot;[[&quot;</span> + <span class="string">&quot;]\n[&quot;</span>.join(<span class="string">&quot; &quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, row)) <span class="keyword">for</span> row <span class="keyword">in</span> M) + <span class="string">&quot;]]&quot;</span></span><br><span class="line">    ret = check_output([<span class="string">&quot;flatter&quot;</span>], <span class="built_in">input</span>=z.encode())</span><br><span class="line">    <span class="keyword">return</span> matrix(M.nrows(), M.ncols(), <span class="built_in">map</span>(<span class="built_in">int</span>, findall(<span class="string">b&quot;-?\\d+&quot;</span>, ret)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f = (f.read().encode().split(<span class="string">b&#x27;\n&#x27;</span>)[:-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">p = <span class="built_in">eval</span>(f[<span class="number">0</span>])</span><br><span class="line">msg = <span class="built_in">eval</span>(f[<span class="number">1</span>])</span><br><span class="line">ct = <span class="built_in">eval</span>(f[<span class="number">2</span>])</span><br><span class="line">ct = long_to_bytes(ct)</span><br><span class="line"></span><br><span class="line">pbits = <span class="number">400</span></span><br><span class="line">noise_bit = <span class="number">32</span></span><br><span class="line">n = <span class="number">100</span></span><br><span class="line">m = <span class="number">75</span></span><br><span class="line"></span><br><span class="line">X = []</span><br><span class="line">B = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> msg:</span><br><span class="line">    X.append(i[<span class="number">0</span>])</span><br><span class="line">    B.append(i[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">L = matrix(ZZ,m+<span class="number">1</span>+n,m+<span class="number">1</span>+n)</span><br><span class="line"></span><br><span class="line">K = <span class="number">2</span>**<span class="number">256</span></span><br><span class="line">Kn = <span class="number">2</span>**(<span class="number">256</span>-noise_bit)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        L[j,i] = <span class="built_in">pow</span>(X[i],j,p)</span><br><span class="line">    L[n,i] = B[i]</span><br><span class="line">    L[i+n+<span class="number">1</span>,i] = p</span><br><span class="line"></span><br><span class="line">L = Kn*L </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    L[i,i+m] = <span class="number">1</span></span><br><span class="line">L[n,-<span class="number">1</span>] = K</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LL = flatter(L)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> LL:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">abs</span>(i[-<span class="number">1</span>]) == K:</span><br><span class="line">        res = [<span class="built_in">abs</span>(j) <span class="keyword">for</span> j <span class="keyword">in</span> i[-n:-<span class="number">1</span>]]</span><br><span class="line">        key = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> res])</span><br><span class="line">        key = md5(key.encode()).digest()</span><br><span class="line">        aes = AES.new(key=key, mode=AES.MODE_ECB)</span><br><span class="line">        <span class="built_in">print</span>(aes.decrypt(ct))</span><br><span class="line"></span><br><span class="line"><span class="comment"># DASCTF&#123;3617af36-7869-6939-3a09-bb8038aea171&#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>井然有条</strong> 糖醋小鸡块师傅：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256, md5</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> check_output</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flatter</span>(<span class="params">M</span>):</span><br><span class="line">    <span class="comment"># compile https://github.com/keeganryan/flatter and put it in $PATH </span></span><br><span class="line">    z = <span class="string">&quot;[[&quot;</span> + <span class="string">&quot;]\n[&quot;</span>.join(<span class="string">&quot; &quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, row)) <span class="keyword">for</span> row <span class="keyword">in</span> M) + <span class="string">&quot;]]&quot;</span> </span><br><span class="line">    ret = check_output([<span class="string">&quot;flatter&quot;</span>], <span class="built_in">input</span>=z.encode()) </span><br><span class="line">    <span class="keyword">from</span> re <span class="keyword">import</span> findall </span><br><span class="line">    <span class="keyword">return</span> matrix(M.nrows(), M.ncols(), <span class="built_in">map</span>(<span class="built_in">int</span>, findall(<span class="string">b&quot;-?\\d+&quot;</span>, ret))) </span><br><span class="line"></span><br><span class="line">pbits = <span class="number">400</span></span><br><span class="line">noise_bit = <span class="number">32</span></span><br><span class="line">n = <span class="number">100</span></span><br><span class="line">m = <span class="number">75</span></span><br><span class="line">p = </span><br><span class="line">msgs = </span><br><span class="line">ct = </span><br><span class="line"></span><br><span class="line"><span class="comment">########################################################### part1 construct</span></span><br><span class="line">A= []</span><br><span class="line">b = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    temp = [msgs[i][<span class="number">0</span>]^j % p <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    A.append(temp)</span><br><span class="line">    b.append(msgs[i][<span class="number">1</span>])</span><br><span class="line">A = Matrix(ZZ,A)</span><br><span class="line">b = vector(ZZ,b)</span><br><span class="line"></span><br><span class="line"><span class="comment">########################################################### part2 LLL</span></span><br><span class="line"><span class="comment">#primal_attack1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">primal_attack1</span>(<span class="params">A,b,m,n,p,esz</span>):</span><br><span class="line">    L = block_matrix(</span><br><span class="line">        [</span><br><span class="line">            [matrix.identity(m)*p,matrix.zero(m, n+<span class="number">1</span>)],</span><br><span class="line">            [(matrix(A).T).stack(-vector(b)).change_ring(ZZ),matrix.identity(n+<span class="number">1</span>)],</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(L.dimensions())</span><br><span class="line">    Q = diagonal_matrix([<span class="number">2</span>^<span class="number">256</span>//esz]*m + [<span class="number">1</span>]*n + [<span class="number">2</span>^<span class="number">256</span>])</span><br><span class="line">    L *= Q</span><br><span class="line">    L = flatter(L)</span><br><span class="line">    L /= Q</span><br><span class="line">    <span class="keyword">for</span> res <span class="keyword">in</span> L:</span><br><span class="line">        <span class="keyword">if</span>(res[-<span class="number">1</span>] == <span class="number">1</span>):</span><br><span class="line">            s = vector(GF(p), res[-n-<span class="number">1</span>:-<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">        <span class="keyword">elif</span>(res[-<span class="number">1</span>] == -<span class="number">1</span>):</span><br><span class="line">            s = -vector(GF(p), res[-n-<span class="number">1</span>:-<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">        </span><br><span class="line">res = primal_attack1(A,b,m,n,p,<span class="number">2</span>^<span class="number">32</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line">key = <span class="string">&quot;&quot;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>(res)[<span class="number">1</span>:]])</span><br><span class="line">key = md5(key.encode()).digest()</span><br><span class="line">aes = AES.new(key = key, mode = AES.MODE_ECB)</span><br><span class="line">flag = aes.decrypt(long_to_bytes(ct))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>密码知识</tag>
        <tag>Shamir</tag>
        <tag>LWE</tag>
      </tags>
  </entry>
  <entry>
    <title>再见CBC</title>
    <url>/Crypto/%E5%86%8D%E8%A7%81CBC/</url>
    <content><![CDATA[<p>又是一道CBC</p>
<span id="more"></span>
<h3 id="安洵杯-2020-easyaes"><a href="#安洵杯-2020-easyaes" class="headerlink" title="[安洵杯 2020]easyaes"></a>[安洵杯 2020]easyaes</h3><blockquote>
<p>附件</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> key <span class="keyword">import</span> key</span><br><span class="line"></span><br><span class="line">iv = flag.strip(<span class="string">b&#x27;d0g3&#123;&#x27;</span>).strip(<span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">LENGTH = <span class="built_in">len</span>(key)</span><br><span class="line"><span class="keyword">assert</span> LENGTH == <span class="number">16</span></span><br><span class="line"></span><br><span class="line">hint = os.urandom(<span class="number">4</span>) * <span class="number">8</span></span><br><span class="line"><span class="built_in">print</span>(bytes_to_long(hint)^bytes_to_long(key))</span><br><span class="line"></span><br><span class="line">msg = <span class="string">b&#x27;Welcome to this competition, I hope you can have fun today!!!!!!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypto</span>(<span class="params">message</span>):</span><br><span class="line">    aes = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">    <span class="keyword">return</span> aes.encrypt(message)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(binascii.hexlify(encrypto(msg))[-<span class="number">32</span>:])</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">56631233292325412205528754798133970783633216936302049893130220461139160682777</span></span><br><span class="line"><span class="string">b&#x27;3c976c92aff4095a23e885b195077b66&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>还是CBC的题，上面学习了一下填充预言攻击，是已知 IV和 所有密文的一道交互题，这次是一道已知 key和最后一组密文、所有明文的题（key可求，不就是已知的嘛）</p>
<p>据观察，hint 为4字节重复八次而成的一个32字节，而key只有16字节，前后异或求出key</p>
<p>我们再回看一下cbc的解密过程</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/images9072994e5bdc89671da4926c1d63d0c.png" alt="9072994e5bdc89671da4926c1d63d0c"></p>
<p>再对比一下 ECB模式的解密过程</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagesimage-20240305200019861.png" alt="image-20240305200019861"></p>
<p>前面的步骤是不是惊人的一样，cbc模式就只多了异或 IV </p>
<p>这意味着我们可以通过ECB模式来解CBC模式的前一步骤再和IV异或即可</p>
<p>$定义解密函数dec(enc,key)$</p>
<p>$enc3 = dec(enc4,key)\oplus msg[3]$</p>
<p>$enc2 = dec(enc3,key)\oplus msg[2]$</p>
<p>$enc1 = dec(enc2,key)\oplus msg[1]$</p>
<p>$IV = dec(enc1,key)\oplus msg[0]$</p>
<p>得解</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor</span><br><span class="line"></span><br><span class="line">xor = <span class="number">56631233292325412205528754798133970783633216936302049893130220461139160682777</span></span><br><span class="line">xor = long_to_bytes(xor)</span><br><span class="line">key = long_to_bytes(bytes_to_long(xor[:<span class="number">16</span>]) ^ bytes_to_long(xor[<span class="number">16</span>:]))</span><br><span class="line"></span><br><span class="line">msg = <span class="string">b&#x27;Welcome to this competition, I hope you can have fun today!!!!!!&#x27;</span></span><br><span class="line">msgs = [msg[i:i+<span class="number">16</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(msg),<span class="number">16</span>)]</span><br><span class="line"><span class="built_in">print</span>(msgs)</span><br><span class="line"></span><br><span class="line">enc4 = <span class="string">&#x27;3c976c92aff4095a23e885b195077b66&#x27;</span></span><br><span class="line">IV = <span class="built_in">bytes</span>.fromhex(enc4)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dec</span>(<span class="params">m,key,enc</span>):</span><br><span class="line">    aes = AES.new(key,AES.MODE_ECB)</span><br><span class="line">    enc = strxor(aes.decrypt(enc),m)</span><br><span class="line">    <span class="keyword">return</span> enc</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> msgs[::-<span class="number">1</span>]:</span><br><span class="line">    IV = dec(m,key,IV)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">b&#x27;d0g3&#123;&#x27;</span> + IV+ <span class="string">b&#x27;&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># d0g3&#123;aEs_1s_SO0o_e4sY&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>AES</tag>
      </tags>
  </entry>
  <entry>
    <title>湖南省网络攻防邀请赛初赛复现</title>
    <url>/Crypto/%E6%B9%96%E5%8D%97%E7%9C%81%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E9%82%80%E8%AF%B7%E8%B5%9B%E5%88%9D%E8%B5%9B%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<p>发表的晚了点</p>
<p>复现的晚了点，下次跟上</p>
<h2 id="Babystream"><a href="#Babystream" class="headerlink" title="Babystream"></a>Babystream</h2><span id="more"></span>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_params</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a,b = [getPrime(<span class="number">128</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line">        a,b = [<span class="built_in">bin</span>(i)[<span class="number">2</span>:].zfill(<span class="number">128</span>) <span class="keyword">for</span> i <span class="keyword">in</span> [a,b]]</span><br><span class="line">        p = <span class="built_in">int</span>((a + b),<span class="number">2</span>)</span><br><span class="line">        q = <span class="built_in">int</span>((b + a),<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> isPrime(p) <span class="keyword">and</span> isPrime(q):</span><br><span class="line">            a, b = <span class="built_in">int</span>(a, <span class="number">2</span>), <span class="built_in">int</span>(b, <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> p,q,a,b</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;flag&#123;*****&#125;&#x27;</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p,q,a,b = get_params()</span><br><span class="line"><span class="keyword">if</span> p &gt; q:</span><br><span class="line">    p,q = q,p</span><br><span class="line">n = p * q</span><br><span class="line">stream = [q]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">114</span>):</span><br><span class="line">    num = (a * stream[-<span class="number">1</span>] + b) % p</span><br><span class="line">    stream.append(num)</span><br><span class="line">e = gmpy2.next_prime(stream[<span class="number">1</span>] * stream[<span class="number">14</span>] + stream[<span class="number">51</span>] * stream[<span class="number">4</span>])</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># n = 10787879094547634536418400489544495490920545668797140045606047169206620885051312335135831508173231222095307914925085736895140618767731141232201839054986089</span></span><br><span class="line"><span class="comment"># c = 6231259964139423317420399259419242000626426110518752018384660416595264962435087677191600419542766152613241809444876652160722765670645883113456355844854019# 256205479281287561054456695429182604991</span></span><br></pre></td></tr></table></figure>
<p>提示是观察 n的生成</p>
<p>那我们就看看：</p>
<script type="math/tex; mode=display">p=a*2^{128}+b</script><script type="math/tex; mode=display">q = b*2^{128}+a</script><script type="math/tex; mode=display">则，n=ab*2^{256}+(a^2+b^2)*2^{128}+ab</script><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>所以 n 的高128位为 ab 的高位，n的低128位为 ab 的低位，即可得 ab 的乘积（有进位影响）</p>
<p>在线网站分解一下得 a，b ，  需要注意一下a，b两个数的取值</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">c = <span class="number">6231259964139423317420399259419242000626426110518752018384660416595264962435087677191600419542766152613241809444876652160722765670645883113456355844854019</span><span class="comment"># 256205479281287561054456695429182604991</span></span><br><span class="line">n = <span class="number">10787879094547634536418400489544495490920545668797140045606047169206620885051312335135831508173231222095307914925085736895140618767731141232201839054986089</span></span><br><span class="line"></span><br><span class="line">ab_high = <span class="built_in">bin</span>(n)[<span class="number">2</span>:<span class="number">130</span>]</span><br><span class="line">ab_low = <span class="built_in">bin</span>(n)[-<span class="number">128</span>:]</span><br><span class="line"></span><br><span class="line">ab = (<span class="built_in">int</span>(<span class="built_in">str</span>(ab_high),<span class="number">2</span>)-<span class="number">2</span>)*<span class="number">2</span>**<span class="number">128</span>+<span class="built_in">int</span>(<span class="built_in">str</span>(ab_low),<span class="number">2</span>) <span class="comment">#  -2 自己调试得出</span></span><br><span class="line"><span class="comment"># print(ab)</span></span><br><span class="line"><span class="comment"># 在线分解一下 ab</span></span><br><span class="line">b = <span class="number">281016216346353051804623567458939631077</span></span><br><span class="line">a = <span class="number">331532263240160487350391899818281252661</span></span><br><span class="line"></span><br><span class="line">p = a*<span class="number">2</span>**<span class="number">128</span>+b</span><br><span class="line">q = b*<span class="number">2</span>**<span class="number">128</span>+a</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> p &gt; q:</span><br><span class="line">    p,q = q,p</span><br><span class="line">n = p * q</span><br><span class="line">stream = [q]</span><br><span class="line"><span class="comment"># print(stream)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">114</span>):</span><br><span class="line">    num = (a * stream[-<span class="number">1</span>] + b) % p</span><br><span class="line">    stream.append(num)</span><br><span class="line">e = gmpy2.next_prime(stream[<span class="number">1</span>] * stream[<span class="number">14</span>] + stream[<span class="number">51</span>] * stream[<span class="number">4</span>])</span><br><span class="line"><span class="comment"># print(e)</span></span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = libnum.invmod(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;flag&#123;efc296e5dedb426c492bd7eeb5514394&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>官方wp思路和上面大差不差，脚本写得优雅一点</p>
<p>通过分别取⾼低位可以得到ab之积的绝⼤部分值，爆破差值即可。由于ab均为素数，所以可以通过判 断是否有⼩素数来粗略筛选ab的值。由于不知道求得a和b是否与⽣成数字的a和b位置相同，因此可以 简单⽣成两个stream，观察哪个能得到flag即可：</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># def small_factor(ab):</span></span><br><span class="line"><span class="comment">#     for i in range(2,1000):</span></span><br><span class="line"><span class="comment">#         if n%i == 0:</span></span><br><span class="line"><span class="comment">#             return False</span></span><br><span class="line"><span class="comment">#         return True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">ab</span>):</span><br><span class="line">    a,b = sympy.symbols(<span class="string">&quot;a b&quot;</span>)</span><br><span class="line">    f1 = a*b-ab</span><br><span class="line">    f2 = (a* <span class="number">2</span>**<span class="number">128</span> + b)*(b* <span class="number">2</span>**<span class="number">128</span> + a) - n</span><br><span class="line">    result = sympy.solve([f1,f2],[a,b])</span><br><span class="line">    <span class="comment"># print(result)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(result)&gt;<span class="number">0</span>:</span><br><span class="line">        a,b = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">abs</span>,result[<span class="number">0</span>]))</span><br><span class="line">        <span class="comment"># print(list(map(abs,result[0])))</span></span><br><span class="line">        <span class="keyword">return</span> a,b</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">6231259964139423317420399259419242000626426110518752018384660416595264962435087677191600419542766152613241809444876652160722765670645883113456355844854019</span><span class="comment"># 256205479281287561054456695429182604991</span></span><br><span class="line">n = <span class="number">10787879094547634536418400489544495490920545668797140045606047169206620885051312335135831508173231222095307914925085736895140618767731141232201839054986089</span></span><br><span class="line"></span><br><span class="line">tmp1 = <span class="built_in">bin</span>(n)[<span class="number">2</span>:][:<span class="number">123</span>]</span><br><span class="line">tmp2 = <span class="built_in">bin</span>(n)[<span class="number">2</span>:][-<span class="number">128</span>:]</span><br><span class="line"></span><br><span class="line">ab1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">5</span>):</span><br><span class="line">    pad = <span class="built_in">bin</span>(i)[<span class="number">2</span>:].zfill(<span class="number">5</span>)</span><br><span class="line">    ab = <span class="built_in">int</span>(tmp1+ pad +tmp2,<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># if small_factor(ab) == True:</span></span><br><span class="line">    ab1.append(ab)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ab <span class="keyword">in</span> tqdm(ab1):</span><br><span class="line">    ans = attack(ab)</span><br><span class="line">    <span class="keyword">if</span> ans != <span class="literal">None</span>:</span><br><span class="line">        a,b = ans</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">2</span> ** <span class="number">128</span> * a + b</span><br><span class="line">q = <span class="number">2</span> ** <span class="number">128</span> * b + a</span><br><span class="line"><span class="keyword">assert</span> p * q == n</span><br><span class="line"><span class="keyword">if</span> p &gt; q:</span><br><span class="line">    p,q = q,p</span><br><span class="line"></span><br><span class="line">phi = <span class="built_in">int</span>((p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">stream1 = [q]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">114</span>):</span><br><span class="line">    num = (a * stream1[-<span class="number">1</span>] + b) % p</span><br><span class="line">    stream1.append(num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># stream2 = [q]</span></span><br><span class="line"><span class="comment"># for i in range(114):</span></span><br><span class="line"><span class="comment">#     num = (b * stream2[-1] + a) % p</span></span><br><span class="line"><span class="comment">#     stream2.append(num)</span></span><br><span class="line"></span><br><span class="line">e1 = gmpy2.next_prime(<span class="built_in">int</span>(stream1[<span class="number">1</span>] * stream1[<span class="number">14</span>] + stream1[<span class="number">51</span>] * stream1[<span class="number">4</span>]))</span><br><span class="line"><span class="comment"># e2 = gmpy2.next_prime(int(stream2[1] * stream2[14] + stream2[51] * stream2[4]))</span></span><br><span class="line"><span class="comment"># print(e1,e2)</span></span><br><span class="line">d1 = gmpy2.invert(e1,phi)</span><br><span class="line"><span class="comment"># d2 = gmpy2.invert(e2,phi)</span></span><br><span class="line">m1 = <span class="built_in">pow</span>(c,d1,n)</span><br><span class="line"><span class="comment"># m2 = pow(c,d2,n)</span></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m1))</span><br><span class="line"><span class="comment"># print(long_to_bytes(m2))</span></span><br></pre></td></tr></table></figure>
<h3 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h3><p>二元copper解：</p>
<p><code>a、b</code> 是128bit 的素数，所以最高位和最低位一定是 1</p>
<p>所以实际中求的是<code>a、b</code> 中间的126位的值</p>
<p>其实是看得懂的，只是未接触</p>
<p>最难的部分也即是 自定义的 small_roots ，网上搜得到，有区别于 多项式的求根 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f.small_roots(X=<span class="number">2</span>^(<span class="number">340</span>),beta=<span class="number">0.4</span>,epsilon=<span class="number">0.03</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br></pre></td></tr></table></figure>
<p>其中m为移位（shifts），d 为多项式中的最高幂。</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">small_roots</span>(<span class="params">f, bounds, m=<span class="number">1</span>, d=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d:</span><br><span class="line">        d = f.degree()</span><br><span class="line"></span><br><span class="line">    R = f.base_ring()</span><br><span class="line">    N = R.cardinality()</span><br><span class="line"></span><br><span class="line">    f /= f.coefficients().pop(<span class="number">0</span>)</span><br><span class="line">    f = f.change_ring(ZZ)</span><br><span class="line"></span><br><span class="line">    G = <span class="type">Sequence</span>([], f.parent())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m+<span class="number">1</span>):</span><br><span class="line">        base = N^(m-i) * f^i</span><br><span class="line">        <span class="keyword">for</span> shifts <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(d), repeat=f.nvariables()):</span><br><span class="line">            g = base * prod(<span class="built_in">map</span>(power, f.variables(), shifts))</span><br><span class="line">            G.append(g)</span><br><span class="line"></span><br><span class="line">    B, monomials = G.coefficient_matrix()</span><br><span class="line">    monomials = vector(monomials)</span><br><span class="line"></span><br><span class="line">    factors = [monomial(*bounds) <span class="keyword">for</span> monomial <span class="keyword">in</span> monomials]</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, factor)</span><br><span class="line"></span><br><span class="line">    B = B.dense_matrix().LLL()</span><br><span class="line"></span><br><span class="line">    B = B.change_ring(QQ)</span><br><span class="line">    <span class="keyword">for</span> i, factor <span class="keyword">in</span> <span class="built_in">enumerate</span>(factors):</span><br><span class="line">        B.rescale_col(i, <span class="number">1</span>/factor)</span><br><span class="line"></span><br><span class="line">    H = <span class="type">Sequence</span>([], f.parent().change_ring(QQ))</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, B*monomials):</span><br><span class="line">        H.append(h)</span><br><span class="line">        I = H.ideal()</span><br><span class="line">        <span class="keyword">if</span> I.dimension() == -<span class="number">1</span>:</span><br><span class="line">            H.pop()</span><br><span class="line">        <span class="keyword">elif</span> I.dimension() == <span class="number">0</span>:</span><br><span class="line">            roots = []</span><br><span class="line">            <span class="keyword">for</span> root <span class="keyword">in</span> I.variety(ring=ZZ):</span><br><span class="line">                root = <span class="built_in">tuple</span>(R(root[var]) <span class="keyword">for</span> var <span class="keyword">in</span> f.variables())</span><br><span class="line">                roots.append(root)</span><br><span class="line">            <span class="keyword">return</span> roots</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">n = <span class="number">10787879094547634536418400489544495490920545668797140045606047169206620885051312335135831508173231222095307914925085736895140618767731141232201839054986089</span></span><br><span class="line">c = <span class="number">6231259964139423317420399259419242000626426110518752018384660416595264962435087677191600419542766152613241809444876652160722765670645883113456355844854019</span><span class="comment"># 256205479281287561054456695429182604991</span></span><br><span class="line"></span><br><span class="line">R.&lt;x,y&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">a = <span class="number">2</span>^<span class="number">127</span> + <span class="number">2</span>*x + <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span>^<span class="number">127</span> + <span class="number">2</span>*y + <span class="number">1</span></span><br><span class="line">f = (a*<span class="number">2</span>^<span class="number">128</span>+b)*(b*<span class="number">2</span>^<span class="number">128</span>+a)</span><br><span class="line"></span><br><span class="line">bound = (<span class="number">2</span>^<span class="number">126</span>,<span class="number">2</span>^<span class="number">126</span>)</span><br><span class="line">res = small_roots(f,bound,m=<span class="number">2</span>,d=<span class="number">2</span>)</span><br><span class="line"><span class="keyword">if</span> res !=[]:</span><br><span class="line">    <span class="keyword">for</span> sol <span class="keyword">in</span> res:</span><br><span class="line">        a = <span class="number">2</span>^<span class="number">127</span> + <span class="number">2</span>*<span class="built_in">int</span>(sol[<span class="number">0</span>]) + <span class="number">1</span></span><br><span class="line">        b = <span class="number">2</span>^<span class="number">127</span> + <span class="number">2</span>*<span class="built_in">int</span>(sol[<span class="number">1</span>]) + <span class="number">1</span></span><br><span class="line">        p = <span class="built_in">int</span>((<span class="built_in">bin</span>(a)[<span class="number">2</span>:].zfill(<span class="number">128</span>) + <span class="built_in">bin</span>(b)[<span class="number">2</span>:].zfill(<span class="number">128</span>)),<span class="number">2</span>)</span><br><span class="line">        q = <span class="built_in">int</span>((<span class="built_in">bin</span>(b)[<span class="number">2</span>:].zfill(<span class="number">128</span>) + <span class="built_in">bin</span>(a)[<span class="number">2</span>:].zfill(<span class="number">128</span>)),<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> p &gt; q:</span><br><span class="line">            p, q = q, p</span><br><span class="line">        n = p * q</span><br><span class="line">        stream = [q]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">114</span>):</span><br><span class="line">            num = (a * stream[-<span class="number">1</span>] + b) % p</span><br><span class="line">            stream.append(num)</span><br><span class="line">        e = gmpy2.next_prime(stream[<span class="number">1</span>] * stream[<span class="number">14</span>] + stream[<span class="number">51</span>] * stream[<span class="number">4</span>])</span><br><span class="line">        d = gmpy2.invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">        m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">        flag = long_to_bytes(<span class="built_in">int</span>(m))</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;flag&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">2</span>^<span class="number">127</span> + <span class="number">2</span>*x + <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span>^<span class="number">127</span> + <span class="number">2</span>*y + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>乘以 2 是因为它的最低位处于第二位</p>
<p>二元copper：</p>
<p>以后回来再看：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vMTFZRUFHRVIxMS9wLzE3MjY5MTM5Lmh0bWw=">二元coppersmith - 顶真珍珠 - 博客园 (cnblogs.com)<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubWF0aC5hdWNrbGFuZC5hYy5uei9+c2dhbDAxOC9jcnlwdG8tYm9vay9jaDE5LnBkZg==">ch19.pdf (auckland.ac.nz)<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Wp</tag>
      </tags>
  </entry>
  <entry>
    <title>古典杂记</title>
    <url>/Crypto/%E5%8F%A4%E5%85%B8%E6%9D%82%E8%AE%B0/</url>
    <content><![CDATA[<p>记录一下刷题&amp;比赛中遇到的一些古典密码题</p>
<p>最近更新：2024-12-03</p>
<span id="more"></span>
<h1 id="FSCTF-2023-兔帽的奇妙冒险"><a href="#FSCTF-2023-兔帽的奇妙冒险" class="headerlink" title="[FSCTF 2023]兔帽的奇妙冒险"></a>[FSCTF 2023]兔帽的奇妙冒险</h1><p>附件：</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">有一只名叫贝斯<span class="number">64</span>先生的兔子。它戴着一顶古老的兔帽子，帽子上绣着奇异的符文，传说这是一种能与神秘力量连接的魔法帽子。</span><br><span class="line">OFR<span class="number">3</span>c<span class="number">05</span>RTEFK<span class="name">M2</span>Q<span class="number">3</span>QkxqRGlTbWthWExxSXhrZF<span class="meta">o3</span>SU<span class="number">5</span>DVWRkOTVFQ<span class="number">2</span>JUSE<span class="number">1</span><span class="attr">VcXpRQk9</span>hc<span class="number">3</span>hqMzRrbHRJMD<span class="number">0</span>=</span><br></pre></td></tr></table></figure>
<p>base64 解密一下</p>
<p><code>8TwsNQLAJ3d7BLjDiSmkaXLqIxkdZ7INCUdd95ECbTHMUqzQBOasxj34kltI0=</code></p>
<p>再加上 Rabbit 特征的密文头 <code>U2FsdGVkX1</code>  再Rabbit 解密</p>
<p><code>FSCTF&#123;Bunny_is_so_cute_Why_e@t_bunny&#125;</code> </p>
<h1 id="MoeCTF-2021-OldButPopular"><a href="#MoeCTF-2021-OldButPopular" class="headerlink" title="[MoeCTF 2021]OldButPopular"></a>[MoeCTF 2021]OldButPopular</h1><blockquote>
<p>附件</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">qj3r_y31s&#123;vxk7_hig__0_a&#125;g4ax_x0x540slv</span><br><span class="line">你能解密出这段是什么意思吗？ 观察一下这段密文格式有什么不一样</span><br></pre></td></tr></table></figure>
<p>一看就是移了顺序的，而且 <code>&#123;&#125;</code> 也移了，栅栏密码：所有字母变换位置但字母不变</p>
<p>这题的flag头 不是 <code>flag</code>就是 <code>moectf</code>，密文里没有，那就是字母变换了，大概是凯撒加密了</p>
<p>因为凯撒只对26个字母加密，所以<code>&#123;&#125;</code>是不动的，所以我们可以先进行凯撒解密通过 <code>&#123;&#125;</code> 来筛选正确的密文</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">qsigxj</span><span class="template-variable">&#123;g453v_a4rx_x0_k0_sy7_xl3_a0v1h&#125;</span></span><br></pre></td></tr></table></figure>
<p>在线网址枚举或者随波逐流一把梭</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">moectf&#123;c<span class="number">453</span>r_w<span class="number">4</span><span class="symbol">nt_t0</span>_<span class="name">g0</span>_ou<span class="number">7</span>_th<span class="number">3</span>_w<span class="number">0</span>r<span class="number">1</span>d&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>加密原理：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucXF4aXV6aS5jbi9iaWFubWEva2Fpc2FtaW1hLnBocA==">凯撒密码在线加密解密 - 千千秀字 (qqxiuzi.cn)<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucXF4aXV6aS5jbi9iaWFubWEvemhhbGFubWltYS5waHA=">栅栏密码在线加密解密 - 千千秀字 (qqxiuzi.cn)<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="户外天堂"><a href="#户外天堂" class="headerlink" title="户外天堂"></a>户外天堂</h1><blockquote>
<p><strong>湘赣边武功山论剑</strong></p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">这里是修炼之人的梦想之地，风景如画、宁静安详，少侠可以联系尚宝司少卿“张程”大人，在这里稍作休息，恢复体力，继续冒险。</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">张程大人：或许维吉尼亚密码在比武中能派上用场。这种加密方法通过变换字母顺序和使用不同的密钥，能有效保护通信内容，对于保密传输至关重要，值得深入研究和应用。</span><br></pre></td></tr></table></figure>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">kr<span class="number">0</span>gMDY<span class="number">1</span><span class="symbol">NTY5</span>MDgh<span class="symbol">NTU5</span>MsozMhU<span class="number">5</span>MzUg<span class="symbol">NiM3</span><span class="symbol">NTI0</span>ODI<span class="number">5</span>MsA<span class="number">2</span>MrE<span class="number">3</span>CmU<span class="number">9</span><span class="symbol">NsU1</span>MhcKYz<span class="number">01</span><span class="symbol">NTkyOTk4</span>MD<span class="name">M2</span>Mi<span class="meta">o3</span>Mr<span class="name">g0</span>OTYfODE<span class="number">0</span>OTcf<span class="symbol">NjUhMiA0</span>MhUiODM=</span><br><span class="line">key:rsa</span><br></pre></td></tr></table></figure>
<p>小改了一下字典，加密字典变成了小写字母，除小写外其他字符不变</p>
<p>因为字典的不同，所以<code>在线网站</code>和 <code>工具</code>都解不对，只能自己敲代码</p>
<p>所以我们需要理解原理来进行编写</p>
<p>1，$len(key) \le len(message)$ ，当密钥的长度小于明文长度时，需要重复拼接key到相同长度</p>
<p>2，</p>
<script type="math/tex; mode=display">
E：C_i=M_i+K_i \pmod {26} \\
C：M_i=C_i-K_i \pmod {26}</script><p>注：模数 26 是 字典的长度，即 <code>p = len(table)</code> ，字典长度为几，模数为几</p>
<p><code>Mi</code> 就是 M这个明文在字母表中的索引值，比如表是 <code>abcdefghijklmnopqrstuvwxyz</code>， 假如 M 为 b， 那 <code>Mi</code> 就表示 1   （表是a-z，下标也就是0-25）</p>
<p>同样，<code>Ki</code> 就是 <code>Mi</code> 所对应的 <code>K</code>的索引值，假设明文 M 对应的是密钥 r，在表中的索引值就是 17，于是 <code>Ki=17</code></p>
<p>具体可以结合下面的exp进行理解：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad_key</span>(<span class="params">key, length</span>):</span><br><span class="line">    Key = key * length</span><br><span class="line">    <span class="keyword">return</span> Key[:length]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">message, table, key</span>):</span><br><span class="line">    enc = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    Key = pad_key(key, length)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        <span class="keyword">if</span> message[i].islower():</span><br><span class="line">            enc += table[(table.index(message[i]) + table.index(Key[i])) % <span class="built_in">len</span>(table)]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            enc += message[i]</span><br><span class="line">    <span class="keyword">return</span> enc</span><br><span class="line"></span><br><span class="line">message = <span class="string">&#x27;kr0gMDY1NTY5MDghNTU5MsozMhU5MzUgNiM3NTI0ODI5MsA2MrE3CmU9NsU1MhcKYz01NTkyOTk4MDM2Mio3Mrg0OTYfODE0OTcfNjUhMiA0MhUiODM=&#x27;</span></span><br><span class="line">table = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span></span><br><span class="line">key = <span class="string">&#x27;rsa&#x27;</span></span><br><span class="line">length = <span class="built_in">len</span>(message)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(encrypt(message,table,key)).decode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># n=1065569082559283359352737524829206217</span></span><br><span class="line"><span class="comment"># e=65537</span></span><br><span class="line"><span class="comment"># c=557299803638728496181497065330435383</span></span><br></pre></td></tr></table></figure>
<p>rsa 就不解释了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> xenny.ctf.crypto.modern.asymmetric.rsa <span class="keyword">import</span> factor</span><br><span class="line"></span><br><span class="line">n=<span class="number">1065569082559283359352737524829206217</span></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">c=<span class="number">557299803638728496181497065330435383</span></span><br><span class="line"></span><br><span class="line">p,q = factor.attack(n)</span><br><span class="line">d=libnum.invmod(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">pow</span>(c,d,n)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;DraG0o0n&#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="easy-crypto"><a href="#easy-crypto" class="headerlink" title="easy_crypto"></a>easy_crypto</h1><blockquote>
<p>2024-09-05</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key.txt</span><br><span class="line"><span class="number">1091091153210977773210977109457732774646324677831153277464546324611511545838377321098377</span></span><br><span class="line"></span><br><span class="line">flag.rar</span><br></pre></td></tr></table></figure>
<p>题目内容：谐音一点都不好玩，但好在差别不大。</p>
<p>尝试了很多，最后可能是拼凑的<code>ascii</code>码，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;1091091153210977773210977109457732774646324677831153277464546324611511545838377&#x27;</span></span><br><span class="line"></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> num &lt;= <span class="built_in">len</span>(<span class="built_in">str</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">4</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">32</span> &lt;= <span class="built_in">int</span>(<span class="built_in">str</span>[num:num + j]) &lt;= <span class="number">126</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>[num:num + j])), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            num += j</span><br><span class="line"></span><br><span class="line"><span class="comment"># mms mMM mMm-M M.. .MSs M.-. .ss-SSM$</span></span><br></pre></td></tr></table></figure>
<p>ms，摩斯</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;mms mMM mMm-M M.. .MSs M.-. .ss-SSM mSM&#x27;</span></span><br><span class="line">M = [<span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;.&#x27;</span>]</span><br><span class="line">S = [<span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;.&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> M:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;.&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;/&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> S:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;.&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;/&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ..-/.../...-./.../..--/..-./.-----./.-.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --./---/-----/-../.-../-.-./...-..-/-.-</span></span><br></pre></td></tr></table></figure>
<p>得到key：<code>GO0DLC$K</code></p>
<p>打开flag压缩包是一大堆base</p>
<p>由结果可知进行了50次<code>base64</code>加密</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re, base64</span><br><span class="line">s = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">base16_dic = <span class="string">r&#x27;^[A-F0-9=]*$&#x27;</span></span><br><span class="line">base32_dic = <span class="string">r&#x27;^[A-Z2-7=]*$&#x27;</span></span><br><span class="line">base64_dic = <span class="string">r&#x27;^[A-Za-z0-9/+=]*$&#x27;</span></span><br><span class="line">n= <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">    t = s.decode()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;&#123;&#x27;</span> <span class="keyword">in</span> t:</span><br><span class="line">        <span class="built_in">print</span>(t)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> re.<span class="keyword">match</span>(base16_dic, t):</span><br><span class="line">        s = base64.b16decode(s)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(n) + <span class="string">&#x27; base16&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> re.<span class="keyword">match</span>(base32_dic, t):</span><br><span class="line">        s = base64.b32decode(s)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(n) + <span class="string">&#x27; base32&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> re.<span class="keyword">match</span>(base64_dic, t):</span><br><span class="line">        s = base64.b64decode(s)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(n) + <span class="string">&#x27; base64&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># DASCTF&#123;a3dcb4d229de6fde0db5686dee47145d&#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="Affine"><a href="#Affine" class="headerlink" title="Affine"></a>Affine</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line"></span><br><span class="line">qwer= <span class="string">&#x27;flag&#123;&#x27;</span>   <span class="comment"># flag&#123;</span></span><br><span class="line">sercet=<span class="string">&#x27;aipx&#123;823j56p37ap92p93pd4g7ad6a0p01p21&#125;&#x27;</span></span><br><span class="line">dic = string.ascii_lowercase</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">affine_decrypt</span>(<span class="params">ciphertext, a, b, dic</span>):</span><br><span class="line">    m = <span class="built_in">len</span>(dic)</span><br><span class="line">    a_inv = libnum.invmod(a, m)</span><br><span class="line">    plaintext = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> ciphertext:</span><br><span class="line">        <span class="keyword">if</span> char <span class="keyword">in</span> dic:</span><br><span class="line">            y = dic.index(char)</span><br><span class="line">            x = (a_inv * (y - b)) % m</span><br><span class="line">            plaintext += dic[x]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            plaintext += char</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line">n = <span class="number">26</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> trange(<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        c=<span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> qwer:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">ord</span>(j) &gt;= <span class="built_in">ord</span>(<span class="string">&quot;a&quot;</span>) <span class="keyword">and</span> <span class="built_in">ord</span>(j) &lt;= <span class="built_in">ord</span>(<span class="string">&quot;z&quot;</span>):</span><br><span class="line">                cha=<span class="built_in">ord</span>(j)-<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">                c+=<span class="built_in">chr</span>((a * cha+ b) % n+<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                c+=j</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;aipx&#x27;</span> <span class="keyword">in</span> c:</span><br><span class="line">                <span class="built_in">print</span>(c)</span><br><span class="line">                <span class="built_in">print</span>(a,b)</span><br><span class="line">                <span class="built_in">print</span>((affine_decrypt(sercet,a,b,dic)))</span><br><span class="line">                <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<h1 id="cs"><a href="#cs" class="headerlink" title="cs"></a>cs</h1><blockquote>
<p>古剑山2024</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">jhjnjcjikmkfjjjkkejkkekdjgjcjnjhjnjcjiko</span><br></pre></td></tr></table></figure>
<p><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWt0aW9uYXJ5Lm9yZy93aWtpL0FwcGVuZGl4OlR3by1sZXR0ZXJfY29tYmluYXRpb25z">https://en.wiktionary.org/wiki/Appendix:Two-letter_combinations<i class="fa fa-external-link-alt"></i></span></p>
<p>容易知道是j和k开头的两个字母来表示一个字母</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hncimfjkekedgcnhncio</span><br></pre></td></tr></table></figure>
<p>猜测凯撒密码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hncimfjkekedgcnhncio</span><br><span class="line">gmbhleijdjdcfbmgmbhn</span><br><span class="line"></span><br><span class="line">flagkdhicicbealflagm</span><br><span class="line"></span><br><span class="line">ekzfjcghbhbadzkekzfl</span><br><span class="line">djyeibfgagazcyjdjyek</span><br><span class="line">cixdhaefzfzybxicixdj</span><br><span class="line">bhwcgzdeyeyxawhbhwci</span><br><span class="line">agvbfycdxdxwzvgagvbh</span><br><span class="line">zfuaexbcwcwvyufzfuag</span><br><span class="line">yetzdwabvbvuxteyetzf</span><br><span class="line">xdsycvzauautwsdxdsye</span><br><span class="line">wcrxbuyztztsvrcwcrxd</span><br><span class="line">vbqwatxysysruqbvbqwc</span><br><span class="line">uapvzswxrxrqtpauapvb</span><br><span class="line">tzouyrvwqwqpsoztzoua</span><br><span class="line">syntxquvpvpornysyntz</span><br><span class="line">rxmswptuouonqmxrxmsy</span><br><span class="line">qwlrvostntnmplwqwlrx</span><br><span class="line">pvkqunrsmsmlokvpvkqw</span><br><span class="line">oujptmqrlrlknjuoujpv</span><br><span class="line">ntioslpqkqkjmitntiou</span><br><span class="line">mshnrkopjpjilhsmshnt</span><br><span class="line">lrgmqjnoioihkgrlrgms</span><br><span class="line">kqflpimnhnhgjfqkqflr</span><br><span class="line">jpekohlmgmgfiepjpekq</span><br><span class="line">iodjngklflfehdoiodjp</span><br></pre></td></tr></table></figure>
<p>像也不想像，是k那部分不对，应该是 j和k 分成两部分位移了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;jhjnjcjikmkfjjjkkejkkekdjgjcjnjhjnjcjiko&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">26</span>,<span class="number">26</span>):</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(a),<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> a[i] == <span class="string">&#x27;j&#x27;</span>:</span><br><span class="line">            flag += <span class="built_in">chr</span>(<span class="built_in">ord</span>(a[i+<span class="number">1</span>])-<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flag+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(a[i+<span class="number">1</span>])+j)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;thisisrealflag&#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="apple"><a href="#apple" class="headerlink" title="apple"></a>apple</h1><blockquote>
<p>古剑山</p>
<p>0 sloved</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag_len = <span class="number">39</span></span><br><span class="line">cipher_flag = <span class="string">b&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>古典密码</tag>
        <tag>杂记</tag>
      </tags>
  </entry>
  <entry>
    <title>“近期的一些比赛”</title>
    <url>/Crypto/%E2%80%9C%E8%BF%91%E6%9C%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%AF%94%E8%B5%9B%E2%80%9D/</url>
    <content><![CDATA[<p>近期的一些比赛的一些题目，VMCTF2024，SEKAICTF2024，京津冀长城杯2024，ByteCTF-2024</p>
<span id="more"></span>
<h1 id="ez-RSA"><a href="#ez-RSA" class="headerlink" title="ez_RSA"></a>ez_RSA</h1><blockquote>
<p>DASCTF 2024金秋十月</p>
<p>一道简单的RSA</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">num1 = getPrime(<span class="number">512</span>)</span><br><span class="line">num2 = getPrime(<span class="number">512</span>)</span><br><span class="line"><span class="keyword">while</span> num1&lt;num2 :</span><br><span class="line">    num2 = getPrime(<span class="number">512</span>)</span><br><span class="line">ring = RealField(<span class="number">1050</span>)</span><br><span class="line">num3 = ring(num1) /ring(num2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;num3=&quot;</span>,num3)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n=p*q</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"></span><br><span class="line">n2 = getPrime(<span class="number">512</span>) * getPrime(<span class="number">512</span>)</span><br><span class="line">e1 = randint(<span class="number">1000</span>,<span class="number">2000</span>)</span><br><span class="line">e2 = randint(<span class="number">1000</span>,<span class="number">2000</span>)</span><br><span class="line">c1 = <span class="built_in">pow</span>(p+num1,e1,n2)</span><br><span class="line">c2 = <span class="built_in">pow</span>(p+num2,e2,n2)</span><br><span class="line"></span><br><span class="line">q1 = getPrime(<span class="number">512</span>)</span><br><span class="line">leak1 = <span class="built_in">pow</span>(q+q1,<span class="number">2024</span>,n)</span><br><span class="line">leak2 = <span class="built_in">pow</span>(q1+<span class="number">2024</span>,q,n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n2=&quot;</span>,n2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e1=&quot;</span>,e1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e2=&quot;</span>,e2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c1=&quot;</span>,c1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c2=&quot;</span>,c2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;leak1=&quot;</span>,leak1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;leak2=&quot;</span>,leak2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">num3= 1.36557212221826657073387899060669771982679822943621690677450888408226656788387273887547841291114809989272635809810564202247340711087479554863446719786359395466961253205133910506682801159622545780721946115442033391600881399634390008053822158098121985270501317972263356522400827768601773721146954464269212959784543085</span></span><br><span class="line"><span class="string">n= 85105083975491693151454182116844944807066048677068373328227644321539783064315677834754866742549592569194223084173286381150626593510265361114796714226058887906219454795525438819082646860141163940340082006344850825956811992304447978369108606993344902286569100146695092703383844402883938506877787042873586279543</span></span><br><span class="line"><span class="string">c= 8090472119640930864901421058741085326954308673260202542020919764880488559370287585797498390920330336595858609617432370825503480936376306766495089200286004922821787548265246289552343468177624634434613746605553770994437785042510225956023382347023663125411103947669109085411939772215657220674436476279268458980</span></span><br><span class="line"><span class="string">n2= 101642316595332652021348165259853423287787139517550249986161819826180514401858258316466101056877182367161299111697465439636861942636526396547011727147471566130633614685728563576613692851860684686033186826342178072882901576159305747639645374751566751967096281105148714033096611618024355982220235949274576036321</span></span><br><span class="line"><span class="string">e1= 1630</span></span><br><span class="line"><span class="string">e2= 1866</span></span><br><span class="line"><span class="string">c1= 8857135083997055103287497833179378469532619748945804429057682575070405217145941944821968708809563240261403711644389684947851643865895254406194464015430673347359589677809515117412321862622147634752091324365628790687343748145339949310696116239361890881096088375070083053010564890401663562726144984405628773323</span></span><br><span class="line"><span class="string">c2= 44531030636557714647477473185500183066851251320453194953972504422367649302810396344051696851757189817391648356459225688318373454949578822468293099948132700460437006478679492801335689493431764882835346904225119630026545592437198370606462285405519745361570058335573353886454277790277663038008240372746639859253</span></span><br><span class="line"><span class="string">leak1= 82301473255013183706458389946960254392188270550712533886416705365418418731488346328643954589202172816597173052792573628245245948345810581701878535280775967863966009605872386693838526935762655380705962833467046779524956212498594045378770790026387120339093736625186401934354434702063802537686761251873173518029</span></span><br><span class="line"><span class="string">leak2= 43580171648136008789232340619597144591536098696024883687397347933098380327258730482377138309020375265135558484586783368757872008322883985094403855691297725907800406097129735499961231236473313141257901326737291586051506797429883866846199683028143924054925109557329949641367848264351523500925115860458645738192</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>第一部分参考维纳攻击：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num3 = continued_fraction(Integer(e) / Integer(n))</span><br></pre></td></tr></table></figure>
<p>可以通过判断（素数，大小在512 bit）来筛选出分子，分母，也即num1，num2</p>
<p>第二部分e1，e2，比较小，half gcd 来做</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">HGCD</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="number">2</span> * b.degree() &lt;= a.degree() <span class="keyword">or</span> a.degree() == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    m = a.degree() // <span class="number">2</span></span><br><span class="line">    a_top, a_bot = a.quo_rem(x^m)</span><br><span class="line">    b_top, b_bot = b.quo_rem(x^m)</span><br><span class="line">    R00, R01, R10, R11 = HGCD(a_top, b_top)</span><br><span class="line">    c = R00 * a + R01 * b</span><br><span class="line">    d = R10 * a + R11 * b</span><br><span class="line">    q, e = c.quo_rem(d)</span><br><span class="line">    d_top, d_bot = d.quo_rem(x^(m // <span class="number">2</span>))</span><br><span class="line">    e_top, e_bot = e.quo_rem(x^(m // <span class="number">2</span>))</span><br><span class="line">    S00, S01, S10, S11 = HGCD(d_top, e_top)</span><br><span class="line">    RET00 = S01 * R00 + (S00 - q * S01) * R10</span><br><span class="line">    RET01 = S01 * R01 + (S00 - q * S01) * R11</span><br><span class="line">    RET10 = S11 * R00 + (S10 - q * S11) * R10</span><br><span class="line">    RET11 = S11 * R01 + (S10 - q * S11) * R11</span><br><span class="line">    <span class="keyword">return</span> RET00, RET01, RET10, RET11</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GCD</span>(<span class="params">a, b</span>):</span><br><span class="line">    q, r = a.quo_rem(b)</span><br><span class="line">    <span class="keyword">if</span> r == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    R00, R01, R10, R11 = HGCD(a, b)</span><br><span class="line">    c = R00 * a + R01 * b</span><br><span class="line">    d = R10 * a + R11 * b</span><br><span class="line">    <span class="keyword">if</span> d == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> c.monic()</span><br><span class="line">    q, r = c.quo_rem(d)</span><br><span class="line">    <span class="keyword">if</span> r == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> d</span><br><span class="line">    <span class="keyword">return</span> GCD(d, r)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num3= <span class="number">1.36557212221826657073387899060669771982679822943621690677450888408226656788387273887547841291114809989272635809810564202247340711087479554863446719786359395466961253205133910506682801159622545780721946115442033391600881399634390008053822158098121985270501317972263356522400827768601773721146954464269212959784543085</span></span><br><span class="line">n= <span class="number">85105083975491693151454182116844944807066048677068373328227644321539783064315677834754866742549592569194223084173286381150626593510265361114796714226058887906219454795525438819082646860141163940340082006344850825956811992304447978369108606993344902286569100146695092703383844402883938506877787042873586279543</span></span><br><span class="line">c= <span class="number">8090472119640930864901421058741085326954308673260202542020919764880488559370287585797498390920330336595858609617432370825503480936376306766495089200286004922821787548265246289552343468177624634434613746605553770994437785042510225956023382347023663125411103947669109085411939772215657220674436476279268458980</span></span><br><span class="line">n2= <span class="number">101642316595332652021348165259853423287787139517550249986161819826180514401858258316466101056877182367161299111697465439636861942636526396547011727147471566130633614685728563576613692851860684686033186826342178072882901576159305747639645374751566751967096281105148714033096611618024355982220235949274576036321</span></span><br><span class="line">e1= <span class="number">1630</span></span><br><span class="line">e2= <span class="number">1866</span></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">c1= <span class="number">8857135083997055103287497833179378469532619748945804429057682575070405217145941944821968708809563240261403711644389684947851643865895254406194464015430673347359589677809515117412321862622147634752091324365628790687343748145339949310696116239361890881096088375070083053010564890401663562726144984405628773323</span></span><br><span class="line">c2= <span class="number">44531030636557714647477473185500183066851251320453194953972504422367649302810396344051696851757189817391648356459225688318373454949578822468293099948132700460437006478679492801335689493431764882835346904225119630026545592437198370606462285405519745361570058335573353886454277790277663038008240372746639859253</span></span><br><span class="line">leak1= <span class="number">82301473255013183706458389946960254392188270550712533886416705365418418731488346328643954589202172816597173052792573628245245948345810581701878535280775967863966009605872386693838526935762655380705962833467046779524956212498594045378770790026387120339093736625186401934354434702063802537686761251873173518029</span></span><br><span class="line">leak2= <span class="number">43580171648136008789232340619597144591536098696024883687397347933098380327258730482377138309020375265135558484586783368757872008322883985094403855691297725907800406097129735499961231236473313141257901326737291586051506797429883866846199683028143924054925109557329949641367848264351523500925115860458645738192</span></span><br><span class="line"></span><br><span class="line">t = continued_fraction(num3)</span><br><span class="line"><span class="comment"># print((t))</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">1000</span>):</span><br><span class="line">    num1 = t.numerator(i)</span><br><span class="line">    <span class="keyword">if</span>(isPrime(num1) <span class="keyword">and</span> num1.bit_length() == <span class="number">512</span>):</span><br><span class="line">        num2 = t.denominator(i)</span><br><span class="line">        <span class="built_in">print</span>(num1)</span><br><span class="line">        <span class="built_in">print</span>(num2)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n2))</span><br><span class="line">g1 = (x + num1)^e1 - c1</span><br><span class="line">g2 = (x + num2)^e2 - c2</span><br><span class="line">res = GCD(g1,g2)</span><br><span class="line">p = -res.monic().coefficients()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)</span><br><span class="line">d = libnum.invmod(e,<span class="built_in">int</span>(phi))</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,p)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># DASCTF&#123;c0ngr4tu1ati0n$_0n_$ucccc3$$1ng_1n!&#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="2024VMCTF"><a href="#2024VMCTF" class="headerlink" title="2024VMCTF"></a>2024VMCTF</h1><h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> flag</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">M = matrix(Zmod(n), [</span><br><span class="line">    [m, -m-p-q, -m-<span class="number">2</span>*p, <span class="number">2</span>*q-m],</span><br><span class="line">    [m+p+q,  m, <span class="number">2</span>*q-m,  m+<span class="number">2</span>*p],</span><br><span class="line">    [m+<span class="number">2</span>*p,  m-<span class="number">2</span>*q,  m, -m-p-q],</span><br><span class="line">    [m-<span class="number">2</span>*q, -m-<span class="number">2</span>*p,  m+p+q,  m]</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">enc = M**e</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e = <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(enc))</span><br><span class="line">n=<span class="number">13228298199631335610499409465400552275305629934024756614227830931136508640681372951453757994834844498763877490566164031828108583453919741685657210448857955666192855872103622943922893572765718705893238315297600050789804418329650168680719372191579207505092037294294875908952803670819999025123209403251314588474192758376162806705064430837428828805477906627599506069017651159117664246131790529354533675662936081996490294431369820750274303028529977278828959613343997326534446148884333619071935180484450320323844737055406889458275298296950269660857078186043669204168045730995355857013530919638304423700701901063780318208789</span></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">enc=[(<span class="number">1491873293560323909465836471682585391496137454962536255211620436893391549603126009345148985699013899435764986980919290827837440218992944453711597495517127038406936254470963878149611067609857046502282994346483454884781103538081677117421537728730737422899739818406539050745938770868537148564365984825217449546939297237128543198112642950063626687602582556615437626388875069902892432216468378684299365817407995725759407957747215159745600867120912008194130121350313833434901083388223410629737737418961006112893999319596217781130922876695397872007871395908185274519733474161410964601075476672137735633842608230612826681061</span>, <span class="number">4956025543963860548224153175168493318238985854531591968596322951867101383038318092494673400475554880419342014784571362229741642826660412082585292197764604908450405263330703286845800303018092222139976907126517882830745820723998293430203137128739850924103620078289772876248014239067659155995114953314111131752812515097213052728067061893768763077056914111566820414025280534046400995356712414837449121046062079911435309295464490263283769221830037029108374974495201782045992874653920211537537724643230986981824349266978767367402293999209162694369772760075107747609491264902786041130826876918123202134703658442941891830242</span>, <span class="number">7710011511933273600956066580006667228795766247206337007278271463871915295714373557766306241838812677910529618690854981247073325175370147283360553440166198511565970962496527743224575526922830794861623489204146092991883999208502150565496732100104360091815826333424313805145648110936043125983239009895903602879010609096750963186952687545255588633288528372363096307287365891027749166227382683937570696463897150461450791183251190323380329123556440876127657763835466077899344290052877228945633508945118354870143193111572860186690380517929737934424809644493802524411423150714171313957036859668776471063633076408076909640002</span>, <span class="number">11534398990341303260469847611439061098979668999994719829731530111550470410818410249398161750557290507614569764189238005873703309686837109506327355518339608092717603460229057410906842405901627607535605010996612762231101162949308540690378638599362997229992351236008016988744038581908756449465377928987817065146363195497304246692426541055618255515479438494976345916998240594200316617809496338857712977577830501882906692816143225556486899297950715922558009978599642835535619697869607264637171021550028689009097951803276399427016025503188133689654404551377724037837852806988185689913776323215325531565269517783734339408476</span>), (<span class="number">8272272655667475062275256290232058957066644079493164645631507979269407257643054858959084594359289618344535475781592669598366940627259329603071918251093350757742450608772919657077093269747626483753261408171082167959058597605651875250516235062839356580988417216005103032704789431752339869128094449937203456721380243278949753976997368943660065728420992516032685654992370625071263250775078114517084554616874002085054985135905330486990533806699940249720584638848795544488453274230413407534397455841219333342020387788428122090873004297741106966487305425968561456558554466092569815882704042720181221565998242620838426378547</span>, <span class="number">1491873293560323909465836471682585391496137454962536255211620436893391549603126009345148985699013899435764986980919290827837440218992944453711597495517127038406936254470963878149611067609857046502282994346483454884781103538081677117421537728730737422899739818406539050745938770868537148564365984825217449546939297237128543198112642950063626687602582556615437626388875069902892432216468378684299365817407995725759407957747215159745600867120912008194130121350313833434901083388223410629737737418961006112893999319596217781130922876695397872007871395908185274519733474161410964601075476672137735633842608230612826681061</span>, <span class="number">11534398990341303260469847611439061098979668999994719829731530111550470410818410249398161750557290507614569764189238005873703309686837109506327355518339608092717603460229057410906842405901627607535605010996612762231101162949308540690378638599362997229992351236008016988744038581908756449465377928987817065146363195497304246692426541055618255515479438494976345916998240594200316617809496338857712977577830501882906692816143225556486899297950715922558009978599642835535619697869607264637171021550028689009097951803276399427016025503188133689654404551377724037837852806988185689913776323215325531565269517783734339408476</span>, <span class="number">5518286687698062009543342885393885046509863686818419606949559467264593344966999393687451752996031820853347871875309050581035258278549594402296657008691757154626884909607095200698318045842887911031614826093453957797920419121148018115222640091474847413276210960870562103807155559883955899139970393355410985595182149279411843518111743292173240172189378255236409761730285268089915079904407845416962979199038931535039503248118630426893973904973536402701301849508531248635101858831456390126301671539331965453701543943834029271584917779020531726432268541549866679756622580281184543056494059969527952637068824655703408568787</span>), (<span class="number">5518286687698062009543342885393885046509863686818419606949559467264593344966999393687451752996031820853347871875309050581035258278549594402296657008691757154626884909607095200698318045842887911031614826093453957797920419121148018115222640091474847413276210960870562103807155559883955899139970393355410985595182149279411843518111743292173240172189378255236409761730285268089915079904407845416962979199038931535039503248118630426893973904973536402701301849508531248635101858831456390126301671539331965453701543943834029271584917779020531726432268541549866679756622580281184543056494059969527952637068824655703408568787</span>, <span class="number">1693899209290032350029561853961491176325960934030036784496300819586038229862962702055596244277553991149307726376926025954405273767082632179329854930518347573475252411874565533016051166864091098357633304300987288558703255380341627990340733592216210275099686058286858920208765088911242575657831474263497523327829562878858560012637889781810573289998468132623160152019410564917347628322294190496820698085105580113583601615226595193787403730579261356270949634744354490998826451014726354434764158934421631314746785252130490031259272793762135971202673634665945166330192924007170167099754596422978892135432383280045978800313</span>, <span class="number">1491873293560323909465836471682585391496137454962536255211620436893391549603126009345148985699013899435764986980919290827837440218992944453711597495517127038406936254470963878149611067609857046502282994346483454884781103538081677117421537728730737422899739818406539050745938770868537148564365984825217449546939297237128543198112642950063626687602582556615437626388875069902892432216468378684299365817407995725759407957747215159745600867120912008194130121350313833434901083388223410629737737418961006112893999319596217781130922876695397872007871395908185274519733474161410964601075476672137735633842608230612826681061</span>, <span class="number">4956025543963860548224153175168493318238985854531591968596322951867101383038318092494673400475554880419342014784571362229741642826660412082585292197764604908450405263330703286845800303018092222139976907126517882830745820723998293430203137128739850924103620078289772876248014239067659155995114953314111131752812515097213052728067061893768763077056914111566820414025280534046400995356712414837449121046062079911435309295464490263283769221830037029108374974495201782045992874653920211537537724643230986981824349266978767367402293999209162694369772760075107747609491264902786041130826876918123202134703658442941891830242</span>), (<span class="number">1693899209290032350029561853961491176325960934030036784496300819586038229862962702055596244277553991149307726376926025954405273767082632179329854930518347573475252411874565533016051166864091098357633304300987288558703255380341627990340733592216210275099686058286858920208765088911242575657831474263497523327829562878858560012637889781810573289998468132623160152019410564917347628322294190496820698085105580113583601615226595193787403730579261356270949634744354490998826451014726354434764158934421631314746785252130490031259272793762135971202673634665945166330192924007170167099754596422978892135432383280045978800313</span>, <span class="number">7710011511933273600956066580006667228795766247206337007278271463871915295714373557766306241838812677910529618690854981247073325175370147283360553440166198511565970962496527743224575526922830794861623489204146092991883999208502150565496732100104360091815826333424313805145648110936043125983239009895903602879010609096750963186952687545255588633288528372363096307287365891027749166227382683937570696463897150461450791183251190323380329123556440876127657763835466077899344290052877228945633508945118354870143193111572860186690380517929737934424809644493802524411423150714171313957036859668776471063633076408076909640002</span>, <span class="number">8272272655667475062275256290232058957066644079493164645631507979269407257643054858959084594359289618344535475781592669598366940627259329603071918251093350757742450608772919657077093269747626483753261408171082167959058597605651875250516235062839356580988417216005103032704789431752339869128094449937203456721380243278949753976997368943660065728420992516032685654992370625071263250775078114517084554616874002085054985135905330486990533806699940249720584638848795544488453274230413407534397455841219333342020387788428122090873004297741106966487305425968561456558554466092569815882704042720181221565998242620838426378547</span>, <span class="number">1491873293560323909465836471682585391496137454962536255211620436893391549603126009345148985699013899435764986980919290827837440218992944453711597495517127038406936254470963878149611067609857046502282994346483454884781103538081677117421537728730737422899739818406539050745938770868537148564365984825217449546939297237128543198112642950063626687602582556615437626388875069902892432216468378684299365817407995725759407957747215159745600867120912008194130121350313833434901083388223410629737737418961006112893999319596217781130922876695397872007871395908185274519733474161410964601075476672137735633842608230612826681061</span>)]</span><br></pre></td></tr></table></figure>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><code>enc = M**e</code>，矩阵的e次方</p>
<p>这类题目之前见过</p>
<p>多维矩阵下的线性群阶</p>
<p>查：<span class="exturl" data-url="aHR0cHM6Ly90b3Zlci54eXovcC9PcmRlci1HTG5GcC8j5YmN6KiA">GL(n,Fp)群阶的研究 | Tover’s Blog<i class="fa fa-external-link-alt"></i></span></p>
<p>正常做法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">C = Matrix(Zmod(n),c)</span><br><span class="line"></span><br><span class="line">order_p = p*(p-<span class="number">1</span>)*(p+<span class="number">1</span>)*(p^<span class="number">2</span>+p+<span class="number">1</span>)</span><br><span class="line">order_q = q*(q-<span class="number">1</span>)*(q+<span class="number">1</span>)*(q^<span class="number">2</span>+q+<span class="number">1</span>)</span><br><span class="line">order = order_p * order_q</span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e,order)</span><br><span class="line">M = C ** d</span><br></pre></td></tr></table></figure>
<p>这里我们并不能分解n，所以并不能这样解</p>
<hr>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">M = matrix(Zmod(n), [</span><br><span class="line">    [m, -m-p-q, -m-<span class="number">2</span>*p, <span class="number">2</span>*q-m],</span><br><span class="line">    [m+p+q,  m, <span class="number">2</span>*q-m,  m+<span class="number">2</span>*p],</span><br><span class="line">    [m+<span class="number">2</span>*p,  m-<span class="number">2</span>*q,  m, -m-p-q],</span><br><span class="line">    [m-<span class="number">2</span>*q, -m-<span class="number">2</span>*p,  m+p+q,  m]</span><br><span class="line">])</span><br></pre></td></tr></table></figure>
<p>将矩阵M拆成一个反对称矩阵和单位矩阵的和形式：</p>
<p><code>M = A+mE</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = matrix([</span><br><span class="line">    [<span class="number">0</span>, -m-p-q, -m-<span class="number">2</span>*p, <span class="number">2</span>*q-m],</span><br><span class="line">    [m+p+q,  <span class="number">0</span>, <span class="number">2</span>*q-m,  m+<span class="number">2</span>*p],</span><br><span class="line">    [m+<span class="number">2</span>*p,  m-<span class="number">2</span>*q,  <span class="number">0</span>, -m-p-q],</span><br><span class="line">    [m-<span class="number">2</span>*q, -m-<span class="number">2</span>*p,  m+p+q,  <span class="number">0</span>]</span><br><span class="line">])</span><br></pre></td></tr></table></figure>
<p>就有 $C=M^e=(A+mE)^e$</p>
<p>按二项式定理展开：</p>
<script type="math/tex; mode=display">
C=A^e+emA^{e-1}+\frac{e(e-1)}{2}m^2A^{e-2}+\dots+em^{e-1}A+m^e</script><p>测试发现 A的偶次幂是个对角矩阵，所以说C的非对角线元素都是A的奇次幂贡献的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PR.&lt;m,p,q&gt; = PolynomialRing(ZZ)</span><br><span class="line">M = matrix([</span><br><span class="line">    [m, -m-p-q, -m-<span class="number">2</span>*p, <span class="number">2</span>*q-m],</span><br><span class="line">    [m+p+q,  m, <span class="number">2</span>*q-m,  m+<span class="number">2</span>*p],</span><br><span class="line">    [m+<span class="number">2</span>*p,  m-<span class="number">2</span>*q,  m, -m-p-q],</span><br><span class="line">    [m-<span class="number">2</span>*q, -m-<span class="number">2</span>*p,  m+p+q,  m]</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">A = matrix([</span><br><span class="line">    [<span class="number">0</span>, -m-p-q, -m-<span class="number">2</span>*p, <span class="number">2</span>*q-m],</span><br><span class="line">    [m+p+q,  <span class="number">0</span>, <span class="number">2</span>*q-m,  m+<span class="number">2</span>*p],</span><br><span class="line">    [m+<span class="number">2</span>*p,  m-<span class="number">2</span>*q,  <span class="number">0</span>, -m-p-q],</span><br><span class="line">    [m-<span class="number">2</span>*q, -m-<span class="number">2</span>*p,  m+p+q,  <span class="number">0</span>]</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">E = Matrix(ZZ, identity_matrix(<span class="number">4</span>))	<span class="comment"># 对角矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(A^<span class="number">2</span>)</span><br><span class="line">[-<span class="number">3</span>*m^<span class="number">2</span> - <span class="number">6</span>*m*p - <span class="number">5</span>*p^<span class="number">2</span> + <span class="number">2</span>*m*q - <span class="number">2</span>*p*q - <span class="number">5</span>*q^<span class="number">2</span>                                              <span class="number">0</span>                                              <span class="number">0</span>                                              <span class="number">0</span>]</span><br><span class="line">[                                             <span class="number">0</span> -<span class="number">3</span>*m^<span class="number">2</span> - <span class="number">6</span>*m*p - <span class="number">5</span>*p^<span class="number">2</span> + <span class="number">2</span>*m*q - <span class="number">2</span>*p*q - <span class="number">5</span>*q^<span class="number">2</span>                                              <span class="number">0</span>                                              <span class="number">0</span>]</span><br><span class="line">[                                             <span class="number">0</span>                                              <span class="number">0</span> -<span class="number">3</span>*m^<span class="number">2</span> - <span class="number">6</span>*m*p - <span class="number">5</span>*p^<span class="number">2</span> + <span class="number">2</span>*m*q - <span class="number">2</span>*p*q - <span class="number">5</span>*q^<span class="number">2</span>                                              <span class="number">0</span>]</span><br><span class="line">[                                             <span class="number">0</span>                                              <span class="number">0</span>                                              <span class="number">0</span> -<span class="number">3</span>*m^<span class="number">2</span> - <span class="number">6</span>*m*p - <span class="number">5</span>*p^<span class="number">2</span> + <span class="number">2</span>*m*q - <span class="number">2</span>*p*q - <span class="number">5</span>*q^<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<p>用A的小数次幂去factor一下非对角线元素的因子，会发现这些和式均有共同因子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PR.&lt;m,p,q&gt; = PolynomialRing(ZZ)</span><br><span class="line">M = matrix([</span><br><span class="line">    [m, -m-p-q, -m-<span class="number">2</span>*p, <span class="number">2</span>*q-m],</span><br><span class="line">    [m+p+q,  m, <span class="number">2</span>*q-m,  m+<span class="number">2</span>*p],</span><br><span class="line">    [m+<span class="number">2</span>*p,  m-<span class="number">2</span>*q,  m, -m-p-q],</span><br><span class="line">    [m-<span class="number">2</span>*q, -m-<span class="number">2</span>*p,  m+p+q,  m]</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">A = matrix([</span><br><span class="line">    [<span class="number">0</span>, -m-p-q, -m-<span class="number">2</span>*p, <span class="number">2</span>*q-m],</span><br><span class="line">    [m+p+q,  <span class="number">0</span>, <span class="number">2</span>*q-m,  m+<span class="number">2</span>*p],</span><br><span class="line">    [m+<span class="number">2</span>*p,  m-<span class="number">2</span>*q,  <span class="number">0</span>, -m-p-q],</span><br><span class="line">    [m-<span class="number">2</span>*q, -m-<span class="number">2</span>*p,  m+p+q,  <span class="number">0</span>]</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">E = Matrix(ZZ, identity_matrix(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(factor((A^<span class="number">1</span>)[<span class="number">1</span>,<span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(factor((A^<span class="number">3</span>)[<span class="number">1</span>,<span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(factor((A^<span class="number">5</span>)[<span class="number">1</span>,<span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(factor((A^<span class="number">7</span>)[<span class="number">1</span>,<span class="number">0</span>]))</span><br><span class="line">m + p + q</span><br><span class="line">(-<span class="number">1</span>) * (m + p + q) * (<span class="number">3</span>*m^<span class="number">2</span> + <span class="number">6</span>*m*p + <span class="number">5</span>*p^<span class="number">2</span> - <span class="number">2</span>*m*q + <span class="number">2</span>*p*q + <span class="number">5</span>*q^<span class="number">2</span>)</span><br><span class="line">(m + p + q) * (<span class="number">3</span>*m^<span class="number">2</span> + <span class="number">6</span>*m*p + <span class="number">5</span>*p^<span class="number">2</span> - <span class="number">2</span>*m*q + <span class="number">2</span>*p*q + <span class="number">5</span>*q^<span class="number">2</span>)^<span class="number">2</span></span><br><span class="line">(-<span class="number">1</span>) * (m + p + q) * (<span class="number">3</span>*m^<span class="number">2</span> + <span class="number">6</span>*m*p + <span class="number">5</span>*p^<span class="number">2</span> - <span class="number">2</span>*m*q + <span class="number">2</span>*p*q + <span class="number">5</span>*q^<span class="number">2</span>)^<span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>我们再看非对角线元素其他位置上的关系：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PR.&lt;m,p,q&gt; = PolynomialRing(ZZ)</span><br><span class="line">M = matrix([</span><br><span class="line">    [m, -m-p-q, -m-<span class="number">2</span>*p, <span class="number">2</span>*q-m],</span><br><span class="line">    [m+p+q,  m, <span class="number">2</span>*q-m,  m+<span class="number">2</span>*p],</span><br><span class="line">    [m+<span class="number">2</span>*p,  m-<span class="number">2</span>*q,  m, -m-p-q],</span><br><span class="line">    [m-<span class="number">2</span>*q, -m-<span class="number">2</span>*p,  m+p+q,  m]</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">A = matrix([</span><br><span class="line">    [<span class="number">0</span>, -m-p-q, -m-<span class="number">2</span>*p, <span class="number">2</span>*q-m],</span><br><span class="line">    [m+p+q,  <span class="number">0</span>, <span class="number">2</span>*q-m,  m+<span class="number">2</span>*p],</span><br><span class="line">    [m+<span class="number">2</span>*p,  m-<span class="number">2</span>*q,  <span class="number">0</span>, -m-p-q],</span><br><span class="line">    [m-<span class="number">2</span>*q, -m-<span class="number">2</span>*p,  m+p+q,  <span class="number">0</span>]</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">E = Matrix(ZZ, identity_matrix(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(factor((A^<span class="number">3</span>)[<span class="number">1</span>,<span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(factor((A^<span class="number">3</span>)[<span class="number">2</span>,<span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(factor((A^<span class="number">3</span>)[<span class="number">3</span>,<span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(factor((A^<span class="number">5</span>)[<span class="number">1</span>,<span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(factor((A^<span class="number">5</span>)[<span class="number">2</span>,<span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(factor((A^<span class="number">5</span>)[<span class="number">3</span>,<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># (-1) * (m + p + q) * (3*m^2 + 6*m*p + 5*p^2 - 2*m*q + 2*p*q + 5*q^2)</span></span><br><span class="line"><span class="comment"># (-1) * (m + 2*p) * (3*m^2 + 6*m*p + 5*p^2 - 2*m*q + 2*p*q + 5*q^2)</span></span><br><span class="line"><span class="comment"># (-1) * (m - 2*q) * (3*m^2 + 6*m*p + 5*p^2 - 2*m*q + 2*p*q + 5*q^2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># (m + p + q) * (3*m^2 + 6*m*p + 5*p^2 - 2*m*q + 2*p*q + 5*q^2)^2</span></span><br><span class="line"><span class="comment"># (m + 2*p) * (3*m^2 + 6*m*p + 5*p^2 - 2*m*q + 2*p*q + 5*q^2)^2</span></span><br><span class="line"><span class="comment"># (m - 2*q) * (3*m^2 + 6*m*p + 5*p^2 - 2*m*q + 2*p*q + 5*q^2)^2</span></span><br></pre></td></tr></table></figure>
<p>所以可以从中提取几组代数关系求解：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(m + <span class="number">2</span>*p)*enc[<span class="number">1</span>,<span class="number">0</span>] == (m + p + q)*enc[<span class="number">2</span>,<span class="number">0</span>]</span><br><span class="line">(m - <span class="number">2</span>*q)*enc[<span class="number">1</span>,<span class="number">0</span>] == (m + p + q)*enc[<span class="number">3</span>,<span class="number">0</span>]</span><br><span class="line">p*q == n</span><br></pre></td></tr></table></figure>
<p>模n下用 <code>Groebner</code>解方程</p>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">13228298199631335610499409465400552275305629934024756614227830931136508640681372951453757994834844498763877490566164031828108583453919741685657210448857955666192855872103622943922893572765718705893238315297600050789804418329650168680719372191579207505092037294294875908952803670819999025123209403251314588474192758376162806705064430837428828805477906627599506069017651159117664246131790529354533675662936081996490294431369820750274303028529977278828959613343997326534446148884333619071935180484450320323844737055406889458275298296950269660857078186043669204168045730995355857013530919638304423700701901063780318208789</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">enc = [(<span class="number">1491873293560323909465836471682585391496137454962536255211620436893391549603126009345148985699013899435764986980919290827837440218992944453711597495517127038406936254470963878149611067609857046502282994346483454884781103538081677117421537728730737422899739818406539050745938770868537148564365984825217449546939297237128543198112642950063626687602582556615437626388875069902892432216468378684299365817407995725759407957747215159745600867120912008194130121350313833434901083388223410629737737418961006112893999319596217781130922876695397872007871395908185274519733474161410964601075476672137735633842608230612826681061</span>, <span class="number">4956025543963860548224153175168493318238985854531591968596322951867101383038318092494673400475554880419342014784571362229741642826660412082585292197764604908450405263330703286845800303018092222139976907126517882830745820723998293430203137128739850924103620078289772876248014239067659155995114953314111131752812515097213052728067061893768763077056914111566820414025280534046400995356712414837449121046062079911435309295464490263283769221830037029108374974495201782045992874653920211537537724643230986981824349266978767367402293999209162694369772760075107747609491264902786041130826876918123202134703658442941891830242</span>, <span class="number">7710011511933273600956066580006667228795766247206337007278271463871915295714373557766306241838812677910529618690854981247073325175370147283360553440166198511565970962496527743224575526922830794861623489204146092991883999208502150565496732100104360091815826333424313805145648110936043125983239009895903602879010609096750963186952687545255588633288528372363096307287365891027749166227382683937570696463897150461450791183251190323380329123556440876127657763835466077899344290052877228945633508945118354870143193111572860186690380517929737934424809644493802524411423150714171313957036859668776471063633076408076909640002</span>, <span class="number">11534398990341303260469847611439061098979668999994719829731530111550470410818410249398161750557290507614569764189238005873703309686837109506327355518339608092717603460229057410906842405901627607535605010996612762231101162949308540690378638599362997229992351236008016988744038581908756449465377928987817065146363195497304246692426541055618255515479438494976345916998240594200316617809496338857712977577830501882906692816143225556486899297950715922558009978599642835535619697869607264637171021550028689009097951803276399427016025503188133689654404551377724037837852806988185689913776323215325531565269517783734339408476</span>), (<span class="number">8272272655667475062275256290232058957066644079493164645631507979269407257643054858959084594359289618344535475781592669598366940627259329603071918251093350757742450608772919657077093269747626483753261408171082167959058597605651875250516235062839356580988417216005103032704789431752339869128094449937203456721380243278949753976997368943660065728420992516032685654992370625071263250775078114517084554616874002085054985135905330486990533806699940249720584638848795544488453274230413407534397455841219333342020387788428122090873004297741106966487305425968561456558554466092569815882704042720181221565998242620838426378547</span>, <span class="number">1491873293560323909465836471682585391496137454962536255211620436893391549603126009345148985699013899435764986980919290827837440218992944453711597495517127038406936254470963878149611067609857046502282994346483454884781103538081677117421537728730737422899739818406539050745938770868537148564365984825217449546939297237128543198112642950063626687602582556615437626388875069902892432216468378684299365817407995725759407957747215159745600867120912008194130121350313833434901083388223410629737737418961006112893999319596217781130922876695397872007871395908185274519733474161410964601075476672137735633842608230612826681061</span>, <span class="number">11534398990341303260469847611439061098979668999994719829731530111550470410818410249398161750557290507614569764189238005873703309686837109506327355518339608092717603460229057410906842405901627607535605010996612762231101162949308540690378638599362997229992351236008016988744038581908756449465377928987817065146363195497304246692426541055618255515479438494976345916998240594200316617809496338857712977577830501882906692816143225556486899297950715922558009978599642835535619697869607264637171021550028689009097951803276399427016025503188133689654404551377724037837852806988185689913776323215325531565269517783734339408476</span>, <span class="number">5518286687698062009543342885393885046509863686818419606949559467264593344966999393687451752996031820853347871875309050581035258278549594402296657008691757154626884909607095200698318045842887911031614826093453957797920419121148018115222640091474847413276210960870562103807155559883955899139970393355410985595182149279411843518111743292173240172189378255236409761730285268089915079904407845416962979199038931535039503248118630426893973904973536402701301849508531248635101858831456390126301671539331965453701543943834029271584917779020531726432268541549866679756622580281184543056494059969527952637068824655703408568787</span>), (<span class="number">5518286687698062009543342885393885046509863686818419606949559467264593344966999393687451752996031820853347871875309050581035258278549594402296657008691757154626884909607095200698318045842887911031614826093453957797920419121148018115222640091474847413276210960870562103807155559883955899139970393355410985595182149279411843518111743292173240172189378255236409761730285268089915079904407845416962979199038931535039503248118630426893973904973536402701301849508531248635101858831456390126301671539331965453701543943834029271584917779020531726432268541549866679756622580281184543056494059969527952637068824655703408568787</span>, <span class="number">1693899209290032350029561853961491176325960934030036784496300819586038229862962702055596244277553991149307726376926025954405273767082632179329854930518347573475252411874565533016051166864091098357633304300987288558703255380341627990340733592216210275099686058286858920208765088911242575657831474263497523327829562878858560012637889781810573289998468132623160152019410564917347628322294190496820698085105580113583601615226595193787403730579261356270949634744354490998826451014726354434764158934421631314746785252130490031259272793762135971202673634665945166330192924007170167099754596422978892135432383280045978800313</span>, <span class="number">1491873293560323909465836471682585391496137454962536255211620436893391549603126009345148985699013899435764986980919290827837440218992944453711597495517127038406936254470963878149611067609857046502282994346483454884781103538081677117421537728730737422899739818406539050745938770868537148564365984825217449546939297237128543198112642950063626687602582556615437626388875069902892432216468378684299365817407995725759407957747215159745600867120912008194130121350313833434901083388223410629737737418961006112893999319596217781130922876695397872007871395908185274519733474161410964601075476672137735633842608230612826681061</span>, <span class="number">4956025543963860548224153175168493318238985854531591968596322951867101383038318092494673400475554880419342014784571362229741642826660412082585292197764604908450405263330703286845800303018092222139976907126517882830745820723998293430203137128739850924103620078289772876248014239067659155995114953314111131752812515097213052728067061893768763077056914111566820414025280534046400995356712414837449121046062079911435309295464490263283769221830037029108374974495201782045992874653920211537537724643230986981824349266978767367402293999209162694369772760075107747609491264902786041130826876918123202134703658442941891830242</span>), (<span class="number">1693899209290032350029561853961491176325960934030036784496300819586038229862962702055596244277553991149307726376926025954405273767082632179329854930518347573475252411874565533016051166864091098357633304300987288558703255380341627990340733592216210275099686058286858920208765088911242575657831474263497523327829562878858560012637889781810573289998468132623160152019410564917347628322294190496820698085105580113583601615226595193787403730579261356270949634744354490998826451014726354434764158934421631314746785252130490031259272793762135971202673634665945166330192924007170167099754596422978892135432383280045978800313</span>, <span class="number">7710011511933273600956066580006667228795766247206337007278271463871915295714373557766306241838812677910529618690854981247073325175370147283360553440166198511565970962496527743224575526922830794861623489204146092991883999208502150565496732100104360091815826333424313805145648110936043125983239009895903602879010609096750963186952687545255588633288528372363096307287365891027749166227382683937570696463897150461450791183251190323380329123556440876127657763835466077899344290052877228945633508945118354870143193111572860186690380517929737934424809644493802524411423150714171313957036859668776471063633076408076909640002</span>, <span class="number">8272272655667475062275256290232058957066644079493164645631507979269407257643054858959084594359289618344535475781592669598366940627259329603071918251093350757742450608772919657077093269747626483753261408171082167959058597605651875250516235062839356580988417216005103032704789431752339869128094449937203456721380243278949753976997368943660065728420992516032685654992370625071263250775078114517084554616874002085054985135905330486990533806699940249720584638848795544488453274230413407534397455841219333342020387788428122090873004297741106966487305425968561456558554466092569815882704042720181221565998242620838426378547</span>, <span class="number">1491873293560323909465836471682585391496137454962536255211620436893391549603126009345148985699013899435764986980919290827837440218992944453711597495517127038406936254470963878149611067609857046502282994346483454884781103538081677117421537728730737422899739818406539050745938770868537148564365984825217449546939297237128543198112642950063626687602582556615437626388875069902892432216468378684299365817407995725759407957747215159745600867120912008194130121350313833434901083388223410629737737418961006112893999319596217781130922876695397872007871395908185274519733474161410964601075476672137735633842608230612826681061</span>)]</span><br><span class="line">enc = Matrix(Zmod(n), enc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Groebner</span></span><br><span class="line">PR.&lt;m,p,q&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f1 = (m + <span class="number">2</span> * p) - (inverse(enc[<span class="number">1</span>,<span class="number">0</span>],n)*enc[<span class="number">2</span>,<span class="number">0</span>])*(m + p + q)</span><br><span class="line">f2 = (m - <span class="number">2</span> * q) - (inverse(enc[<span class="number">1</span>,<span class="number">0</span>],n)*enc[<span class="number">3</span>,<span class="number">0</span>])*(m + p + q)</span><br><span class="line">f3 = p*q</span><br><span class="line">res = Ideal([f1,f2,f3]).groebner_basis()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="comment"># test</span></span><br><span class="line">q = <span class="number">98199204383444167136509999317652307746300154257439691314026803510437035509888229764173492052858804263577571331383214859652229706329210472593337809065208882042178413249493877596701444929209070708258353144837330382092255133776768117120874000890494449018234172972678168219613884207547781528635959091301251971281</span></span><br><span class="line">p = n // q</span><br><span class="line"><span class="keyword">assert</span> p*q == n</span><br><span class="line"></span><br><span class="line">PR.&lt;m&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = (m + <span class="number">2</span> * p) - (inverse(enc[<span class="number">1</span>,<span class="number">0</span>],n)*enc[<span class="number">2</span>,<span class="number">0</span>])*(m + p + q)</span><br><span class="line"><span class="comment"># print(f)		##记录一下</span></span><br><span class="line">a = <span class="number">3297056809289327500256202079127136134187438944961708132751779704042134248345975436322191479293257096389543469387818190390952261259850867719244868774056284786555129809594382750795637970645528822198427409878547718771238431341613753773735778866319889665322786887273473714741059398430312523411707495791556075878244637630480194633873896328931631465317325085583101546945701547571540285337915330695525854299979138422312974757786532911019780366620715999126086808046470039825598115253747158220517041862628277627457873544852999345612018379688444091864667014856637790925604130983328623143861756949881991846056060324187971651968</span></span><br><span class="line">b = <span class="number">1498891588977545370451304005269054204989297955532246655702497171972634294190353786886109979315712227670838063747138944971165078237866699516737057265958406033545290094866918511445027202221306581865115556251808822409761737528633460237914954126481851519653767357154958076960906373574059921391655491951867500826108554012342761055413189807372591262833424798009944360120455674246600349563624996782442874590028504156102295527090123626799675614654662807183634567377812300847810842883813710868799454486184658344859843573551816770639242317817513006458632518373823719039586807296528828652532914106040726579904539566401034957917</span></span><br><span class="line"></span><br><span class="line">flag = inverse(a,n) * (-b) %n</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(flag)))</span><br><span class="line"></span><br><span class="line"><span class="comment">#WMCTF&#123;QU4t3rni0n_4nd_Matr1x_4r3_4un&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="K-Cessation"><a href="#K-Cessation" class="headerlink" title="K-Cessation"></a>K-Cessation</h2><p>描述：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">K-Cessation</span><br><span class="line">ChllengeInfo</span><br><span class="line">misc/crypto 进入无界之界</span><br><span class="line"><span class="comment">## 背景：</span></span><br><span class="line">K-Cessation 密码是一种使用 K 位轮从明文位中挑选下一个密文位的古典密码。</span><br><span class="line">当加密开始时，从轮子的最后一位开始。</span><br><span class="line">当轮子到达终点时，它会从头开始循环。</span><br><span class="line">对于每个明文位，轮子会旋转到轮子中与明文位匹配的下一个位，并将旋转的距离附加到密文中。</span><br><span class="line"></span><br><span class="line">因此，如果不知道轮子，就不可能解密密文。</span><br><span class="line">是这样吗？</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 例子：</span></span><br><span class="line">要使用轮子 <span class="number">1100011011100011100110100011110110010110010100001011111011111010</span> 将“youtu.be/dQw4w9WgXcQ”编码为 <span class="number">64</span>-Cessation：</span><br><span class="line"><span class="number">1.</span> 将明文转换为比特： 01111001 01101111 01110101 01110100 01110101 <span class="number">00</span>101110 01100010 01100101 <span class="number">00</span>101111 01100100 <span class="number">0</span>1010001 01110111 0011 <span class="number">0</span>100 01110111 00111001 <span class="number">0</span>1010111 01100111 <span class="number">0</span>1011000 01100011 <span class="number">0</span>1010001</span><br><span class="line"><span class="number">2.</span>从wheel[-<span class="number">1</span>]到轮子中的下一个“<span class="number">0</span>”位，距离为<span class="number">3</span>，当前轮位置为wheel[<span class="number">2</span>]</span><br><span class="line"><span class="number">3.</span>从wheel[<span class="number">2</span>]到轮子中的下一个“<span class="number">1</span>”位，距离为<span class="number">3</span>，当前轮子位置为wheel[<span class="number">5</span>]</span><br><span class="line"><span class="number">4.</span> 重复步骤直到所有位都被编码</span><br><span class="line"><span class="number">5.</span>结果为<span class="number">3312121232111411211311221152515233123332223411313221112161142123243321244111111311111112111131113211132412111212112112321122115251142114213312132313311222111112</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 挑战：</span></span><br><span class="line">一个野生Flag使用 <span class="number">64</span>-Cessation 密码进行编码。</span><br><span class="line">轮子内容是未知的，它是 <span class="number">64</span> 位长。</span><br><span class="line">密文在 ciphertext.txt 中给出。</span><br><span class="line">该Flag已知是长度超过 <span class="number">64</span> 个字符的 ASCII 字符串。</span><br><span class="line">除此之外，该Flag的任何部分都是未知的，这意味着该Flag不是 WMCTF&#123;&#125; 或 FLAG&#123;&#125; 格式。</span><br><span class="line">提交时，请将Flag改为WMCTF&#123;&#125;格式。</span><br><span class="line">请注意，每个ASCII字节的最高有效位被随机翻转。</span><br><span class="line">您需要从密文中提取Flag并提交。</span><br><span class="line">为了您的方便，flag_hash.txt 中给出了该Flag的盐焗 SHA-<span class="number">256</span> 哈希值。</span><br><span class="line"></span><br><span class="line">ChllengeInfo-EN</span><br><span class="line">misc/crypto Enter the realm of no realm</span><br><span class="line"><span class="comment">## Background:</span></span><br><span class="line">K-Cessation cipher <span class="keyword">is</span> a cipher that uses a K bit wheel to pick the <span class="built_in">next</span> cipher bit <span class="keyword">from</span> plaintext bit.</span><br><span class="line">When encryption starts, the wheel starts at the last bit of the wheel.</span><br><span class="line">The wheel loops around when it reaches the end.</span><br><span class="line">For every plaintext bit, the wheel <span class="keyword">is</span> rotated to the <span class="built_in">next</span> bit <span class="keyword">in</span> the wheel that matches the plaintext bit, <span class="keyword">and</span> the distance rotated <span class="keyword">is</span> appended to the ciphertext.</span><br><span class="line"></span><br><span class="line">Therefore, <span class="keyword">if</span> the wheel <span class="keyword">is</span> <span class="keyword">not</span> known, it <span class="keyword">is</span> <span class="keyword">not</span> possible to decrypt the ciphertext.</span><br><span class="line">Or <span class="keyword">is</span> it?</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Example:</span></span><br><span class="line">To encode <span class="string">&quot;youtu.be/dQw4w9WgXcQ&quot;</span> <span class="keyword">in</span> <span class="number">64</span>-Cessation <span class="keyword">with</span> the wheel <span class="number">1100011011100011100110100011110110010110010100001011111011111010</span>:</span><br><span class="line"><span class="number">1.</span> convert the plaintext to bits: 01111001 01101111 01110101 01110100 01110101 <span class="number">00</span>101110 01100010 01100101 <span class="number">00</span>101111 01100100 <span class="number">0</span>1010001 01110111 00110100 01110111 00111001 <span class="number">0</span>1010111 01100111 <span class="number">0</span>1011000 01100011 <span class="number">0</span>1010001</span><br><span class="line"><span class="number">2.</span> <span class="keyword">from</span> wheel[-<span class="number">1</span>] to the <span class="built_in">next</span> <span class="string">&quot;0&quot;</span> bit <span class="keyword">in</span> the wheel, distance <span class="keyword">is</span> <span class="number">3</span>, the current wheel position <span class="keyword">is</span> wheel[<span class="number">2</span>]</span><br><span class="line"><span class="number">3.</span> <span class="keyword">from</span> wheel[<span class="number">2</span>] to the <span class="built_in">next</span> <span class="string">&quot;1&quot;</span> bit <span class="keyword">in</span> the wheel, distance <span class="keyword">is</span> <span class="number">3</span>, the current wheel position <span class="keyword">is</span> wheel[<span class="number">5</span>]</span><br><span class="line"><span class="number">4.</span> repeat the steps until <span class="built_in">all</span> bits <span class="keyword">is</span> encoded</span><br><span class="line"><span class="number">5.</span> the result <span class="keyword">is</span> <span class="number">3312121232111411211311221152515233123332223411313221112161142123243321244111111311111112111131113211132412111212112112321122115251142114213312132313311222111112</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## Challenge:</span></span><br><span class="line">A flag <span class="keyword">is</span> encoded <span class="keyword">with</span> <span class="number">64</span>-Cessation cipher.</span><br><span class="line">The wheel <span class="keyword">is</span> <span class="keyword">not</span> known <span class="keyword">except</span> that it <span class="keyword">is</span> <span class="number">64</span> bits long.</span><br><span class="line">The ciphertext <span class="keyword">is</span> given <span class="keyword">in</span> ciphertext.txt.</span><br><span class="line">The flag <span class="keyword">is</span> only known to be an ASCII string that <span class="keyword">is</span> longer than <span class="number">64</span> characters.</span><br><span class="line">No part of the flag <span class="keyword">is</span> known, which means the flag <span class="keyword">is</span> NOT <span class="keyword">in</span> WMCTF&#123;&#125; <span class="keyword">or</span> FLAG&#123;&#125; <span class="built_in">format</span>.</span><br><span class="line">When submitting, please make the flag <span class="keyword">in</span> WMCTF&#123;&#125; <span class="built_in">format</span>.</span><br><span class="line">Note that, The most significant bit of each ASCII byte <span class="keyword">is</span> flipped <span class="keyword">with</span> a random bit.</span><br><span class="line">You need to extract the flag <span class="keyword">from</span> the ciphertext <span class="keyword">and</span> submit it.</span><br><span class="line">For your convenience, a salted sha256 <span class="built_in">hash</span> of the flag <span class="keyword">is</span> given <span class="keyword">in</span> flag_hash.txt.</span><br></pre></td></tr></table></figure>
<p>附件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>,<span class="type">Union</span>,<span class="type">Literal</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"><span class="keyword">import</span> random,string,re</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">K_Cessation</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    ## Background:</span></span><br><span class="line"><span class="string">    K-Cessation cipher is a cipher that uses a K bit wheel to pick the next cipher bit from plaintext bit.</span></span><br><span class="line"><span class="string">    When encryption starts, the wheel starts at the last bit of the wheel.</span></span><br><span class="line"><span class="string">    The wheel loops around when it reaches the end.</span></span><br><span class="line"><span class="string">    For every plaintext bit, the wheel is rotated to the next bit in the wheel that matches the plaintext bit, and the distance rotated is appended to the ciphertext.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Therefore, if the wheel is not known, it is not possible to decrypt the ciphertext. </span></span><br><span class="line"><span class="string">    Or is it?</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    ## Example:</span></span><br><span class="line"><span class="string">    To encode &quot;youtu.be/dQw4w9WgXcQ&quot; in 64-Cessation with the wheel 1100011011100011100110100011110110010110010100001011111011111010:</span></span><br><span class="line"><span class="string">    1. convert the plaintext to bits: 01111001 01101111 01110101 01110100 01110101 00101110 01100010 01100101 00101111 01100100 01010001 01110111 00110100 01110111 00111001 01010111 01100111 01011000 01100011 01010001</span></span><br><span class="line"><span class="string">    2. from wheel[-1] to the next &quot;0&quot; bit in the wheel, distance is 3, the current wheel position is wheel[2]</span></span><br><span class="line"><span class="string">    3. from wheel[2] to the next &quot;1&quot; bit in the wheel, distance is 3, the current wheel position is wheel[5]</span></span><br><span class="line"><span class="string">    4. repeat the steps until all bits is encoded</span></span><br><span class="line"><span class="string">    5. the result is 3312121232111411211311221152515233123332223411313221112161142123243321244111111311111112111131113211132412111212112112321122115251142114213312132313311222111112</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ## Challenge:</span></span><br><span class="line"><span class="string">    A flag is encoded with 64-Cessation cipher. </span></span><br><span class="line"><span class="string">    The wheel is not known. </span></span><br><span class="line"><span class="string">    The ciphertext is given in ciphertext.txt.</span></span><br><span class="line"><span class="string">    The flag is only known to be an ascii string that is longer than 64 characters. </span></span><br><span class="line"><span class="string">    No part of the flag is known, which means the flag is NOT in WMCTF&#123;&#125; or FLAG&#123;&#125; format.</span></span><br><span class="line"><span class="string">    When submitting, please make the flag in WMCTF&#123;&#125; format.</span></span><br><span class="line"><span class="string">    The most significant bit of each byte is flipped with a random bit.</span></span><br><span class="line"><span class="string">    You need to extract the flag from the ciphertext and submit it.</span></span><br><span class="line"><span class="string">    For your convenience, a salted sha256 hash of the flag is given in flag_hash.txt.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__is_valid_wheel</span>(<span class="params">self</span>):</span><br><span class="line">        hasZero = <span class="literal">False</span></span><br><span class="line">        hasOne = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.wheel:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(i,<span class="built_in">int</span>):</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">&quot;Wheel must be a list of int&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">                hasZero = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">elif</span> i == <span class="number">1</span>:</span><br><span class="line">                hasOne = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">1</span> <span class="keyword">or</span> i &lt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">&quot;Wheel must be a list of 0s and 1s&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasZero <span class="keyword">or</span> <span class="keyword">not</span> hasOne:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Wheel must contain at least one 0 and one 1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,wheel:<span class="type">List</span>[<span class="built_in">int</span>]</span>):</span><br><span class="line">        self.wheel = wheel</span><br><span class="line">        self.__is_valid_wheel()</span><br><span class="line">        self.state = -<span class="number">1</span></span><br><span class="line">        self.finalized = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__find_next_in_wheel</span>(<span class="params">self,target:<span class="type">Literal</span>[<span class="number">1</span>,<span class="number">0</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        result = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            ptr = self.state + result</span><br><span class="line">            ptr = ptr % <span class="built_in">len</span>(self.wheel)</span><br><span class="line">            v = self.wheel[ptr]</span><br><span class="line">            <span class="keyword">if</span> v == target:</span><br><span class="line">                self.state = ptr</span><br><span class="line">                <span class="keyword">return</span> [result]</span><br><span class="line">            result+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter_bits</span>(<span class="params">self,data:<span class="built_in">bytes</span></span>):</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> data:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">yield</span> (b &gt;&gt; i) &amp; <span class="number">1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__check_finalized</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.finalized:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;This instance has already been finalized&quot;</span>)</span><br><span class="line">        self.finalized = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self,data:<span class="type">Union</span>[<span class="built_in">str</span>,<span class="built_in">bytes</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        self.__check_finalized()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(data,<span class="built_in">str</span>):</span><br><span class="line">            data = data.encode()</span><br><span class="line">        out = []</span><br><span class="line">        <span class="keyword">for</span> bit <span class="keyword">in</span> self.__iter_bits(data):</span><br><span class="line">            rs = self.__find_next_in_wheel(bit)</span><br><span class="line">            <span class="comment"># print(f&quot;bit=&#123;bit&#125;,rs=&#123;rs&#125;,state=&#123;self.state&#125;&quot;)</span></span><br><span class="line">            out.extend(rs)</span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self,data:<span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        self.__check_finalized()</span><br><span class="line">        out = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">            <span class="keyword">assert</span> <span class="built_in">type</span>(i) == <span class="built_in">int</span></span><br><span class="line">            self.state = self.state + i</span><br><span class="line">            self.state %= <span class="built_in">len</span>(self.wheel)</span><br><span class="line">            out.append(self.wheel[self.state])</span><br><span class="line">        long = <span class="string">&quot;&quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>,out))</span><br><span class="line">        <span class="keyword">return</span> long_to_bytes(<span class="built_in">int</span>(long,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate a random wheel with k bits.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_wheel</span>(<span class="params">k=<span class="number">64</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">    <span class="keyword">return</span> [secrets.randbelow(<span class="number">2</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(k)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># the most significant bit of each byte is flipped with a random bit.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode_ascii_with_random_msb</span>(<span class="params">data:<span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    out = <span class="built_in">bytearray</span>()</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">assert</span> b &lt; <span class="number">128</span>, <span class="string">&quot;not ascii&quot;</span></span><br><span class="line">        b = b ^ (<span class="number">0b10000000</span> * secrets.randbelow(<span class="number">2</span>))</span><br><span class="line">        out.append(b)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(out)</span><br><span class="line"></span><br><span class="line"><span class="comment"># for your convenience, here is the decoding function.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode_ascii_with_random_msb</span>(<span class="params">data:<span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    out = <span class="built_in">bytearray</span>()</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> data:</span><br><span class="line">        b = b &amp; <span class="number">0b01111111</span></span><br><span class="line">        out.append(b)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(out)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line">        <span class="keyword">from</span> flag <span class="keyword">import</span> wheel</span><br><span class="line">    <span class="keyword">except</span> ImportError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;flag.py not found, using test flag&quot;</span>)</span><br><span class="line">        flag = <span class="string">&quot;THIS_IS_TEST_FLAG_WHEN_YOU_HEAR_THE_BUZZER_LOOK_AT_THE_FLAG_BEEEP&quot;</span></span><br><span class="line">        wheel = random_wheel(<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># wheel is wheel and 64 bits</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">type</span>(wheel) == <span class="built_in">list</span> <span class="keyword">and</span> <span class="built_in">len</span>(wheel) == <span class="number">64</span> <span class="keyword">and</span> <span class="built_in">all</span>((i <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> wheel))</span><br><span class="line">    <span class="comment"># flag is flag and string</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">type</span>(flag) == <span class="built_in">str</span></span><br><span class="line">    <span class="comment"># flag is ascii</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">all</span>((<span class="built_in">ord</span>(c) &lt; <span class="number">128</span> <span class="keyword">for</span> c <span class="keyword">in</span> flag))</span><br><span class="line">    <span class="comment"># flag is long</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(flag) &gt; <span class="number">64</span></span><br><span class="line">    <span class="comment"># flag does not start with wmctf&#123; nor does it end with &#125;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="keyword">not</span> flag.lower().startswith(<span class="string">&quot;wmctf&#123;&quot;</span>) <span class="keyword">and</span> <span class="keyword">not</span> flag.endswith(<span class="string">&quot;&#125;&quot;</span>)</span><br><span class="line">    <span class="comment"># flag also does not start with flag&#123;</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="keyword">not</span> flag.lower().startswith(<span class="string">&quot;flag&#123;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># the most significant bit of each byte is flipped with a random bit.</span></span><br><span class="line">    plaintext = encode_ascii_with_random_msb(flag.encode())</span><br><span class="line"></span><br><span class="line">    c = K_Cessation(wheel)</span><br><span class="line">    ct = c.encrypt(plaintext)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;ciphertext.txt&quot;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="built_in">str</span>(ct))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> hashlib</span><br><span class="line">    <span class="comment"># for you can verify the correctness of your decryption.</span></span><br><span class="line">    <span class="comment"># or you can brute force the flag hash, it is just a &gt;64 length string :)</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag_hash.txt&quot;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        salt = secrets.token_bytes(<span class="number">16</span>).<span class="built_in">hex</span>()</span><br><span class="line">        h = hashlib.sha256((salt + flag).encode()).hexdigest()</span><br><span class="line">        f.write(h + <span class="string">&quot;:&quot;</span> + salt)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># demostration that decryption works</span></span><br><span class="line">    c = K_Cessation(wheel)</span><br><span class="line">    pt = c.decrypt(ct)</span><br><span class="line">    pt = decode_ascii_with_random_msb(pt)</span><br><span class="line">    <span class="built_in">print</span>(pt)</span><br><span class="line">    <span class="keyword">assert</span> flag.encode() <span class="keyword">in</span> pt</span><br><span class="line">    </span><br><span class="line"><span class="comment"># d650078ae91d82ebd1d586110960a789c1a15e2cbc053b9daf8d8a4905950720:b840089ce93581869e9c02a7b5aefa7b</span></span><br><span class="line"><span class="comment"># [2, 1, 1, 3, 1, 1, 3, 2, 1, 4, 1, 2, 3, 1, 1, 1, 2, 1, 1, 2, 2, 2, 1, 3, 1, 6, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 3, 3, 2, 1, 1, 3, 1, 1, 1, 3, 4, 1, 3, 1, 2, 2, 4, 2, 5, 1, 1, 1, 3, 2, 1, 4, 2, 2, 1, 2, 1, 3, 1, 1, 1, 1, 1, 2, 3, 1, 2, 1, 1, 1, 1, 3, 4, 1, 2, 2, 4, 2, 5, 1, 2, 1, 2, 2, 1, 4, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 4, 3, 1, 2, 1, 3, 1, 3, 3, 2, 1, 3, 1, 6, 2, 1, 1, 2, 1, 2, 1, 3, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 2, 2, 3, 1, 1, 4, 1, 3, 1, 1, 1, 2, 1, 1, 2, 4, 1, 1, 5, 2, 4, 2, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 3, 3, 1, 1, 1, 1, 1, 2, 1, 2, 3, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 5, 1, 1, 1, 3, 1, 1, 2, 3, 1, 2, 2, 2, 1, 3, 3, 1, 1, 2, 1, 1, 4, 3, 1, 3, 4, 1, 1, 1, 2, 1, 3, 1, 6, 1, 2, 1, 1, 3, 2, 3, 1, 2, 2, 1, 3, 2, 1, 2, 2, 2, 3, 3, 3, 1, 1, 2, 4, 1, 1, 1, 1, 1, 4, 2, 1, 4, 1, 2, 3, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 3, 2, 1, 2, 1, 1, 1, 4, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 4, 2, 1, 4, 2, 4, 2, 2, 3, 1, 2, 2, 2, 1, 3, 3, 1, 2, 1, 1, 1, 1, 3, 3, 1, 3, 1, 1, 1, 1, 3, 1, 1, 4, 2, 5, 2, 1, 3, 1, 1, 2, 3, 1, 2, 2, 1, 1, 1, 1, 1, 1, 3, 1, 2, 1, 3, 1, 2, 3, 4, 4, 3, 2, 4, 2, 1, 4, 2, 4, 1, 2, 1, 3, 1, 2, 1, 1, 1, 3, 2, 1, 2, 2, 2, 3, 3, 1, 2, 1, 3, 1, 1, 1, 2, 1, 3, 4, 2, 1, 4, 1, 2, 1, 2, 2, 2, 1, 1, 2, 1, 1, 2, 2, 2, 1, 4, 2, 1, 4, 1, 1, 1, 1, 2, 4, 4, 3, 2, 4, 2, 1, 1, 1, 1, 1, 1, 1, 4, 2, 2, 3, 1, 1, 1, 2, 1, 3, 1, 4, 1, 2, 4, 1, 2, 3, 4, 1, 3, 1, 1, 1, 2, 4, 1, 1, 1, 4, 1, 1, 4, 2, 1, 4, 2, 2, 1, 1, 1, 1, 1, 2, 3, 2, 1, 4, 3, 3, 4, 4, 3, 2, 4, 2, 1, 1, 3, 2, 4, 1, 1, 2, 3, 1, 1, 1, 2, 2, 1, 1, 1, 1, 3, 1, 1, 1, 4, 3, 3, 1, 1, 2, 1, 1, 1, 1, 3, 1, 1, 4, 2, 5, 1, 1, 4, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 4, 3, 1, 1, 1, 1, 3, 4, 3, 1, 1, 4, 1, 6, 2, 1, 1, 1, 3, 1, 1, 3, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 4, 3, 1, 1, 5, 4, 1, 2, 2, 4, 1, 6, 1, 2, 1, 1, 3, 1, 4, 1, 2, 1, 2, 1, 1, 1, 1, 4, 2, 2, 3, 1, 2, 3, 1, 3, 4, 1, 1, 3, 4, 2, 5, 1, 1, 1, 3, 2, 2, 3, 2, 1, 2, 2, 2, 2, 3, 1, 2, 1, 3, 3, 3, 1, 1, 2, 1, 3, 3, 1, 1, 4, 2, 5, 2, 4, 1, 2, 4, 1, 2, 1, 2, 1, 1, 1, 2, 3, 1, 2, 4, 1, 1, 4, 4, 1, 1, 2, 3, 2, 4, 2, 5, 1, 2, 1, 2, 1, 1, 2, 3, 1, 2, 1, 2, 1, 1, 3, 1, 1, 2, 1, 2, 3, 1, 1, 1, 3, 4, 1, 1, 2, 1, 1, 1, 2, 4, 2, 1, 1, 3, 1, 2, 1, 2, 2, 2, 1, 2, 2, 1, 1, 1, 2, 1, 3, 1, 1, 2, 1, 2, 3, 1, 1, 1, 3, 4, 1, 1, 2, 3, 1, 2, 3, 1, 6, 2, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 4, 2, 1, 4, 1, 2, 3, 1, 1, 2, 1]</span></span><br></pre></td></tr></table></figure>
<p>加密的原理我们并不难理解，但需要我们找到细节规律</p>
<p>密文第一个是3，说明wheel里面1，2是相同的，且与3相反，密文第二个是5，说明wheel里面 4，5，6，7是相同的，且与8相反，不是0就是1，我们只需足够多的密文来确定足够多的相同的位置，就能确定wheel</p>
<h3 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ct = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">X_64 = BooleanPolynomialRing(<span class="number">64</span>, [<span class="string">f&quot;x<span class="subst">&#123;i&#125;</span>&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>)])  <span class="comment">#设64个布尔值的未知数</span></span><br><span class="line">Xs = <span class="built_in">list</span>(X_64.gens())</span><br><span class="line">eqs = []</span><br><span class="line">begin = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ct:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> j == i-<span class="number">2</span>:	<span class="comment"># 判断相邻两个是否相同</span></span><br><span class="line">            eq = Xs[(begin + j) % <span class="number">64</span>] + Xs[(begin + j + <span class="number">1</span>) % <span class="number">64</span>] + <span class="number">1</span></span><br><span class="line">            eqs.append(eq)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            eq = Xs[(begin + j) % <span class="number">64</span>] + Xs[(begin + j + <span class="number">1</span>) % <span class="number">64</span>]</span><br><span class="line">            eqs.append(eq)</span><br><span class="line">    begin += i</span><br><span class="line"></span><br><span class="line">m = []</span><br><span class="line">B = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> eqs:</span><br><span class="line">    s = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Xs)):</span><br><span class="line">        <span class="keyword">if</span> Xs[x] <span class="keyword">in</span> i:</span><br><span class="line">            s.append(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            s.append(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;+ 1&quot;</span> <span class="keyword">in</span> <span class="built_in">str</span>(i):</span><br><span class="line">        B.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        B.append(<span class="number">0</span>)</span><br><span class="line">    m.append(s)</span><br><span class="line">m = matrix(GF(<span class="number">2</span>), m)	<span class="comment"># 矩阵</span></span><br><span class="line">B = vector(GF(<span class="number">2</span>), B)	<span class="comment"># 系数</span></span><br><span class="line"></span><br><span class="line">wheel = m.solve_right(B)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(wheel)</span><br><span class="line"><span class="comment"># [(1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0)]</span></span><br></pre></td></tr></table></figure>
<p>佩服，转换成了一个多项式矩阵解</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>,<span class="type">Union</span>,<span class="type">Literal</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"><span class="keyword">import</span> random,string,re</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">K_Cessation</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    ## Background:</span></span><br><span class="line"><span class="string">    K-Cessation cipher is a cipher that uses a K bit wheel to pick the next cipher bit from plaintext bit.</span></span><br><span class="line"><span class="string">    When encryption starts, the wheel starts at the last bit of the wheel.</span></span><br><span class="line"><span class="string">    The wheel loops around when it reaches the end.</span></span><br><span class="line"><span class="string">    For every plaintext bit, the wheel is rotated to the next bit in the wheel that matches the plaintext bit, and the distance rotated is appended to the ciphertext.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Therefore, if the wheel is not known, it is not possible to decrypt the ciphertext. </span></span><br><span class="line"><span class="string">    Or is it?</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    ## Example:</span></span><br><span class="line"><span class="string">    To encode &quot;youtu.be/dQw4w9WgXcQ&quot; in 64-Cessation with the wheel 1100011011100011100110100011110110010110010100001011111011111010:</span></span><br><span class="line"><span class="string">    1. convert the plaintext to bits: 01111001 01101111 01110101 01110100 01110101 00101110 01100010 01100101 00101111 01100100 01010001 01110111 00110100 01110111 00111001 01010111 01100111 01011000 01100011 01010001</span></span><br><span class="line"><span class="string">    2. from wheel[-1] to the next &quot;0&quot; bit in the wheel, distance is 3, the current wheel position is wheel[2]</span></span><br><span class="line"><span class="string">    3. from wheel[2] to the next &quot;1&quot; bit in the wheel, distance is 3, the current wheel position is wheel[5]</span></span><br><span class="line"><span class="string">    4. repeat the steps until all bits is encoded</span></span><br><span class="line"><span class="string">    5. the result is 3312121232111411211311221152515233123332223411313221112161142123243321244111111311111112111131113211132412111212112112321122115251142114213312132313311222111112</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ## Challenge:</span></span><br><span class="line"><span class="string">    A flag is encoded with 64-Cessation cipher. </span></span><br><span class="line"><span class="string">    The wheel is not known. </span></span><br><span class="line"><span class="string">    The ciphertext is given in ciphertext.txt.</span></span><br><span class="line"><span class="string">    The flag is only known to be an ascii string that is longer than 64 characters. </span></span><br><span class="line"><span class="string">    No part of the flag is known, which means the flag is NOT in WMCTF&#123;&#125; or FLAG&#123;&#125; format.</span></span><br><span class="line"><span class="string">    When submitting, please make the flag in WMCTF&#123;&#125; format.</span></span><br><span class="line"><span class="string">    The most significant bit of each byte is flipped with a random bit.</span></span><br><span class="line"><span class="string">    You need to extract the flag from the ciphertext and submit it.</span></span><br><span class="line"><span class="string">    For your convenience, a salted sha256 hash of the flag is given in flag_hash.txt.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__is_valid_wheel</span>(<span class="params">self</span>):</span><br><span class="line">        hasZero = <span class="literal">False</span></span><br><span class="line">        hasOne = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.wheel:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(i,<span class="built_in">int</span>):</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">&quot;Wheel must be a list of int&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">                hasZero = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">elif</span> i == <span class="number">1</span>:</span><br><span class="line">                hasOne = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> i &gt; <span class="number">1</span> <span class="keyword">or</span> i &lt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">&quot;Wheel must be a list of 0s and 1s&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasZero <span class="keyword">or</span> <span class="keyword">not</span> hasOne:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Wheel must contain at least one 0 and one 1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,wheel:<span class="type">List</span>[<span class="built_in">int</span>]</span>):</span><br><span class="line">        self.wheel = wheel</span><br><span class="line">        self.__is_valid_wheel()</span><br><span class="line">        self.state = -<span class="number">1</span></span><br><span class="line">        self.finalized = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__find_next_in_wheel</span>(<span class="params">self,target:<span class="type">Literal</span>[<span class="number">1</span>,<span class="number">0</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        result = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            ptr = self.state + result</span><br><span class="line">            ptr = ptr % <span class="built_in">len</span>(self.wheel)</span><br><span class="line">            v = self.wheel[ptr]</span><br><span class="line">            <span class="keyword">if</span> v == target:</span><br><span class="line">                self.state = ptr</span><br><span class="line">                <span class="keyword">return</span> [result]</span><br><span class="line">            result+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter_bits</span>(<span class="params">self,data:<span class="built_in">bytes</span></span>):</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> data:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">yield</span> (b &gt;&gt; i) &amp; <span class="number">1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__check_finalized</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.finalized:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;This instance has already been finalized&quot;</span>)</span><br><span class="line">        self.finalized = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">self,data:<span class="type">Union</span>[<span class="built_in">str</span>,<span class="built_in">bytes</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        self.__check_finalized()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(data,<span class="built_in">str</span>):</span><br><span class="line">            data = data.encode()</span><br><span class="line">        out = []</span><br><span class="line">        <span class="keyword">for</span> bit <span class="keyword">in</span> self.__iter_bits(data):</span><br><span class="line">            rs = self.__find_next_in_wheel(bit)</span><br><span class="line">            <span class="comment"># print(f&quot;bit=&#123;bit&#125;,rs=&#123;rs&#125;,state=&#123;self.state&#125;&quot;)</span></span><br><span class="line">            out.extend(rs)</span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self,data:<span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        self.__check_finalized()</span><br><span class="line">        out = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">            <span class="keyword">assert</span> <span class="built_in">type</span>(i) == <span class="built_in">int</span></span><br><span class="line">            self.state = self.state + i</span><br><span class="line">            self.state %= <span class="built_in">len</span>(self.wheel)</span><br><span class="line">            out.append(self.wheel[self.state])</span><br><span class="line">        long = <span class="string">&quot;&quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>,out))</span><br><span class="line">        <span class="keyword">return</span> long_to_bytes(<span class="built_in">int</span>(long,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate a random wheel with k bits.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_wheel</span>(<span class="params">k=<span class="number">64</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">    <span class="keyword">return</span> [secrets.randbelow(<span class="number">2</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(k)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># the most significant bit of each byte is flipped with a random bit.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode_ascii_with_random_msb</span>(<span class="params">data:<span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    out = <span class="built_in">bytearray</span>()</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">assert</span> b &lt; <span class="number">128</span>, <span class="string">&quot;not ascii&quot;</span></span><br><span class="line">        b = b ^ (<span class="number">0b10000000</span> * secrets.randbelow(<span class="number">2</span>))</span><br><span class="line">        out.append(b)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(out)</span><br><span class="line"></span><br><span class="line"><span class="comment"># for your convenience, here is the decoding function.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode_ascii_with_random_msb</span>(<span class="params">data:<span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    out = <span class="built_in">bytearray</span>()</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> data:</span><br><span class="line">        b = b &amp; <span class="number">0b01111111</span></span><br><span class="line">        out.append(b)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(out)</span><br><span class="line"></span><br><span class="line">ct = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">wheels = [(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> wheel <span class="keyword">in</span> wheels:</span><br><span class="line">    c = K_Cessation(wheel)</span><br><span class="line">    pt = c.decrypt(ct)</span><br><span class="line">    pt = decode_ascii_with_random_msb(pt)</span><br><span class="line">    <span class="built_in">print</span>(pt)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;DoubleUmCtF[S33K1NG_tru7h-7h3_w1s3-f1nd_1n57e4d-17s_pr0f0und-4b5ence_n0w-g0_s0lv3-th3_3y3s-1n_N0ita]&#x27;</span></span><br></pre></td></tr></table></figure>
<p>reference：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly90YW5nY3V4aWFvamlrdWFpLnh5ei9wb3N0LzNmZjQyNDU4Lmh0bWwjbW9yZQ==">2024-WMCTF-wp-crypto | 糖醋小鸡块的blog (tangcuxiaojikuai.xyz)<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXh0ZXJqaWUuZ2l0aHViLmlvLzIwMjQvMDkvMTcv6LWb6aKY5aSN546wLzIwMjRXTUNURi8jSy1DZXNzYXRpb24=">2024WMCTF | DexterJie’Blog<i class="fa fa-external-link-alt"></i></span></p>
<h1 id="京津冀长城杯2024"><a href="#京津冀长城杯2024" class="headerlink" title="京津冀长城杯2024"></a>京津冀长城杯2024</h1><h2 id="RandomRSA"><a href="#RandomRSA" class="headerlink" title="RandomRSA"></a>RandomRSA</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LCG</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,p,a,b</span>):</span><br><span class="line">        self.p=p</span><br><span class="line">        self.a=a</span><br><span class="line">        self.b=b</span><br><span class="line">        self.x=random.randint(<span class="number">0</span>,p-<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(self.p,self.a,self.b)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        self.x=(self.a*self.x+self.b)%self.p</span><br><span class="line">        <span class="keyword">return</span> self.x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getPrimes</span>(<span class="params">bits,k</span>):</span><br><span class="line">    p=getPrime(bits)</span><br><span class="line">    a=random.randint(<span class="number">0</span>,p-<span class="number">1</span>)</span><br><span class="line">    b=random.randint(<span class="number">0</span>,p-<span class="number">1</span>)</span><br><span class="line">    l=LCG(p,a,b)</span><br><span class="line">    <span class="keyword">return</span> [gmpy2.next_prime(l.<span class="built_in">next</span>()) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(k)]</span><br><span class="line"></span><br><span class="line">p,q=getPrimes(<span class="number">1024</span>,<span class="number">2</span>)</span><br><span class="line">n=p*q</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(n,c)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">170302223332374952785269454020752010235000449292324018706323228421794605831609342383813680059406887437726391567716617403068082252456126724116360291722050578106527815908837796377811535800753042840119867579793401648981916062128752925574017615120362457848369672169913701701169754804744410516724429370808383640129 95647398016998994323232737206171888899957187357027939982909965407086383339418183844601496450055752805846840966207033179756334909869395071918100649183599056695688702272113280126999439574017728476367307673524762493771576155949866442317616306832252931038932232342396406623324967479959770751756551238647385191314 122891504335833588148026640678812283515533067572514249355105863367413556242876686249628488512479399795117688641973272470884323873621143234628351006002398994272892177228185516130875243250912554684234982558913267007466946601210297176541861279902930860851219732696973412096603548467720104727887907369470758901838</span></span><br><span class="line"><span class="string">5593134172275186875590245131682192688778392004699750710462210806902340747682378400226605648011816039948262008066066650657006955703136928662067931212033472838067050429624395919771757949640517085036958623280188133965150285410609475158882527926240531113060812228408346482328419754802280082212250908375099979058307437751229421708615341486221424596128137575042934928922615832987202762651904056934292682021963290271144473446994958975487980146329697970484311863524622696562094720833240915154181032649358743041246023013296745195478603299127094103448698060367648192905729866897074234681844252549934531893172709301411995941527 2185680728108057860427602387168654320024588536620246138642042133525937248576850574716324994222027251548743663286125769988360677327713281974075574656905916643746842819251899233266706138267250441832133068661277187507427787343897863339824140927640373352305007520681800240743854093190786046280731148485148774188448658663250731076739737801267702682463265663725900621375689684459894544169879873344003810307496162858318574830487480360419897453892053456993436452783099460908947258094434884954726862549670168954554640433833484822078996925040310316609425805351183165668893199137911145057639657709936762866208635582348932189646</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>next_prime ，两个数相差不大，可以采取爆破</p>
<script type="math/tex; mode=display">
pp=x+k_1\bmod p</script><script type="math/tex; mode=display">
qq = ax+b+k_2 \bmod p</script><script type="math/tex; mode=display">
n = pp*qq=(x+k_1)*(ax+b+k_2) \bmod p</script><p>拆开后是一个一元二次方程 （通过爆破k1，k2）</p>
<p>借助一下dexter师傅写的脚本，自己写的要跑两三个小时，借助多线程也要跑半个多小时🥲🥲</p>
<p>（多进程学习一手）</p>
<p>不用多线程跑全程也才10分钟，flag不到四分钟就出了，借助多线程更是秒出</p>
<p>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ProcessPoolExecutor,as_completed</span><br><span class="line"></span><br><span class="line">mod = <span class="number">170302223332374952785269454020752010235000449292324018706323228421794605831609342383813680059406887437726391567716617403068082252456126724116360291722050578106527815908837796377811535800753042840119867579793401648981916062128752925574017615120362457848369672169913701701169754804744410516724429370808383640129</span></span><br><span class="line">a = <span class="number">95647398016998994323232737206171888899957187357027939982909965407086383339418183844601496450055752805846840966207033179756334909869395071918100649183599056695688702272113280126999439574017728476367307673524762493771576155949866442317616306832252931038932232342396406623324967479959770751756551238647385191314</span></span><br><span class="line">b = <span class="number">122891504335833588148026640678812283515533067572514249355105863367413556242876686249628488512479399795117688641973272470884323873621143234628351006002398994272892177228185516130875243250912554684234982558913267007466946601210297176541861279902930860851219732696973412096603548467720104727887907369470758901838</span></span><br><span class="line">n = <span class="number">5593134172275186875590245131682192688778392004699750710462210806902340747682378400226605648011816039948262008066066650657006955703136928662067931212033472838067050429624395919771757949640517085036958623280188133965150285410609475158882527926240531113060812228408346482328419754802280082212250908375099979058307437751229421708615341486221424596128137575042934928922615832987202762651904056934292682021963290271144473446994958975487980146329697970484311863524622696562094720833240915154181032649358743041246023013296745195478603299127094103448698060367648192905729866897074234681844252549934531893172709301411995941527</span></span><br><span class="line">c = <span class="number">2185680728108057860427602387168654320024588536620246138642042133525937248576850574716324994222027251548743663286125769988360677327713281974075574656905916643746842819251899233266706138267250441832133068661277187507427787343897863339824140927640373352305007520681800240743854093190786046280731148485148774188448658663250731076739737801267702682463265663725900621375689684459894544169879873344003810307496162858318574830487480360419897453892053456993436452783099460908947258094434884954726862549670168954554640433833484822078996925040310316609425805351183165668893199137911145057639657709936762866208635582348932189646</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_flag</span>(<span class="params">start,end</span>):</span><br><span class="line">    <span class="keyword">for</span> k1 <span class="keyword">in</span> trange(start,end):</span><br><span class="line">        <span class="keyword">for</span> k2 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">            A = a</span><br><span class="line">            B = (a*k1 + b + k2)</span><br><span class="line">            C = (b*k1 + k1*k2 - n)</span><br><span class="line">            delta = B^<span class="number">2</span> - <span class="number">4</span> * A * C</span><br><span class="line">            check = Zmod(mod)(delta).is_square()</span><br><span class="line">            <span class="keyword">if</span> check == <span class="literal">False</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            roots = Zmod(mod)(delta).sqrt(<span class="built_in">all</span>=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">for</span> root <span class="keyword">in</span> roots:</span><br><span class="line">                root = gmpy2.mpz(root)</span><br><span class="line">                x1 = (-B + root) * gmpy2.invert(<span class="number">2</span> * A,mod) % mod</span><br><span class="line">                x2 = (-B - root) * gmpy2.invert(<span class="number">2</span> * A,mod) % mod</span><br><span class="line">                p1 = x1 + k1</span><br><span class="line">                p2 = x2 + k2</span><br><span class="line">                <span class="keyword">if</span> n % p1 == <span class="number">0</span>:</span><br><span class="line">                    <span class="built_in">print</span>(p1)</span><br><span class="line">                    p = p1</span><br><span class="line">                    q = n // p</span><br><span class="line">                    d = inverse(<span class="number">65537</span>,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">                    m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">                    flag = long_to_bytes(m)</span><br><span class="line">                    <span class="built_in">print</span>(flag)</span><br><span class="line">                    <span class="keyword">return</span> flag</span><br><span class="line">                <span class="keyword">if</span> n % p2 == <span class="number">0</span>:</span><br><span class="line">                    <span class="built_in">print</span>(p2)</span><br><span class="line">                    p = p2</span><br><span class="line">                    q = n // p</span><br><span class="line">                    d = inverse(<span class="number">65537</span>,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">                    m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">                    flag = long_to_bytes(m)</span><br><span class="line">                    <span class="built_in">print</span>(flag)</span><br><span class="line">                    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line">num_threads = <span class="number">5</span></span><br><span class="line"><span class="keyword">with</span> ProcessPoolExecutor(max_workers=num_threads) <span class="keyword">as</span> executor:</span><br><span class="line">    ranges = [(<span class="number">0</span>,<span class="number">200</span>),(<span class="number">200</span>,<span class="number">400</span>),(<span class="number">400</span>,<span class="number">600</span>),(<span class="number">600</span>,<span class="number">800</span>),(<span class="number">800</span>,<span class="number">1000</span>)]</span><br><span class="line">    futures = [executor.submit(get_flag,start,end) <span class="keyword">for</span> start, end <span class="keyword">in</span> ranges]</span><br><span class="line">    <span class="keyword">for</span> future <span class="keyword">in</span> as_completed(futures):</span><br><span class="line">        result = future.result()</span><br><span class="line">        <span class="keyword">if</span> result:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;j1st_e_s1mp1e_b3ute&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="Matrix"><a href="#Matrix" class="headerlink" title="Matrix"></a>Matrix</h2><p>matrix.sage</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sage.stats.distributions.discrete_gaussian_integer <span class="keyword">import</span> DiscreteGaussianDistributionIntegerSampler</span><br><span class="line"><span class="keyword">from</span> sage.combinat.subset <span class="keyword">import</span> Subsets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parameters</span>(<span class="params">n</span>):</span><br><span class="line">    m = <span class="number">5</span>*n</span><br><span class="line">    p = random.choice(<span class="built_in">list</span>(primes(n^<span class="number">2</span>, <span class="number">2</span>*n^<span class="number">2</span>)))</span><br><span class="line">    D = DiscreteGaussianDistributionIntegerSampler(sigma=<span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">return</span> n, m, p, D</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">keygen</span>(<span class="params">n, m, p, D</span>):</span><br><span class="line">    s = vector(Zmod(p), [random.randint(<span class="number">0</span>, p-<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)])</span><br><span class="line"></span><br><span class="line">    e = vector(Zmod(p), [D() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)])</span><br><span class="line">    A = matrix(Zmod(p), [</span><br><span class="line">        vector(Zmod(p), [random.randint(<span class="number">0</span>, p-<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)])</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m)</span><br><span class="line">    ])</span><br><span class="line">    b = A * s + e</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (s, (A, b))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">msg_bit, A, b, p</span>):</span><br><span class="line">    <span class="keyword">assert</span> msg_bit <span class="keyword">in</span> (<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    m = <span class="built_in">len</span>(b)</span><br><span class="line">    S = Subsets(m).random_element()</span><br><span class="line"></span><br><span class="line">    cipher_a = <span class="built_in">sum</span>(A[i-<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> S)</span><br><span class="line">    cipher_b = (<span class="built_in">sum</span>(b[i-<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> S) + msg_bit * p//<span class="number">2</span>) % p</span><br><span class="line">    <span class="keyword">return</span> (cipher_a, cipher_b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">cipher_a, cipher_b, s, p</span>):</span><br><span class="line">    tmp = <span class="built_in">int</span>((cipher_b - cipher_a*s) % p)</span><br><span class="line">    <span class="keyword">if</span> tmp &gt; p//<span class="number">2</span>:</span><br><span class="line">        tmp -= p</span><br><span class="line">    <span class="keyword">if</span> p//<span class="number">2</span> &lt; <span class="number">2</span>*<span class="built_in">abs</span>(tmp):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    n, m, p, D = parameters(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    sk, (A, b) = keygen(n, m, p, D)</span><br><span class="line"></span><br><span class="line">    flag2 = <span class="built_in">open</span>(<span class="string">&quot;flag2.txt&quot;</span>, <span class="string">&quot;r&quot;</span>).readline().strip()</span><br><span class="line">    msg = <span class="built_in">int</span>.from_bytes(flag2.encode(), <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    ciphers = []</span><br><span class="line">    <span class="keyword">while</span> msg:</span><br><span class="line">        bit = msg &amp; <span class="number">1</span></span><br><span class="line">        msg &gt;&gt;= <span class="number">1</span></span><br><span class="line">        ciphers.append(encrypt(bit, A, b, p))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;flag2.enc&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>\nm = <span class="subst">&#123;m&#125;</span>\np = <span class="subst">&#123;p&#125;</span>\nD = <span class="subst">&#123;D&#125;</span>\n\n&quot;</span>)</span><br><span class="line">        f.write(<span class="string">f&quot;pubkey key A: \n<span class="subst">&#123;base64.b64encode(dumps(A)).decode()&#125;</span>\n\n&quot;</span>)</span><br><span class="line">        f.write(<span class="string">f&quot;pubkey key b: \n<span class="subst">&#123;base64.b64encode(dumps(b)).decode()&#125;</span>\n\n&quot;</span>)</span><br><span class="line">        f.write(<span class="string">f&quot;cipher: \n<span class="subst">&#123;base64.b64encode(dumps(ciphers)).decode()&#125;</span>\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>flag2.enc</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">10</span></span><br><span class="line">m = <span class="number">50</span></span><br><span class="line">p = <span class="number">193</span></span><br><span class="line">D = Discrete Gaussian sampler over the Integers <span class="keyword">with</span> sigma = <span class="number">0.500000</span> <span class="keyword">and</span> c = <span class="number">0.000000</span></span><br><span class="line"></span><br><span class="line">pubkey key A: </span><br><span class="line">eJx1UwtT1FYU3kVQCIgURKkgD5F2QVhFHhWR8lQWEB9hKFuKxpAENmU34STZBXFA2mVdHbFVqmMtFcUHKmOpj3FaEXHm+2W9y65ThtHJTHLv+R7n3JNzJ+MkUxxUnD7RMtTR2OcA59eGVWnIq3Bkc3yCIPh0WRNkRTMVYcCrixbX+Zk42aNy0zL8kuU3FKdfU8mvCIYybCimolmipeoaS2gosl9iCT9VkGAOiwyLJulaW9Mmx0bnAVGydOM8N6hoiqFKQmwv/H+Y+M9qvLo+5B8WBr16v+jlKMGdarPZ2jRLGVSMTl3mVW2QNodoC0+JHVyH/RIlRZ0MBphONUrkfOKQInzcEOeOYybV5ZQcohSeto5TqjuRRSSREVhS2hY7qmpKTkn0ernIS/AplkeXOUrzbHxirYnpVcVk7Rn0iaYgarIgyrJqqQFFiMZYsyKfRk1ujAHRAEdfFI9TepgyeNruTmblCCOq5RHEUVX3UaY7hUVaVNYgtd8fUdGOMO3kKcuT6c5g0EezRtPUJVVcY3wZpl08ZW9gNOs+n9+KMnLCtJunXMZIXcfo1lRL9FJemPJ5KmBgpJr1xnvCVMjTXoZsWydr0wKKYSpUFKavePqaoZsZGjNzhKmYpxIWTFw7SEA12XjRvjCV8lQWy7G+NGeY9vN0wLSonKeDHQc7uCseu0UV41QZpiqeqq+M0zcOd2bkv+lev08TRF+/yuY2Mut+r0KHPPEOT4KbY4RjhqJ0RqM1ITrMU60nyeFhpldOWHRknOos+panenc64xr6yEanhohTTMJFJI3j1GRRM08t/g77ZUmQdFmRTE7RIguOjrrvsAHDcj1+QbAU13D7cAFu4WHphWpXH5ZaWvEewRQlcKoaj0+4LmK+BMHTLsb7F79ixYXZVsI/WxE040tH9zYi1CTjBmZbTndjFR+yyvMbMIO/8SDLVlUVL+BZVfd5p5ST3otZV+oApojDHG6MWIHdP3AVuIqbba4JXMf0DkzaLTwv3VSWi9DBPCxhplQus2MmDjeTsXAAU5VYTvKVj+yqkDrTEKrGYkDdywzuSFjW4vHQdQZ/ZKbgpf37CWbQWOjwYSXtDN714r7hSHfiYRtb4enIaOUA78Gy7eSWU3iKWSzibt1xLJkDPZhvwCOs9GIpR08Y6ak/eRGPT+L9Yaz0jOFFJpblItwa3YkFowxTrbjdNNh9qFjG9eJRD2Zq8VdVAu5nIZSAN0OY7sJqRaGnwZeHV7a6IizGFXNJ6fIQ5vacw+sUvIjPxAesnsK97edrEvJzENw3jtlqXMaUPIpgRhxu5OSx+q5hakzb48VMPZ40d3+37QJTzZk7RFyqteciXLtJPbczEUF8kJqrDnn7EvC6rqCtL9fW3v9jJ97W4XL1afyOeTwM7K/En1jAOzwvaUKwwtPXhkkTb7KzJ47sK+7FdHYt7mIa02c3H8XVZJb4WUbu2XbM+Xn/cCerZKoHvwkyXuFnzGfj0RHcQwhvcasL8/vT8ABTeIInQz7MF+BdanfRVmOsZqSmvSvgOJqf2aWxmVgYq0BIL8JkYRUWqWcCkxp+wmpLSQ9mLyKY1o0VvCyso2NrF9PL7plWTq2XyMVTW5jaOziLOng67vwPLYuHEA==</span><br><span class="line"></span><br><span class="line">pubkey key b: </span><br><span class="line">eJx1kgd0E0cQhm0Dxhxgeu/dNIErkO5ASIhjkkxCohRyOUtr3WHp5H/vJCCJE1IWQXrvvffeO+m999577z1Z7dp3B+/l6b3Vm/<span class="number">2</span>+mZ2b3TVlCc9KsVgmm8ylmRfLs4Sf5aYMXTPJXI8ZObfdSbSlmZmvNlBSpXXP57mEn+Ms1moVE1YbKeYy7iTMztjsSjNQ+r856Wy2LdduptLZFittoCxulJSULOaMNatu0E2gO6FHk9FUuhblVXZplV0Wr5TOEtdnKcalRo6bQk+BCkIvu1wfxOWeF3O0Y2SsNmZ2BTDiZTK/oRq9BfoQ+nagMl4hdxKWFGRP6Nc5D8dLxBJWOm0UFzPDfDubNNDf3uS36aflXAc5ZnLWzpnHXN/ynawrZ8hZMpeQwxigEzqPc+TEM1YqY3mm5SZNK5l0fCfPTL1nNKu/RjfZ2An0hoGB0zswqIDBhCHx3rJ7c6Xj26a1yslmMDTeR+4scmRPTkuumIVhBQwnjLCHxgdJ1FWs0fOyCcdSxsgCRhFGb2IszGYyOV8bYwoYSxgnjcqIscx1fCuN8QVMIEyUsNhNtPCkAiYTpkjSL5K2xM0z7jFMLWAaoUrSckk7i00vYAZhptysUB+Sdzw5Q8wqYDYh1nlGtLU5BcwlVHs+agi1TTXrl/qo60C9jwbCvOWYXxV9F62OPEbeUPSRFN+70Vy84AW2fiF1rdhMYHPCFnbwZLYU2IqwtV1bwDaERjtw67GtwELCIlvB7QiLA1gNbC+wA2GJhjsSmgJY42MngWbCUg13JuwSwNokdhUgwm4a7k5YFpZdgD0E9iTENdyLsHeYCewjsC9huYb7EUwFS4vdYn8Bi9CiWYKQDBNbwARaCSkNbYITHulhhUAbIa1hhuAGVW1kBdoJ0IwTvDAxA18gR8hruJKwKhxeHVYLHEA4UMODCB1hPxYOFjiEsEbDQwmHhWV9HC5wBEFouJZQCGD9PKwTWE84UsOjCEeHZ67AMQLHEo7T8HjCCeGdVONEgZMIJ2t4CuHUENo4TeB0whkankk4K5p5tsA5hHM1PI9wfjCgJC4QuJBwkWYXEy4J+wEuFbiMcLmGVxCuDBLbcZXA1YRrNLuWcF2YmMf1AjcQbtTwJsLNQeJc3CJwK+E2zW4n3BEmpnGnwF2EuzW8h3Bv+B1tuE/gfsIGDR8gPBheSQoPCTxMeETDRwmPhWUdPC7wBOFJDZ8iPB1mNuAZgWcJz2n4POGF6JkvCrxEeFnDVwivhjedxWsCrxPe0PBNwlthpou3Bd4hvKvhe4T3wzMdfCDwIeEjDT8mfBK+EYZPBT4jfK7hF4QvwzPT+Erga8I3Gn5L+C76nd8L/ED4UcOfCD+HmfPxi8CvhN80/J3wR9htA/4U+Ivwt4b/EP4NM9t5ibw5wUvlSrxMrsri3VTcvRh33e4C3kOp5Qr1DNQKFffqUtUQarmh3N6K9QncviqujLr1Od5Puf0VGxC4A1U8KOrWtfPByh2i2NDAHabi4Ru5DXyEckcqNipwR6t4TPTTavlYpY5TaHygTlDxxGjZmhSfpNzJik0J3KkqnhYt6/EqpU5XaEagzlTxrI2mUMdnKzem2JzAnavi6o2m6/Ea5dYqVhe49SpukCtrqmnasM7n89TOfLnG/gOGSvDo</span><br><span class="line"></span><br><span class="line">cipher: </span><br><span class="line">eJx0nQd0VFXXhum9d7CACkonnURFOkjHURApQnovdyehqFQNRUVA6aACgqJUQQWlSBULUuyNYgVEEaQqCN/MM5k9d2etb/1r5fuf8z773HPPPncyaTihxDCnWNP43NjkxNaZ2Qn5GYm5rUcmxudly3AvZg1PSMzKTayQn5WTGp+ekTh8ZGgFp3ihnpsn+fF5+ZLYOinWVzCmQnJiVqKkxg8v5OGBsgpOif9bk5GdnZ6fMzw5IzsuNqOCU3JQhWLFinWTxMQ+rMYpVeCU9jhlelXoVXyyU7ZpSommKSUHVfE6PbLyEpMTxat5UrOSnXIFTnmPUyGlrP9C4h3LbZ3qdypkxqYnDg+AU3FQCW99VKhTqcCp7HGqjHWqDirnHYmP9QreNTnVCvcjNTe+dXxsRkYF34fhmYl5KdkJFZzqKUX+r+it5WelOvmJwyUxRxJzE7PyYvNSs7O8eyiJCfnx3s2o4S8ovFyqd8czY5MzY3OHx2YlDI9NSEjNSx2ZONw/VqEP/9MxK6FjYeAfqODUbDbWqTXFqe1x6gyq6F398FGpeSnDY0enZmc6dQdV8o50SfWuKTUu31fl1Jvi1Pc4DVLqDqrpjQKTdczNzY5PjcW4aYpzs8e5pYjROTszMz/Pb9w6xWnocRp5jSouY0BWal5shnPbFOd2j3OHN/Stxj1x4ylOE49zpzep6irrkTUyUXITnbumOE09TjNvWsabFk7WfIrTwuO09A6W40ZGpuZ699BpNcVp7XHaFF7DvbSQKU6oxwnLzXPCPU5ErwrT+uY5kWOdqDynrceJHubENHWfi6RU72W8HXIfEt95r9DH1+C7U/wnJDTbuafAudfjtEvRI3NfgdPe43RIiZjidPQ4nVLUdZzOBU4Xj9M1hbCbx+keDNOc+wucHh6npz/s5XF6axie6fQpcPp6nH7+sL/HeYCwuDcUx1PgPOhxHvJnAzzOwOCsYc7DBc4gj/OIPxzscYYEZ013hhY4wzzOo/5wuMcZoWFkmhNb4MR5nHh/mOBxEjWMiHWSCpxkj5PiD1M9TlpwWsdJL3AyPE6mP8zyONmJ3mdz59Q8J8fjOMFL5DpS4OR6nDy/mO9xRk52RqUUb5ri7cbopiqGRTpjCpzHPM7jfvEJjzPWF6Z4b3ycxxnvH53gcSYGbzzJmVTgPOlxnvKHBR5nsu5YvjOlwJnqcab5s6c9zjPBa+U7zxY40z3Oc/5whseZGZw10plV4DzvcV7wh7M9zhx3k+YWOPM8znx/uMDjLAxOm+QsKnAWe5wX/eFLHudlXU+es6TAWepxlvmzVzzOcvesKwqcVz3Oa/5wpcd5PbCbb3icVcGexDmrC5w1HmetX1zncdZPdt4s3M0NTfVq6c7GAuctj/O233vH42wK3mCUs7nAedfjvOcPt3icrcErZDnbCpztHud9f7jD4+wMhsnOrgJnt8fZ4w/3epwP9JIJzr4C50OP85E/+9jjfKJZirO/wPnU4xzwZwc9zqHgcpKdwwXOZx7nc3/4hcf5MhjGOl8VOF97nG/84bce57tgmOB8X+D84HGO+MOjHudYMMx3jhc4P3qcn/zhzx7nl8Ce/upxftO1jXROFDgnPc4pv/e7xzk92fmjcEv/DG5ptnOmwPnL45z1e+c8zt+cT++dnfc4F/yjFz3OpeB2pTqXC5wrHucff/ivx7kaPCziXCtw/vM41/3hDY8U815GL5coxb3/UyAlvB89UtIX+TwpBZcOqP59kDK4ZcnKqVseruB2w0Qq4lYiq6xuFbiq2w1PkGq41clqqFsTruVebrTURq1DVFfVenB9M22YNMC9iexmdW+Bb/V+LGyUNGSkkbs6Ik9uo/p2sju0ujHcxPtxstzpG6WDcpf3/w2+ykSGSlOqm2E31+oWcEuzVVHSCrc1WRt1Q+BQ04JECcMNJ4tQNxKOMvefL21xo8li1L0bvse9rWlyL2o7ovtUbQ93KFRT9hVIR0Y6qdEZ7mIWmSVdma0bWXd174d7uN3IMOmJ24ust7p94L7mhnKkH25/sgfU9cAPmjWEyUO4A8gGqvswPMjV/EcYGezejhgZQvFQomFa/Cg8nN6PCPY+1vQ+NE/iqI7HTtDqRDjJ9N6RZNwUslR10+B0cyJjJQM3kyxL3Ww4x7hp4uAKWa66eXC+2dYMGYk7imy0umPgx8y2hsrjuE+QjVV3HDzerCFfJuBOJJuk7pPwU4Vumv+BLmBwskpT4KlmwiyZhvs02TPqPgtPN+cqXp7DnUE2U91Z8POu/r/AyGzTlpEyh+q5ZPO0ej68gAOwMHgAFtmHP1kWU/0i9kta/TK8xFwpXJbiLiN7Rd3l8Aqz+fHyKu5rZCvVfR1+w+xVpKzCXU22Rt218DrjRsl63DfJNqi7EX7LrCFV3sZ9h2yTupvhd40bI+/hbiHbqu42eLtZQ5K8j7uDbKe6u+DdpreRsgd3L9kH6u6DPzSHO1M+wv2Y7BN198Ofus7BAUYOmu7EyCGqD5N9ptWfw19wDr4MnoOvzDmIyJSvqf4G+1ut/g7+3qwzT37APUJ2VN1j8PGA6/3fYrHyI+pPRD+r+gv8q7mBOPkN9wTZSXVPwb+7p82U06h/EP2p6hn4L9OBRDmLe47sb3XPwxeMmyIXcS+RXVb3CvyP2YU4+Rf3Ktk1df+Dr7uXGyU3UIuV8EXFSwTUEnDJEu6DGC6lSvjc0mRl1C0LlysRPATlGalQwnWhDKlIcSWiylpcBa5awncGqpXQM1C9hPlkECU1qK6JXUura8N13MuMjJG6uPXI6qvbAL7JuHlyM+4tZLeq2xBuZG4/WW7DvZ3sDnUbw03cblia3Il7F1lTdZvBzc288dICtyVZK3Vbw23cbniShOCGkoWpGw5HmDWkSyRuFFlbdaPhGLMPUXI37j1k96rbDr7PzJsi7XE7kHVUtxPc2XUMujDS1dxtgnSjujvZ/VrdA+7JOegVPAe9zTnwfkLuQ3Vf7H5a3R9+oEgPPLgPkj2k7gB4oNnXUHkYdxDZI+oOhoeYO3BkKO4wskfVHQ6PKBF8lxfLSJwa8XCCmS1WEpktiSxZ3RQ41XQpTNJw08ky1M2Es8wd5Us2bg6Zo67AuWanoiUPN59spLqj4NFm3lQZg/sY2ePqPgGPdXV/HCPjTXWCTKB6ItkkrX4SforuFwS7P9l0PzxGplA9FXuaVj8NP+O+UkSyPIs7new5dWfAM40bI7Nwnyd7Qd3Z8BzjZstc3Hlk89VdAC80/QqXRbiLyV5U9yX45YDre3lsK0tQlxItU/UVeLnZxGxZgfsq2WvqroRfN26MvIG7imy1umvgtcaNlnW468neVHcDvNFsQ4S8hfs22TvqboI3u47Bu4y8ZzYmW7ZQvZVsm1Zvh9/nGOwIHoOd5hh4X9h2Ub0be49W74U/MEc7Rfbhfkj2kbofw5+YVaXJftxPyQ6oexA+ZPYqRQ7jfkb2ubpfwF8aN12+wv2a7Bt1v4W/M25b+R73B7Ij6h6FjxW6KUsK5DgjP6rxE/yz+1Clyi9M9ivRb6qegE+61RA5hfo70WlV/4D/NHuaJ2dw/yI7q+<span class="number">45</span>+G9X788zcsFnnJ4sF4MdvaQd9V08Vy4z4RX0f3TCf+GrZoOS5Rruf2TX1b0BFyvpXqj367aSfFemJG9mSgbcUnBptxsaKWVwy5KVU7c8XMHter8qqIhbiayyulXgqm7X+3pZDbc6WQ11a8K1zHojpDZuHbK66taD65s1xEkD3JvIblb3FvhWM2+uNMRtRHaburfDdxS6hV9CNmawiUp3wneVDHa1KSPNzG2KNOcSLchaanUruHVJ3xPdpqT2P6SkeaITJJTqMOxwrY6AI82V0iQKty1ZtLox8N3mxtPkHtx7ydqpex/c3rgJ0gG3I1kndTvDXcwaHOmK242su7r3wz3crveTQE/cXmS91e0D9zVuivTD7U/2gLoe+EHjxshDuAPIBqr7MDzIrDdFHsEdTDZE3aHwMDNvqjyKO5xshLqxcJzrHMQzkmAeo3xJpDqJLFmrU+BUzkFa8Byk23OQKRlUZ2JnaXU2nGPWGSEOrpDlqpsH55tVxcpI3FFko9UdAz9W5MF6HPcJsrHqjoPHm31NlAm4E8kmqfsk/JRZb6IU4E4mm6LuVHia240KkadxnyF7Vt3p8HPm3kJlBu5MslnqPg+/YNaQLLNx55DNVXcePN88D/myAHch2SJ1F8Mvus7BS4y8HHgZ8X9BuYTBpVq2DH6FA7A8eABWmAPgfYf7Khd9DXulVr8Ov1GkqatwV5OtUXctvM64UbIe902yDepuhN8yN54tb+O+Q7ZJ3c3wu2beRHkPdwvZVnW3wduNK/I+7g6ynerugncHXN8nxDjZg7qX6ANV98EfmvOaKR/hfkz2ibr74U/d00bIAdSDRIdUPQx/Fmig/53o5wx+odKX8Feuvn/NyDfej2n+F/hvg339zvTV97aGK/9AyRGd9Ch8zNxQrBzH/ZHsJ3V/hn8pdFPOeN/XMPKbGifgk6abEXKK2X4nO63uH/CfgdmmFMgZRv5S4yx8zjxAbeVvZjtPdkHdi/Alcx+Jchn3Ctk/6v4LXzVnI02u4f5Hdl3dG3CxUu55w6V4Kd7VlOJdTSl9VwOXdruRI6UMblmycuqWhyuUCjazIiOVTHW0VKa6CllVra4GVy/l63mNUtrzmqVMz9OlFtW1setodV24nrmnHKmP24DsJnVvhm9xu6ExcituQ7JG6t4G327uQOQO3MZkTdS9E76r0E3zf2uqKYPNVGoOt3BPGBYlLZmwFVlrddvAIcbNl1DcMLJwdSPgSHNTkRKF25YsWt0Y+O6A63uKk+Ue1HuJ2ql6H9ze7GuadMDtSNZJ3c5wF1f/uzLSzVSHSneq7yfrodU94V70v3ew/31M/71PXl+q+2H31+oHYI/7lsLkQdSHiAaoOhB+2OxqqAzCfYRssLpD4KFFOjAM91Gy4eqOgGMD7fe/8Y1jMF6lBDixyMWTmDCZLEXdVDjNnL18ScfNIMtUNwvONm6e5OA6ZKJuLpzndsNDJB93JNkodUfDY8y8MfIY7uNkT6g7Fh7n6v94RiaYu82UiVRPIntSq5+CC+j/5GD/pwT6X/gWYCraNC17Gn6myCY9yyWmkz2n7gx4pnlGkmQW7vNkL6g7G55jNilF5uLOI5uv7gJ4oZk3XRbhLiZ7Ud2X4JfNeh1ZgruUbJm6r8DLzfZlywrcV8leU3cl/Lr7AXDkDdRVRKtVXQOvNbeWJutw15O9qe4GeGORbXgL922yd9TdBG929f9dRt4z1cmyheqtZNu0ejv8Pv3fEez/Tvv8Z8suqndj79HqvfAH5ko5sg/3Q7KP1P0Y/iTwoPq/TbCfwU9VOgAfDEj+n78cYvCwSp/BnxdKvu/OfsHIl2p8BX/tbkuWfMOyviX6TtXv4R/MLeTKEdyjZMfUPQ7/aE7RSPkJ92eyX9T9Ff6tyLwncE+SnVL3d/i0241IkD9w/yQ7o+5f8FlXu88x8re5Up6cp/oC2UWtvgRfpt1Xgu3+x7Q7Ilf+pfoq9jWt/g++bq6UJDdwi5X2ZcVLB9wScMnS5tNyKQZLq1QGLlva/ahlSLnSPrc8WQV1K8KVStuLV8atQlZV3Wpw9UI3xVMgNRipqUYtuHZgef5XuToM1lWpHlzfXDJeGnDJm8huVvcW+FZzK4nSELcR2W3q3g7f4XYjsqQxbhOyO9W9C25aOtjvZow0d1d7vyBpQXVLslZa3RpuU9rX75DS2u/Q0ubxFgmjOhw7Qqsj4Shz/yHSFjeaLEbdu+F73K73FfZe3HZk96nbHu5g9kqkI24nss7qdoG7GjdauuF2J7tf3R5wT7OvMdILtzdZH3X7wv3MveVLf9wHyDzqPgg/ZNw4GYA7kOxhdQfBj5j1Jstg3CFkQ9UdBj9q1hsrw3FHkMWqGwfHu85BAiOJ5hxESBLVyWQpWp0Kp3EO0oPnIMOcg4gUyaQ6Cztbq3Ngx/Q2WgQ3lyxP3Xx4pNmrLBmFO5psjLqPwY+bebPkCdyxZOPUHQ9PMPPmyETcSWRPqvsUXGB6ECKTcaeQTVV3Gvy06UGGPIP7LNl0dZ+DZ5gdT5WZuLPInlf3BXh24AXG//o3h8G5Ks2D55sJQ2QBEy4kW6TuYvhF1wF4iZGXzdITZAnVS8mWafUr8HIOwIrgAXg1cAB8XzW/hrNSa16H3wjcgv8X4lYxuFqlNfBacwsi61jEerI31d0AbzQLzpG3cN8me0fdTfDmIq8R7+K+R7ZF3a3wNnM2QmU77vtkO9TdCe8yZ26k7MbdQ7ZX3Q/gfcbNlA9xPyL7WN1P4P1mDbnyKe4BsoPqHoIPm3vLkc9wPyf7Qt0v4a9cbf+akW8CbfH/sOdbBr/Tsu/hH+j3kWC/j5oHPjxMjnHR49g/avVP8M+Fl0jZWCC/MPKrGr/BJ0zb28pJZjtF9ru6p+E/Am5xjsifqGeI/lL1LHzOTJsvf+OeJ7ug7kX4UpFdvIx7hewfdf+Fr5ruxMo13P/Irqt7Ay5WpvDmTxRI8TK+kRJlAkZJuFQZ+7m+dBnfbGXIyqpbDi5v3ASpgFuRrJK6leEqZYK9rspINXd1aKZUp7oGWU2trgXXLuNreZ0y2vK6ZUzLM6Qe1fWxG2j1TfDN7it5Px/cgnsrWUN1G8G3mXtKldtx7yBrrG4T+E4zb4bchduUrJm6zeEWxs2TlrityFqr2wYOcbve9yahuGFk4epGwJFl7GGNwm1LFq1uDHy3241Mkntw7yVrp+59cHuzhgjpgNuRrJO6neEubjcqRLridiPrru79cA/XOejJSC+zM5nSm+o+ZH21uh/cn3PwQPAceALnoPBLrwfRHtKyAfBA09R0eZhLDCJ7RN3B8BCzSZkyFHcY2aPqDodHmHkjJBY3jixe3QQ40dxmsiThJpOlqJsKpxk3UdJxM8gy1c2Cs02j4iUH1yETdXPhPHNY4iUfdyTZKHVHw2PMGhx5DPdxsifUHQuPM3uWLeNxJ5BNVHcS/KTrADzFSIG5g1CZTPUUsqlaPQ1+mgPwTPAAPKsHwP8Niuloz2nZDHimuRmRWVziebIX1J0NzzFurszFnUc2X90F8EJzAKJlEe5ishfVfQl+2WxSiizBXUq2TN1X4OVmDamyAvdVstfUXQm/brYvTt7AXUW2Wt018Noywdf/dYysV+NNeIO5o1jZyGxvkb2t7jvwJnOc4mQz7rtk76m7Bd7qavs2Rrab6jx5n+odZDu1ehe8m7bvCbZ9bxnztV6sfED1PuwPtfoj+GOz8wnyCe5+sk/VPQAfNPefI4dwD5N9pu7n8BfmDhLkS9yvyL5W9xv4W9OlfPkO93uyH9Q9Ah8NdGlJgRxj5LgaP8I/mTvKk5+Z7ReyX9X9DT5hzlKcnMQ9Rfa7uqfhP8wqY+RP3DNkf6l7Fj5ndipZ/sY9T3ZB3YvwJVf3LzNypbA6zf9Lzv8w+K+WXYWv0fb/gm2/rk+<span class="number">7</span>/1viN9CKlQ2UFS/Le5qy7t0JlZJl+TYNWWl1y8BljZsl5XDLk1VQtyJcye2GZktl3CpkVdWtBlcva/tdA7cmWS11a8N1jBsndXHrkdVXtwF8k9uNyJabcW8hu1XdhnAjs94QuQ33drI71G0MNzFryJE7ce8ia6puM7i5mTdaWuC2JGulbmu4Tdlg50MYCS2s9v2ANIyRcK2JgCPL+toeVVbb3ras+SF8tkRzxRjsu7X6Hvhes0Pp0g73PrL26naAO5o7caQTbmeyLup2hbsZN166495P1kPdnnAvs5sivXH7kPVVtx/c3+2GxckDuB6yB9V9CB5Q5AQOxH2YbJC6j8CDzclOliG4Q8mGqfsoPNysIVpG4MaSxakbDycU2d9E3CSyZHVT4FRX99MYSTdXCpcMqjPJsrQ6G87hHDjBcyCBc5Dm/wljLlqeluXDI80mZcooLjGabIy6j8GPm0alyxO4Y8nGqTsenlBkkybiTiJ7Ut2n4AKz+fkyGXcK2VR1p8FPmzUkyjO4z5JNV/c5eIZZQ6TMxJ1F9ry6L8CzzbyRMgd3Ltk8defDCwrdNP+fiS5kcJFKi+EXA5L/+z4vMfiySkvgpa6WL2PklSJ7sZx1rCB7Vatfg1fS8teDLX+jrP2Z3Sq01Vq2Bl5rzmSIrOMS68neVHcDvNEcjzR5C/dtsnfU3QRvNm60vIv7HtkWdbfC20xrcmQ77vtkO9TdCe8yrYmV3bh7yPaq+wG8r9D1/UjoQ0Y+UuNj+JOA4fG+q2HkUzUOwAcDnfN/g+IQg4dV+gz+3PQpXr5gUV+SfaXu1/A3ri5/y8h35paS5HuqfyA7otVH4WN0+Xiwyz+WNW/nkuQnqn/G/kWrf4V/C9yM/5eHTzB4UqVT8O9mOY6cZsI/yP5U9wz8lzk9EXIW9xzZ3+qehy+YExEiF3EvkV1W9wr8j1lDrvyLe5Xsmrr/wdcDN+U/5jcYLFZO39iU441NOfu2r2Q53tiQlVa3DFzW7UZESTnc8mQV1K0IVzJumlTGrUJWVd1qcPVywc7XYKRmYXWa/2eRtRisrWV14LrlfC2vV05bXr+c+Q5OkjTgojdh36zVt8C3uhfofdlriNuI7DZ1b4fvCLjF+dzbGLUJ0Z2q3gU3NdPGSzPc5mQt1G0Jt3K7ofnSGrcNWYi6oXCYcdMkHDeCLFLdKLit2ftIicaNIbtb3Xvge91ueLa0w72PrL26HeCOxs2STridybqo2xXuZs5VrHTHvZ+sh7o94V6u/vdmpI+5A5G+VPcj66/VD8AejsGDwWPwkDkGEY4MoHog9sNaPQh+xFwpUQbjDiEbqu4w+FFz/ykyHHcEWay6cXC86VeUJOAmkiWpmwynmHnTJBU3jSxd3Qw4s8i+ZuFmk+Wo68Bi3LaSi5tHlq/uSHiUObfJMhp3DNlj6j4OP2HckTIWdxzZeHUnwBMDT7L/t50mMfikSk/BBa4DMJmRKWZLwmUql5hG9rRWPwM/ywGYHjwAz5Ur8gu2M6ieiT1Lq5+HXzCblCOzceeQzVV3Hjzf3HiiLMBdSLZI3cXwi+ZgjZSXcF8mW6LuUniZudt0eQV3OdkKdV+FXzPrjZeVuK+TvaHuKni1WUO8rMFdS7ZO3fXwm+bAJsgG3I1kb6n7NvyOWYMjm3A3k72r7nvwFrNnYbIVdxvZdnXfh3e4zsFORnZ5P6b5v0W7O9jgPYEGF/7e7l7cD3S2ffCHZlej5COu/DHZJ+ruhz81d58qB3APkh1S9zD8WZHj/znuF2RfqvsV/HWRx/Ub3G/JvlP3e/gHM2+GHME9SnZM3ePwj8aNkZ9wfyb7Rd1f4d/MPoTJCdyTZKfU/R0+beaNkD9w/yQ7o+5f8Fkzb56cw/2b7Ly6F+CLrs5eYuSyuVKqXKH6H7J/tfoqfI0n/L/gAbhunvDwfLlBdbHyPrt4+UB1CbhkeXcPEqVUeZ9bmqyMumXhcoWu7/tk5RmpoEZFuFLA8L4zrsxIFTWqwtXc14vIlepcrwZZTXVrwbXLmzeedRisq1I9uL57wtA8acCEN5HdrO4t8K3mZkOkIW4jstvUvR2+o7w9RI1xm5Ddqe5dcFO36/3yohluc7IW6raEW5UPNrs1I20C1b43UPESQnEoUZgWh8MR5X29jiyvvY4qb3odIW2pjsaO0eq74XvMMqPkXtx2ZPep2x7uYLZKpCNuJ7LO6naBu5qeJkk33O5k96vbA+5p3BDphdubrI+6feF+gf77X8j6M/iASh74QdOnbHmICQeQDVT3YXiQ2YBIeQR3MNkQdYfCw4wbI4/iDicboW4sHGfWkCvxuAlkieomwcmu/qcwkur9mOZ/v54W7Gy66az381MGk2ZSkqWTZsM55iEIEQdXyHLVzYPzTWezZCTuKLLR6o6BHyvSrcdxnyAbq+44eLzt1gQGJ6o0CX7SLDRJnmLCArLJ6k6Bp5qFhsk03KfJnlH3WXi6WWimPIc7g2ymurPg540r8gLubLI56s6F55k1pMh83AVkC9VdBC92dfZFRl4yZyhDXqZ6CdlSrV4Gv8KjvTx4AFaYA+Ddq1epfg17pVa/Dr9RZK9W4a4mW6PuWnid6UGCrMd9k2yDuhvht8wdxMvbuO+QbVJ3M/yuWUNbeQ93C9lWdbfB240bLe/j7iDbqe4ueHfgYPlfGfcwuFelD+B9pqmx8iHuR2Qfq/sJvN9cPF8+xT1AdlDdQ/Bh82gny2e4n5N9oe6X8FeuA/A1I9+YapFvqf6O7Hut/gE+wgE4GjwAx8wB8H5aOU71j9g/afXP8C+mURHyK+5vZCfUPQmfMgcgXn7HPU32h7p/wmfMHWTKX7hnyc6p+zd83qwhWS7gXiS7pO5l+IpZQ4j8g/sv2VV1r8H/mTVEyHXcG2TFKgTc4hV8XKKC+xxES8kKfMuGrLS6ZeCyxs2VcrjlySqoWxGu5HZDY6QybhWyqupWg6tXcH3LhpGa3o9p/h+z1KqgDa5dwTQ4QeowaV1K6umk9eEG7gWEpctNuDeT3aLurXBDs9hwaYR7G9nt6t4BNzbzxkgT3DvJ7lK3KdzMbFi4NMdtQdZS3VZwa7OGNGmDG0IWqm4YHG7WkCoRuJFkUeq2haPdbmS2xODeTXaPuvfC7dxueJLch9uerIO6HeFOZr2h0hm3C1lXdbvB3V0Nvp+RHoXVhd/P78lgLy3rDfep4DsAfYMHoJ89AInSn4s+gO3R6gfhh8wmRcsA3IFkD6s7CH7E3EyiDMYdQjZU3WHwo0UOwHDcEWSx6sbB8YWu7/19AiOJaiTByWbLwySF2VLJ0tRNhzOMmyOZuFlk2ermwI5ZZYgIbi5Znrr58Mgix3QU7miyMeo+Bj9udipMnsAdSzZO3fHwBFfbJzIyyawqV56k+imyAq2eDE+h+1OD3Z9muh8RJU9T/Qz2s1o9HX7OXClBZuDOJJul7vPwC+aeHJmNO4dsrrrz4Plmr9JkAe5CskXqLoZfDBxy/zeeX2LwZZWWwEuLbOgyJnyFbLm6K+BXzU2lyWu4K8leV/cNeFXg6Hm/+FzNyBo11sLrzK3Eynpme5Nsg7ob4bcCs+0rkLcZeUeNTfBmV7PfZeQ99/ze94JbmH8r2Tat3g6/T7N3BJu9M9Dswl+13YW2W8v2wHvNLWTJB1xiH9mH6n4Ef2zcePkEdz/Zp+oegA+ajY6SQ7iHyT5T93P4C3Ob8fIl7ldkX6v7DfytafZI+Q73e7If1D0CHzVrEDmGe5zsR3V/gn827kj5BfdXst/UPQGfNG6KnML9ney0un/Af5o9y5AzuH+RnVX3HPy36wCcZ+SC2Zk4uUj1JbLLWn0F/ocD8G/wAFw1T7v3C8prVP+HfV2rb8DFKrrXGSnFK/rcEhV9WcmKAbcUXLrQLfzV+jIMllWpHFzePWFYnlRgwopkldStDFdxu5GZUhW3Gll1dWvANd1ueIrUwq1NVkfdunA9s4ZMqY/bgOwmdW+GbzFriJZbcRuSNVL3Nvh2M2+u3IHbmKyJunfCd5mNzZGmuM3ImqvbAm5ZMXgAWjHS2l3tfePchuoQslCtDoPDK/oOQERFPQCRFYv8Uk0U1W2xo7U6Br7brDNX7sG9l6yduvfB7SsGXxk7MNJRjU5wZ7ObidKF2bqSdVO3O3y/ucdk6YHbk6yXur3hPoGj539N68tgP5X6ww+Y9oSJhwkfJHtI3QHwQLPQbHkYdxDZI+oOhoeYo5cpQ3GHkT2q7nB4RGCh/s9csQzGqRQPJ7j6nchIktmLSEnmEilkqVqdBqfT74xgvzNtvxMli+ps7BytdmAxV8qSXNw8snx1R8KjzCbly2jcMWSPqfs4/ETgxv2/9jeWwXEqjYcnmJ3MkYlMOInsSXWfggvMxSNkMu4UsqnqToOfNm6sPIP7LNl0dZ+DZ5g1xMhM3Flkz6v7Ajy7yHGegzuXbJ668+EF5vSlyULcRWSL1X0Rfsl1AF5mZEng0dpfIEsZWaY1r8DLafuKYNtfDbTd9/t2r+Gs1JrX4TfMvUbLKta0mmyNumvhdcZNk/W4b5JtUHcj/FaR3ryN+w7ZJnU3w++afUmS93C3kG1Vdxu83biZ8j7uDrKd6u6Cd7vdiDzZg7uX7AN198EfmkMfKx/hfkz2ibr74U+LzHsA9yDZIXUPw5+Z9UbI57hfkH2p7lfw166ef8PIt96Paf5vtH8XbOv35mkOT5UfmPQIJUd10mPw8SI39iPuT2Q/q/sL/GuRxf6Ge4LspLqn4N9Ng1PkNO4fZH+qewb+y2xYjJzFPUf2t7rn4Qtm3iy5iHuJ7LK6V+B/zIFMln9xr5JdU/c/+LpxI+UGbrFKvqx4pYBbAi5Zyb3eKClVyeeWJiujblm4nNsNz5PyuBXIKqpbCa5cKdjgKoxUdVeH5Ug1qquT1dDqmnCtSr5zULuSnoM6lcxvTkVLXarrYdfX6gbwTZWCn5lvZuQWNW6FGxYaaf5fm2nE4G0q3Q7f4V5waIQ05pJNyO5U9y64qdv1fgZthtucrIW6LeFWgYv7f7m7NYNtVAqBQ133EMZIuBoRcKTpRqpEccm2ZNHqxsB3u92oELkH916ydureB7c3fcqTDrgdyTqp2xnu4upyV0a6mY0Il+5U30/WQ6t7wr3ocu9gl/sEulz4j0f0ReunZf3hBwL75/+mj4fBB1V6CB4Q2D9PgQxk5GE1BsGPmJWGyWBWOoRsqLrD4EfNnoyU4bgjyGLVjYPjzRPlSAJuIlmSuslwinEjJRU3jSxd3Qw406w3S7Jws8ly1HVgMeuNkVzcPLJ8dUfCo8wakmU07hiyx9R9HH7C1e+xjIyrpC/b44ONnFCpyJvuiUw6iZInddKn4IJAP/<span class="number">1</span>/2jSZwSkqTYWnmbtvK08z4TNkz6o7HX4uMKH/R2IzGJyp0iz4eXPbafICE84mm6PuXHie2c4QmY+7gGyhuovgxcaNlxdxXyJ7Wd0l8FJzUzGyDPcVsuXqroBfLXIEX8NdSfa6um/Aq8xLQ5qsxl1DtlbddfB6V0vfZGRDsKUbgy19S59N/69Fv437js62Cd4c2Hr/73e+y+B7Km2Bt7qXFxou21jedrL31d0B7wxM6P9lhF0M7lZpD7zX9DJcPmDCfWQfqvsR/LHZx3T5BHc/2afqHoAPFnmJOIR7mOwzdT+Hvyhynr7E/Yrsa3W/gb81GxAt3+F+T/aDukfgo0X6fgz3ONmP6v4E/+zq5S+M/GpWFSO/UX2C7KRWn4J/r+Rr+elgy/+oVOST7p9Un8H+S6vPwufMOhPkb9zzZBfUvQhfMuczVi7jXiH7R91/4atm3iS5hvsf2XV1b8DFKrvvNleKV+b7N5V5o1M54JaCS7vdyGQpg1uWrJy65eEKlW2/KuJWIqusbhW4aqFb+Lcb1RisrlINuKZ7wvAMqcWEtcnqqFsXrmcW6kh93AZkN6l7M3xL5eABuJWRhpX1R2CNKmtnb6tsvgeeLLcz6R2UNNZJm8B3mgVkyV24TcmaqdscbmE6ECstcVuRtVa3DRwScH2/gJMkoahhROGqRsCRZtoEicJtSxatbgx8t2lWnNyDey9ZO3Xvg9ubeSOlA25Hsk7qdoa7FLq+f22jKyPd1OgO3++eLSxZejBbT7Je6vaG+wSOif+TXl8G+6nUH37A1U4PIw8Gyvx/B/4QgwO0bCD8cGVfuwcF2/2Iabf3FXcwKxuCPVSrh8GPmv3LleG4I8hi1Y2D4805TpcE3ESyJHWT4RRzjOIkFTeNLF3dDDjTrCFNsnCzyXLUdWAxux4lubh5ZPnqjoRHmXnjZTTuGLLH1H0cfsLMGyFjcceRjVd3AjyxyCMyCfdJsqfULYAnmz2Lkym4U8mmqfs0/IzrADzLyHRTnSnPUT2DbKZWz4Kf5xy8EDwHs+05aCtzqJ6LPU+r58MLzF6JLMRdRLZY3Rfhl8xzlCMv4y4hW6ruMvgV44bJctwVZK+q+xq80vQgR17HfYNslbqr4TVFersWdx3ZenXfhDeYNWTIRty3yN5W9x14U+C5P1Egmxl5V4334C2m+7Gyldm2kW1X9314h7lylOzE3UW2W9098F5X9z9gZJ+5xwz5kOqPyD7W6k/g/XT/02D3D5juR6bKQaoPYR/W6s/gz4s8VV/gfkn2lbpfw9+YVaXLt7jfkX2v7g/wEbNXEXIU9xjZcXV/hH8ye5UrP+P+Qvarur/BJwJd2l8gJxk5pcbv8Gkz20j5g9n+JDuj7l/wWXP3CXIO92+y8+pegC+aO4qWS7iXya6o+w/8r5k3T67iXiP7T93r8A1X94tV8Y0U935M83/Du0QVbWvJKoE35v6fRJXCLV0lMFsZuGwV95UdKVfF55Ynq6BuRbiS2w2PlMq4VciqqlsNru52I9pKDdyaZLXUrQ3XqWJ3qi5uPbL66jaAbzJrSJabcW8hu1XdhnAjM2+o3IZ7O9kd6jaGmxg3Tu7EvYusqbrN4OZu1/tZqAVuS7JW6raG2xg3RUJwQ8nC1A2HI6oEOxvJSJS522xpS3U0WYxW3w3fU8V3AO4NHoB2egD83xC5D629lnWAOxZeovDLt04MdlapC9zV3EWkdGMd3cnuV7cH3NOsOVN64fYm66NuX7ifmTdV+uM+QOZR90H4ocBC/T80GsDgQJUehgeZNqbLI0w4mGyIukPhYWahUfIo7nCyEerGwnHmOOdIPG4CWaK6SXBykaOUgptKlqZuOpzhankmI1nmgUyWbKpzyBytFjiXlucFW54faDnvnSNlJMWjkEdr8Rj4MXOhDHkc9wmyseqOg8ebrcqRCbgTySap+yT8VJEntAB3MtkUdafC00z/Q+Vp3GfInlV3OvycaUGCzMCdSTZL3efhF0wLkmQ27hyyuerOg+cXmXcB7kKyReouhl80exYvL+G+TLZE3aXwMrOGEHkFdznZCnVfhV9zHYOVjLzu/Zjm/6fe3gj2d1WVIm/UVjPpGkrW6qTr4PXmxkLlTdwNZBvVfQt+2zQiR97B3US2Wd134ffMjTmyBXcr2TZ1t8PvmzXkyw7cnWS71N0N7zFrENmL+wHZPnU/hD8q0rSPcT8h26/up/ABcyDj5CDuIbLD6n4Gfx54kfH/cvMXDH6p0lfw12bCaPmGCb8l+07d7+EfXJ09wsjRIs/SMaqPk/2o1T/BP/OA/xI8AL+aAxCeJb9RfQL7pFafgn83jUqV07h/kP2p7hn4L3OyY+Qs7jmyv9U9D18wm58pF3EvkV1W9wr8j5k3Xf7FvUp2Td3/4OtmZ/LkBm6xqrzHqRpwS8Alq7oPS4SUqupzS5OVUbcsXK7QLfziuDyDFVSqCFdyTxgRL5WZsApZVXWrwdXdbmSU1MCtSVZL3dpwnarBA1CXkXrej2n+f665flXtbIOqgc/W/p893YR7s852C3xr4Fb8v0DQkMFGKt0G3+5enveV/Q6W15isibp3wndVtXveFLcZWXN1W8AtjRsrrXBbk7VRNwQONf1JkTDccLIIdSPhKLP1udIWN5osRt274XsCG1D4H1lgsJ1K98HtzcWTpQMTdiTrpG5nuEuRDeiK242su7r3wz1cvezJSC9TnS+9qe5D1ler+8H9q/Kv9wVb7qla5G9/H6T6IewBWj0QfthcKUcG4T5CNljdIfBQ4+bKMNxHyYarOwKODWyo/5eG4hiMVykBTjQbGipJTJhMlqJuKpxW6Pp+lzOdkQw1MuEs8/hkSjaz5ZA56gqca85yjuTh5pONVHcUPNrcdoqMwX2M7HF1n4DHmjU4Mg53PNkEdSfCk1xtf5KRp8yVIqWA6slkU7R6KjyNtj8dbPsztu2x8izV07Gf0+oZ8Exz/xEyC/d5shfUnQ3PMV0aKXNx55HNV3cBvNDtRoXIItzFZC+q+xL8snk+o2QJ7lKyZeq+Ai83awiXFbivkr2m7kr4dXNvYfIG7iqy1equgdcGjqn/P5G0jsH1Kr0Jb3AdvY2MvKXG2/A7pnHhsolLbiZ7V9334C2utm9lZJs5NLGyner3yXZo9U54F23fHWz7HtN27xc7e6n+AHufVn8If2S2PEY+xv2EbL+6n8IHzD2NlIO4h8gOq/sZ/HlgG/<span class="number">0</span>/SP+CwS9V+gr+2vQwW75hwm/JvlP3e/iHwIT+Lx+PMHhUpWPwcbPCKPmRCX8i+1ndX+BfjRsiv+GeIDup7in4d9OPODmN+wfZn+qegf8ybpScxT1H9re65+ELrs5fZOSS6Ycjl6m+QvaPVv8LX6Xz14Kd/890PjxMrlN9A7tYtUB18Wo+LlHNfaVIKVmNb96QlVa3DFzW7YYmSTnc8mQV1K0IV3K7kTlSGbcKWVV1q8HVq9l+1cCtSVZL3dpwHbOGfKmLW4+svroN4JuqmXcvNzN4i0q3wg3dE4ZFSSMmvI3sdnXvgBsXur7f5mjCyJ1q3AU3NdsZIc2YrTlZC3Vbwq2quf4WnJE23o9p/n+HLaSa9jO0mvkpWZKEMWk4JRE6aSQc5VpiW0ai1YiB7za7nSX3MNu9ZO3UvQ9uH5htY4F0YKSjGp3gzqbPWdKF2bqSdVO3O3y/2epk6YHbk6yXur3hPqbPidIXtx9Zf3UfgD1m06PlQdyHyAaoOxB+2Nx9WxmE+wjZYHWHwEPNGnJkGO6jZMPVHQHHupoZx0i8uVK8JFCdSJak1clwSjVfz1ODPU+rVuRHZelUZ2BnanUWnG3uP1xycB0yUTcXzjP3JJKPO5JslLqj4TGmX/HyGO7jZE+oOxYeZ+ZNkPG4E8gmqjsJftK4sfIUbgHZZHWnwFPNLo6UabhPkz2j7rPwdDNvuDyHO4Nsprqz4OeLrPcF3Nlkc9SdC88zZ9yR+bgLyBaquwhe7DoHLzLyku+h9v+X7F8ONnhJtSI/BVnKpMsoeUUnXQ6vMA125FXc18hWqvs6/Ia5sTxZhbuabI26a+F1hW7hv0C0nsE3VdoAbzSnIF3eYsK3yd5RdxO8OfB6sb9A3mXkPTW2wFtNP+NkG7NtJ3tf3R3wTnMrUbILdzfZHnX3wh8Uea734X5I9pG6H8OfmHkjZD/up2QH1D0IH3L18zAjn5lmZMnnVH9B9qVWfwV/zXP9TbDt3wba7tuh73C+15of4CNm/lA5yvzHyI6r+yP8k3HT5WfcX8h+Vfc3+IRxRU7iniL7Xd3T8B9mh6LlT9wzZH+pexY+Z3Y+T/7GPU92Qd2L8CXjilzGvUL2j7r/wlfNuYuVa7j/kV1X9wZcrLrbTZDi1X1uieq+rGT1gFsKLu12vV+2lcEtS1ZO3fJwhequ/yQmI5W8H9P8L9eVq2tbq1Q3L9f5UpVJq1FSXSetAdd0L8D7NNfCrU1WR926cD23Gxom9XEbkN2k7s3wLW43UuRW3IZkjdS9Db7drCFG7sBtTNZE3Tvhu8y8sdIUtxlZc3VbwC2L3Fsr3NZkbdQNgUPNvUVKGG44WYS6kXCUaXCatMWNJotR9274HjNvhNyL247sPnXbwx1cDe7ISCdTnS2dqe5C1lWru8Hdq/vOwf3Bc9Cj6DnoSXUv7N5a3QfuW2Sv+uH2J3tAXQ/8oOlBlDyEO4BsoLoPw4OMGyaP4A4mG6LuUHiY2dd4eRR3ONkIdWPhOLMz+RKPm0CWqG4SnGweshBJwU0lS1M3Hc4wbqJk4maRZaubAzvGTRbBzSXLUzcfHmnuLVNG4Y4mG6PuY/DjrnPwBCNjfQ+<span class="number">6</span>/z9qOi7Y4PGmwd5GTGDSiZRM0kmfhJ8qcpQKcCeTTVF3KjzNLDZLnsZ9huxZdafDz5mDEy0zcGeSzVL3efiF6uZT/GwG56g0F54XkPw/up/P4AKVFsKLzLHKlMVc9UWyl9R9GV5i7iZbluIuI3tF3eXwCuNGyKu4r5GtVPd1+A2zo/GyCnc12Rp118LrXC1dz8ib1fWfWtoQbOlG09KwDHmLSd+m5B2ddBO82WxCrryL+x7ZFnW3wtvMWc2W7bjvk+1Qdye8y7giu3H3kO1V9wN4n2l/unyI+xHZx+p+Au83bo58inuA7KC6h+DDRZ7vz3A/J/tC3S/hr0zTUuVr3G/IvlX3O/h744bID7hHyI6qeww+btYQJT/i/kT2s7q/wL+6GvwbIyd8Dfb/YsLJYINP2We2rfzOpKcp+UMn/RM+Y5+Xvxg8q9I5+G+zq+FyngkvkF1U9xJ82bgpcgX3H7J/1b0KXwtc3P8nOf8xeF2lG3CxGu4typTiNXivU4P3OjX0vQ5c2u16XwLL4JYlK6duebiC2/W+P6yIW4mssrpV4KrGzZBquNXJaqhbE65l1hsqtXHrkNVVtx5cv0awpQ0YuclUh8jNVN9CdqtWN4Qb1fB1/rYa2vnba5jvhIXIHVQ3xm6i1XfCd7mvFBkpTXGbkTVXtwXc0u2GR0gr3NZkbdQNgUMLXd93icMYCVcjAo40XYqTKGZrSxatbgx8t3HT5R7ce8naqXsf3N7cUap0wO1I1kndznAXs8+OdMXtRtZd3fvhHubu20pP3F5kvdXtA/c184r0w+1P9oC6HvhBV/cfYmSA92Oa/ycaA4Ntfdi01fuueBCTPkLJYJ10CDy0yFEdhvso2XB1R8CxZnMjJA43nixB3UQ4ybhtJRk3hSxV3TQ4vdAt/KFXBoOZKmXB2WahKZLDhA6ZqJsL55nOhko+7kiyUeqOhseYeaPkMdzHyZ5Qdyw8rsjpGo87gWyiupPgJ80piJSncAvIJqs7BZ7q6uw0Rp42d9BWnqH6WbLpWv0cPIPnembwAMyyz3WMPE/1C9iztXoOPDew+f5f5JrH4HyVFsALi9z4IiZcTPaiui/BL5ulx8oS3KVky9R9BV5e5DZX4L5K9pq6K+HXzYbGyxu4q8hWq7sGXmuaGi7rcNeTvanuBnhjYAP8P8t6i8G3VXoH3lQo+f5ufTMj76rxHrylyIO0lUtuI9uu7vvwDle/dzKyy/ck+/+Ru93BRu4xjYxMlr1M+gEl+3TSD+GPAgvw/bJZjnyM+gnRflU/hQ8Ebtn/yw0HGTyk0mH4M9ObRPmcCb8g+1Ldr+CvTW+i5Bvcb8m+U/d7+IfAxf2/1HOEwaMqHYOPm91Mkh+Z8Ceyn9X9Bf7VHM5U+Q33BNlJdU/Bvwcu7v/Lt9MM/qHSn/AZM2Gm/MWEZ8nOqfs3fN7VyguMXDTVSXKJ6stkV7T6H/hfHt2rwY5fMx0Py5H/qL6OfUOri9X0cfGahYdyivcNDiMla+obHLh0zeCxLcNIWTXKweVruj8BpUiFmr7rVSSrpG5luIrbDUuTqrjVyKqrWwOuaeZNl1q4tcnqqFsXrud2w0OlPm4DspvUvRm+pdAt/IucWxlsqFIj+Db3hJExcjsT3kHWWN0m8J3m4pFyF25TsmbqNodb1Aw2uyUjrbwf01JL+rrYuqZ2sU1N8xk4TkKYNJSSMJ00HI5wLyAiUyJxo8jaqhsNx5gOJMjduPeQ3atuO/g+c2NR0h63A1lHdTvBnc28kdIFtytZN3W7w/ebzc2UHrg9yXqp2xvuY+4tSvri9iPrr+4DsMes15EHcR8iG6DuQPhhs4Y0GYT7CNlgdYfAQwMnxv93xsMYfFSl4fAIV2djGYkLPDre96XxjCRoTSKcVNPX9uRg21NM271fI6SyrDTsdK3OgDPN7WZKFm42WY66DiyBW/C/qOcymKdSPjzS7HWKjGLC0WRj1H0Mfjxwc54CeYKRsWqMg8eb5zdHJjDbRLJJ6j4JPxVYnv8tRAGDk1WaAk81R2ykTGPCp8meUfdZeLq5uMhzuDPIZqo7C37eHIU4eQF3NtkcdefC81xdns/IAlMdIQupXkS2WKtfhF+i3y8H+73E9Ds8TZZSvQz7Fa1eDq8IbJL/m0ivMviaSivh100Ps+QNJlxFtlrdNfBaeyjWMbhepTfhDWZCRzYy4Vtkb6v7DrzJ7HqobMZ9l+w9dbfAW8288bINdzvZ++rugHeazkfILtzdZHvU3Qt/ELgp/5f4+xj8UKWP4I/NxXPlEybcT/apugfgg66WH2LksLnNOPmM6s/JvtDqL+GvaPnXwZZ/Y1vuyLdUf4f9vVb/AB8xhytVjuIeIzuu7o/wT2aTYuRn3F/IflX3N/iEcTPlJO4pst/VPQ3/YdwQ+RP3DNlf6p6Fz7nd8Dj5G/c82QV1L8KXTA8S5DLuFbJ/1P0Xvhp4tVlSINcY+U+N6/ANM1uIFKvlm614LV9WolbALQmXquXe1SgpjVuGrKy65eDytYLdr8BIRe/HtOHFfW2tVEvbWrmWeeUOkypMWpWSajppdbiGewHet2g1cWuR1Va3DlzXLNaRerj1yRqoexN8s5nXkVtwbyVrqG4j+DbjxsvtuHeQNVa3CXyn2/W+l74LtylZM3Wbwy3MekVa4rYia61uGzjE7XrfYITihpGFqxsBR5o15EgUbluyaHVj4LvNveXKPbj3krVT9z64vavBHRjpaO4gTzpR3Zmsi1Z3hbvV8p2D7sFzcL85B+HJ0oPqnti9tLo33KfwSoVfyPRlsJ9K/eEHzCZliIcJHyR7SN0B8MAiG/ow7iCyR9QdDA8xtxkmQ3GHkT2q7nB4RJEDG4sbRxavbgKcaNYgkoSbTJaibiqcViv4LiKdkQw1MuEs0/ZMyWa2HDJHXYFzjRsvebj5ZCPVHQWPdrV9DCOP+Z5r/3dCHg/28wn7XMfKWCYdR8l4nXQCPNFsaZpMwn2S7Cl1C+DJbtf7DmUK7lSyaeo+DT9jtrStPIs7new5dWfAM828mTIL93myF9SdDc8xboLMxZ1HNl/dBfDCwFn1/zcXFzG4WKUX4ZfMOcmWl5lwCdlSdZfBr5ibSpbluCvIXlX3NXil2dhoeR33DbJV6q6G17g6u5aRdeZKibKe6jfJNmj1RvgtHui3gwfgHXMAwvJkE9Wbsd/V6vfgLeb+k2Qr7jay7eq+D+8wq4qVnbi7yHaruwfeaxqVJR/g7iP7UN2P4I/NvBHyCe5+sk/VPQAfNE+MI4dwD5N9pu7n8BeBA+D/wc2XDH6l0tfwN0UW+i0Tfkf2vbo/wEeMGyVHcY+RHVf3R/gn1wvFz4z8osav8G+utp9g5KSZP11OMf/vZKe1+g/4T9p+Jtj2v0zbw1PkLNXnsP/W6vPwhSJbfhH3Etllda/A/5ijnC3/4l4lu6buf/B1055suYFbrLYvK1474JaAS9a2771L1fa5pcnKqFsWLlfoFn5BW57BCipVhCu5J4wMl8pMWIWsqrrV4OpuNyxFauDWJKulbm24Tm1zjuoyWE+l+nADczeJchMT3kx2i7q3wg1rBzvfiJHb3NXe18vbqb6DrLFWN4HvrO3r/F21tfNNa5tvmY6UZlQ3x26h1S3hVkVuvDVuG7IQdUPhsNr2PIbjRpBFqhsFtzWbnyDRuDFkd6t7D3yv2/W+O2uHex9Ze3U7wB0Dm+//6qgTg51V6gJ3NTeVJN2YsDvZ/er2gHuarRbphdubrI+6feF+5qbipD/uA2QedR+EHzLzZssA3IFkD6s7CH7EdQAGMzIkcJv+r2yHMjhMyx6Fh9P5EcHOxwY6n+b/N4ri0OK1LAFOLNLGJFaWTJaibiqcVuj6/k2RdEYy1MiEs8xsUZLNbDlkjroC55o9CZU83HyykeqOgkebHmbIGNzHyB5X9wl4rH0ixzE4XqUJ8EQzoSOTmPBJsqfULYAnm5uKlCm4U8mmqfs0/IxxM+VZ3Olkz6k7A57pavQsRp43q8qTF6ieTTZHq+fC8+j3/GC/F5gn3fvmciHVi7AXa/WL8Evm8ObIy7hLyJaquwx+xbiZshx3Bdmr6r4GrzRNDZHXcd8gW6XuaniNcXNkLe46svXqvglvMK8K0bIR9y2yt9V9B95kepAgm3HfJXtP3S3wVnNvbWUb7nay99XdAe80682VXbi7yfaouxf+wHSyrezD/ZDsI3U/hj9xnYP9jHzq/Zh2jf9W54Fggw/qA+<span class="number">3</span>/ufAh3MM622fw54Hj7/+BwBcMfqnSV/DXAcn/d1HfMPitSt/B3wekIby6/sDgEZWOwscCkv8l+DiDP6r0E/yz6UiG/MJu/Er2m7on4JNFnrZTuL+TnVb3D/hPe/EzDP6l0ln4nL2Nvxk8r9IF+GJA2sMPPS8xeFmlK/A/rkb9y8hVs9hwucZi/yO7rtU34GJ1fP0sXkf7WaKO+alIhpSs46suVcdnl64TqC4Dl63jPqj5Ug63PFkFdSvCldxuaKxUxq1CVlXdanB1txsWIzVwa5LVUrc2XKfQLfzJcF0G66lUH25gFpoqNzHhzWS3qHsr3NAstK00wr2N7HZ174AbF7mpJrh3kt2lblO4mdsNT5LmuC3IWqrbCm5t1psobXBDyELVDYPD6wQPQAQjke7qiFSJorotWbRWx8B3cwDuCR6Ae80BCM+UdlTfh91eqzvAHU2j8qQTbmeyLup2hbvVMae5O4P3q9QD7mluPER6MWFvsj7q9oX7mc1Pkf64D5B51H0QfshsSZoMwB1I9rC6g+BHzLz5Mhh3CNlQdYfBj5r1tpXhuCPIYtWNg+PNAciQBNxEsiR1k+EU4yZIKm4aWbq6GXCm6wBkMZJdR/9cJyfYWcd0NlJEmDSXkjydNB8eaTYsRUbhjiYbo+5j8ONmwzLkCdyxZOPUHQ9PMCcmRCbiTiJ7Ut2n4AKzCW1lMu4UsqnqToOfNvNGyTO4z5JNV/c5eIZx42Qm7iyy59V9AZ5tGpwgc3Dnks1Tdz68oIi7EHcR2WJ1X4RfMmuIkZdxl5AtVXcZ/IqrwcsZWWGuFCmvUv0a2Uqtfh1+gyd8VfAcrDbnICJG1lC9FnudVq+H3zS9jZQNuBvJ3lL3bfgdc2aiZRPuZrJ31X0P3mLmjZKtuNvItqv7PrzDuKmyE3cX2W5198B7zb5GyAe4+8g+VPcj+OMi5+sT3P1kn6p7AD5odjxFDuEeJvtM3c/hLwpd31+cfsnIV2p8DX9jdsqRb5ntO7Lv1f0BPuLq/lFGjvke75X8ie3xYFt/NG0NT5WfmPRnSn7RSX+FfzNbmiwncE+SnVL3d/i02VJH/sD9k+yMun/BZ802hck53L/Jzqt7Ab5oNiFDLuFeJrui7j/wv2a9SXIV9xrZf+peh2+YefOkWF2fW7yuLytRN+CWhEvVLWzVkgIpzUgZNcrC5eq6r5wt5ZmtAllFdSvBld1uWIJUwa1KVk3d6nCNusG21mSklqlOlNpU1yGrq9X14Pp1fd1vUFe7f1Nd81BnyM1U34J9q1Y3hBvVtYf5Ntzbye5QtzHcxO1G5MqduHeRNVW3Gdzc3MFIaYHbkqyVuq3hNmbeGAnBDSULUzccjjA9aCuRuFFkbdWNhmPMvPFyN+49ZPeq2w6+z+xDsrTH7UDWUd1OcGe3Gz5SuuB2Jeumbnf4/kK38Kv9Hgz2VKkX3Nt1APow0tcsJ0H6cYn+ZA9otQd+kAPwUPAADDAHIFRkINUPYw/S6kfgwaZRaTIEdyjZMHUfhYebVYXICNxYsjh14+EEs/k5koibRJasbgqcauYNlzTcdLIMdTPhLLP5UZKNm0PmqCtwrjksuZKHm082Ut1R8Ogi9zYG9zGyx9V9Ah5r3EQZhzuebIK6E+FJgQPg/xrwSQafUqkAnuw6AFMYmer9mObhj3umBTv7dN0iv87wDFd+lpLpOulz8AzTWUdm4s4ie17dF+DZZqfyZQ7uXLJ56s6HFxS6vt+0WsjIIjUWwy+aK+fIS8z2MtkSdZfCy4ybIq/gLidboe6r8GvGjZKVuK+TvaHuKni1uaMoWYO7lmyduuvhN81ZjZYNuBvJ3lL3bfgdM2+2bMLdTPauuu/BW1xt3crItrr6DxNuD7b1fdvWKNnBpDsp2aWT7ob3mMWmyl7cD8j2qfsh/JF5WEQ+xv2EbL+6n8IHzI2FykHcQ2SH1f0M/rzIw/0F7pdkX6n7NfxN4AHwf8PnWwa/U+l7+AfT2ZFyhAmPkh1T9zj8o7mpZPkJ92eyX9T9Ff7NuKFyAvck2Sl1f4dPmw0IkT9w/yQ7o+5f8FlXZ88x8ndd/YH2+WBnL5jOer8yvciklyi5rJNegf8xuxor/+JeJbum7n/wdbNhiXIDt1g9X1a8XsAtAZesZ98Flarnc0uTlVG3LFzO7XrfXZXHrUBWUd1KcGW3GxktVXCrklVTtzpcw6xBpCZuLbLa6taB6xa6hf/QTT0G66vUAL7JPaH389bNTHgL2a3qNoQbGTdLbsO9newOdRvDTeoFO3snI3d5P6b5v3RqWk8726xe4Lud/s/szXFb6Gwt4VZmO1OlNVduQxaibigcVsQNx40gi1Q3Cm5rtj5HonFjyO5W9x74XjNvW2mHex9Ze3U7wB2NGy+dcDuTdVG3K9zN7XpfXLrj3k/WQ92ecC/TgXzpjduHrK+<span class="number">6</span>/eD+gfb7/8HJBxj0qPQg/JDZgDgZwIQDyR5WdxD8iKulgxkZ4mup/5cPhgZbOqye+eWDBHmUSYdTMkInjYXjzALaSjxuAlmiuklwsjn8jqTgppKlqZsOZ5idaiuZuFlk2ermwI5ZQ6wIbi5Znrr58EjTWUdG4Y4mG6PuY/DjprOJ8gTuWLJx6o6HJ5j1pshE3ElkT6r7FFxQ5BRMxp1CNlXdafDTxs2VZ3CfJZuu7nPwDFeDZzIyy10dFSLPU/0C2WytngPPrec7B/OC52C+Ptr+n9gvQFuoZYvgxYFj6v/3wV9k8CWVXoaXmJ1MlaWsYxnZK+ouh1eYbubJq7ivka1U93X4DXvxVQyuVmkNvNa0PEbWMeF6sjfV3QBvNG64vIX7Ntk76m6CN5vWJMm7uO+RbVF3K7wtsFD/L91tZ/B9lXbAO4u8kuxiwt1ke9TdC3/g6vU+Rj70Pcz+fzbuo2ATPzYPs/cQf8Kk+yn5VCc9AB80C4iTQ7iHyT5T93P4C7NTofIl7ldkX6v7DfytefBz5Tvc78l+UPcIfNSsIV2O4R4n+1Hdn+Cfzbw58gvur2S/qXsCPhnogP/z1CkGf1fpNPxHoeR7T/8nI2fU+As+a5oeJue45N9k59W9AF80y4uWS7iXya6o+w/8r6ufVxm5Flhw4Z+NM3hdy27Axerz06r62u8S9Yt8aVSyvq+6VH2fXbp+oLoMXLa+u4fpUg63PFkFdSvCldxuWLRUxq1CVlXdanB1M2+y1MCtSVZL3dpwnUK38Ncf6jJYT6X6cAP3hJFpchMT3kx2i7q3wg3drvctViPc28huV/cOuLGZN1Sa4N5Jdpe6TeFmxk2R5rgtyFqq2wpubTYgUtrghpCFqhsGh9d3/bSKkUiz1VESRXVbsmitjoHv5gDcEzwA95oDEJEi7ai+D7u9VneAO5q9SpFOuJ3JuqjbFe4WaJT/x4rdGbxfpR5wT3PjcdKLCXuT9VG3L9zPXDxf+uM+QOZR90H4IbP5uTIAdyDZw+oOgh8JLNT/<span class="number">8</span>/fBDA5RaSg8zFw8WR5lwuFkI9SNheOKdDMeN4EsUd0kONm4GZKCm0qWpm46nOHqfCYjWeY2kySb6hwyR6sFzqXzecHO59vOR8lIqkdhj9bqMfBj7iuF58vjuE+QjVV3HDzerCpTJuBOJJuk7pPwU+b+I6QAdzLZFHWnwtPso/80g8+o9Cw83TQqW55jwhlkM9WdBT9vHpwIeQF3NtkcdefC88xNiczHXUC2UN1F8GKzWXnyIu5LZC+ruwReajYgWpbhvkK2XN0V8KuuA/AaIyu9H9Oa8Hcerwc7+4btbJysYtLVlKzRSdfC68wCMmU97ptkG9TdCL9lNiFM3sZ9h2yTupvhd42bL+/hbiHbqu42eHuRU/A+7g6ynerugncbN1X24O4l+0DdffCH5jCEy0e4H5N9ou5++FMzb4IcwD1Idkjdw/BngZPo/+bM5wx+odKX8FeFku/vlr9m5Bs1voW/c/Xze0Z+CEzs/wX2Iwwe1bJj8HGe5B+D/f7J9jtcfmbtv2D/qtW/wSfMfWbJSdxTZL+rexr+w7ix8ifuGbK/1D0LnzNuovyNe57sgroX4UvmAcmRy7hXyP5R91/4qnlIo+Qa7n9k19W9ARdr4HZTpHgDn1uigS8r2SDgloJLu13v1zplcMuSlVO3PFyhiFsRtxJZZXWrwFXdbmja/7g66/iq6jeO609RDCSkuzvWbHSHApIi7TY2VmzwjE0QpBtppBSku7uRkkYJCUFRUqUblPjtvu/uc8+zf/Z6vb+f9/c533Oe79nOtrs7yYSbmSyLuh/CWXN7N0A2RrLntjs2B7NzkuXS2bnhPLld+yBvbt0H+XLb14bmRyug0wrChcxFEinMIYqQFVW3GFzcnEyclMAtSVZK3dJwmdzm62hZBsupVB6u4JHc7wXuw6CvSn6wv/OoKV+9AzhqIFmQuhXhYHM24RKCW4mssrpV4Krm4iZINdzqZDXUrQnXMm6s1MatQ1ZX3XpwfbPeCGmA25DsI3U/hhs5Wt6YkSYpH2Pc9/Qn3l42zW1+BOovzSjanCkttGhLuJVZQHf5FLc12WfqtoHbprquX9i2Y6S9Gh3gjqbpydKJap+ThaobBoc7Xf9g6YwbQRapbhc4yqwyVKJxY8hi1Y2Duxo3SuJxE8i6qdsdFrPebpKI24MsSd1k+Auz3ijpiduL7Et1e8N9zBYIlK9w+5L1U7c/PMDR1oGMDHIZN4bKYG9Ph5ie+oXJUCoOwx+uFUfAI81Ku8ko3K/JRqs7Bh5rrlYPGYc7nmyCuhPhSZ470P054hsGJ6s0BZ7qkdw/f5jG4HSVvoW/MytMlhkcdSbZ9+rOgmeba+kvc3Dnks1Tdz68wLhJshB3EdlidZfAS40bJctwl5OtUHclvMqsN1FW464hW6vuOni9o58bGNloPtH4yCZmbybborO3wttyu+7m7d7O78id5kWhO5n9A/Yunb0b3uO5+O5/M76XwX0q/Qjv90ju1/oeYPCgSofgwx7J/ThxhMGjKh2DfzKbp6v8zNKOk51Q9yR8ylzCivIL7mmyM+qehc/Zg//K4HmVLsC/mXs3Rn6n4EWyP9T9E77kKej+g4nLDF5R6Sp8zawwUK5T8C+yv9X9B77haPJNRm6Z2fFym9l3yO7q7HvwfZr8wNvkh/b2TpBHzH6M/URnP4Wfme0UIv/i/kf2XN0X8EvToUh5hftaHlf2eh6P+z/4jTzOC9pV3szjctORvaXu23B6p+vfRd7BfZfsPXXfhzM4Xb9Q+QA3I1kmdTPDWVLd1HfK+JDBrCplg7ObggGSg4I5yXKpmxvOY04qUPLi5iPLr24BuKDTTfnCXQi3MFkRdYvCxfI4fmvFSIk8+i/KS+bRzpbKY174GS6lKVqGKWW1aDm4vDmxBKmA60Pmq64f7G9OLE4CcAPJgtStCAebbiVKCG4lssrqVoGrmjV0k2q41clqqFsTrmXWECq1ceuQ1VW3HlzfrCFeGuA2JPtI3Y/hRsb1lca4Tcg+Ubcp3MyzY9yfzZoz2EKllnAr09mUpxwKtib7TN02cFtHZ9sx0t7VWfc7UXXwdraj6ax/gHSi6OdMCdWiYXC4WUAX6YwbQRapbhc4yp5RNIMxKsXCcebSd5euFIwnS1C3G9zdtDRcBDeRrIe6SXCy0w0Mky9we5L1UvdLuLepGyZ9cL8i66tuP7i/Wa+/DMAdSDZI3cHwEOOKDMUdRjZc3RHwyDTbdRTu12Sj1R0Dj3V0dhwj483ZhsgEZk8km6Szv4En5+G3Vt4NMDVPmtd0T2P2dOxvdfZ38AxzTl1lJu73ZLPUnQ3PMds/WObiziObr+4CeKFxA2QR7mKyJeouhZeZNUTIctwVZCvVXQWvNm6UrMFdS7ZO3fXwBnMVI2Uj7iayzepugbd6Nrf7f71uY3C7SjvgneZuiZAfKLiLbLe6e+C95gLEyD7cH8n2q3sAPujYAIcYOWxOM0iOMPso2TGd/RP8MxvguHcDnLCfAcLkJLNPYf+is0/DZzwn7n4EOcvgOZV+hc+b3ewrFyj4G9nv6l6E//AUdD/r/cngJZUuw1fs5b7K4DWVrsN/mYsQIn9z1H/Ibqh7E77lKej+HuA2g3dUugvfMz3pIvcp+IDsobqP4MfmlCPlCe5Tsmfq/gv/l2ZTPsd9QfZS3Vfwa3m9vX49r2vkfykfY9zvSfZGXm3im3nNXewj6fK6ir7FlLfzeoqmh9/Jaz/jvYv7Htn76maAP8hrL0JG3ExkmdXNAn/odH19JStuNrLs6uaAczrdwG6SCzc3WR5188L5jNtV8uMWICuobiG4cKqb+jv4IgwWVakYXNxcgGQpQcGSZKXULQ2XMScVKWVxy5GVV7cC7ON0U77J88X1I/NXNwAOdHQ2iJGKefU/ygd7OxtiOuufIJUoWpkpVbRoVbiaWUCCVMetQVZT3VpwbeP6SR3cumT11K0PN0h1XT8zacjIR2p8DDfyGM2HSGNGmqjxCdzUdDFImnG85mQt1G0JtzINCpBPcVuTfaZuG7itqRsh7XDbk3VQtyPcydSNl89xQ8nC1A2HO5u6XSQCN5Ksi7pRcLSjmTGMxLqauZN/nBDnbWZX00y/IImnaAJTumnR7rCkObFE3B5kSeomw1+kWWxP3F5kX6rbG+5jGh8hX+H2Jeunbn94QJpPFQNxB5ENVncIPNSsIVaG4Q4nG6HuSHiUWUOMfI07mmyMumPhceYODJPxuBPIJqo7Cf7GuHEyGXcK2VR1p8HTna5/N/kW9zuyGerOhL93NHgWI7NdDXa/nGCOt8Fz89qX983Dna/VFsALzSrjZRFHXky2RN2l8DLjBspy3BVkK9VdBa9OdVPf9nYNg2tVWgevt9IGBjeqtAnebI5aUbZw1K1k29TdDu/wFHT/SHsngz+otAvebRqeJHsouJdsn7o/wvs9Bd1/53mAwYMqHYIPm50ZJUcoeJTsmLo/wT87uneckROu7k3I4OreSW/3Tnm653oriF8QT2upM/BZcx6+co7D/kp2Xt0L8G9miSK/414k+0PdP+FL5oInyWXcK2RX1b0GXzduqPyF+zfZP+regG+amzJUbuHeJruj7l34nnG7yn3cB2QP1X0EPzbXwUee4D4le6buv/B/xu0iz3FfkL1U9xX8Wj7nucXI6/lc7v/yubI38nncN+F0+bxtfYuRt52zA2IlPbPfIXtXZ78Hv5+Pf1+VT7v/QT7zDBUpGZmdCTuzzs4Cf2iO5CdZcbORZVc3B5zT6fqFSi7c3GR51M0L5zNuvOTHLUBWUN1CcOFUN/X9vYswWFSlYnDxVMm1pUswUlKNUnBp5yFTvvcowyHLkpVTtzxcwXNI94usfBj0VckP9jfXJkACKBhIFqRuRTjYuEESgluJrLK6VeCqjn5XY6R6yseYjP9zNbKGt5E1bSMjpBZFazOljhatC9dzLiAwTurjNiBrqO5H8Mees3e/xLgRg41VagJ/Ys4oQZpSsBlZc3VbwC3NpfeVVrifkrVW9zO4jbkzOktb3HZk7dXtAHc0rkgn3M/JQtUNg8PNGmKlM24EWaS6XeAoUzdUonFjyGLVjYO7muuQKPG4CWTd1O0Oi6OziYz0cHXW/QveJG9nk/PZL69f4PbUar3gL80qfaQ3R+5D9pW6feF+npa6f9HTn8EBKg2EB6UpOJiCQ8iGqjsMHm5u4BAZgTuSbJS6X8OjzaUPljG4Y8nGqTsenpDGnYg7iewbdSfDU8ylF5mKO41surrfwt+luftn4M4k+17dWfBsc27dZA7uXLJ56s6HFzhaupCRRWZVXWQxs5eQLdXZy+Dl+VydX+Ht/Ep7T/vKKmavxl6js9fC69L0az3uBrKN6m6CN5tVxcoW3K1k29TdDu8w599FduL+QLZL3d3wHnNdI2Uv7j6yH9XdDx9IdV3v33+QkUNqHIaPmFV2l6NUO0b2k7o/w8edbmCSnMA9SXZK3V/g054jp3zbdoaRs2qcg3811zJGzlPtAtlv6v4OX3T0/A9G/syn/z/ukreZl00zA6LlCkWvMuWaFr0O/2UuZIj8jfsP2Q11b8K30nzOuY17h+yuuvfg+<span class="number">5473</span>/36zAcMPlTpEfzYnH20PKHgU7Jn6v4L/+e5lilfaZ8z8kKNl/Ars3/C5LX8rmqv53dl/8vvcd+A38zv7GK8pMN9i+xtddPD7zjdgDh5F/c9svfVzQB/kOqmvnQrI4OZVMoMZ8nv+NNyRrJ6prl/rpKNwew6LQecM7+r0bnya6Nz50/zG8E8rCwvdj6dnR8uYM4iRgriFiIrrG4RuKi5OiFSDLc4WQl1S8KlnG7KF9nSuGXIyqpbDi7vdP38pQKuD5mvun6wv1lvuATgBpIFqVsRDk7ToRDcSmSV1a0CVzVr8JVquNXJaqhbE66V6rr+kW5tRuqoUReuZ84+UepTrQFZQ3U/gj92tL0RI43z6wNWE29bPzFt9Q+XphRtxpTmWrQF3NK5AF9/aYX7KVlrdT+D25hTj5C2uO3I2qvbAe5oTixaOuF+ThaqbhgcblyRzrgRZJHqdoGjzHr9JBo3hixW3Ti4q3HjJR43gaybut1hMW6IJOL2IEtSNxn+wmyXrtITtxfZl+r2hvuYWyFUvsLtS9ZP3f7wAEeDBzIyKM2nmcHMHkI2VGcPg4dze4/w7oOR+dP85dsoZn+NPVpnj4HHmiPFyjjc8WQT1J0IT/J8tnH/ndI3DE5WaQo81VwkX5lGwelk36r7HTzDuD1kJu73ZLPUnQ3PMZslTObiziObr+4CeKHZsH6yCHcx2RJ1l8LLzAVIluW4K8hWqrsKXm3WECVrcNeSrVN3PbzBuIGyEXcT2WZ1t8BbHRtgGyPbzaqiZQezd5L9oLN3wbvZAHu8G2Cv3QCxso/ZP2Lv19kH4INmnV3kEO5hsiPqHoWPpentT7g/kx1X9wR80txYyXIK9xey0+qegc+afoXIOdxfyc6rewH+zdT1l99xL5L9oe6f8CVTN0gu414hu6ruNfi6uQ6R8hfu32T/qHsDvmnWIHIL9zbZHXXvwvdM3Qi5j/uA7KG6j+DHjn3whJGnKR9j3H/T+Mzb4H9tg4PlP4o+Z8oLLfoSfpWmaa8V4PGmAI83BfTxBn6zgPPEAiQd7ltkb6ubHn4n1U39pu9dBt9T6X04g7NgkI98QMGMZJnUzQxncboB3eRD3Kxk2dTNDucwCw2RnLi5yHKrmwfOa9wgyYebn6yAugXhQp6Tcv/UtDCDRVQqChdzFvSPl+IULEFWUt1ScOkC3paWYaRsyseYJzx8lyugLS1fwHwnFSUVKOrDFF8t6gf7e1bp/hFTAIOBKgXBFc0qQySYgiFkldStDFcxbpxUxa1GVl3dGnBN4/pJLdzaZHXUrQvXc7opD4T1cRuQNVT3I/hjp5uypxvhNiZrou4ncFNTN1ma4TYna6FuS7iVcSPlU9zWZJ+p2wZua7ZgrLTDbU/WQd2OcCdHZz9nJDTNGYQxO5yss86OgCML8P+rvBsgymyAgIoSzewY7FidHQd3NeusKPG4CWTd1O0Oi+lXoCTi9iBLUjcZ/sKzsdwvJOjJYC+VvoR7m9MMlz4U/Iqsr7r94P7m4BEyAHcg2SB1B8NDzH3aQ4biDiMbru4IeKRnoe6f+Y1i8GuVRsNjTOcjZCwFx5GNV3cCPNEc3Ecm4X5DNlndKfBUR+enMTLdXJLu8i2zvyObobNnwt/T+Vnezs+2t36czGH2XOx5Ons+vCDNOS3EXUS2WN0l8FJz8UNlGe5yshXqroRXGddfVuOuIVur7jp4vXGDZQPuRrJN6m6Gt6RZw1bcbWTb1d0B7zS7uof8gLuLbLe6e+C9ng3gfoXKPgZ/VGk/fMAcPEEOUvAQ2WF1j8BHzQZIlmO4P5H9rO5x+IRjA5xk5JRZejf5hdmnyc7o7LPwOTbAr94NcN6zAVJvuwtov+m03+GLnjOuzNfbPxj8U6VL8GVzFmFyhXVcJbum7nX4L7PmZPkb9x+yG+rehG+ZDe4jt3HvkN1V9x58P9V1vSzhASMP1XgEP/acivvHu08YfKrSM/hf0zw/+Y9DPid7oe5L+JU5lZRnnII84xTkGaegPuPAbxZ01u0h6XDfIntb3fTwOwUd/8KKkfdSPsa436Xv/YLawQwFPb+iTDnnDxAzaqlMcGZzWF/JwmE/JMuqbjY4u9P1C5UcuDnJcqmbG86T6rp+1pCXkXxq5IcLOKulfLEoSLVCZIXVLQIXLWge6ooxWFylEnBJZ8HAMClFwdJkZdQtC5dzur5xUh63ApmPur6wnzntOPHHDSALVDcIrug57etDJJiREDUqwZUdvavCSFVzIQKkGvWrk9XQ2TXhWgVdLa7tbXGdguZvJUKlLrPrYdfX2Q3ghuYKJchHuB+TNVK3MdzEXKEe8gluU7Jm6jaHW5hNFCctcVuRfapua/gzU7eLtMFtS9ZO3fZwB3NlEqQjbieyz9UNhcNM3XAJx+1MFqFuJNzFsTmjGIlWIwaONT33kziqdSWLVzcB7pbmqnbHFbJEdXvASY7uJzPyhTnHSOnJ7F5kX+rs3nAfuv+Vt/t9TfcDkqQfs/tjD9DZA+FBnrNuPkQGMzJEjaHwMHMNO8twqo0gG6nuKPhr43aT0bhjyMaqOw4eb/ZHoEzAnUg2Sd1v4MmmbrBMwZ1KNk3d6fC3pm6kfIc7g2ymut/Ds4wbKrNx55DNVXcePN+4IbIAdyHZInUXw0tS3dTXnyxlcJlKy+EVjravZGRVyseYGN6kb7W3n2tMP/2SZC1HXseU9Vp0A7zRc2T3W5htYnCzSlvgrWYjx8k2Cm4n26HuTvgHsxW7yS7c3WR71N0L7zNtipYfcfeTHVD3IHzIuHFyGPcI2VF1j8E/mZspUX7GPU52Qt2T8ClzbilPN7inyc6oexY+Z+rGyK+458kuqPsb/LvjRrnIyB9q/AlfcvTzMiNXXP10v1z6qref1wo6XiN0HfEvLfU3/E+ai36Dhd0ku6XubfiOOeHuchf3Htl9dR/AD03dJHmE+5jsibpP4WfGDZN/cf8je67uC/ilZ9e5X9TxisHXCnmk1wvxcFPIPsO9UcjlvkmWTt234LedbmC4pMd9h+xddd+D33e6/hUlA+4HZBnVzQRnNmsIlSy4H5JlVTcbnL2Qt585GMlpZgdJLmbnJsujs/PC+Qq52p6/kLa9QCHzrVOIFGR2IezCOrsIXNR5JF9fKYZbnKyEuiXhUub8Q6U0bhmysuqWg8s7Xb8wqYDrQ+arrh/sb9bQVQJwA8mC1K0IB5t+RUsIbiWyyupWgauauglSDbc6WQ11a8K1zLklS23cOmR11a0H1zd1k6UBbkOyj9T9GG5kOtlFGuM2IftE3aZwM8c+aM5Ii5SPMXv4NzQtvQ1u5Wlw6h/tfYrbWqt9BrcxVypW2nLkdmTt1e0AdzRnlCidcD8nC1U3DA43ZxQvnXEjyCLV7QJHmasqEo0bQxarbhzc1dT1k3jcBLJu6naHJdVN/UlHIoM9VEqCk80F6CJfULAnWS91v4R7m4UGSx/cr8j6qtsP7m+2tq8MwB1INkjdwfAQR0uHMjLMrMpHhjN7BNlInT0K/ppbe7S382PMre2XKGOZPQ57vM6eAE80FzRWJuF+QzZZ3Snw1DSbZRrudLJv1f0OnpGm7kzc78lmqTsbnmOua5zMxZ1HNl/dBfBCswlDZRHuYrIl6i6Fl6W6rm8tlzOyQo2V8CpzRjGymmpryNaquw5e76l2e4hsYGSjGpvgzWZtsbKFalvJtqm7Hd7h6PlORn5Ic3V3MXs32R6dvRfeR89/9PZ8v+m5f6wcYPZB7EM6+zB8xBwpUo7iHiP7Sd2f4eOem8j97HiCwZMqnYJ/MSceLqcpeIbsrLrn4F9Ns33kPO4Fst/U/R2+6HSDfOQP3D/JLql7Gb5i1tBFruJeI7uu7l/w32ZzBsk/uDfIbqp7C75t1hsrd3Dvkt1T9z78wKwhRB7iPiJ7rO4T+KljAzxj5F/Hdv2Pkec65wX8kra/8rb9tcKm7SHyemHXEf9X2GW/Udgz+004XWH7jPsW7ttk6dV9B37X6aY88r2H+z5ZBnU/gDM63ZTP35lwM5NlUfdDOKtZQ6Jkw81OlkPdnHAup5vydJAbNw9ZXnXzwfmdbqCvFMAtSFZI3cJwEXNuAVIUtxhZcXVLwCVN3UAphVuarIy6ZeFyxk2S8rgVyHzU9YX9Cnu7789IgLkyURLI7CCyijo7GA4p7NoHlQrrPqhc2H6xr4JWVadVg6ubE4+VGhyiJlktdWvDdQqb+74ug/VUqg83MJ2PkYYU/IjsY3UbwY1NNztLE9xPyJqq2wxu7jm4+zVdLRhsqVIr+FNzweKlNQU/I2ujblu4nXF9pT1uB7KO6naCPzcLjZdQ3DCycHU7wxFp1hCJ24UsSt1oOMbR8lhG4syGCZKuzI4nS9DZ3eDutFy8LU/0tNz19agHTpLOSYa/MP3uIj2p34vsS3V7w33sJf+Kwb4q9YP7m9MNkQEUHEg2SN3B8BBzcrEyFHcY2XB1R8AjzUKDZBTu12Sj1R0DjzV7LlHG4Y4nm6DuRHiSWa/IN7iTyaaoOxWeZuoGynTcb8m+U3cGPNOsN1i+x51FNlvdOfBcR9vnMTK/sOuVCXwfvsDbz4WFzVNbRVlE0cVMWaJFl8LLCnufRZYzskKNlfAqTz/dv+hezeAaldbC68w5R8l6DrmBbKO6m+DN5lpGyRbcrWTb1N0O7zC995GduD+Q7VJ3N7zH1A2Vvbj7yH5Udz98wFz3cDmIe4jssLpH4KPmNu4hx3B/IvtZ3ePwCbNePzmJe4rsF3VPw2cc/TzLyDlXP4e9y6+mvP08b/oZECIXKPobU37XohfhP2y3/mTwkkqX4SumW/FylYLXyK6r+xf8t3H95R/cG2Q31b0F3zYdCJY7uHfJ7ql7H35gOpAgD3EfkT1W9wn81NStKM9w/yX7T93n8AvTrXB5ifuK7LUiHvf1Ii7+XxG7a98owk9uyNKp+xb8ttN1/T9O3HfI3lX3Pfj9It7OZmDkg5SPMe6/q8pYRDubqUiaF4llpmgWpnyoRbPC2cwC4iQ7bg6ynOrmgnM73ZRvbvPg5iXLp25+uIBxfaUgbiGywuoWgYuaCxYsxXCLk5VQtyRcyqw3UUrjliErq245uHwR7wNrBUZ81PCF/cyRRfypFkAWqG4QXNHppnwTEYwbQlZJ3cpwFafrlyxVcauRVVe3BlzT0dZajNQ2RwqVOsyuS1ZPZ9eHGxRxdb+ht/sfme4HRsvHzG6E3VhnN4E/8Vyh/UOkKSPN1GgOtzBXKFZaUq0V2afqtoY/S3VTf/nbhsG2KrWD25tLEygdKNiRrJO6n8OhZhMlSxhuOFlndSPgSHPRukoX3CiyaHVj4FjjRkocbleyeHUT4G6ek3J/6uvOoKiUCPcwC02QJAomk32hbk+4l6PfXzLSu4i+M34fbyO/Mo1M+X6oL0X7MaW/Fh0ADzQLiJJBuIPJhqg7FB5mOpAgw3FHkI1UdxT8tXETZTTuGLKx6o6Dx5tbM0Am4E4km6TuN/Bks606yxTcqWTT1J0Of2vqhsp3uDPIZqr7PTzLdFZkNu4csrnqzoPnezZ/8yGygJGFaiyCF5uzD5AlVFtKtkzd5fAKR1tXMrLK1Vb3D7ZXe9u6xrY1TNZSdB1T1mvRDfBGc+rdZRPuZrIt6m6Ft5kt0Fm24+4g26nuD/AuUzdeduPuIdur7j74xzSXdD/uAbKD6h6CD5sL5itHcI+SHVP3J/hns4ZwOY57guykuqfgX0zdIDmNe4bsrLrn4F/NdUiU87gXyH5T93f4onH95A/cP8kuqXsZvuJo8FVGrhXR92677m3wX2kb/DdF/2HKDS16E75lLkKy3Ma9Q3ZX3XvwfdOIeHmA+5DskbqP4Sfm/vKTp7jPyP5V9z/4ubm4kfIC9yXZK3VfK+ri14umfjZ0v4r2fwy+UdQjvQmnK+osKPJWUX6QQ5Ze3Xfgd51uYLC8h/s+WQZ1P4AzGjdMMuFmJsui7odw1lTX9WbY2RjJrkYOOGdRbz9zMZLbrDtJ8lA/L1k+nZ0fLlDU1faCRbXthYo6vt8tjFNE5xSFiznr+4dIceqXICupbim4tOdCu98xqQyDZVUqB5d3Fkz5mleBgj5kvur6wf6eC5KyvABGAtUIgis6qwUESjDVQsgqqVsZrlLU7q+quNXIqqtbA65p2iZSC7c2WR1168L1TAsqSn3cBmQN1f0I/tisN0Aa4TYma6LuJ3BTR7ObMdLczI6QFsxuSdZKZ38Kt6bZn3mb3aao+blmN2nL7HbY7XV2B7ijp5VVuGc6Mfi5SqFwmDnxWAmnYGeyCHUj4S7mgvpIFG40WYy6sXCcOc0e0hU3nixB3W5wd+OmfKrHTSTroW4SnGzcUPkCtydZL3W/hHubzRIhfXC/Iuurbj+4vzm3rjIAdyDZIHUHw0NM3QAZijuMbLi6I+CRjg0wipGvzewgGc3sMWRjdfY4eDwbYIJ3A0wsmuZF/ZOY/Q32ZJ09BZ5qjhQm03Cnk32r7nfwDKcb5CMzcb8nm6XubHiOZ2O1Y2PNZXCeSvPhBR7J/V5uCxlcpNJieInZfYGylKMuI1uu7gp4pXG7yyrc1WRr1F0LrzPd7CzrcTeQbVR3E7zZ1I2XLbhbybapux3eYVxf2Yn7A9kudXfDexyd38vIPuds3+7yI7P3kx3Q2QfhQ3T+sLfzR0znA7rJUWYfw/5JZ/8MHzd3SaCcwD1JdkrdX+DT5lpFyxncs2Tn1P0VPp+mBxdwfyP7Xd2L8B/GjZM/cS+RXVb3CnzVrDdMruFeJ/tL3b/hf9Kc2w3cm2S31L0N3zFugNzFvUd2X90H8MM09+Uj3MdkT9R9Cj8znUyQf3H/I3uu7gv4pWMfvGLktWL61n6vF9MG/<span class="number">6</span>+Y+fGJn7xRjJ/fFOPRppin6Fvw28Wci42V9LjvkL2r7nvw+0435QE9A+4HZBnVzQRndrop36Nlwf2QLKu62eDsZg0RkgM3J1kudXPDeZxuyvdoeXHzkeVXtwBcMNVN/RP0QgwWVqkIXNRZMOWb1GIULE5WQt2ScCnjJklp3DJkZdUtB5c3bqxUwPUh81XXD/Yv5vgPVYwEmssXLkHMrkgWrLND4ErF+A9V3g1QxWyAlG84qzK7GnZ1nV0DrmmaGiW1cGuT1VG3LlzPXPx4qY/bgKyhuh/BH5vzj5BGuI3Jmqj7CdzUuAHSDLc5WQt1W8KtzBqC5FPc1mSfqdsGbmvOLVna4bYn66BuR7iTqRsnn+OGkoWpGw53NuvtIRG4kWRd1I2Co80aEiQGN5YsTt2ucLxjHyQw0s11h8/jLR67exss9g5PkESK9mBKkhZNhr8wC0iUnri9yL5UtzfcJ03TvsLtS9ZP3f7wAM/d5f5h2UAGB6k0GB5i9nG0DKXgMLLh6o6ARxo3TEbhfk02Wt0x8FjTrSQZhzuebIK6E+FJpq6ffIM7mWyKulPhacYNlOm435J9p+4MeGaanfg97iyy2erOgec6OjuPkflmtq8sYPZCskU6ezG8hDt8qXcDLDMbIOXr3HJmr8BeqbNXwavNBoiTNbhrydapux7ekGazbMTdRLZZ3S3wVrNZYmUb7nayHeruhH8wbrTswt1NtkfdvfA+c2UC5Ufc/WQH1D0IHzLrjZDDuEfIjqp7DP7J1I2Rn3GPk51Q9yR8yuyDAPkF9zTZGXXPwufMuSXLr7jnyS6o+xv8u2MfXGTkD9cdXjwb/6DK2+BLtsFd5TJFrzDlqha9Bl83i42Qv3D/JvtH3RvwzTSb9hbubbI76t6F7zld/85yH/cB2UN1H8GPTSO6yRPcp2TP1P0X/s+sN1Se474ge6nuK/i14vaB7vXi/NimuCt7o7jHfRNO53QDE+Qt3LfJ0qv7Dvxuqpv62sX3GHxfpQzwB+bgyZKRgpnIMqubBf6wuLezWRnJlvIxJvObrs5mL66dzVHcfO4OkZwUzcWU3Fo0D5zXnFG05MPNT1ZA3YJwIbNYPymMW4SsqLrF4OJO1z9BSuCWJCulbmm4jNP1i5SyuOXIyqtbAfZxur6J4ovrR+avbgAcmOq6/gAniJGKagTDIaZagFSiWmWyKupWhauZVUZIddwaZDXVrQXXNmcvUge3Llk9devDDRxtbcjIR+ZIAfIxsxuRNdbZTeBPiru639Tb/Wam+<span class="number">76</span>+0pzZLbBb6uxW8Kfm/BOkNe5nZG3UbQu3M+fURdrjdiDrqG4n+HNTN0lCccPIwtXtDEeYHdhdInG7kEWpGw3HeO4p90tcYhmMU6krHG+2abwkULAbWXd1BU40l7q79MBNIktW9wu4p1lorPTC/ZKst7p94K/SbOm+uP3I+qs7AB7o2ACDGBnsuq+fp3d1doi3s0NNZ/0DZBhFhzNlhBYdCY9Ks4CvcUeTjVF3LDzOc1Xdn6nGMzhBpYnwJHP2Kc84FJxMNkXdqfA0T0H3X29MZ/Bblb6DZ3gk99PdTAa/V2kWPNsjuX9+M4fBuSrNg+eb3RYqC1jaQrJF6i6Gl6Rp4lLcZWTL1V0BrzTXsKuswl1NtkbdtfA6RxPXM7LB1UT329Ns9DZxk21imGym6BambNWi2+DtZidHyA7cnWQ/qLsL3m0uQpDswd1Ltk/dH+H95laOkAO4B8kOqXsYPmIuQpQcxT1G9pO6P8PHzRoqygnck2Sn1P0FPp3GPYN7luycur/C540bIhdwfyP7Xd2L8B/G9Zc/cS+RXVb3Cnw1jXsN9zrZX+r+Df/jaPANRm4W1zdsvuVt8G3T4JSvE3coepcp97ToffiBaUSIPMR9RPZY3SfwU9OIQHmG+y/Zf+o+h1+YExN5ifuK7LUSHvf1Ei7+XwnnGoLljRL8LIcsnbpvwW873ZRv5dPjvkP2rrrvwe87Xd/ukgH3A7KM6maCMzvdQH/JgvshWVZ1s8HZnW6Qj+TAzUmWS93ccB5zbnGSFzcfWX51C8AFS3gbXIiRwmZ2jBRhdlGyYjq7OFyiBP+fqoTug1Il0nwHXZrZZbDL6uxycHnnkfx8pQKuD5mvun6wf6qb+geZAQwGqhQEVzRLj5ZgCoaQVVK3MlzFXPwQqYpbjay6ujXgmsYNklq4tcnqqFsXrmfcaKmP24CsobofwR8bN04a4TYma6LuJ3BTewGaMdhcpRZwS4/k/s+nrRj8VKXW8GeOlrdhpG0J/QPLdt5etvf0MvX3Ux1wO2q1TvDn5hy6SSjnEEYWrm5nOMLcSDESiduFLErdaDjGbI4EicWNI+uqbjyc4Dlt97vUdWOwu0oCJ5qC4dKDgklkyep+AfdMc1K9cL8k661uH/grU7eH9MXtR9Zf3QHwQM9C3b+8HcTgYJWGwENTJdcD/DBGhqsxAh7p6OAoRr42Oz9ARrOIMWRjdfY4eDw37QRvoyeamzagh0xi9jfYk3X2FHiq5xTcTznTGJyu0rfwd6bRETKDgjPJvld3Fjzb6aZ8mZuDO5dsnrrz4QXmWvvLQtxFZIvVXQIvNa6PLMNdTrZC3ZXwKnP5ushq3DVka9VdB68355YkG3A3km1SdzO8xawhXrbibiPbru4OeKfnwrqfDH9gcJdKu+E9js7vZWSf695dkp0/q/K2dH+JNK81OcCRDzLlkBY9DB9Js3mO4h4j+0ndn+HjplsxcgL3JNkpdX+BT6e5hc/gniU7p+6v8Hlzx0XLBdzfyH5X9yL8h+lAD/kT9xLZZXWvwFedbsrXzWu418n+Uvdv+B9zHWLlBu5Nslvq3obvmPXGy13ce2T31X0AP/R01v02Po8YfKzSE/ipo7PPGPnXnGai/MchnpO90Nkv4Vfc06+V1A3weknzxB0v/yvpmv1GSZf9ZknP7HTwWyWdR6oob+OmJ3tH3Xfh95yub7K8j5uB7AN1M8KZnK5fqGTGzUL2obpZ4WxmDZ0lO24Ospzq5oJzO92Ub2fy4OYly6dufriAqdtNCuIWIiusbhG4aEm7WYrhFicroW5JuFRJuwlL45YhK6tuObi8uWbhUgHXh8xXXT/Yv6Tjd1aMBJojxUkQsyuSBevsELhSSX5n5d0HVcw+CEySqsyuhl1dZ9eAa5p+xUst3NpkddStC9craZ5H6jPYQKWG8EemUXHyMQUbkTVWtwn8iXEjpCluM7Lm6raAW5qFRkor3E/JWqv7GdzGXL5oaYvbjqy9uh3gjmYN8dIJ93OyUHXD4HDjJkln3AiySHW7wFFmDeESjRtDFqtuHNzVsQHiGUlI+RjzjL/T6ObtbPeSaX4dLRRNZEoPLZoEJ5sL5idf4PYk66Xul3DvNHdBH9yvyPqq2w/ub3Z2FxmAO5BskLqD4SHmgsXIUNxhZMPVHQGPTPNZZhTu12Sj1R0Dj3W6/j4yDnc82QR1J8KT0uzwb3Ank01Rdyo8zbPD3f84dTqD36r0HTzDI7l/VDOTwe9VmgXPdrR0DiNzXS2NfsPV0nnels43LU353msBy1vIlEVadDG8JPXIrlcpL2VkmRrL4RXmIoqspNoqstXqroHXmh3qI+tw15NtUHcjvMlcxGjZjLuFbKu62+DtZg1dZQfuTrIf1N0F7/ZcS/c7ke1hcK9K++AfTbeDZD8FD5AdVPcQfNgsNFmO4B4lO6buT/DPxu0ux3FPkJ1U9xT8i6Ofpxk54+rn87dc/Tzr7ec5e4smy68UPc+UC1r0N/h3Tz9THvsvMvKHGn/Cl8wSfeUy1a6QXVX3Gnw9zen8hfs32T/q3oBvmhszVm7h3ia7o+5d+J6p21nu4z4ge6juI/ixqRsgT3Cfkj1T91/4P7NPouU57guyl+q+gl8rlbpP3H8z/Hop1+D/SnmkN+A3S9mvmulKudy3yN5WNz38TinHe/4x8p7LuDFU3i+lzcxQynwlDZAPqJgRP5NWzAxncR7dN1Y+xM1Klk3d7HAO4yZITtxcZLnVzQPnNWfVVfLh5icroG5BuJDTTfmmpjBuEbKi6haDi5u6flICtyRZKXVLw2VK2W1YFrccWXl1K8A+TjflAcAX14/MX90AONBchygJwq1IFqxuCFzJ1PWTyrhVyKqqWw2u7uhuDUZqpnyMycbdWsvb4Nq2wXFSh6J1mVJPi9aHG5iLECcNcT8i+1jdRnBj04gIaYL7CVlTdZvBzU3dLtICtyVZK3U/hVt77gP3bzA+Y7CNSm3hduZKdZf2FOxA1lHdTvDnZheESyhuGFm4up3hCHNSvhKJ24UsSt1oOMa4QRKLG0fWVd14OMFzUu4vAt0Y7K6SwImOlvZgJMnVUvffvCV7W/qFbWl36cmRezHlSy3aG+7jObL727SvGOyrUj+4v7mcvjKAggPJBqk7GB5iNrS/DMUdRjZc3RHwSHPpg2QU7tdko9UdA481rr+Mwx1PNkHdifAk4ybKN7iTyaaoOxWeZvZeoEzH/ZbsO3VnwDPNdQiT73Fnkc1Wdw4817hdZB7ufLIF6i6EFzk6u5iRJaX0P58s9XZ2melsyveLyym6gikrtegqeLU5MR9Zg7uWbJ266+ENZrEBshF3E9lmdbfAW02Du8o23O1kO9TdCf9g6orswt1NtkfdvfA+U7eb/Ii7n+yAugfhQ2nurcO4R8iOqnsM/smsIVR+xj1OdkLdk/Apezf8wuBplc7AZ03BIDlHwV/Jzqt7Af7N0dnfGbno6uzcd1yd/cPb2T9tZ0PlEkUvM+WKFr0KXzPbW+Q67l9kf6v7D3zDuD5yE/cW2W1178B3zYn5yD3c+2QP1H0IPzLdCpPHuE/Inqr7DP7Xc1Xdb/v8H4PPVXoBvzQt9ZVXFHyttCt7vbTH/R/8Rmnn1k6UN0u73HRkb6n7Npze6aZ8A/YO7rtk76n7PpzB1K0oH+BmJMukbmY4S2nHP6liJGtp/aFkttLa2eylPb9QcP/H2xy4ObVaLji388iuPybnyHnJ8qmbHy5g3GQpiFuIrLC6ReCipc0XlmIMFlepBFzSI7l/ul2KwdIqlYHLmusYKeU4anmyCur6wL7G7SF+uP5kAeoGwkGl7UaqiBtMFqJuJbiyOfNYqYJblayautXhGqaXIjVxa5HVVrcOXNfRy3qM1Ddn0FUaMLsh2Uc6+2O4UWlXyxt7W96ktPkCLPIJs5tiN9PZzeEW5vxFWuK2IvtU3dbwZ55Gud/mpw2DbVVqB7c3Sw+SDhTsSNZJ3c/hUHPwJAnDDSfrrG4EHOl0U75N74IbRRatbgwc61mo+8XycQx2VSkeTvBIt9Lx0MNgd5UETjRn0116cNQksmR1v4B72svTi8EvVeoN93H0+itG+rruW/eLq/p5m9hf71v3z/oG4A7UaoPgwZ5Duj+1DWFwqErD4OFpPgWN4BxGko1S92t4tLnKImNwx5KNU3c8PMHcDv4yEXcS2TfqToaneBbqPpupDE5TaTr8rTl4pHxHwRlkM9X9Hp5ltk6kzMadQzZX3XnwfFM3QhbgLiRbpO5ieIk5qc6yFHcZ2XJ1V8ArHb1cxcjq0vpHLGu8vVxbOs0fKK6j6HqmbNCiG+FNaS7CZtwtZFvV3QZvN59kkmQH7k6yH9TdBe82FyxI9uDuJdun7o/wfk+<span class="number">33L</span>/bPcDgQZUOwYdNwWg5QsGjZMfU/Qn+2VPQ/Xdvxxk8odJJ+JQp6Ce/UPA02Rl1z8LnzJnHyq+458kuqPsb/Lu5oj5yEfcPsj/VvQRfdrT0CiNXzd0TLteYfZ3sL539N/xPaVfnb3g7f9N03jdAbjH7NvYdnX0XvmeOFCv3cR+QPVT3EfzYnH8PeYL7lOyZuv/C/3kuvvuljM8ZfKHSS/iV2fcR8loZfsxTxpX9r4zHfQN+s4z5RJeOwbdUehtOX8ZZMFHeoeC7ZO+p+z6cwen6RcgHuBnJMqmbGc7idIN85EPcrGTZ1M0O5zB1gyUnbi6y3OrmgfOW8XY+HyP5Uz7GJOZytbRAGW1pwTJp/hdvIYoWZkoRLVoULlbGXtXiuCXISqpbCi7tuaruL1plGCyrUjm4vCkYLRUo6EPmq64f7O90Ux6DAnADyYLUrQgHm7qREoJbiayyulXgqk7XN1Gq4VYnq6FuTbiWWUOk1MatQ1ZX3Xpw/VTX9f43DRhpqMZH8Mdmld2lEdUakzVR9xO4qaOfzRhpbtYdIi2Y3ZKslc7+FG5dhj8y97a9jWm7b7C0ZXY77PY6uwPc0Zx1oHTC/ZwsVN0wONzTdvfLUzozGKFSJNzFWdA/QaIoGE0Wo24sHGdOs5t0xY0nS1C3G9w9zRYR3ESyHuomwcn2rv+CwZ4q9YK/NAWTpTcF+5B9pW5fuJ85qXDpjzuAbKC6g+DBpvNBMgR3KNkwdYfDIxydH8nIKNed7P+eq6Vfe1s62rQ05dv4MRQdy5RxWnQ8PMFc1QSZiDuJ7Bt1J8NTnG7Ks/9U3Glk09X9Fv7Oc1Xd3yHNYHCmSt/Ds8yVipLZFJxDNlfdefD8NFtlAe5CskXqLoaXpHGX4i4jW67uCnilcTvLKtzVZGvUXQuvM7sgXtbjbiDbqO4meLPpbIRswd1Ktk3d7fAOR2d3MvKDq7Put//Y5e3sbtNZvyjZQ9G9TNmnRX+E93s64P4+4ACDB1U6BB/2SO6X5R1h8KhKx+CfzGnHys8c9TjZCXVPwqfMafeQX3BPk51R9yx8Ls0l+hX3PNkFdX+Df09T9yLuH2R/qnsJvmzWGyJXcK+SXVP3OvyX2f8+8jfuP2Q31L0J3zJ1/eU27h2yu+reg+87WvqAkYfmDBLkEbMfkz3R2U/hZ2Vcnf/X2/n/TOd9O8tzZr/AfqmzX8GvlbVPsK+Xdbn/K+vK3ijrcd+E0xm3u7yF+zZZenXfgd9NdVN/jPceg++rlAH+wBQMlYwUzESWWd0s8Ieegu7vnrIymE2l7HAOUzBZclIwF1ludfPAeT0F3Y+E+RjMr1IBuKCzYMp38oUoWJisiLpF4WKegu5fyRdnsIRKJeFSZb29Ls1IGech/EOlLIcoR1ZeZ1eAfcq6eu1bVnvtVzbNj6P9mR2AHaizg+CKziMFxEgwbghZJXUrw1XMlYyXqrjVyKqrWwOuaer6Si3c2mR11K0L1zN1u0p93AZkDdX9CP7Y6fr5SiPcxmRN1P0Ebprm3JrhNidroW5LuFUa91Pc1mSfqdsGbmt3STsG26vUAe5oTipEOlHwc7JQdcPgcMcG6MxIRMrHmCn8xWikt7NdTGdT7swoikYzJUaLxsJx5oyCpStuPFmCut3g7mZLh4vgJpL1UDcJTjYnFiNf4PYk66Xul3DvNPdeH9yvyPqq2w/ub/Z8mAzAHUg2SN3B8JA05zYUdxjZcHVHwCONmySjcL8mG63uGHiscbvJONzxZBPUnQhP8uwC93sufsPgZJWmwFMdnZ3GyHRXZwtmcXX2W29nv7OdjZMZHHkmU77XorPg2eYeEJmDO5dsnrrz4QWeVbo/RS5kcJFKi+ElpmC0LKXgMrLl6q6AV5qt0lVW4a4mW6PuWnhdmpt1Pe4Gso3qboI3m/YnyRbcrWTb1N0O7zDbykd24v5Atkvd3fAezwVwv5R5L4P7VPoR3p+m7wcoeJDskLqH4SOOlh5l5JhZerL8xOyfyY7r7BPwybKuzp/ydv4X0/mUh8LTzD6DfVZnn4N/NUeKlvO4F8h+U/d3+KJpVLT8gfsn2SV1L8NXzAVNkKu418iuq/sX/Le5Vj7yD+4Nspvq3oJvp7kyd3Dvkt1T9z78wNQNkoe4j8geq/sEfuppqvubw2cM/qvSf/Bzc/AoeUHBl2Sv1H2tnItfL2d36v/Kudw3yN4s53HTwW+V826AtxlJ7zKSh8o75bSt75Yzj9rR8h4V38fPoBU/gDOmHj31DQszMZhZpSzwh84lBoRKVgpmI8uubg44Z6rr+pFBLkZyq5EHzuus5u8n+aiWn6yAugXhQp5qa1MecxgpokZRuJi5fGFSnGolyEqqWwoubc4j5Vtr3LJk5dQtD1cwdUPFB9eXzE9dfzjA6foGSyBuEFlFdYPhEEcLKzFS2Tk7MEKqMLsqWTWdXR2uUc51D9f0NruWbbZIbWbXwa6rs+vB9c35h0sD3IZkH6n7MdzInFOANMZtQvaJuk3hZqZukjTHbUHWUt1W8KfGjZfWuJ+RtVG3LdzOuF2kPW4Hso7qdoI/N7sqTEJxw8jC1e0MR5jedpFI3C5kUepGwzFmDV0lFjeOrKu68XCCuWZh0g23O5momwj3cOyDJEaSzeyUpxtm9yTrpbO/hHuzD/p498FXnn2Q+iqovmj9dFp/eIA5RIIM5BCDyAarOwQeai5opAzDHU42Qt2R8Cjj+svXuKPJxqg7Fh5n1tBFxuNOIJuo7iT4mzQXfzLuFLKp6k6Dp6e6qX/09y2D36k0A55pFhou31NwFtlsdefAcz0F3S98nsfgfJUWwAtNwQhZRMHFZEvUXQovc7R8OSMryulfHK709nJVOfuLxtW4a7TaWnhdmhtpPUfeQLZR3U3wZrPhw2QL7laybepuh3c43aCUJxzcH8h2qbsb3mPqdpe9uPvIflR3P3zAuDFyEPcQ2WF1j8BHzbn5yTHcn8h+Vvc4fMLsp2A5iXuK7Bd1T8Nn0nySOIt7juxXdc/DFzztd/+C7DcGf1fpIvyHo6V/MnLJLMdPLnOIK2RXdfY1+Dp38V/ezv9dzjyL+8s/zL6BfVNn34Jvm5PpIXdw75LdU/c+/MDpBnaXh7iPyB6r+wR+ahrlK89w/yX7T93n8Avj+shL3Fdkr5X3uK+Xd/H/yqd+LZ+V8njDyJtqpIPfKu9se4i8Xd5VLT3ZO+q+C79n3Dh5HzcD2QfqZoQzOV3/YMmMm4XsQ3WzwtlM3W6SHTcHWU51c8G5y3u7n4eRvCkfY9z/QzlfeW1r/vLmx9pJUoCiBZlSSIsWhos4F5Dy4FEUtxhZcXVLwCXNiSVKKdzSZGXULQuXM26SlMetQOajri/s53QDu4k/bgBZoLpBcEXj9pBg3BCySupWhquYc+ssVXGrkVVXtwZc06w3UGrh1iaro25duJ5ZQ0Wpj9uArKG6H8EfmzUkSiPcxmRN1P0EbupocDNGmqfOTv1BYgsGW+q0VvCn5V0boLV3A3zm2QCpX5zaoLXVae3g9mZlsdKBlXUk66Tu53CocbtKGG44WWd1I+BIc3VEuuBGkUWrGwPHmrphEofblSxe3QS4m9P17SbdcYUsUd0ecJLppq8k435B1lPdXvCXxo2S3rh9yL5Sty/cz5ybn/THHUA2UN1B8OA013cI7lCyYeoOh0c4Oj+SkVGuW7teVn5j5e3saHNrp3ypGkPRsUwZp0XHwxPMicXJRNxJZN+oOxmeYhbrI1Nxp5FNV/db+DvjiszAnUn2vbqz4NlmDd1lDu5csnnqzocXeDa7+5lyIYOLVFoMLzG7IEKWUnAZ2XJ1V8ArzcFFVuGuJluj7lp4nelspKzH3UC2Ud1N8GbPQt1/CrOFwa0qbYO3O1q6g5GdrpbmyuFq6Q/elu6yLU2U3Rx5D1P2atF98I9pzn4/7gGyg+oegg+bNsXLEdyjZMfU/Qn+Oc09exz3BNlJdU/Bv5i6vnIa9wzZWXXPwb+aup3lPO4Fst/U/R2+6HQDAuQP3D/JLql7Gb5i6vrIVdxrZNfV/Qv+26y3s/yDe4Psprq34NtmxwTLHdy7ZPfUvQ8/cDT4ISOPUme7/svBY0ae6Jyn8LPy/LrK2/<span class="number">3</span>/PN13/UHhc5wXOucl/MqsKVxeq+Ba0+sVeMip4HHfgN+s4NwfXSUd7ltkb6ubHn7HuNHyLu57ZO+rmwH+wOkGJEhG3ExkmdXNAn/odFOe0rPiZiPLrm4OOKfTTfk8nQs3N1kedfPC+YwbIvlxC5AVVLcQXNist5sUwS1KVkzd4nAJUzdZSuKWIiutbhm4bAVvz8sxUr6C68+E+S1khQraVp8K5hGsovhS1I8p/lo0AA6s4H1SDWKkohrBcIi5pNFSiWqVyaqoWxWuZk4nUarj1iCrqW4tuLapGyx1cOuS1VO3PtzAXNIAaYj7EdnH6jaCG5u6ftIE9xOypuo2g5uburHSArclWSt1P4VbG1fkM9w2ZG3VbQe3N9s7SjrgdiTrpO7ncKijrWGMhLvauuhtV1s7e9saYdvqL5EU7cKUKC0aDcekLiD1hR2xDMap1BWOT7OpEyjYjay7ugInGjdAeuAmkSWr+wXc01ypJOmF+yVZb3X7wF+ZboVKX9x+ZP3VHQAPNG6CDMIdTDZE3aHwMKcbmCDDcUeQjVR3FPy16VasjMYdQzZW3XHweFM3RibgTiSbpO438GRHZ6cwMtXV2d0ZXZ2d5u3s9AppfjnxLUW/Y8oMLToT/t7T2Ss8qMxicLZKc+C5afb1PArOJ1ug7kJ4kbmqQbIYdwnZUnWXwcvN2QfKCtyVZKvUXQ2vMWvwlbW468jWq7sB3mjqimzC3Uy2Rd2t8DbPBXA/AG1ncIdKO+EfTEujZRcFd5PtUXcvvM9cgB7yI+<span class="number">5</span>+sgPqHoQPOVp6mJEjZulxcpTZx8h+0tk/w8cruDp/wtv5k6bzAeFyitm/YJ/W2Wfgs+acEuUc7q9k59W9AP+W6rq+sv/OyEU1/oD/NDd0V7lEtctkV9S9Cl8zR/aT67h/kf2t7j/wDdN2P7mJe4vstrp34Lvm2vnKPdz7ZA/UfQg/Ml1KlMe4T8ieqvsM/tecW0X5D/c52Qt1X8KvPNvJ/QPI13xcg6/7eKT/wW/4eNv+JiPpUj7GHMng6udbPtrPt33MnRwk6X1cRd9hyrta9D34fR/nGQVIBtwPyDKqmwnO7HQDu0sW3A/JsqqbDc7uYzuQAzcnWS51c8N5fLxf/vMykk+N/HABZzX/HlKQaoXICqtbBC6a6qa+SLMYg8VVKgGXNKcSJ6UoWJqsjLpl4XJO1zdMyuNWIPNR1xf2M3WjxR83gCxQ3SC4oqOfwYyEuPrpfk+lSt5+Vjb99OsqVShalSnVtGh1uIbn7N2vQqrJYC2VasN1zBlFS10K1iOrr24DuKGnOftTnnUY+ViNRnBjs4WSpAnVPiFrqm4zuLlxo6UFbkuyVup+Crc2TY+Wz3DbkLVVtx3c3nPa7s/HHRjsqFIn+HNTMF5CKRhGFq5uZzjCU9D9UvRIBruoFAVHOzoYw0isq4NPeJPwOG8Hu5oOBlSUeI6cwJRuWrQ7LGYL+Ukibg+yJHWT4S/MXVZReuL2IvtS3d5wH88ZuX+R/hWDfVXqB/c3lyhMBlBwINkgdQfDQ8xCk2Qo7jCy4eqOgEemWego3K/JRqs7Bh5rdmeCjMMdTzZB3YnwpDR75BvcyWRT1J0KTzPrDZDpuN+SfafuDHimo7PfMzLLR99qZba3s3PsvdlD5lJ0HlPma9EF8EKz+UNkEe5isiXqLoWXebrl/pvV5QyuUGklvMoU9JfVFFxDtlbddfB6c6VCZQPuRrJN6m6Gt5gORMlW3G1k29XdAe80nY2RH3B3ke1Wdw+816whQfbh/ki2X90D8ME053YI9zDZEXWPwsd8vJ+jfmLkZzWOwycc/TzJyCkf/bb1F28/T/vYXwWewT2r1c7Bv6Y55/Os7QLZb+r+Dl/0NNL92rE/GPxTpUvwZXOysXKFglfJrql7Hf7LNCdJ/sb9h+yGujfhW6ZuV7mNe4fsrrr34PvGjZEHuA/JHqn7GH5iLkCyPMV9Rvavuv/Bz81t10Ne4L4ke6Xua7488vimXiz3X939j8E3fD3Sm3A6X28v32LkbV/nvoqV9L488JC9q7Pfg9/3dbU8g6+<span class="number">2</span>/APfNO9ZmZHZmbAz6+ws8IfOI/nFS1bcbGTZ1c0B50x1o64PkVyM5FYjD5zXWS0wVvJRLT9ZAXULwoXMOfpJYdwiZEXVLQYX91xG9zfeJRgsqVIpuLQ5eGcpQ8GyZOXULQ9XMKcdKT64vmR+6vrDAU7XN0gCcYPIKqobDIc43YAQqYRbmayKulXhao62V2ekhq/+8q+mt5+1PP1MfQCsjVtHq9WF65mzT5L6HLkBWUN1P4I/NqsMlEa4jcmaqPsJ3NRcKX9phtucrIW6LeFWpq6vfIrbmuwzddvAbT0tTX0hMoPtVeoAdzQnFSKdKPg5Wai6YXC4cQOlM24EWaS6XeAos9AgicaNIYtVNw7uai5AjMTjJpB1U7c7LI6WJjLSw9XSubxBXZK3pcnaUvfPG77A7anVesFfmjskUXpz5D5kX6nbF+5nVhkr/XEHkA1UdxA82HPpU//CnMGhKg2Dh5tLFCEjKDiSbJS6X8Oj0yx0DO5YsnHqjocnmLrRMhF3Etk36k6Gp3gW6v4znqkMTlNpOvxtms8j31FwBtlMdb+HZxm3u8zGnUM2V9158HxHLxcwstDVyyE8Cy/y9nKx9tL9Oo8luEu12jJ4uTntirKCI68kW6XuaniNceNkLe46svXqboA3mr4HyybczWRb1N0Kb3O6KU9B23F3kO1U9wd4l7mbwmU37h6yverug3/0tMn9MuX9DB5Q6SB8KM3nhsMUPEJ2VN1j8E++3sefnxk5rsYJ+KQ5lRA5RbVfyE6rewY+62jkOUZ+NdsgWM4z+wLZbzr7d/iiL++r4+33n77mCTlGLjH7MvYVnX0Vvmba4yPXcf8i+1vdf+AbZlVRchP3Ftltde/Ad017AuQe7n2yB+o+hB+ZKx8vj3GfkD1V9xn8r1lvlPyH+5zshbov4Vdptt5rfi73dT9X9j8/j/sG/Kaf042WdLhvkb2tbnr4nVQ39TuFdxl8T6X34Qweyf1E8AGDGVXKBGf283Y+CyMfpnyMcf+z4ax+2tJsfuaXAJGSneXlYEpOLZoLzu05svv5Nw+DeVXKB+c35xsjBShYkKyQuoXhIsYNl6K4xciKq1sCLul0A6KkFG5psjLqloXLeRZ6jMeG8gxWUMkH9nUW9I0XPwr6kwWoGwgHmYV2loq4wWQh6laCK3sO7v4aU4XBqipVg6vbJtZgsKZKteDajibWYaSuWXMXqcc66pM10NkN4Y/8XL3+2NvrRqbXAaHSmNlNsD/R2U3hZuZyx0tz3BZkLdVtBX/qdANFWuN+RtZG3bZwO1O3h7TH7UDWUd1O8OfmbBMlFDeMLFzdznCE54K6HysiGeyiUhQc7SzonywxFIwli1O3KxxvFhomCbjdyLqrK3CiWWiw9MBNIktW9wu4p6kbI71wvyTrrW4f+CvHBujLSD/XXRyVydXZ/t7ODvBL8xvagRQdxJTBWnQIPNR0K0aG4Q4nG6HuSHhUGvdr3NFkY9QdC4+znx3GMzhBpYnwJHP2gfINBSeTTVF3KjwtzWafjvst2XfqzoBnmoX6yve4s8hmqzsHnmtu5gSZhzufbIG6C+FFZscEyWLcJWRL1V0GL09TdwXuSrJV6q6G1zg6u5aRdX76iLXe29kNns6m/jR0I+4mrbYZ3mKuVKhs5cjbyLaruwPeaToQLj/g7iLbre4eeK85owjZh/sj2X51D8AHTQcS5BDuYbIj6h6Fj5k1dJefcH8mO67uCfik6UA3OYX7C9lpdc/AZ1Nd1xsgn2PkVzXOwxfMKiPkN6r9TnZR3T/gPz0b2v3N5yUGL6t0Bb7qaOQ1Rq67Gtk8PS9P9jbyb3OL+sbIPxz5BlNuatFb8G1zfSrKHdy7ZPfUvQ8/MGcULA9xH5E9VvcJ/NT0M0qe4f5L9p+6z+EXZk/Fy0vcV2Sv+Xvc1/155vF3riFU3vB3uW+SpVP3Lfhtpxsgkh73HbJ31X0Pft/p+kVKBtwPyDKqmwnO7G/3SRbcD8myqpsNzm7cUMmBm5Msl7q54Tz+3gbnZSRfyseYyh+4GpzfXxtcwN/8qi5YClK0EFMKa9EicFGzgAAphlucrIS6JeFSadzSuGXIyqpbDi7vdFM+EVTA9SHzVdcP9k91XX8fFsBIoBpBcEVz+SMkmGohZJXUrQxX8VS7PUSqMlJNjepwDbO2YKlJtVpktdWtA9c1bqzUw61P1kDdhvBHZkMly8e4jcgaq9sE/sTRzKaMNHM180I6VzObe5vZwjYzQFpStBVTPtWireHPzGWKlza4bcnaqdse7mAW21064nYi+1zdUDjMuFESjtuZLELdSLiLv/niG8VgtEoxcKwp2EPiKNiVLF7dBLib6UCSdMcVskR1e8BJpm5XScb9gqynur3gL81u7iK9cfuQfaVuX7ifWUOC9McdQDZQ3UHwYEdnhzAy1NXZU6+7OjvM29nhprN+yTKCoiOZMkqLfg2PNicWKGNwx5KNU3c8PCFNZyfiTiL7Rt3J8BSnGxgoU3GnkU1X91v4O09n3e/VMoPBmSp9D88yWzBKZlNwDtlcdefB883B/WUB7kKyReouhpeYbiXLUtxlZMvVXQGvNGsIkFW4q8nWqLsWXuc5Kfc3uusZ3KDSRniTo6WbGdmS5lbfyiG2kW3X2Tvgnf68Ntnb+V3+aT5B72b2Huy9Onsf/KM58W6yH/cA2UF1D8GH02zTI7hHyY6p+xP8szmDUDmOe4LspLqn4F+MGy6ncc+QnVX3HPyraarIedwLZL+p+zt80XPx3X+<span class="number">3</span>/AeDf6p0Cb5sLkCgXKHgVbJr6l6H/zIHT5K/cf8hu6HuTfiWqRsgt3HvkN1V9x5837EBHjDy0F/fyfuRt7OPbWe7yxOKPmXKMy36L/yfuaoB8hz3BdlLdV/BrwXYxb4e4HL/F+DK3gjwuG/C6ZxuyueVt3DfJkuv7jvwuwHmnn6PwfdVygB/YAqGSEYKZiLLrG4W+ENPQfffW2ZlMJtK2eEcAd6n45yM5FIjN5zHY6Q8EuRlJJ8a+eECZlExUpBFFSIrrG4RuGiAt33FGCnunO0bLSWYXZKslM4uDZcJcHW5bIB2uVyA/UOg8mgVdJoP7Os8RICv+HEIf7IAdQPhIOPGSkXcYLIQdSvBlZ1uYKRUwa1KVk3d6nANUzdeauLWIqutbh24rrmgFaUebn2yBuo2hD8yly/lSQe3EVljdZvAn6TZPU1xm5E1V7cF3NKsN0Za4X5K1lrdz+A2Zg2x0ha3HVl7dTvAHR0boBMjn5tV+Uoos8PIwnV2ZziCDRDp3QBdAszPr+IkitnR2DE6OxaOM+cUJV1x48kS1O0GdzerihfBTSTroW4SnGw+JYTJF7g9yXqp+yXc23HD9WHkKzX6wv08RspTc39GBqgxEB5k1hYlgzneELKh6g6Dh3s+C7hfMDaCwZEqjYK/NgV7yGgKjiEbq+44eLzZ9MEyAXci2SR1v4EnO5o9hZGpZqvEyzRmTyf7Vmd/B8+g2TO9zf7eNNs3UWYxezb2HJ09F57nOXH359P5DC5QaSG8yJxMoiym4BKypeoug5d7Crp/hruCwZUqrYJXmysZLWsouJZsnbrr4Q1mOybKRtxNZJvV3QJvNXUDZRvudrId6u6EfzCun+zC3U22R9298D7PZkv57P4jI/vVOAAfNJfIXw5R7TDZEXWPwscc/f6JkZ8D9IH7uLeRJ9LetScpeoopv2jR0/AZz3V3v1TvLIPnVPoVPm/OWeQCBX8j+13di/Af5rp3kT9xL5FdVvcKfNXs1wC5hnud7C91/4b/MZ8GQuUG7k2yW+rehu+YNcTLXdx7ZPfVfQA/NOcWKY9wH5M9Ufcp/MysIUz+xf2P7Lm6L+CXadxX/+/qLMPjqrowWj6g7i7UnVpc6l7q7po03uiOUHd3d3ej7kq9VNGWYsULBYp7gS+zJrPn7vzJ86zzrrPvuWffm0xmJhPcHIGu7JlAj/s/+NlAx5uTGXk+82uc+902OQO1s7kCzbPOMZI7kKdymJJXi+aD8wc6NyFcCuAWJCukbmG4SKC5+4oyWEyl4nAJZ8HMB50lKViKrLS6ZeCyTtcvRcrhvkBWXt0KcMUs1/UKbCVGKqtRBa7qrJb5naka1aqT1VC3JlzLrDJIauO+SFZH3bpwPVN3hNTHbUDmo64v7Gfq+ok/bgBZoLpBcLCjnyGMhHo22P1iSUMGG+m0xnCTQFe/m3r73Sww253cnIO2wG6ps1vBrc2W+0gb3LZk7dR9CW7vdDOvow64Hck6qdsZ7mLqJkhX3G5k3dXtAfc0G5ogvXB7k/VRty/cz7Ml7hfk+jM4QKWB8CBTMFgGU3AI2VB1h8FhnoLuR6vhDA5XKQKONGcTIlEUjCaLUTcWjvMUdH9vHMFgvEoJcKKj10mMJJsbL11SOISQpersNDidlmd4W/6yp+VZ7+IbiTZKp42Gx5hDhMpYDjGObLy6E+CJnrNwv7FlEoOTVZoCTzX7HCLTKDidbIa6M+FZ5k4QmY07h2yuuvPg+Z6Du18XXsDgQpUWwYvNwaNkCQWXki1Tdzm8wpy5v6zEXUW2Wt018NpsjViHu55sg7ob4U3mpMJkM+4Wsq3qboO3O1q+g5GdmV/jGvCc5i5vL3cH2peS9uDu1WqvwPvM2SfKfo58gOyguofgw1mu6489jjByVI1j8HFzzuFygmonyU6pexo+Y845Tc7iniM7r+6r8IVs3wUu4l4iu6zuFfiqqRsl13Cvk72m7g34pqmbJrdwb5PdUfcu/LrZqUh5A/dNsrfUfRt+x6whRe7h3id7V90H8HuOfr7PyAeufj6o6Ornh95+fhRoHiFHykOKfsyUT7Top/BnphEin+N+Qfaluo/gr5yuv798jfuY7Bt1v4W/M5sQLE9wvyf7Qd0f4Z/M5obIz7i/kP2q7m/w72a9vvIH7p9kf6n7N/zUbK6//IP7L9l/6uYI4rFOkLNuvPwvyOU+S/ZckMd9Hs7pdH19JRdubrI86uaF8xk3XfLjFiArqG4huHCQt8FFGCma+TVuNn+QUCxIG1w8yHPDun+fK4FbUquVgktnHTnrgybKMFhWpXLwC87l+YVJeZZXgayiupXgylmu6w//qzBSVY1qcHVnNX9fqUG1mmS11K0Nv+h0g3ykDm5dsnrq1ocbmE2MFB9cXzI/df3hAKcbGCiBuEFkweqGwKGmbpw0xG1E1ljdJnBTs1M+0gy3OVkLdVvCrRyNbM1IG1cjy5V1NbKtt5HtPI3kf0EgttdSHeCO5roMlk4ctjNZF3W7wt3M9kdId9weZD3V7QX3NnVDpA9uX7J+6vaHB5i6/jIQdxDZYHWHwEPN9ofKMNwwsnB1h8MRZg2hEokbRRatbgwca+qGSRzuCLJ4dRPgROPGSBJuMlmKugKnGjdA0nDTyTLUfRke6WjrKEZGu9pao4SrrWO8bR2r96f7RbdxuOO12gR4ojn7KJnEkSeTTVF3Kjwt2w0wHXcG2Ux1Z8GzTd1wmYM7l2yeuvPhBebsfWUh7iKyxeougZeauumyDHc52Qp1V8KrzHozZDXuGrK16q6D15sbK1g24G4k26TuZnhLlpv1ttqtDG5TaTu8wxSMlp0U3EW2W9098F5HS19hZJ+52P1kP7MPkB3U2Yfgw0Guzh/xdv5okHnBIVmOMfs49gmdfRI+ZdbpL6dxz5CdVfccfN5saIS8inuB7KK6l+DL5gxC5AruVbJr6l6HX/NsqPth/A0Gb6p0C76d7XvFHQreJXtd3TfgNz0F3S/gvcXg2yq9A9/zSO4Xmu4z+K5KD+D3zFED5H2O+gHZh+p+BD8013GwfIz7Cdmn6n4Gf+5o+ReMfOm6i90vCz7y9vIr00t/ka8p+pgp32jRb+HvzAIy5Anu92Q/qPsj/JPpZZr8jPsL2a/q/gb/buomyx+4f5L9pe7f8NNs7j+<span class="number">4</span>/5L9p26OYB7uBJsHB/9j8Nlgj/Qc/Hyw8wINl5zBLjcXWW5188B5na5/gOTDzU9WQN2CcCGnm/nYsDBuEbKi6haDixs3RErgliQrpW5puEywt7NlGSmXbfYLzC5PVkFnV4QrBbsugMrBegFUCfb8dL41TariVNM51eEa5qyjpSb1a5HVVvdFuI7Tzfx9tC5uPbL66jaAfbLtvC+uH5m/ugFwoFlDhAThBpOFqBsKNzT7kSqNcBuTNVG3KdzMc4m4v9c2Z7CFSi3hVuakwqQ1BduQtVW3HfySWWiktMftQNZR3U5wZ7MBIdIFtytZN3W7wz0cbe/JSK9sW92b2X3I+ursfnB/2j7A2/aBwebXJ18ZxOzB2EN09lB4WLbLPgw3nGy4uhFwpDmnYInCjSaLUTcWjnO6mQ+NRuDGkyWomwgnmabGSjJuCpmomwqnZbuw0nEzyF5WdyQ8ypybj4zGHUM2Vt1x8HizhgCZgDuRbJK6k+Ep5tziZSruNLLp6s6AZ2a5rltwFiOz1ZgDz3V0fx4j8z0XrvuPjxYwuFCnLYIX0/Yl3rYv9bQ961viMrTlOm0FvDLbea5i7avJ1qi7Fl7nWYf7SaX1DG5QaSO8yWxGkmym4Bayrepug7ebyzpcduDuJNul7m54j6mbJntxXyHbp+<span class="number">5</span>++IBxI+Ug7iGyw+oegY+aCyhCjuEeJzuh7kn4lNmsBDmNe4bsrLrn4PPG9ZdXcS+QXVT3EnzZ0fIrjFzN/Bq3lSe2rnlbel1b6n757zXcG1rtJnzLnFGk3ObId8juqvs6/IbZqWB5E/ctsrfVfQe+Z9wouY/7LtkDdd+D3892u3+A+yHZR+o+hD82t2WqfIL7Kdln6n4Of+G5fTJ/v/ySkUdqfAV/ne2Cfky1b8i+Vfc7+Inngnb/RPiewR9U+hH+yRRMkp8p+AvZr+r+Bv/uaOQfjPzpamTPUnx+oLeRfwfbd3g8xf1Hq/<span class="number">0L</span>/+dZnvtpzBwhPNAJ8Uj/g58Nce5esDwX4nKfJ8upbi44t9PNvIfy4OYly6dufrhAiHlAVZDBQioVhot4JPdrCUUZLKZScbiE86iZj45KctRSZKXVLQOXdbp+QVIO9wWy8upWgCsaN14q4VYmq6JuVbiaWUOsVMetQVZT3Vpw7RDHv7tipI5zdmC01GV2PbL6OrsB7BPCv7sK0V77hZiH3Uniz+wA7ECdHQQHezbU/YJgCIOhKjWEG3kk94tajRlsolJTuJnZnQBpzlFbkLVUtxXc2riR0ga3LVk7dV+C25u98JMOuB3JOqnbGe5i3FTpituNrLu6PeCe2a7jXri9yfqo2xfuZ+qOkP64A8gGqjsIHuzZLPfLMEMYHKrSMDjM0fJwRoaH6CsLEd5eRppe+oZKFEeOZkqMFo2F4zxHdv/YHsFgvEoJcKLZ+mhJomAyWYq6Aqca11fScNPJMtR9GR7pObj7g3NGMThapTHwWHNXhMg4Co4nm6DuRHiS2fNkmYw7hWyqutPg6caNkRm4M8lmqTsbnmP6niZzceeRzVd3AbzQuOGyCHcx2RJ1l8LLHC1dzsiKEH1ua6W3patC7At/q3HXaLW18DqzUyNkPUfeQLZR3U3wZrPK4bIFdyvZNnW3wzs8bXL/HNjJ4C6VdsN7st3Keyn4Ctk+dffDB7Jc1ytVBxk5pMZh+IizWsBwOUq1Y2TH1T0BnzSNDJZTuKfJzqh7Fj5nb7TzDL6q0gX4otnHMLlEwctkV9S9Cl9zdPA6I6+5Ojgjr6uDN7wdvGluysBEuUXR20y5o0Xvwq+b5mTIG7hvkr2l7tvwO2axkXIP9z7Zu+o+gN8zPYqR93E/IPtQ3Y/gh56dcj+O/pjBT1T6FP7MHDxePqfgF2RfqvsI/sq44fI17mOyb9T9Fv7OLDRZnuB+T/aDuj/CP3kupsPT5GdGflHjV/g3c+QI+Z1qf5D9qe5f8N+Ofj5l5B9zKYbIv8z+jyxHqGf2M6Eu/l+oq+3Phmrbnwu1j6GeR8up03LBuUOdpztC8oTykIcsn7r54QJO1z9WCuIWIiusbhG4qHFDpBhucbIS6paESzld30QpjVuGrKy65eAXnG6Qj5THrUBWUd1KcGVzbmlSBbcqWTV1q8M1Qs0Di5oM1lKpNvyiKShSh4J1yeqpWx9u4Cno/mwXHwZ9VfKD/UO9LQ9gJDBU3zoX5O1lcKi5hSMkhCOHMqWhFm0ENzZb7yNNcJuSNVO3OdzCs0r3s7ctGWylUmu4jbNgQIK0pWA7spfUbQ93cLqBQdIRtxNZZ3W7wF09B3c/fu/GYHeVesA9zZ5HSy8K9ibro25fuJ858xjpjzuAbKC6g+DBpm6yDMEdSjZM3TA4PFvd4bgRZJHqRsHRjpbGMBLraukqWhrnbemIUPsmjHjcBK2WCCdlHdn1+1wyIylqCJxqziNC0lhbOlmGui/DI00j/WQU7miyMeqOhceZc/aX8bgTyCaqOwmebNaQIVNwp5JNU3c6PMPTdPebl2YyOEul2fAccxUFyFwKziObr+4CeKH57pEsi3AXky1Rdym8zNRNkOW4K8hWqrsKXu1o5BpG1roaOYvPWF7nbeR6c2/6DpcNFN3IlE1adDO8xexUjGzF3Ua2Xd0d8E5zYqGyC3c32R5198KvmLqBsg93P9kBdQ/Ch4wbJodxj5AdVfcYfNxcMf5yAvck2Sl1T8NnPJ11/7w5y+A5lc7Dr5qC4XKBghfJLql7Gb5iFholV3GvkV1X9zX4hrlck+Qm7i2y2+rege86Ovs6I2+E6tsu3vR29i3T2cwfIG9T9B2m3NOi9+F3zQIC5AHue2Tvq/sB/KHZhET5CPch2cfqfgJ/6vkO8GSafMbI52p8AX9prhNfeUS1r8i+Vvcx/I1xo+Rb3O/Inqj7PfyDWWWM/Ij7E9nP6v4C/2purAz5Dfd3sj/U/RP+y6whQv7GfUr2j7r/wv+ZXfWTHA1d7jMNecTT0OM+Cz/X0NvW5xnJmfk1zv1WxlwNta25G5ofplGSh6J5mZJPi+aHCzS011VB3EJkhdUtAhd1ugEpUgy3OFkJdUvCpYybLKVxy5CVVbcc/IJxM6Q8bgWyiupWgiub9UZKFdyqZNXUrQ7XcLqBqVITtxZZbXVfhOs4Xb9IqYtbj6y+ug1gnyw36+M2fRn0U8kfDjAFoySQgkFkweqGwKGOzjZkpJHZkmBpzOwmZE11djO4eUM+TNB7AbT0XABZfyTXCq21TmsDt3UewjdI2nGIl8jaq9sB7ug5Y/ezCZ0Y7KxSF7irR3I/Od2Nwe4q9YB7mqP6Sy+O2pusj7p94X6egu5/o9WfwQEqDYQHmSZnyGAKDiEbqu4wOMwcPFHCcYeTRagbCUeZ/qVKNG4MWay6cfCILNf1RrJ4RhLUSISTHB1OZiTF1E8UoX4qWZrOTocz6PDL3g6PNLd4QJSMYvZo7DE6eyw8LtttMB53AtlEdSfBk83tFShTcKeSTVN3OjzDnEGszMSdRTZb3TnwXFM3TebhzidboO5CeJHpUowsxl1CtlTdZfByc5+EygrclWSr1F0NrzF1M2Qt7jqy9epugDeaPUuXTbibybaouxXeZtxE2Y67g2ynurvg3Y7rYA8jezO/xg3lWalXvA3el+0W3o97QKsdhA9lu5kOc+QjZEfVPQYf99xM7kcvJxg8qdIp+LQ5lQQ5Q8GzZOfUPQ+/atwguYB7keySupfhK9lupqu418iuq/safMO0NExu4t4iu63uHfiu2YBYeR33DbI31X0LftuzAe7v2u8weE+l+/C7Hsn9itADBt9T6X34A0cTP2TkI1cTq/Mr0ENvEz+2d6mvfMLyPmXKZ1r0c/gLc9qB8iXuI7Kv1P0afmy2M0i+wf2W7Dt1n8DfGzdQfsD9kewndX+GfzF3abz8ivsb2e/q/gH/ma2lf+H+TfZU3X/gf825hct/uDkaubJnGnnc/8HPNrJ36XONeHKHLKe6ueDcxg2UPLh5yfKpmx8u4HQDRAriFiIrrG4RuGgjb4OLMVK8kb4eW6KRNrhkI/sRr6VwS2u1MnBZc+RYKceRXyArr24FuKLT9U+VSriVyaqoWxWuluVmvWm6OoM1VKoJ1zIFo6U2BV8kq6NuXbie0818yFIftwGZj7q+sJ/TDQwRf9wAskB1g+Bgz0LdzwyHMBiqUkO4kVlokDSmYBOypuo2g5ubvsdIC9yWZK3UbQ23cfSyLSPtXL1sWN3Vy5e8vWzfyNysYdKBoh2Z0kmLdoa7mAXESVfcbmTd1e0B9zQnliC9cHuT9VG3L9zP7KqP9McdQDZQ3UHwYOOGyhDcoWTD1A2Dw42bLMNxI8gi1Y2Co825JUkMbixZnLoj4HhzxcRLAm4iWZK6yXCK2YckEdxUsjR10+EM4wbIy7gjyUapOxoe42jwWEbGNdL/MDPe2+AJpsF+fjKRopOYMlmLToGnei5Z98+BaQxOV2kGPNPsarzMouBssjnqzoXnZbmup9LnM7JAjYXwIrPvQbKYakvIlqq7DF5uvqXEyArclWSr1F0NrzFuuqzFXUe2Xt0N8MZsa9iEu5lsi7pb4W2mbpRsx91BtlPdXfBus1PBsgd3L9kr6u6D9zv6eYCRg2Z2ihxi9mGyIzr7KHyskavtx71tP+Fpu+vB+UmcUzrnNHwm21mfpf45svPqvgpfMGuJlYu4l8guq3sFvmquYpFruNfJXlP3Bnwz227ewr1Ndkfdu/Drxk2VN3DfJHtL3bfhd8y5+cs93Ptk76r7AH7P1BV5H/cDsg/V/Qh+6LlB3L+bfczgJyp9Cn9mCibI5xT8guxLdR/BXzna/jUjj83SfeUbZn9L9p3OfgJ/T9t/8Lb9R3O3B/jIT8z+GfsXnf0r/JvzSH4j5HfcP8j+VPcv+G/T1CB5ivsP2b/q/gfnaGwfIz3T2OX+rzGPcxp73Ofg551uYLjkxM1FllvdPHBeUzdD8uHmJyugbkG4UJbresNhYUaKqFEULpZlZL0cWZzBEiqVhEuZ5YmU5pBlyMqqWw5+obHdovK4FcgqqlsJrtzY2/YqjFTN/Bp3r5irn9Uaaz+rN872XGUNitZkSi0tWht+0Sx2hNTBrUtWT936cAPjJogPri+Zn7r+cIBx/SUQN4gsWN0QONRsQpo0xG1E1ljdJnBTp+ubIM1wm5O1ULcl3MrU9ZfWuG3I2qrbDn7J6QbESXvcDmQd1e0EdzbnliJdcLuSdVO3O9zDrDdKeuL2Iuutbh+4r6PB/Rjp77ne3H8sMYDBgTptEDy4sesCGOK9AIbaC8BXhnHQMOxwnT0cjjAnEyGRuFFk0erGwLFmk5IkDncEWby6CXCicVMlCTeZLEVdgVPNGvwkDTedLEPdl+GRpqmJMgp3NNkYdcfC48zNHyfjcSeQTVR3EjzZrDdEpuBOJZum7nR4RrY7fCbuLLLZ6s6B55o1xMo83PlkC9RdCC9yXACLGVlizjZFljJ7Gdlynb0CXsl1sMp7Haw210FAgKxh9lrsdTp7PbzBc6m5X4zbyOAmlTbDWzyS+5mRrQxuU2k7vMPsZIrs5Ki7yHaruwfe6ynofvD4CoP7VNoPHzCbkCoHKXiI7LC6R+Cj5n4bLsdwj5OdUPckfMrUjZXTuGfIzqp7Dj6f7RJ9FfcC2UV1L8GXTcuj5QruVbJr6l6HX3O0/AYjN83sMLnF7Ntkd3T2Xfh1Wv6Gt+Vv2lvfX95i9tvY7+jse/D9xt6fd+8y8kCN9+D3PcaTzAc3jHyoxkfwQ7MvQfIxx/uE7FN1P4M/z3aLfYH7Jdkjdb+CvzZuqDzG/YbsW3W/g5+YnifL97g/kP2o7k/wz8YV+QX3V7Lf1P0d/sOswVf+xP2L7G91n8L/mLqh8i/uf2Q5mnjcZ5q4+H9NvD1/lpHnMr/GuZv5fBNtZs4mpplhkquJq2hupuTRonnhfE2cF/NwyY9bgKyguoXgwk4384dzEdyiZMXULQ6XaGIv5pK4pchKq1sGLut0A5KlHO4LZOXVrQBXzHKzXgKpxGBllarAVc1JRUk1ClYnq6FuTbiWWWiy1MZ9kayOunXhemYD4qU+bgMyH3V9Yb8s1/VLkT8jAWoEwkGOfgYzEmLWEi6h1G9I1khnN4abNOEjdbxtb2baHpguzZndArulzm4Ft/Zso/up2jYMtlWpHfySOd1EaU/BDmQd1e0EdzZL95UuuF3JuqnbHe6Rbct74vYi661uH7ivcUOkH25/sgHqDoQHmfVGyWDcIWRD1R0Gh5m6CRKOO5wsQt1IOMpcnykSjRtDFqtuHDzCXHqREo+bQJaobhKc7LgAUhgR1w3dsKSrs6nezqaZzgakSTpFM5jyshYdCY/ydNb9h+SjGRyj0lh4nJXGMzhBpYnwJHMqPjKZo04hm6ruNHi62aIomYE7k2yWurPhOWbr/WUu7jyy+eougBc6Xd9oWYS7mGyJukvhZdlauhx3BdlKdVfBq82lEilrcNeSrVN3PbzBrCFKNuJuItus7hZ4q6Ol2xjZ7tlq9+<span class="number">9</span>+OxjcqdN2wbu5mfd4W77X03LXj9BXcPbpnP3wAbOsGDnIsg6RHVb3CHzUswj3q8vHGDyu0gn4pOlhtJyi4GmyM+qehc+ZvU6X87ivkl1Q9yJ8KdstcRn3CtlVda/B1z0Ldf+fhNcYvKHSTfiWOfN0uU3BO2R31X0dfiPb94Q3cd8ie1vdd+B7noO7n+<span class="number">6</span><span class="number">1</span>+O0F7Bjuo1BHu5JHcT/V2ZrCLSl3hblmS608juzPSQ42ecC9Ho3sz0ifza1xF7ta+3kb2s41Mk/6cwACmDNSig+DB5mTTZQjuULJh6obB4eaqTJXhuBFkkepGwdGmbrjE4MaSxak7Ao43dUUScBPJktRNhlNM3eEiuKlkaeqmwxnmwguRl3FHko1SdzQ8xtMj9xtGxzI4TqXx8ARTMF0mUnAS2WR1p8BTzUklyDTc6WQz1J0Jz3J0djYjc9rqE4xzvZ2dZzrrFyPzKbqAKQu16CJ4sVlsvCzBXUq2TN3l8Apz26XLStxVZKvVXQOvNbddlKzDXU+2Qd2N8CbTrUTZjLuFbKu62+Dtng64f8XcweBOlXbBu81C/WUPBfeSvaLuPni/OXiGHMA9SHZI3cPwEdOtRDmKe4zsuLon4JNmY5PkFO5psjPqnoXPOTp7npFXXZ3tWcrV2Qvezl40nc3swCWKXmbKFS16Fb5mOhAg13FfI7uh7k34llnsCLmNe4fsrrqvw2+YzY2VN3HfIntb3Xfge2Zz4+U+7rtkD9R9D37fbK6/fID7IdlH6j6EPzbrjZZPcD8l+0zdz+EvzD6Ey5e4j8i+Uvdr+LE5txT5Bvdbsu/UfQJ/b9wQ+QH3R7Kf1P0Z/sXR4F8Z+c3V4EV8U/7d2+A/TIN9Rf6k6F9M+VuLPoX/MZsQIP/i/keWo53Hfaadi//XzrkJqfJsO5f7HNnz6uaEczndzJ+CuXHzkOVVNx+c3+lmXpAFcAuSFVK3MFzE1B0hRXGLkRVXtwRc0qw3VkrhliYro25ZuJypGyIv4JYnq6BuRbiS0/ULkMq4VciqqlsNrm7OzUdq4NYkq6VubfjFdt4G12GkbjvXx7rx2Qb12mmD67czd3CANKCoD1N8tagf7O9cQOZdGYAbSBakbjAcYhYbKqG4DckaqdsYbmI2V6QpbjOy5uq2gFtma3Ar3NZkbdRtC7dzupkP917CbU/WQd2OcCezhgzpjNuFrKu63eDuZh8SpAduT7Je6vaG+2S7ePvi9iPrr+4AeKBZQ5IMwh1MNkTdofAwR4PDGAk3l5KfDGd2BFmkzo6Co9u5roMY73UQa66DAB+JY/YI7HidnQAntjMPH5MYTFYpBRazSSKpFEwjS1c3A37ZbFKqjMQdRTZa3THw2GybPw53PNkEdSfCk0zdaJmMO4VsqrrT4Olm81NkBu5MslnqzobnmK2OkLm488jmq7sAXpjluj7YbREji9VYAi81Rw6WZVRbTrZC3ZXwKkfbVzOypp1+7uZabz/X2fs6WtZTdANTNmrRTfDmbPffFtytZNvU3Q7vMKfuKztxd5HtVncPvNe4UfIK7j6y/eoegA9ma+sh3MNkR9Q9Ch/zXH/uV4uOM3hCpZPwKY/kfirhNINnVDoLnzNnHiDnOeqrZBfUvQhfyrZLl3GvkF1V9xp83XPwrI9VZvCGSjfhW45e3mbkjquXj/gboruusP7/ATIvFFo=</span><br></pre></td></tr></table></figure>
<p>LWE，这段时间出现过很多次了</p>
<p>看着代码复杂，但该有的条件一个不缺，decrypt 也是直接给了</p>
<p>注意一下 dumps 和 loads</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dumps 函数：</span><br><span class="line">功能：将 SageMath 对象转换为字符串（序列化），通常是二进制字符串，便于存储或传输。</span><br><span class="line"></span><br><span class="line">loads 函数：</span><br><span class="line">功能：将一个通过 dumps 序列化后的字符串（或文件中的序列化内容）重新转化为原来的 SageMath 对象。</span><br></pre></td></tr></table></figure>
<h3 id="exp："><a href="#exp：" class="headerlink" title="exp："></a>exp：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> sage.stats.distributions.discrete_gaussian_integer <span class="keyword">import</span> DiscreteGaussianDistributionIntegerSampler</span><br><span class="line"><span class="keyword">from</span> sage.combinat.subset <span class="keyword">import</span> Subsets</span><br><span class="line"></span><br><span class="line">n = <span class="number">10</span></span><br><span class="line">m = <span class="number">50</span></span><br><span class="line">p = <span class="number">193</span></span><br><span class="line">D = DiscreteGaussianDistributionIntegerSampler(sigma=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">A=<span class="string">b&#x27;eJx1UwtT1FYU3kVQCIgURKkgD5F2QVhFHhWR8lQWEB9hKFuKxpAENmU34STZBXFA2mVdHbFVqmMtFcUHKmOpj3FaEXHm+2W9y65ThtHJTHLv+R7n3JNzJ+MkUxxUnD7RMtTR2OcA59eGVWnIq3Bkc3yCIPh0WRNkRTMVYcCrixbX+Zk42aNy0zL8kuU3FKdfU8mvCIYybCimolmipeoaS2gosl9iCT9VkGAOiwyLJulaW9Mmx0bnAVGydOM8N6hoiqFKQmwv/H+Y+M9qvLo+5B8WBr16v+jlKMGdarPZ2jRLGVSMTl3mVW2QNodoC0+JHVyH/RIlRZ0MBphONUrkfOKQInzcEOeOYybV5ZQcohSeto5TqjuRRSSREVhS2hY7qmpKTkn0ernIS/AplkeXOUrzbHxirYnpVcVk7Rn0iaYgarIgyrJqqQFFiMZYsyKfRk1ujAHRAEdfFI9TepgyeNruTmblCCOq5RHEUVX3UaY7hUVaVNYgtd8fUdGOMO3kKcuT6c5g0EezRtPUJVVcY3wZpl08ZW9gNOs+n9+KMnLCtJunXMZIXcfo1lRL9FJemPJ5KmBgpJr1xnvCVMjTXoZsWydr0wKKYSpUFKavePqaoZsZGjNzhKmYpxIWTFw7SEA12XjRvjCV8lQWy7G+NGeY9vN0wLSonKeDHQc7uCseu0UV41QZpiqeqq+M0zcOd2bkv+lev08TRF+/yuY2Mut+r0KHPPEOT4KbY4RjhqJ0RqM1ITrMU60nyeFhpldOWHRknOos+panenc64xr6yEanhohTTMJFJI3j1GRRM08t/g77ZUmQdFmRTE7RIguOjrrvsAHDcj1+QbAU13D7cAFu4WHphWpXH5ZaWvEewRQlcKoaj0+4LmK+BMHTLsb7F79ixYXZVsI/WxE040tH9zYi1CTjBmZbTndjFR+yyvMbMIO/8SDLVlUVL+BZVfd5p5ST3otZV+oApojDHG6MWIHdP3AVuIqbba4JXMf0DkzaLTwv3VSWi9DBPCxhplQus2MmDjeTsXAAU5VYTvKVj+yqkDrTEKrGYkDdywzuSFjW4vHQdQZ/ZKbgpf37CWbQWOjwYSXtDN714r7hSHfiYRtb4enIaOUA78Gy7eSWU3iKWSzibt1xLJkDPZhvwCOs9GIpR08Y6ak/eRGPT+L9Yaz0jOFFJpblItwa3YkFowxTrbjdNNh9qFjG9eJRD2Zq8VdVAu5nIZSAN0OY7sJqRaGnwZeHV7a6IizGFXNJ6fIQ5vacw+sUvIjPxAesnsK97edrEvJzENw3jtlqXMaUPIpgRhxu5OSx+q5hakzb48VMPZ40d3+37QJTzZk7RFyqteciXLtJPbczEUF8kJqrDnn7EvC6rqCtL9fW3v9jJ97W4XL1afyOeTwM7K/En1jAOzwvaUKwwtPXhkkTb7KzJ47sK+7FdHYt7mIa02c3H8XVZJb4WUbu2XbM+Xn/cCerZKoHvwkyXuFnzGfj0RHcQwhvcasL8/vT8ABTeIInQz7MF+BdanfRVmOsZqSmvSvgOJqf2aWxmVgYq0BIL8JkYRUWqWcCkxp+wmpLSQ9mLyKY1o0VvCyso2NrF9PL7plWTq2XyMVTW5jaOziLOng67vwPLYuHEA==&#x27;</span></span><br><span class="line">b=<span class="string">b&#x27;eJx1kgd0E0cQhm0Dxhxgeu/dNIErkO5ASIhjkkxCohRyOUtr3WHp5H/vJCCJE1IWQXrvvffeO+m999577z1Z7dp3B+/l6b3Vm/2+mZ2b3TVlCc9KsVgmm8ylmRfLs4Sf5aYMXTPJXI8ZObfdSbSlmZmvNlBSpXXP57mEn+Ms1moVE1YbKeYy7iTMztjsSjNQ+r856Wy2LdduptLZFittoCxulJSULOaMNatu0E2gO6FHk9FUuhblVXZplV0Wr5TOEtdnKcalRo6bQk+BCkIvu1wfxOWeF3O0Y2SsNmZ2BTDiZTK/oRq9BfoQ+nagMl4hdxKWFGRP6Nc5D8dLxBJWOm0UFzPDfDubNNDf3uS36aflXAc5ZnLWzpnHXN/ynawrZ8hZMpeQwxigEzqPc+TEM1YqY3mm5SZNK5l0fCfPTL1nNKu/RjfZ2An0hoGB0zswqIDBhCHx3rJ7c6Xj26a1yslmMDTeR+4scmRPTkuumIVhBQwnjLCHxgdJ1FWs0fOyCcdSxsgCRhFGb2IszGYyOV8bYwoYSxgnjcqIscx1fCuN8QVMIEyUsNhNtPCkAiYTpkjSL5K2xM0z7jFMLWAaoUrSckk7i00vYAZhptysUB+Sdzw5Q8wqYDYh1nlGtLU5BcwlVHs+agi1TTXrl/qo60C9jwbCvOWYXxV9F62OPEbeUPSRFN+70Vy84AW2fiF1rdhMYHPCFnbwZLYU2IqwtV1bwDaERjtw67GtwELCIlvB7QiLA1gNbC+wA2GJhjsSmgJY42MngWbCUg13JuwSwNokdhUgwm4a7k5YFpZdgD0E9iTENdyLsHeYCewjsC9huYb7EUwFS4vdYn8Bi9CiWYKQDBNbwARaCSkNbYITHulhhUAbIa1hhuAGVW1kBdoJ0IwTvDAxA18gR8hruJKwKhxeHVYLHEA4UMODCB1hPxYOFjiEsEbDQwmHhWV9HC5wBEFouJZQCGD9PKwTWE84UsOjCEeHZ67AMQLHEo7T8HjCCeGdVONEgZMIJ2t4CuHUENo4TeB0whkankk4K5p5tsA5hHM1PI9wfjCgJC4QuJBwkWYXEy4J+wEuFbiMcLmGVxCuDBLbcZXA1YRrNLuWcF2YmMf1AjcQbtTwJsLNQeJc3CJwK+E2zW4n3BEmpnGnwF2EuzW8h3Bv+B1tuE/gfsIGDR8gPBheSQoPCTxMeETDRwmPhWUdPC7wBOFJDZ8iPB1mNuAZgWcJz2n4POGF6JkvCrxEeFnDVwivhjedxWsCrxPe0PBNwlthpou3Bd4hvKvhe4T3wzMdfCDwIeEjDT8mfBK+EYZPBT4jfK7hF4QvwzPT+Erga8I3Gn5L+C76nd8L/ED4UcOfCD+HmfPxi8CvhN80/J3wR9htA/4U+Ivwt4b/EP4NM9t5ibw5wUvlSrxMrsri3VTcvRh33e4C3kOp5Qr1DNQKFffqUtUQarmh3N6K9QncviqujLr1Od5Puf0VGxC4A1U8KOrWtfPByh2i2NDAHabi4Ru5DXyEckcqNipwR6t4TPTTavlYpY5TaHygTlDxxGjZmhSfpNzJik0J3KkqnhYt6/EqpU5XaEagzlTxrI2mUMdnKzem2JzAnavi6o2m6/Ea5dYqVhe49SpukCtrqmnasM7n89TOfLnG/gOGSvDo&#x27;</span></span><br><span class="line">cipher=<span class="string">b&#x27;&#x27;</span></span><br><span class="line">A=loads(base64.b64decode(A))</span><br><span class="line">b=loads(base64.b64decode(b))</span><br><span class="line">cipher=loads(base64.b64decode(cipher))</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(A)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">primal_attack2</span>(<span class="params">A,b,m,n,p,esz</span>):</span><br><span class="line">    L = block_matrix(</span><br><span class="line">        [</span><br><span class="line">            [matrix(Zmod(p), A).T.echelon_form().change_ring(ZZ), <span class="number">0</span>],</span><br><span class="line">            [matrix.zero(m - n, n).augment(matrix.identity(m - n) * p), <span class="number">0</span>],</span><br><span class="line">            [matrix(ZZ, b), <span class="number">1</span>],</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">#print(L.dimensions())</span></span><br><span class="line">    Q = diagonal_matrix([<span class="number">1</span>]*m + [esz])</span><br><span class="line">    L *= Q</span><br><span class="line">    L = L.LLL()</span><br><span class="line">    L /= Q</span><br><span class="line">    res = L[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span>(res[-<span class="number">1</span>] == <span class="number">1</span>):</span><br><span class="line">        e = vector(GF(p), res[:m])</span><br><span class="line">    <span class="keyword">elif</span>(res[-<span class="number">1</span>] == -<span class="number">1</span>):</span><br><span class="line">        e = -vector(GF(p), res[:m])</span><br><span class="line">    s = matrix(Zmod(p), A).solve_right((vector(Zmod(p), b)-e))</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">s = primal_attack2(A,b,m,n,p,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">cipher_a, cipher_b, s, p</span>):</span><br><span class="line">    tmp = <span class="built_in">int</span>((cipher_b - cipher_a*s) % p)</span><br><span class="line">    <span class="keyword">if</span> tmp &gt; p//<span class="number">2</span>:</span><br><span class="line">        tmp -= p</span><br><span class="line">    <span class="keyword">if</span> p//<span class="number">2</span> &lt; <span class="number">2</span>*<span class="built_in">abs</span>(tmp):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">msg = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> cipher_a,cipher_b <span class="keyword">in</span> cipher:</span><br><span class="line">    m = decrypt(cipher_a,cipher_b,s,p)</span><br><span class="line">    msg += <span class="built_in">str</span>(m)</span><br><span class="line">flag = long_to_bytes(<span class="built_in">int</span>(msg[::-<span class="number">1</span>],<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;03fe4298-7509-4e41-8225-77d0cccc0c15&#125;</span></span><br></pre></td></tr></table></figure>
<hr>
<hr>
<p>以下两道后面有机会再继续看，最近有点忙，先鸽了</p>
<hr>
<hr>
<h1 id="SEKAICTF2024"><a href="#SEKAICTF2024" class="headerlink" title="SEKAICTF2024"></a>SEKAICTF2024</h1><h2 id="Some-Trick"><a href="#Some-Trick" class="headerlink" title="*Some Trick"></a>*Some Trick</h2><blockquote>
<p>Bob and Alice found a futuristic version of opunssl and replaced all their needs for doofy wellmen.<br>Author: deut-erium</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> secrets <span class="keyword">import</span> randbelow, randbits</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> FLAG</span><br><span class="line"></span><br><span class="line">CIPHER_SUITE = randbelow(<span class="number">2</span>**<span class="number">256</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;oPUN_SASS_SASS_l version 4.0.<span class="subst">&#123;CIPHER_SUITE&#125;</span>&quot;</span>)</span><br><span class="line">random.seed(CIPHER_SUITE)</span><br><span class="line"></span><br><span class="line">GSIZE = <span class="number">8209</span></span><br><span class="line">GNUM = <span class="number">79</span></span><br><span class="line"></span><br><span class="line">LIM = GSIZE**GNUM</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen</span>(<span class="params">n</span>):</span><br><span class="line">    p, i = [<span class="number">0</span>] * n, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> random.sample(<span class="built_in">range</span>(<span class="number">1</span>, n), n - <span class="number">1</span>):</span><br><span class="line">        p[i], i = j, j</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">tuple</span>(p)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gexp</span>(<span class="params">g, e</span>):</span><br><span class="line">    res = <span class="built_in">tuple</span>(g)</span><br><span class="line">    <span class="keyword">while</span> e:</span><br><span class="line">        <span class="keyword">if</span> e &amp; <span class="number">1</span>:</span><br><span class="line">            res = <span class="built_in">tuple</span>(res[i] <span class="keyword">for</span> i <span class="keyword">in</span> g)</span><br><span class="line">        e &gt;&gt;= <span class="number">1</span></span><br><span class="line">        g = <span class="built_in">tuple</span>(g[i] <span class="keyword">for</span> i <span class="keyword">in</span> g)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">k, m, G</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> G:</span><br><span class="line">        <span class="keyword">return</span> m</span><br><span class="line">    mod = <span class="built_in">len</span>(G[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> gexp(G[<span class="number">0</span>], k % mod)[m % mod] + enc(k // mod, m // mod, G[<span class="number">1</span>:]) * mod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inverse</span>(<span class="params">perm</span>):</span><br><span class="line">    res = <span class="built_in">list</span>(perm)</span><br><span class="line">    <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(perm):</span><br><span class="line">        res[v] = i</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">G = [gen(GSIZE) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(GNUM)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FLAG = <span class="built_in">int</span>.from_bytes(FLAG, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">left_pad = randbits(randbelow(LIM.bit_length() - FLAG.bit_length()))</span><br><span class="line">FLAG = (FLAG &lt;&lt; left_pad.bit_length()) + left_pad</span><br><span class="line">FLAG = (randbits(randbelow(LIM.bit_length() - FLAG.bit_length()))</span><br><span class="line">        &lt;&lt; FLAG.bit_length()) + FLAG</span><br><span class="line"></span><br><span class="line">bob_key = randbelow(LIM)</span><br><span class="line">bob_encr = enc(FLAG, bob_key, G)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;bob says&quot;</span>, bob_encr)</span><br><span class="line">alice_key = randbelow(LIM)</span><br><span class="line">alice_encr = enc(bob_encr, alice_key, G)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;alice says&quot;</span>, alice_encr)</span><br><span class="line">bob_decr = enc(alice_encr, bob_key, [inverse(i) <span class="keyword">for</span> i <span class="keyword">in</span> G])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;bob says&quot;</span>, bob_decr)</span><br></pre></td></tr></table></figure>
<h1 id="ByteCTF-2024"><a href="#ByteCTF-2024" class="headerlink" title="ByteCTF-2024"></a>ByteCTF-2024</h1><h2 id="magic-lfsr"><a href="#magic-lfsr" class="headerlink" title="*magic_lfsr"></a>*magic_lfsr</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha512</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">mask1 = <span class="number">211151158277430590850506190902325379931</span></span><br><span class="line">mask2 = <span class="number">314024231732616562506949148198103849397</span></span><br><span class="line">mask3 = <span class="number">175840838278158851471916948124781906887</span></span><br><span class="line">mask4 = <span class="number">270726596087586267913580004170375666103</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lfsr</span>(<span class="params">R, mask</span>):</span><br><span class="line">    R_bin = [<span class="built_in">int</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">bin</span>(R)[<span class="number">2</span>:].zfill(<span class="number">128</span>)]</span><br><span class="line">    mask_bin = [<span class="built_in">int</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">bin</span>(mask)[<span class="number">2</span>:].zfill(<span class="number">128</span>)]</span><br><span class="line">    s = <span class="built_in">sum</span>([R_bin[i] * mask_bin[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>)]) &amp; <span class="number">1</span></span><br><span class="line">    R_bin = [s] + R_bin[:-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">int</span>(<span class="string">&quot;&quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, R_bin)), <span class="number">2</span>), s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ff</span>(<span class="params">x0, x1, x2, x3</span>):</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">int</span>(sha512(long_to_bytes(x0 * x2 + x0 + x1**<span class="number">4</span> + x3**<span class="number">5</span> + x0 * x1 * x2 * x3 + (x1 * x3) ** <span class="number">4</span>)).hexdigest(), <span class="number">16</span>) &amp; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">round</span>(<span class="params">R, R1_mask, R2_mask, R3_mask, R4_mask</span>):</span><br><span class="line">    out = <span class="number">0</span></span><br><span class="line">    R1_NEW, _ = lfsr(R, R1_mask)</span><br><span class="line">    R2_NEW, _ = lfsr(R, R2_mask)</span><br><span class="line">    R3_NEW, _ = lfsr(R, R3_mask)</span><br><span class="line">    R4_NEW, _ = lfsr(R, R4_mask)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">270</span>):</span><br><span class="line">        R1_NEW, x1 = lfsr(R1_NEW, R1_mask)</span><br><span class="line">        R2_NEW, x2 = lfsr(R2_NEW, R2_mask)</span><br><span class="line">        R3_NEW, x3 = lfsr(R3_NEW, R3_mask)</span><br><span class="line">        R4_NEW, x4 = lfsr(R4_NEW, R4_mask)</span><br><span class="line">        out = (out &lt;&lt; <span class="number">1</span>) + ff(x1, x2, x3, x4)</span><br><span class="line">    <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key = getRandomNBitInteger(<span class="number">128</span>)</span><br><span class="line">out = <span class="built_in">round</span>(key, mask1, mask2, mask3, mask4)</span><br><span class="line">cipher = AES.new(long_to_bytes(key), mode=AES.MODE_ECB)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;out = <span class="subst">&#123;out&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;enc = <span class="subst">&#123;cipher.encrypt(pad(flag, <span class="number">16</span>))&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># out = 1024311481407054984168503188572082106228007820628496173132204098971130766468510095</span></span><br><span class="line"><span class="comment"># enc = b&#x27;\r\x9du\xa15q\xd2\x81\x0b\xceq2\x8d)*\xe9\xf0;a\xad\xbe?\xa2\xb2\x1f\x88O\x8c\xa2[\xcb\x9a\xa9\x8d\xac\x0b\x85\xb4j@]\x0e&#125;EF&#123;\xb1\x91&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Wp</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow元旦水友节</title>
    <url>/Crypto/ctfshow%E5%85%83%E6%97%A6%E6%B0%B4%E5%8F%8B%E8%8A%82/</url>
    <content><![CDATA[<p>昨夜今朝争几许，共惊年去年来。</p>
<span id="more"></span>
<h3 id="月月的爱情故事"><a href="#月月的爱情故事" class="headerlink" title="月月的爱情故事"></a>月月的爱情故事</h3><p>题目作者：<strong>mumu666</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">你知道吗。月月今天遇到了一个让他心动的女孩，她的名字叫做小雨，太幸运了。小雨是一个活泼可爱的女孩！她的笑容如同春天里的阳光。温暖了月月的心，月月第一次见到小雨是在图书馆里！事情是这样的。当时小雨正在专心致志地看书。阳光洒在她的脸上。让她看起来如同天使一般美丽！月月被小雨的美丽和才华所吸引。开始暗暗关注她。在接下来的日子里。月月开始尝试与小雨接触！和她聊天和学习。他们有着许多共同的兴趣爱好，一起度过了许多快乐的时光，渐渐地！月月发现自己对小雨产生了特殊的感情，他开始向小雨表达自己的心意，然而，小雨并没有立即接受月月的感情！她告诉月月。她曾经受过感情的伤害，需要时间来慢慢修复自己的心灵。月月尊重小雨的决定！他开始用更多的时间和精力来陪伴小雨，帮助她走出过去的阴影。在接下来的几个月里。月月和小雨的关系逐渐升温！他们一起参加了许多校园活动。一起探索了那个城市的角角落落。渐渐地！雨也开始对月月产生了感情。她发现自己越来越依赖他。越来越喜欢他。最终！小雨和月月走到了一起，他们的爱情故事成为了校园里的佳话。让同学们都羡慕不已，他们一起度过了青春岁月，一起经历了成长和进步的喜悦与挫折！他们的感情越来越深厚。也越来越稳定。在他们的恋爱过程中，月月和小雨也学会了如何相处和包容对方！他们互相理解互相支持。一起面对生活中的挑战和困难！他们的爱情让他们变得更加坚强和勇敢，也让他们感受到了生命中最美好的东西。月月相信他们能走得更远，更相信自己不会辜负小雨，当他们遭遇挫折和失败的时候！两人永远不会被打倒。这正是他们彼此爱的力量。在他们空闲的时候，月月经常带小雨出去逛街！晚上一起看电影。有一天！月月说将来他要给小雨一场最美的婚礼，小雨十分感动也十分期盼。就这样。这份约定成为了两人前进的动力。两人共同努力最终一起考上了同一所大学的研究生。两人非常开心彼此深情地看着对方似乎有说不完的情话！研究生三年他们互相帮助一起度过了人生最有意义的大学时光，毕业后两人也很轻松找到了自己心仪的企业。月月没有忘记当初的约定。是的。他要给小雨一场最美好的婚礼。终于！这一天到来了，小雨穿上月月为她定制的婚纱。他们手牵手走向了更美好的未来。场下。所有的嘉宾都为他们鼓掌和欢呼并祝福他们的爱情能够永恒长存。</span><br><span class="line"></span><br><span class="line">VTJGc2RHVmtYMS9iVkY0NXp5dGxrZUVoZWZBcWtwSFFkTXF0VUxrMk9pYkxxNzlOSEpNbTlyUDNDdGtLckU0MQpDYUJKbU1JVmNVVlNiM0l6cEhldVd3PT0=</span><br><span class="line"></span><br><span class="line">hint:试试摩斯吧！</span><br></pre></td></tr></table></figure>
<p>先base64解出 </p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">U2FsdGVkX1/bVF45zytlkeEhefAqkpHQdMqtULk2OibLq79NHJMm9rP3CtkKrE41CaBJmMIVcUVSb3IzpHeuWw<span class="operator">=</span><span class="operator">=</span></span><br></pre></td></tr></table></figure>
<p>AES、DES、RC4、Rabbit、Triple DES（3DES）</p>
<p>这些算法都可以引入密钥，且开头部分通常为 <code>U2FsdGVkX1</code></p>
<p>我以为crypto中这一大串文字应该是废话的，没想到这里用到了，提示摩斯密码，着实没想到竟然是标点符号</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cipher = <span class="string">&#x27;你知道吗。月月今天遇到了一个让他心动的女孩，她的名字叫做小雨，太幸运了。小雨是一个活泼可爱的女孩！她的笑容如同春天里的阳光。温暖了月月的心，月月第一次见到小雨是在图书馆里！事情是这样的。当时小雨正在专心致志地看书。阳光洒在她的脸上。让她看起来如同天使一般美丽！月月被小雨的美丽和才华所吸引。开始暗暗关注她。在接下来的日子里。月月开始尝试与小雨接触！和她聊天和学习。他们有着许多共同的兴趣爱好，一起度过了许多快乐的时光，渐渐地！月月发现自己对小雨产生了特殊的感情，他开始向小雨表达自己的心意，然而，小雨并没有立即接受月月的感情！她告诉月月。她曾经受过感情的伤害，需要时间来慢慢修复自己的心灵。月月尊重小雨的决定！他开始用更多的时间和精力来陪伴小雨，帮助她走出过去的阴影。在接下来的几个月里。月月和小雨的关系逐渐升温！他们一起参加了许多校园活动。一起探索了那个城市的角角落落。渐渐地！雨也开始对月月产生了感情。她发现自己越来越依赖他。越来越喜欢他。最终！小雨和月月走到了一起，他们的爱情故事成为了校园里的佳话。让同学们都羡慕不已，他们一起度过了青春岁月，一起经历了成长和进步的喜悦与挫折！他们的感情越来越深厚。也越来越稳定。在他们的恋爱过程中，月月和小雨也学会了如何相处和包容对方！他们互相理解互相支持。一起面对生活中的挑战和困难！他们的爱情让他们变得更加坚强和勇敢，也让他们感受到了生命中最美好的东西。月月相信他们能走得更远，更相信自己不会辜负小雨，当他们遭遇挫折和失败的时候！两人永远不会被打倒。这正是他们彼此爱的力量。在他们空闲的时候，月月经常带小雨出去逛街！晚上一起看电影。有一天！月月说将来他要给小雨一场最美的婚礼，小雨十分感动也十分期盼。就这样。这份约定成为了两人前进的动力。两人共同努力最终一起考上了同一所大学的研究生。两人非常开心彼此深情地看着对方似乎有说不完的情话！研究生三年他们互相帮助一起度过了人生最有意义的大学时光，毕业后两人也很轻松找到了自己心仪的企业。月月没有忘记当初的约定。是的。他要给小雨一场最美好的婚礼。终于！这一天到来了，小雨穿上月月为她定制的婚纱。他们手牵手走向了更美好的未来。场下。所有的嘉宾都为他们鼓掌和欢呼并祝福他们的爱情能够永恒长存。&#x27;</span></span><br><span class="line"></span><br><span class="line">m = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cipher:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;。&#x27;</span> == i:</span><br><span class="line">        m+=<span class="string">&#x27;.&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&#x27;，&#x27;</span> == i:</span><br><span class="line">        m+=<span class="string">&#x27;-&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&#x27;！&#x27;</span> == i:</span><br><span class="line">        m+=<span class="string">&#x27; &#x27;</span></span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># .--. .- ... ... .-- --- .-. -.. .. ... -.-- ..- . -.-- ..- . -.... -.... -....</span></span><br></pre></td></tr></table></figure>
<p>解出摩斯 为 <code>PASSWORDISYUEYUE666</code></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagesdfcc5932fe6f653d3aecf06bf68c422.png" alt="dfcc5932fe6f653d3aecf06bf68c422"></p>
<p>AES 的密钥长度一般为 128位，192位，256位，也即16bytes，24bytes，32bytes，</p>
<p>而这里是9字节， 这种是基于AES的PBE  </p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zYm94LmNuL3Rvb2wvYWVz">Aes/Des/Rc4/Rabbit/TripleDes加密解密<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="麻辣兔头又一锅"><a href="#麻辣兔头又一锅" class="headerlink" title="麻辣兔头又一锅"></a>麻辣兔头又一锅</h3><p>描述：<strong>听说有人不喜欢短尾巴的兔兔？肿么可能？我也很疑惑呢。</strong></p>
<p>题目作者：<strong>萌新阿狸*</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">126292,165298,124522,116716,23623,21538,72802,90966,193480,77695,98618,127096,15893,65821,58966,163254,179952,134870,45821,21712,68316,87720,156070,16323,86266,148522,93678,110618,110445,136381,92706,129732,22416,177638,110110,4324,180608,3820,67750,134150,23116,116772,50573,149156,5292</span><br><span class="line">60144,146332,165671,109800,176885,65766,76908,147004,135068,182821,123107,77538,86482,88096,101725,16475,158935,123018,42322,144694,186769,176935,59296,134856,65813,131931,144283,95814,102191,185706,55744,67711,149076,108054,135112,100344,35434,121479,14506,145222,183989,17548,38904,27832,105943</span><br></pre></td></tr></table></figure>
<p>由描述知道 斐波那契数列 和 异或</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">a = [<span class="number">126292</span>, <span class="number">165298</span>, <span class="number">124522</span>, <span class="number">116716</span>, <span class="number">23623</span>, <span class="number">21538</span>, <span class="number">72802</span>, <span class="number">90966</span>, <span class="number">193480</span>, <span class="number">77695</span>, <span class="number">98618</span>, <span class="number">127096</span>, <span class="number">15893</span>, <span class="number">65821</span>, <span class="number">58966</span>,</span><br><span class="line">      <span class="number">163254</span>, <span class="number">179952</span>, <span class="number">134870</span>, <span class="number">45821</span>, <span class="number">21712</span>, <span class="number">68316</span>, <span class="number">87720</span>, <span class="number">156070</span>, <span class="number">16323</span>, <span class="number">86266</span>, <span class="number">148522</span>, <span class="number">93678</span>, <span class="number">110618</span>, <span class="number">110445</span>, <span class="number">136381</span>,</span><br><span class="line">      <span class="number">92706</span>, <span class="number">129732</span>, <span class="number">22416</span>, <span class="number">177638</span>, <span class="number">110110</span>, <span class="number">4324</span>, <span class="number">180608</span>, <span class="number">3820</span>, <span class="number">67750</span>, <span class="number">134150</span>, <span class="number">23116</span>, <span class="number">116772</span>, <span class="number">50573</span>, <span class="number">149156</span>, <span class="number">5292</span>]</span><br><span class="line">b = [<span class="number">60144</span>, <span class="number">146332</span>, <span class="number">165671</span>, <span class="number">109800</span>, <span class="number">176885</span>, <span class="number">65766</span>, <span class="number">76908</span>, <span class="number">147004</span>, <span class="number">135068</span>, <span class="number">182821</span>, <span class="number">123107</span>, <span class="number">77538</span>, <span class="number">86482</span>, <span class="number">88096</span>, <span class="number">101725</span>,</span><br><span class="line">      <span class="number">16475</span>, <span class="number">158935</span>, <span class="number">123018</span>, <span class="number">42322</span>, <span class="number">144694</span>, <span class="number">186769</span>, <span class="number">176935</span>, <span class="number">59296</span>, <span class="number">134856</span>, <span class="number">65813</span>, <span class="number">131931</span>, <span class="number">144283</span>, <span class="number">95814</span>, <span class="number">102191</span>, <span class="number">185706</span>,</span><br><span class="line">      <span class="number">55744</span>, <span class="number">67711</span>, <span class="number">149076</span>, <span class="number">108054</span>, <span class="number">135112</span>, <span class="number">100344</span>, <span class="number">35434</span>, <span class="number">121479</span>, <span class="number">14506</span>, <span class="number">145222</span>, <span class="number">183989</span>, <span class="number">17548</span>, <span class="number">38904</span>, <span class="number">27832</span>, <span class="number">105943</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    m = (gmpy2.fib(a[i]) ^ gmpy2.fib(b[i])) &amp; <span class="number">0xff</span></span><br><span class="line">    flag += <span class="built_in">chr</span>(m)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># ctfshow&#123;6d83b2f1-1241-4b25-9c1c-0a4c218f6c5f&#125;</span></span><br></pre></td></tr></table></figure>
<p><code>gmpy2.fib(i)</code>可求斐波那契数列第i个数</p>
<p> <code>&amp; 0xff</code> 是每个异或值保留一个字节</p>
<p>佩服佬们的想象力</p>
<h3 id="NOeasyRSA"><a href="#NOeasyRSA" class="headerlink" title="NOeasyRSA"></a>NOeasyRSA</h3><p>题目描述：<strong>Can you find a and b?</strong></p>
<p>题目作者：<strong>mumu666</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> FLAG</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x, n</span>):  </span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">pow</span>(u,n,p)*x + v*(<span class="number">1</span>-<span class="built_in">pow</span>(u,n,p))*<span class="built_in">pow</span>(<span class="number">1</span>-u, -<span class="number">1</span>, p)) % p  </span><br><span class="line"> </span><br><span class="line">p = <span class="number">97201997431130462639713476119411091922677381239967611061717766639853376871260165905989218335681560177626304205941143288128749532327607316527719299945637260643711897738116821179208534292854942631428531228316344113303402450588666012800739695018334321748049518585617428717505851025279186520225325765864212731597</span></span><br><span class="line">u = <span class="number">14011530787746260724685809284106528245188320623672333581950055679051366424425259006994945665868546765648275822501035229606171697373122374288934559593175958252416643298136731105775907857798815936190074350794406666922357841091849449562922724459876362600203284195621546769313749721476449207319566681142955460891977927184371401451946649848065952527323468939007868874410618846898618148752279316070498097254384228565132693552949206926391461108714034141321700284318834819732949544823937032615318011463993204345644038210938407875147446570896826729265366024224612406740371824999201173579640264979086368843819069035017648357042</span></span><br><span class="line">v = <span class="number">16560637729264127314502582188855146263038095275553321912067588804088156431664370603746929023264744622682435376065011098909463163865218610904571775751705336266271206718700427773757241393847274601309127403955317959981271158685681135990095066557078560050980575698278958401980987514566688310172721963092100285717921465575782434632190913355536291988686994429739581469633462010143996998589435537178075521590880467628369030177392034117774853431604525531066071844562073814187461299329339694285509725214674761990940902460186665127466202741989052293452290042871514149972640901432877318075354158973805495004367245286709191395753</span></span><br><span class="line">w = <span class="number">30714296289538837760400431621661767909419746909959905820574067592409316977551664652203146506867115455464665524418603262821119202980897986798059489126166547078057148348119365709992892615014626003313040730934533283339617856938614948620116906770806796378275546490794161777851252745862081462799572448648587153412425374338967601487603800379070501278705056791472269999767679535887678042527423534392867454254712641029797659150392148648565421400107500607994226410206105774620083214215531253544274444448346065590895353139670885420838370607181375842930315910289979440845957719622069769102831263579510660283634808483329218819353</span></span><br><span class="line">a = randint(<span class="number">0</span>, <span class="number">2</span>**<span class="number">2048</span>)</span><br><span class="line">b = randint(<span class="number">0</span>, <span class="number">2</span>**<span class="number">2048</span>)</span><br><span class="line">A = f(w, a)</span><br><span class="line">B = f(w, b)</span><br><span class="line">key = long_to_bytes(f(B, a))[:<span class="built_in">len</span>(FLAG)]</span><br><span class="line">enc = strxor(FLAG, key)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;A = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;B = &#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;enc = &#125;</span>&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">A = 19000912802080599027672447674783518419279033741329820736608320648294849832904652704615322546923683308427498322653162857743332527479657555691849627174691056234736228204031597391109766621450008024310365149769851160904834246087493085291270515883474521052340305802461028930107070785434600793548735004323108063823</span></span><br><span class="line"><span class="string">B = 73344156869667785951629011239443984128961974188783039136848369309843181351498207375582387449307849089511875560536212143659712959631858144127598424003355287131145957594729789310869405545587664999655457134475561514111282513273352679348722584469527242626837672035004800949907749224093056447758969518003237425788</span></span><br><span class="line"><span class="string">enc = b&#x27;\xfd\xc1\xb7\x9d&quot;$\xc2\xb0\xb5\xee\xf89\xa4V\x8e\x17\x01K9\xbc.\x92=\x85\x80\xd4\x03\xefAl&quot;\xbd\x8b\xcdL\xb5\xa3!&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>分析：</p>
<p>通过异或，我们需求key，求key需要知道 a</p>
<p>已知数据：u、v、w、p、A、B</p>
<script type="math/tex; mode=display">
key = u^a*B+v*(1-u^a)*(1-u)^{-1} \bmod p\\</script><script type="math/tex; mode=display">
A = u^a*w+v*(1-u^a)*(1-u)^{-1} \bmod p</script><p>处理一下</p>
<script type="math/tex; mode=display">key*(1-u) = u^a*B*(1-u)+v*(1-u^a) \bmod p=u^a*(B-B*u-v)+v \bmod p\\</script><script type="math/tex; mode=display">A*(1-u) = u^a*w*(1-u)+v*(1-u^a) \bmod p=u^a*(w-w*u-v)+v \bmod p</script><p>如此看来 只需知道 <script type="math/tex">u^a</script> 就可求 <code>key</code> ，而<script type="math/tex">u^a=(A*(1-u)-v)*(w-w*u-v)^{-1} \bmod p</script> </p>
<p>最后 <code>strxor</code> 一下即可</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.strxor <span class="keyword">import</span> strxor</span><br><span class="line"></span><br><span class="line">p = <span class="number">97201997431130462639713476119411091922677381239967611061717766639853376871260165905989218335681560177626304205941143288128749532327607316527719299945637260643711897738116821179208534292854942631428531228316344113303402450588666012800739695018334321748049518585617428717505851025279186520225325765864212731597</span></span><br><span class="line">u = <span class="number">14011530787746260724685809284106528245188320623672333581950055679051366424425259006994945665868546765648275822501035229606171697373122374288934559593175958252416643298136731105775907857798815936190074350794406666922357841091849449562922724459876362600203284195621546769313749721476449207319566681142955460891977927184371401451946649848065952527323468939007868874410618846898618148752279316070498097254384228565132693552949206926391461108714034141321700284318834819732949544823937032615318011463993204345644038210938407875147446570896826729265366024224612406740371824999201173579640264979086368843819069035017648357042</span></span><br><span class="line">v = <span class="number">16560637729264127314502582188855146263038095275553321912067588804088156431664370603746929023264744622682435376065011098909463163865218610904571775751705336266271206718700427773757241393847274601309127403955317959981271158685681135990095066557078560050980575698278958401980987514566688310172721963092100285717921465575782434632190913355536291988686994429739581469633462010143996998589435537178075521590880467628369030177392034117774853431604525531066071844562073814187461299329339694285509725214674761990940902460186665127466202741989052293452290042871514149972640901432877318075354158973805495004367245286709191395753</span></span><br><span class="line">w = <span class="number">30714296289538837760400431621661767909419746909959905820574067592409316977551664652203146506867115455464665524418603262821119202980897986798059489126166547078057148348119365709992892615014626003313040730934533283339617856938614948620116906770806796378275546490794161777851252745862081462799572448648587153412425374338967601487603800379070501278705056791472269999767679535887678042527423534392867454254712641029797659150392148648565421400107500607994226410206105774620083214215531253544274444448346065590895353139670885420838370607181375842930315910289979440845957719622069769102831263579510660283634808483329218819353</span></span><br><span class="line">A = <span class="number">19000912802080599027672447674783518419279033741329820736608320648294849832904652704615322546923683308427498322653162857743332527479657555691849627174691056234736228204031597391109766621450008024310365149769851160904834246087493085291270515883474521052340305802461028930107070785434600793548735004323108063823</span></span><br><span class="line">B = <span class="number">73344156869667785951629011239443984128961974188783039136848369309843181351498207375582387449307849089511875560536212143659712959631858144127598424003355287131145957594729789310869405545587664999655457134475561514111282513273352679348722584469527242626837672035004800949907749224093056447758969518003237425788</span></span><br><span class="line">enc = <span class="string">b&#x27;\xfd\xc1\xb7\x9d&quot;$\xc2\xb0\xb5\xee\xf89\xa4V\x8e\x17\x01K9\xbc.\x92=\x85\x80\xd4\x03\xefAl&quot;\xbd\x8b\xcdL\xb5\xa3!&#x27;</span></span><br><span class="line"></span><br><span class="line">ua = (A*(<span class="number">1</span>-u)-v)* libnum.invmod(w-w*u-v,p) %p</span><br><span class="line">key = (ua*(B-B*u-v)+v)*libnum.invmod(<span class="number">1</span>-u,p) %p</span><br><span class="line"><span class="built_in">print</span>(strxor(enc,libnum.n2s(key)[:<span class="built_in">len</span>(enc)]))</span><br><span class="line"><span class="comment"># ctfshow&#123;This_Is_Really_Not_So_Smooth!&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="sign-rand"><a href="#sign-rand" class="headerlink" title="sign_rand"></a>sign_rand</h3><p>题目作者：<strong>lingfeng</strong>      </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line">            </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_state</span>(<span class="params">kbits, k</span>):</span><br><span class="line">    seed = [(random.getrandbits(kbits) &gt;&gt; k) &amp; <span class="number">0xfffffff</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>)]</span><br><span class="line">    state = (<span class="number">3</span>, <span class="built_in">tuple</span>(seed + [<span class="number">0</span>]), <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">give_gift</span>(<span class="params">kbits, num</span>):</span><br><span class="line">    gift = [random.getrandbits(kbits) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num)]</span><br><span class="line">    e = random.getrandbits(<span class="number">7</span>)</span><br><span class="line">    l_num = num - e</span><br><span class="line">    s_box = <span class="built_in">list</span>(<span class="built_in">range</span>(num))</span><br><span class="line">    random.shuffle(s_box)</span><br><span class="line">    l_gift = [gift[i] <span class="keyword">for</span> i <span class="keyword">in</span> s_box[:l_num]]</span><br><span class="line">    <span class="keyword">return</span> (l_gift, s_box[:l_num], e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc_flag</span>(<span class="params">state, e</span>):</span><br><span class="line">    key = bytes_to_long(md5(long_to_bytes(state[<span class="number">1</span>][e])).digest())</span><br><span class="line">    enc = bytes_to_long(flag) ^ key</span><br><span class="line">    <span class="keyword">return</span> enc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kbits, k, num = random.randrange(<span class="number">64</span>), random.randrange(<span class="number">16</span>), random.randrange(<span class="number">400</span>, <span class="number">600</span>)</span><br><span class="line">state = get_state(kbits, k)</span><br><span class="line">random.setstate(state)</span><br><span class="line">gift = give_gift(kbits, num)</span><br><span class="line">enc = enc_flag(state, gift[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(gift, enc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ([91463260584, 97520150804, 134987178347, 134745660347, 23369346769, 88869916197, 67723104206, 132211190015, 74383600340, 57357411421, 80301226226, 2847043233, 46071508714, 76391425800, 71113777427, 12603028605, 127607785895, 82661956584, 48539405830, 131191473154, 137430688091, 48026249914, 105523652421, 58217141456, 135651011411, 37099885733, 101903983367, 117525416468, 49720139903, 123719748136, 58611168240, 68135859850, 6355615539, 23769720298, 7999623487, 19601432037, 49460687576, 34510812373, 97988805553, 120381187017, 37643325426, 79314538948, 128727827227, 41938289773, 74120986880, 29052999070, 21215042789, 76176648906, 82899209179, 90338690991, 102277220210, 109016314367, 2419923303, 75246152672, 109203867772, 87030346778, 119151949871, 134868756437, 124854798665, 122116306769, 31536426951, 82104297926, 118556737102, 78417017414, 81807286830, 24688295471, 126360674284, 8870569872, 105339369180, 61910863416, 56597235604, 50122937080, 135836683348, 75685244539, 112566491901, 86217144353, 110999080631, 91114786530, 94967775022, 52680440255, 76947914257, 133052296759, 22589975272, 104632324223, 47428022416, 106941367714, 119250845700, 80196618477, 92917756830, 52764061858, 82855761133, 26800124167, 129317288037, 44051967549, 70500283649, 165355182, 78293334339, 45001066520, 84638985033, 32566871344, 38421055041, 56145488218, 83396525174, 116762960131, 58381974438, 132249926372, 36091120717, 35213963219, 88756092150, 45288405267, 27461079382, 19589246113, 28308681656, 47161727545, 69898448282, 22959597168, 132569999975, 100557577568, 127037292334, 29708117311, 33229333831, 29311547868, 135347707719, 85435007922, 54540391811, 109544478077, 66841548339, 47159376439, 42574542524, 62176229940, 3138675000, 21267865120, 22618290315, 126018690563, 21590061225, 9799239940, 10617934652, 40956988582, 131053131140, 90043238501, 81283244185, 109338223936, 68311960398, 25088200986, 28895564195, 17646619057, 82775422880, 81522377214, 28334564831, 100791800926, 85872403124, 127915503356, 72496838376, 109007653011, 96263138881, 69693106974, 4718076407, 68334177311, 31708464646, 96111162918, 48965277868, 54931198292, 105535767797, 105680940066, 109968562576, 23573023928, 48569942163, 106967716286, 94835446653, 92803971955, 53791818332, 14453746086, 132101017989, 26361874022, 32122658200, 51724426274, 114997634813, 75838224666, 89848273104, 73619960674, 97795812498, 132466249292, 25997032367, 40732063573, 59142286405, 68524304985, 49545031400, 28044368864, 95700359624, 108201671504, 127043767055, 9384509797, 120972803416, 41782179648, 76653307257, 44056421640, 101631026937, 99078185959, 54885001820, 69316726710, 19710227322, 86035277688, 42289562955, 98051921147, 79098792488, 106490144808, 13834874, 69114014086, 4418515159, 109316722991, 92603496375, 68830244931, 111949257703, 102637560761, 5012149380, 43811237017, 4526712578, 102995188930, 9165821006, 63456393327, 68912422322, 104913358841, 108860651772, 52967416635, 84227988465, 101715630295, 26297443306, 110653579906, 91487440397, 116959430145, 83499469513, 48913630229, 76988993305, 41832173701, 13694488408, 135450931748, 39634435716, 41679152695, 126540504548, 91399825525, 99004649347, 19517357430, 8279948639, 133596449559, 1449103211, 50732184406, 52247676129, 74928416312, 64326525401, 124673786795, 92042480385, 24404916254, 99622146133, 51463314254, 36722967192, 4007778602, 39109534005, 120478575332, 99886542155, 5756463131, 91679854224, 3608646835, 35655876863, 121959477025, 20408412916, 36341277711, 43627610089, 24855949002, 128669830633, 70347508117, 9425085453, 2022963949, 5053312318, 63243834495, 21497715007, 5936366400, 44266914863, 119468825913, 91726986385, 126494307832, 93847533617, 22070910941, 20204251399, 42254244260, 60489335607, 40705184865, 80919639775, 73360223499, 132743946450, 88897376509, 103144368275, 9982808097, 131532980487, 91081435155, 78915930938, 72790758029, 120696671493, 78255313725, 13309583510, 23841020581, 116634908326, 73400462338, 57323203784, 46210923108, 41134724194, 43089395737, 118503520944, 111039189867, 99418263301, 59298127775, 45252940179, 40345195432, 16841439060, 100422187771, 65791698364, 61167532292, 30338914082, 14930863404, 4703203112, 124912009656, 9195518396, 18552364400, 7303227315, 105753747788, 3079040268, 116480022128, 1215344111, 9934249637, 76178148585, 20033461169, 87344780021, 72391242953, 129540048833, 15495213032, 49963621916, 84362224351, 97100635498, 105086571577, 51150506310, 118045067326, 65966867679, 7925108854, 131280748402, 66481282233, 107509392827, 78521145687, 35456851157, 97461157961, 30244093674, 24123083085, 27909475052, 69646113342, 131930611276, 97792139629, 135917828529, 32305782568, 59325645293, 84962280113, 74529748221, 22659244720, 54776660364, 66934871192, 14824496938, 37231294479, 102244198902, 31674646475, 128196911226, 90158594889, 121714346066, 64647669235, 105263204191, 127988380741, 130175056631, 114272442969, 135960937840, 62465712860, 32333037569, 137012433094, 92929672123, 86030288893, 73602847949, 58136148471, 118893337093, 97692245318, 99539974338, 116231441994, 32445182154, 115683286754, 114711297102, 102210385893, 7687212992, 73626254322, 242951419, 5952493527, 96817591608, 45197171621, 122928115217, 106192593180, 99889552302, 125596158762, 136959359712, 67291405558, 71974425715, 115789979144, 59321975202, 84748820897, 133266408556, 6800817333, 110678933813, 96832595879, 97681824039, 89341148630, 84626208563, 58523733456, 93000780873, 68444996084, 775177345, 17204124036, 129474447019, 73589942581, 65415043899, 131703332659, 101783987222, 61388598262, 103435807803, 104030629529, 19123072760, 63612557945, 38245223725, 54345357864, 62016904380, 34602169486, 51229280420, 66624757580, 68760378559, 131556923700, 21935621011, 36349470821, 10120892182, 25883848878, 71735922493, 62883391871, 90647098, 41388569318, 52175456448, 71822304690, 19251125978, 91308465291, 50110754397, 91050175581, 83697004380, 6165622900, 129188497722, 71424103672, 57569171583, 13220579058, 118266862549, 21791521844, 70064705221, 83120075317, 83316886784, 111745960042, 26241940218, 32402511427, 118604113535, 98847819357, 117058412964, 57680263912, 83166477192], [508, 300, 327, 517, 431, 195, 41, 162, 110, 358, 433, 105, 40, 256, 172, 50, 474, 55, 67, 284, 215, 118, 513, 98, 120, 26, 155, 298, 4, 233, 243, 267, 428, 478, 494, 226, 146, 488, 20, 113, 143, 136, 49, 236, 128, 346, 501, 264, 498, 0, 413, 30, 410, 99, 1, 220, 443, 369, 290, 374, 119, 511, 483, 199, 248, 351, 388, 335, 131, 79, 496, 245, 414, 244, 158, 451, 255, 412, 47, 473, 254, 95, 299, 462, 169, 519, 493, 12, 257, 385, 432, 417, 59, 93, 455, 324, 52, 90, 407, 288, 112, 34, 528, 29, 192, 101, 419, 203, 123, 176, 177, 167, 204, 445, 416, 485, 196, 302, 424, 425, 6, 418, 258, 17, 370, 262, 227, 326, 387, 294, 295, 174, 25, 188, 81, 408, 469, 11, 472, 80, 400, 84, 382, 448, 201, 344, 7, 502, 163, 312, 484, 349, 239, 108, 411, 315, 303, 377, 36, 383, 78, 339, 491, 271, 216, 187, 322, 140, 405, 296, 402, 516, 450, 22, 482, 361, 371, 249, 453, 64, 152, 72, 194, 66, 345, 492, 447, 58, 486, 357, 149, 200, 83, 212, 219, 504, 333, 23, 439, 376, 457, 332, 153, 348, 210, 237, 173, 359, 129, 179, 426, 71, 19, 321, 338, 444, 139, 307, 515, 88, 266, 475, 182, 323, 336, 354, 272, 384, 330, 2, 211, 446, 238, 397, 230, 278, 141, 506, 181, 70, 316, 314, 459, 235, 121, 286, 76, 518, 280, 43, 111, 62, 487, 429, 524, 364, 86, 228, 353, 275, 104, 441, 268, 13, 500, 68, 87, 109, 403, 520, 231, 391, 42, 51, 328, 253, 436, 60, 497, 313, 481, 522, 53, 61, 420, 225, 189, 325, 183, 56, 100, 229, 27, 39, 3, 184, 291, 415, 454, 75, 28, 107, 347, 421, 166, 224, 279, 16, 342, 206, 207, 171, 368, 198, 456, 464, 406, 365, 151, 320, 161, 9, 89, 479, 142, 259, 401, 232, 523, 449, 150, 218, 15, 97, 287, 133, 458, 221, 63, 185, 350, 74, 135, 404, 466, 214, 116, 507, 355, 213, 178, 318, 423, 126, 395, 465, 440, 452, 157, 366, 190, 343, 467, 247, 509, 91, 205, 114, 193, 409, 375, 269, 373, 389, 148, 69, 396, 398, 317, 145, 122, 147, 512, 32, 130, 386, 94, 435, 310, 57, 422, 308, 305, 217, 8, 154, 156, 309, 223, 44, 24, 82, 160, 392, 477, 356, 134, 54, 138, 378, 331, 379, 250, 96, 489, 306, 399, 46, 18, 283, 470, 21, 360, 209, 168, 495, 180, 514, 191, 270, 510, 381, 186, 442, 31, 390, 5, 85, 92, 363, 33, 127, 197, 285, 380, 265, 48, 352, 505, 208, 438, 329, 468, 282, 45, 159, 301, 362, 341, 65, 263, 393, 222, 521, 175, 293, 37, 490, 35], 60) 912396759652812740801869061695733452669218533249083289698313292427681899514848561025221753354562922565560034</span></span><br></pre></td></tr></table></figure>
<p>非预期：</p>
<p><code>seed = [(random.getrandbits(kbits) &gt;&gt; k) &amp; 0xfffffff for i in range(624)]</code></p>
<p>可以看到 seed 最多只有28位，可以爆破一手</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> trange</span><br><span class="line"></span><br><span class="line">gift= ([<span class="number">91463260584</span>, <span class="number">97520150804</span>, <span class="number">134987178347</span>, <span class="number">134745660347</span>, <span class="number">23369346769</span>, <span class="number">88869916197</span>, <span class="number">67723104206</span>, <span class="number">132211190015</span>, <span class="number">74383600340</span>, <span class="number">57357411421</span>, <span class="number">80301226226</span>, <span class="number">2847043233</span>, <span class="number">46071508714</span>, <span class="number">76391425800</span>, <span class="number">71113777427</span>, <span class="number">12603028605</span>, <span class="number">127607785895</span>, <span class="number">82661956584</span>, <span class="number">48539405830</span>, <span class="number">131191473154</span>, <span class="number">137430688091</span>, <span class="number">48026249914</span>, <span class="number">105523652421</span>, <span class="number">58217141456</span>, <span class="number">135651011411</span>, <span class="number">37099885733</span>, <span class="number">101903983367</span>, <span class="number">117525416468</span>, <span class="number">49720139903</span>, <span class="number">123719748136</span>, <span class="number">58611168240</span>, <span class="number">68135859850</span>, <span class="number">6355615539</span>, <span class="number">23769720298</span>, <span class="number">7999623487</span>, <span class="number">19601432037</span>, <span class="number">49460687576</span>, <span class="number">34510812373</span>, <span class="number">97988805553</span>, <span class="number">120381187017</span>, <span class="number">37643325426</span>, <span class="number">79314538948</span>, <span class="number">128727827227</span>, <span class="number">41938289773</span>, <span class="number">74120986880</span>, <span class="number">29052999070</span>, <span class="number">21215042789</span>, <span class="number">76176648906</span>, <span class="number">82899209179</span>, <span class="number">90338690991</span>, <span class="number">102277220210</span>, <span class="number">109016314367</span>, <span class="number">2419923303</span>, <span class="number">75246152672</span>, <span class="number">109203867772</span>, <span class="number">87030346778</span>, <span class="number">119151949871</span>, <span class="number">134868756437</span>, <span class="number">124854798665</span>, <span class="number">122116306769</span>, <span class="number">31536426951</span>, <span class="number">82104297926</span>, <span class="number">118556737102</span>, <span class="number">78417017414</span>, <span class="number">81807286830</span>, <span class="number">24688295471</span>, <span class="number">126360674284</span>, <span class="number">8870569872</span>, <span class="number">105339369180</span>, <span class="number">61910863416</span>, <span class="number">56597235604</span>, <span class="number">50122937080</span>, <span class="number">135836683348</span>, <span class="number">75685244539</span>, <span class="number">112566491901</span>, <span class="number">86217144353</span>, <span class="number">110999080631</span>, <span class="number">91114786530</span>, <span class="number">94967775022</span>, <span class="number">52680440255</span>, <span class="number">76947914257</span>, <span class="number">133052296759</span>, <span class="number">22589975272</span>, <span class="number">104632324223</span>, <span class="number">47428022416</span>, <span class="number">106941367714</span>, <span class="number">119250845700</span>, <span class="number">80196618477</span>, <span class="number">92917756830</span>, <span class="number">52764061858</span>, <span class="number">82855761133</span>, <span class="number">26800124167</span>, <span class="number">129317288037</span>, <span class="number">44051967549</span>, <span class="number">70500283649</span>, <span class="number">165355182</span>, <span class="number">78293334339</span>, <span class="number">45001066520</span>, <span class="number">84638985033</span>, <span class="number">32566871344</span>, <span class="number">38421055041</span>, <span class="number">56145488218</span>, <span class="number">83396525174</span>, <span class="number">116762960131</span>, <span class="number">58381974438</span>, <span class="number">132249926372</span>, <span class="number">36091120717</span>, <span class="number">35213963219</span>, <span class="number">88756092150</span>, <span class="number">45288405267</span>, <span class="number">27461079382</span>, <span class="number">19589246113</span>, <span class="number">28308681656</span>, <span class="number">47161727545</span>, <span class="number">69898448282</span>, <span class="number">22959597168</span>, <span class="number">132569999975</span>, <span class="number">100557577568</span>, <span class="number">127037292334</span>, <span class="number">29708117311</span>, <span class="number">33229333831</span>, <span class="number">29311547868</span>, <span class="number">135347707719</span>, <span class="number">85435007922</span>, <span class="number">54540391811</span>, <span class="number">109544478077</span>, <span class="number">66841548339</span>, <span class="number">47159376439</span>, <span class="number">42574542524</span>, <span class="number">62176229940</span>, <span class="number">3138675000</span>, <span class="number">21267865120</span>, <span class="number">22618290315</span>, <span class="number">126018690563</span>, <span class="number">21590061225</span>, <span class="number">9799239940</span>, <span class="number">10617934652</span>, <span class="number">40956988582</span>, <span class="number">131053131140</span>, <span class="number">90043238501</span>, <span class="number">81283244185</span>, <span class="number">109338223936</span>, <span class="number">68311960398</span>, <span class="number">25088200986</span>, <span class="number">28895564195</span>, <span class="number">17646619057</span>, <span class="number">82775422880</span>, <span class="number">81522377214</span>, <span class="number">28334564831</span>, <span class="number">100791800926</span>, <span class="number">85872403124</span>, <span class="number">127915503356</span>, <span class="number">72496838376</span>, <span class="number">109007653011</span>, <span class="number">96263138881</span>, <span class="number">69693106974</span>, <span class="number">4718076407</span>, <span class="number">68334177311</span>, <span class="number">31708464646</span>, <span class="number">96111162918</span>, <span class="number">48965277868</span>, <span class="number">54931198292</span>, <span class="number">105535767797</span>, <span class="number">105680940066</span>, <span class="number">109968562576</span>, <span class="number">23573023928</span>, <span class="number">48569942163</span>, <span class="number">106967716286</span>, <span class="number">94835446653</span>, <span class="number">92803971955</span>, <span class="number">53791818332</span>, <span class="number">14453746086</span>, <span class="number">132101017989</span>, <span class="number">26361874022</span>, <span class="number">32122658200</span>, <span class="number">51724426274</span>, <span class="number">114997634813</span>, <span class="number">75838224666</span>, <span class="number">89848273104</span>, <span class="number">73619960674</span>, <span class="number">97795812498</span>, <span class="number">132466249292</span>, <span class="number">25997032367</span>, <span class="number">40732063573</span>, <span class="number">59142286405</span>, <span class="number">68524304985</span>, <span class="number">49545031400</span>, <span class="number">28044368864</span>, <span class="number">95700359624</span>, <span class="number">108201671504</span>, <span class="number">127043767055</span>, <span class="number">9384509797</span>, <span class="number">120972803416</span>, <span class="number">41782179648</span>, <span class="number">76653307257</span>, <span class="number">44056421640</span>, <span class="number">101631026937</span>, <span class="number">99078185959</span>, <span class="number">54885001820</span>, <span class="number">69316726710</span>, <span class="number">19710227322</span>, <span class="number">86035277688</span>, <span class="number">42289562955</span>, <span class="number">98051921147</span>, <span class="number">79098792488</span>, <span class="number">106490144808</span>, <span class="number">13834874</span>, <span class="number">69114014086</span>, <span class="number">4418515159</span>, <span class="number">109316722991</span>, <span class="number">92603496375</span>, <span class="number">68830244931</span>, <span class="number">111949257703</span>, <span class="number">102637560761</span>, <span class="number">5012149380</span>, <span class="number">43811237017</span>, <span class="number">4526712578</span>, <span class="number">102995188930</span>, <span class="number">9165821006</span>, <span class="number">63456393327</span>, <span class="number">68912422322</span>, <span class="number">104913358841</span>, <span class="number">108860651772</span>, <span class="number">52967416635</span>, <span class="number">84227988465</span>, <span class="number">101715630295</span>, <span class="number">26297443306</span>, <span class="number">110653579906</span>, <span class="number">91487440397</span>, <span class="number">116959430145</span>, <span class="number">83499469513</span>, <span class="number">48913630229</span>, <span class="number">76988993305</span>, <span class="number">41832173701</span>, <span class="number">13694488408</span>, <span class="number">135450931748</span>, <span class="number">39634435716</span>, <span class="number">41679152695</span>, <span class="number">126540504548</span>, <span class="number">91399825525</span>, <span class="number">99004649347</span>, <span class="number">19517357430</span>, <span class="number">8279948639</span>, <span class="number">133596449559</span>, <span class="number">1449103211</span>, <span class="number">50732184406</span>, <span class="number">52247676129</span>, <span class="number">74928416312</span>, <span class="number">64326525401</span>, <span class="number">124673786795</span>, <span class="number">92042480385</span>, <span class="number">24404916254</span>, <span class="number">99622146133</span>, <span class="number">51463314254</span>, <span class="number">36722967192</span>, <span class="number">4007778602</span>, <span class="number">39109534005</span>, <span class="number">120478575332</span>, <span class="number">99886542155</span>, <span class="number">5756463131</span>, <span class="number">91679854224</span>, <span class="number">3608646835</span>, <span class="number">35655876863</span>, <span class="number">121959477025</span>, <span class="number">20408412916</span>, <span class="number">36341277711</span>, <span class="number">43627610089</span>, <span class="number">24855949002</span>, <span class="number">128669830633</span>, <span class="number">70347508117</span>, <span class="number">9425085453</span>, <span class="number">2022963949</span>, <span class="number">5053312318</span>, <span class="number">63243834495</span>, <span class="number">21497715007</span>, <span class="number">5936366400</span>, <span class="number">44266914863</span>, <span class="number">119468825913</span>, <span class="number">91726986385</span>, <span class="number">126494307832</span>, <span class="number">93847533617</span>, <span class="number">22070910941</span>, <span class="number">20204251399</span>, <span class="number">42254244260</span>, <span class="number">60489335607</span>, <span class="number">40705184865</span>, <span class="number">80919639775</span>, <span class="number">73360223499</span>, <span class="number">132743946450</span>, <span class="number">88897376509</span>, <span class="number">103144368275</span>, <span class="number">9982808097</span>, <span class="number">131532980487</span>, <span class="number">91081435155</span>, <span class="number">78915930938</span>, <span class="number">72790758029</span>, <span class="number">120696671493</span>, <span class="number">78255313725</span>, <span class="number">13309583510</span>, <span class="number">23841020581</span>, <span class="number">116634908326</span>, <span class="number">73400462338</span>, <span class="number">57323203784</span>, <span class="number">46210923108</span>, <span class="number">41134724194</span>, <span class="number">43089395737</span>, <span class="number">118503520944</span>, <span class="number">111039189867</span>, <span class="number">99418263301</span>, <span class="number">59298127775</span>, <span class="number">45252940179</span>, <span class="number">40345195432</span>, <span class="number">16841439060</span>, <span class="number">100422187771</span>, <span class="number">65791698364</span>, <span class="number">61167532292</span>, <span class="number">30338914082</span>, <span class="number">14930863404</span>, <span class="number">4703203112</span>, <span class="number">124912009656</span>, <span class="number">9195518396</span>, <span class="number">18552364400</span>, <span class="number">7303227315</span>, <span class="number">105753747788</span>, <span class="number">3079040268</span>, <span class="number">116480022128</span>, <span class="number">1215344111</span>, <span class="number">9934249637</span>, <span class="number">76178148585</span>, <span class="number">20033461169</span>, <span class="number">87344780021</span>, <span class="number">72391242953</span>, <span class="number">129540048833</span>, <span class="number">15495213032</span>, <span class="number">49963621916</span>, <span class="number">84362224351</span>, <span class="number">97100635498</span>, <span class="number">105086571577</span>, <span class="number">51150506310</span>, <span class="number">118045067326</span>, <span class="number">65966867679</span>, <span class="number">7925108854</span>, <span class="number">131280748402</span>, <span class="number">66481282233</span>, <span class="number">107509392827</span>, <span class="number">78521145687</span>, <span class="number">35456851157</span>, <span class="number">97461157961</span>, <span class="number">30244093674</span>, <span class="number">24123083085</span>, <span class="number">27909475052</span>, <span class="number">69646113342</span>, <span class="number">131930611276</span>, <span class="number">97792139629</span>, <span class="number">135917828529</span>, <span class="number">32305782568</span>, <span class="number">59325645293</span>, <span class="number">84962280113</span>, <span class="number">74529748221</span>, <span class="number">22659244720</span>, <span class="number">54776660364</span>, <span class="number">66934871192</span>, <span class="number">14824496938</span>, <span class="number">37231294479</span>, <span class="number">102244198902</span>, <span class="number">31674646475</span>, <span class="number">128196911226</span>, <span class="number">90158594889</span>, <span class="number">121714346066</span>, <span class="number">64647669235</span>, <span class="number">105263204191</span>, <span class="number">127988380741</span>, <span class="number">130175056631</span>, <span class="number">114272442969</span>, <span class="number">135960937840</span>, <span class="number">62465712860</span>, <span class="number">32333037569</span>, <span class="number">137012433094</span>, <span class="number">92929672123</span>, <span class="number">86030288893</span>, <span class="number">73602847949</span>, <span class="number">58136148471</span>, <span class="number">118893337093</span>, <span class="number">97692245318</span>, <span class="number">99539974338</span>, <span class="number">116231441994</span>, <span class="number">32445182154</span>, <span class="number">115683286754</span>, <span class="number">114711297102</span>, <span class="number">102210385893</span>, <span class="number">7687212992</span>, <span class="number">73626254322</span>, <span class="number">242951419</span>, <span class="number">5952493527</span>, <span class="number">96817591608</span>, <span class="number">45197171621</span>, <span class="number">122928115217</span>, <span class="number">106192593180</span>, <span class="number">99889552302</span>, <span class="number">125596158762</span>, <span class="number">136959359712</span>, <span class="number">67291405558</span>, <span class="number">71974425715</span>, <span class="number">115789979144</span>, <span class="number">59321975202</span>, <span class="number">84748820897</span>, <span class="number">133266408556</span>, <span class="number">6800817333</span>, <span class="number">110678933813</span>, <span class="number">96832595879</span>, <span class="number">97681824039</span>, <span class="number">89341148630</span>, <span class="number">84626208563</span>, <span class="number">58523733456</span>, <span class="number">93000780873</span>, <span class="number">68444996084</span>, <span class="number">775177345</span>, <span class="number">17204124036</span>, <span class="number">129474447019</span>, <span class="number">73589942581</span>, <span class="number">65415043899</span>, <span class="number">131703332659</span>, <span class="number">101783987222</span>, <span class="number">61388598262</span>, <span class="number">103435807803</span>, <span class="number">104030629529</span>, <span class="number">19123072760</span>, <span class="number">63612557945</span>, <span class="number">38245223725</span>, <span class="number">54345357864</span>, <span class="number">62016904380</span>, <span class="number">34602169486</span>, <span class="number">51229280420</span>, <span class="number">66624757580</span>, <span class="number">68760378559</span>, <span class="number">131556923700</span>, <span class="number">21935621011</span>, <span class="number">36349470821</span>, <span class="number">10120892182</span>, <span class="number">25883848878</span>, <span class="number">71735922493</span>, <span class="number">62883391871</span>, <span class="number">90647098</span>, <span class="number">41388569318</span>, <span class="number">52175456448</span>, <span class="number">71822304690</span>, <span class="number">19251125978</span>, <span class="number">91308465291</span>, <span class="number">50110754397</span>, <span class="number">91050175581</span>, <span class="number">83697004380</span>, <span class="number">6165622900</span>, <span class="number">129188497722</span>, <span class="number">71424103672</span>, <span class="number">57569171583</span>, <span class="number">13220579058</span>, <span class="number">118266862549</span>, <span class="number">21791521844</span>, <span class="number">70064705221</span>, <span class="number">83120075317</span>, <span class="number">83316886784</span>, <span class="number">111745960042</span>, <span class="number">26241940218</span>, <span class="number">32402511427</span>, <span class="number">118604113535</span>, <span class="number">98847819357</span>, <span class="number">117058412964</span>, <span class="number">57680263912</span>, <span class="number">83166477192</span>], [<span class="number">508</span>, <span class="number">300</span>, <span class="number">327</span>, <span class="number">517</span>, <span class="number">431</span>, <span class="number">195</span>, <span class="number">41</span>, <span class="number">162</span>, <span class="number">110</span>, <span class="number">358</span>, <span class="number">433</span>, <span class="number">105</span>, <span class="number">40</span>, <span class="number">256</span>, <span class="number">172</span>, <span class="number">50</span>, <span class="number">474</span>, <span class="number">55</span>, <span class="number">67</span>, <span class="number">284</span>, <span class="number">215</span>, <span class="number">118</span>, <span class="number">513</span>, <span class="number">98</span>, <span class="number">120</span>, <span class="number">26</span>, <span class="number">155</span>, <span class="number">298</span>, <span class="number">4</span>, <span class="number">233</span>, <span class="number">243</span>, <span class="number">267</span>, <span class="number">428</span>, <span class="number">478</span>, <span class="number">494</span>, <span class="number">226</span>, <span class="number">146</span>, <span class="number">488</span>, <span class="number">20</span>, <span class="number">113</span>, <span class="number">143</span>, <span class="number">136</span>, <span class="number">49</span>, <span class="number">236</span>, <span class="number">128</span>, <span class="number">346</span>, <span class="number">501</span>, <span class="number">264</span>, <span class="number">498</span>, <span class="number">0</span>, <span class="number">413</span>, <span class="number">30</span>, <span class="number">410</span>, <span class="number">99</span>, <span class="number">1</span>, <span class="number">220</span>, <span class="number">443</span>, <span class="number">369</span>, <span class="number">290</span>, <span class="number">374</span>, <span class="number">119</span>, <span class="number">511</span>, <span class="number">483</span>, <span class="number">199</span>, <span class="number">248</span>, <span class="number">351</span>, <span class="number">388</span>, <span class="number">335</span>, <span class="number">131</span>, <span class="number">79</span>, <span class="number">496</span>, <span class="number">245</span>, <span class="number">414</span>, <span class="number">244</span>, <span class="number">158</span>, <span class="number">451</span>, <span class="number">255</span>, <span class="number">412</span>, <span class="number">47</span>, <span class="number">473</span>, <span class="number">254</span>, <span class="number">95</span>, <span class="number">299</span>, <span class="number">462</span>, <span class="number">169</span>, <span class="number">519</span>, <span class="number">493</span>, <span class="number">12</span>, <span class="number">257</span>, <span class="number">385</span>, <span class="number">432</span>, <span class="number">417</span>, <span class="number">59</span>, <span class="number">93</span>, <span class="number">455</span>, <span class="number">324</span>, <span class="number">52</span>, <span class="number">90</span>, <span class="number">407</span>, <span class="number">288</span>, <span class="number">112</span>, <span class="number">34</span>, <span class="number">528</span>, <span class="number">29</span>, <span class="number">192</span>, <span class="number">101</span>, <span class="number">419</span>, <span class="number">203</span>, <span class="number">123</span>, <span class="number">176</span>, <span class="number">177</span>, <span class="number">167</span>, <span class="number">204</span>, <span class="number">445</span>, <span class="number">416</span>, <span class="number">485</span>, <span class="number">196</span>, <span class="number">302</span>, <span class="number">424</span>, <span class="number">425</span>, <span class="number">6</span>, <span class="number">418</span>, <span class="number">258</span>, <span class="number">17</span>, <span class="number">370</span>, <span class="number">262</span>, <span class="number">227</span>, <span class="number">326</span>, <span class="number">387</span>, <span class="number">294</span>, <span class="number">295</span>, <span class="number">174</span>, <span class="number">25</span>, <span class="number">188</span>, <span class="number">81</span>, <span class="number">408</span>, <span class="number">469</span>, <span class="number">11</span>, <span class="number">472</span>, <span class="number">80</span>, <span class="number">400</span>, <span class="number">84</span>, <span class="number">382</span>, <span class="number">448</span>, <span class="number">201</span>, <span class="number">344</span>, <span class="number">7</span>, <span class="number">502</span>, <span class="number">163</span>, <span class="number">312</span>, <span class="number">484</span>, <span class="number">349</span>, <span class="number">239</span>, <span class="number">108</span>, <span class="number">411</span>, <span class="number">315</span>, <span class="number">303</span>, <span class="number">377</span>, <span class="number">36</span>, <span class="number">383</span>, <span class="number">78</span>, <span class="number">339</span>, <span class="number">491</span>, <span class="number">271</span>, <span class="number">216</span>, <span class="number">187</span>, <span class="number">322</span>, <span class="number">140</span>, <span class="number">405</span>, <span class="number">296</span>, <span class="number">402</span>, <span class="number">516</span>, <span class="number">450</span>, <span class="number">22</span>, <span class="number">482</span>, <span class="number">361</span>, <span class="number">371</span>, <span class="number">249</span>, <span class="number">453</span>, <span class="number">64</span>, <span class="number">152</span>, <span class="number">72</span>, <span class="number">194</span>, <span class="number">66</span>, <span class="number">345</span>, <span class="number">492</span>, <span class="number">447</span>, <span class="number">58</span>, <span class="number">486</span>, <span class="number">357</span>, <span class="number">149</span>, <span class="number">200</span>, <span class="number">83</span>, <span class="number">212</span>, <span class="number">219</span>, <span class="number">504</span>, <span class="number">333</span>, <span class="number">23</span>, <span class="number">439</span>, <span class="number">376</span>, <span class="number">457</span>, <span class="number">332</span>, <span class="number">153</span>, <span class="number">348</span>, <span class="number">210</span>, <span class="number">237</span>, <span class="number">173</span>, <span class="number">359</span>, <span class="number">129</span>, <span class="number">179</span>, <span class="number">426</span>, <span class="number">71</span>, <span class="number">19</span>, <span class="number">321</span>, <span class="number">338</span>, <span class="number">444</span>, <span class="number">139</span>, <span class="number">307</span>, <span class="number">515</span>, <span class="number">88</span>, <span class="number">266</span>, <span class="number">475</span>, <span class="number">182</span>, <span class="number">323</span>, <span class="number">336</span>, <span class="number">354</span>, <span class="number">272</span>, <span class="number">384</span>, <span class="number">330</span>, <span class="number">2</span>, <span class="number">211</span>, <span class="number">446</span>, <span class="number">238</span>, <span class="number">397</span>, <span class="number">230</span>, <span class="number">278</span>, <span class="number">141</span>, <span class="number">506</span>, <span class="number">181</span>, <span class="number">70</span>, <span class="number">316</span>, <span class="number">314</span>, <span class="number">459</span>, <span class="number">235</span>, <span class="number">121</span>, <span class="number">286</span>, <span class="number">76</span>, <span class="number">518</span>, <span class="number">280</span>, <span class="number">43</span>, <span class="number">111</span>, <span class="number">62</span>, <span class="number">487</span>, <span class="number">429</span>, <span class="number">524</span>, <span class="number">364</span>, <span class="number">86</span>, <span class="number">228</span>, <span class="number">353</span>, <span class="number">275</span>, <span class="number">104</span>, <span class="number">441</span>, <span class="number">268</span>, <span class="number">13</span>, <span class="number">500</span>, <span class="number">68</span>, <span class="number">87</span>, <span class="number">109</span>, <span class="number">403</span>, <span class="number">520</span>, <span class="number">231</span>, <span class="number">391</span>, <span class="number">42</span>, <span class="number">51</span>, <span class="number">328</span>, <span class="number">253</span>, <span class="number">436</span>, <span class="number">60</span>, <span class="number">497</span>, <span class="number">313</span>, <span class="number">481</span>, <span class="number">522</span>, <span class="number">53</span>, <span class="number">61</span>, <span class="number">420</span>, <span class="number">225</span>, <span class="number">189</span>, <span class="number">325</span>, <span class="number">183</span>, <span class="number">56</span>, <span class="number">100</span>, <span class="number">229</span>, <span class="number">27</span>, <span class="number">39</span>, <span class="number">3</span>, <span class="number">184</span>, <span class="number">291</span>, <span class="number">415</span>, <span class="number">454</span>, <span class="number">75</span>, <span class="number">28</span>, <span class="number">107</span>, <span class="number">347</span>, <span class="number">421</span>, <span class="number">166</span>, <span class="number">224</span>, <span class="number">279</span>, <span class="number">16</span>, <span class="number">342</span>, <span class="number">206</span>, <span class="number">207</span>, <span class="number">171</span>, <span class="number">368</span>, <span class="number">198</span>, <span class="number">456</span>, <span class="number">464</span>, <span class="number">406</span>, <span class="number">365</span>, <span class="number">151</span>, <span class="number">320</span>, <span class="number">161</span>, <span class="number">9</span>, <span class="number">89</span>, <span class="number">479</span>, <span class="number">142</span>, <span class="number">259</span>, <span class="number">401</span>, <span class="number">232</span>, <span class="number">523</span>, <span class="number">449</span>, <span class="number">150</span>, <span class="number">218</span>, <span class="number">15</span>, <span class="number">97</span>, <span class="number">287</span>, <span class="number">133</span>, <span class="number">458</span>, <span class="number">221</span>, <span class="number">63</span>, <span class="number">185</span>, <span class="number">350</span>, <span class="number">74</span>, <span class="number">135</span>, <span class="number">404</span>, <span class="number">466</span>, <span class="number">214</span>, <span class="number">116</span>, <span class="number">507</span>, <span class="number">355</span>, <span class="number">213</span>, <span class="number">178</span>, <span class="number">318</span>, <span class="number">423</span>, <span class="number">126</span>, <span class="number">395</span>, <span class="number">465</span>, <span class="number">440</span>, <span class="number">452</span>, <span class="number">157</span>, <span class="number">366</span>, <span class="number">190</span>, <span class="number">343</span>, <span class="number">467</span>, <span class="number">247</span>, <span class="number">509</span>, <span class="number">91</span>, <span class="number">205</span>, <span class="number">114</span>, <span class="number">193</span>, <span class="number">409</span>, <span class="number">375</span>, <span class="number">269</span>, <span class="number">373</span>, <span class="number">389</span>, <span class="number">148</span>, <span class="number">69</span>, <span class="number">396</span>, <span class="number">398</span>, <span class="number">317</span>, <span class="number">145</span>, <span class="number">122</span>, <span class="number">147</span>, <span class="number">512</span>, <span class="number">32</span>, <span class="number">130</span>, <span class="number">386</span>, <span class="number">94</span>, <span class="number">435</span>, <span class="number">310</span>, <span class="number">57</span>, <span class="number">422</span>, <span class="number">308</span>, <span class="number">305</span>, <span class="number">217</span>, <span class="number">8</span>, <span class="number">154</span>, <span class="number">156</span>, <span class="number">309</span>, <span class="number">223</span>, <span class="number">44</span>, <span class="number">24</span>, <span class="number">82</span>, <span class="number">160</span>, <span class="number">392</span>, <span class="number">477</span>, <span class="number">356</span>, <span class="number">134</span>, <span class="number">54</span>, <span class="number">138</span>, <span class="number">378</span>, <span class="number">331</span>, <span class="number">379</span>, <span class="number">250</span>, <span class="number">96</span>, <span class="number">489</span>, <span class="number">306</span>, <span class="number">399</span>, <span class="number">46</span>, <span class="number">18</span>, <span class="number">283</span>, <span class="number">470</span>, <span class="number">21</span>, <span class="number">360</span>, <span class="number">209</span>, <span class="number">168</span>, <span class="number">495</span>, <span class="number">180</span>, <span class="number">514</span>, <span class="number">191</span>, <span class="number">270</span>, <span class="number">510</span>, <span class="number">381</span>, <span class="number">186</span>, <span class="number">442</span>, <span class="number">31</span>, <span class="number">390</span>, <span class="number">5</span>, <span class="number">85</span>, <span class="number">92</span>, <span class="number">363</span>, <span class="number">33</span>, <span class="number">127</span>, <span class="number">197</span>, <span class="number">285</span>, <span class="number">380</span>, <span class="number">265</span>, <span class="number">48</span>, <span class="number">352</span>, <span class="number">505</span>, <span class="number">208</span>, <span class="number">438</span>, <span class="number">329</span>, <span class="number">468</span>, <span class="number">282</span>, <span class="number">45</span>, <span class="number">159</span>, <span class="number">301</span>, <span class="number">362</span>, <span class="number">341</span>, <span class="number">65</span>, <span class="number">263</span>, <span class="number">393</span>, <span class="number">222</span>, <span class="number">521</span>, <span class="number">175</span>, <span class="number">293</span>, <span class="number">37</span>, <span class="number">490</span>, <span class="number">35</span>], <span class="number">60</span>)</span><br><span class="line">enc = <span class="number">912396759652812740801869061695733452669218533249083289698313292427681899514848561025221753354562922565560034</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">de_flag</span>(<span class="params">state</span>):</span><br><span class="line">    key = bytes_to_long(md5(long_to_bytes(state)).digest())</span><br><span class="line">    flag = enc ^ key</span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">0xfffffff</span>+<span class="number">1</span>):</span><br><span class="line">    flag = <span class="built_in">str</span>(long_to_bytes(de_flag(i)))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;\\x&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> flag <span class="keyword">and</span> <span class="string">&quot;_&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> flag <span class="keyword">and</span> <span class="string">&quot;@&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line"><span class="comment"># b&#x27;ctfshow&#123;F2AD971D-66C2-2D1D-69D6-CE7DE2A49B35&#125;&#x27;</span></span><br><span class="line"><span class="comment"># 67529674</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>上面这个判断有点粗糙</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    flag = m.decode()</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">all</span>(f <span class="keyword">in</span> table <span class="keyword">for</span> f <span class="keyword">in</span> flag):</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;num = <span class="subst">&#123;num&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">table = string.ascii_letters + <span class="string">&#x27;0123456789_-&#123;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>如果 flag里的所有字符都在table里，就筛选出flag了</p>
<p>官方解：</p>
<p>类似于黑盒测试，选择明文攻击</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test.sage</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> Random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">buildT</span>():</span><br><span class="line">    rng = Random()</span><br><span class="line">    T = matrix(GF(<span class="number">2</span>), <span class="number">32</span>, <span class="number">32</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        s = [<span class="number">0</span>] * <span class="number">624</span></span><br><span class="line">        s[<span class="number">0</span>] = <span class="number">1</span> &lt;&lt; (<span class="number">31</span> - i)</span><br><span class="line">        rng.setstate((<span class="number">3</span>, <span class="built_in">tuple</span>(s + [<span class="number">0</span>]), <span class="literal">None</span>))</span><br><span class="line">        tmp = rng.getrandbits(<span class="number">32</span>)</span><br><span class="line">        row = vector(GF(<span class="number">2</span>), [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">bin</span>(tmp)[<span class="number">2</span>:].zfill(<span class="number">32</span>)])</span><br><span class="line">        T[i] = row</span><br><span class="line">    <span class="keyword">return</span> T</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_key</span>(<span class="params">key1</span>):</span><br><span class="line">    T = buildT()</span><br><span class="line">    a = [<span class="built_in">int</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">bin</span>(key1)[<span class="number">2</span>:].zfill(<span class="number">32</span>)]</span><br><span class="line">    a = matrix(GF(<span class="number">2</span>), a)</span><br><span class="line">    b = T.solve_left(a)</span><br><span class="line">    c = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> b.<span class="built_in">list</span>()])</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">int</span>(c, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">gift= ([<span class="number">91463260584</span>, <span class="number">97520150804</span>, <span class="number">134987178347</span>, <span class="number">134745660347</span>, <span class="number">23369346769</span>, <span class="number">88869916197</span>, <span class="number">67723104206</span>, <span class="number">132211190015</span>, <span class="number">74383600340</span>, <span class="number">57357411421</span>, <span class="number">80301226226</span>, <span class="number">2847043233</span>, <span class="number">46071508714</span>, <span class="number">76391425800</span>, <span class="number">71113777427</span>, <span class="number">12603028605</span>, <span class="number">127607785895</span>, <span class="number">82661956584</span>, <span class="number">48539405830</span>, <span class="number">131191473154</span>, <span class="number">137430688091</span>, <span class="number">48026249914</span>, <span class="number">105523652421</span>, <span class="number">58217141456</span>, <span class="number">135651011411</span>, <span class="number">37099885733</span>, <span class="number">101903983367</span>, <span class="number">117525416468</span>, <span class="number">49720139903</span>, <span class="number">123719748136</span>, <span class="number">58611168240</span>, <span class="number">68135859850</span>, <span class="number">6355615539</span>, <span class="number">23769720298</span>, <span class="number">7999623487</span>, <span class="number">19601432037</span>, <span class="number">49460687576</span>, <span class="number">34510812373</span>, <span class="number">97988805553</span>, <span class="number">120381187017</span>, <span class="number">37643325426</span>, <span class="number">79314538948</span>, <span class="number">128727827227</span>, <span class="number">41938289773</span>, <span class="number">74120986880</span>, <span class="number">29052999070</span>, <span class="number">21215042789</span>, <span class="number">76176648906</span>, <span class="number">82899209179</span>, <span class="number">90338690991</span>, <span class="number">102277220210</span>, <span class="number">109016314367</span>, <span class="number">2419923303</span>, <span class="number">75246152672</span>, <span class="number">109203867772</span>, <span class="number">87030346778</span>, <span class="number">119151949871</span>, <span class="number">134868756437</span>, <span class="number">124854798665</span>, <span class="number">122116306769</span>, <span class="number">31536426951</span>, <span class="number">82104297926</span>, <span class="number">118556737102</span>, <span class="number">78417017414</span>, <span class="number">81807286830</span>, <span class="number">24688295471</span>, <span class="number">126360674284</span>, <span class="number">8870569872</span>, <span class="number">105339369180</span>, <span class="number">61910863416</span>, <span class="number">56597235604</span>, <span class="number">50122937080</span>, <span class="number">135836683348</span>, <span class="number">75685244539</span>, <span class="number">112566491901</span>, <span class="number">86217144353</span>, <span class="number">110999080631</span>, <span class="number">91114786530</span>, <span class="number">94967775022</span>, <span class="number">52680440255</span>, <span class="number">76947914257</span>, <span class="number">133052296759</span>, <span class="number">22589975272</span>, <span class="number">104632324223</span>, <span class="number">47428022416</span>, <span class="number">106941367714</span>, <span class="number">119250845700</span>, <span class="number">80196618477</span>, <span class="number">92917756830</span>, <span class="number">52764061858</span>, <span class="number">82855761133</span>, <span class="number">26800124167</span>, <span class="number">129317288037</span>, <span class="number">44051967549</span>, <span class="number">70500283649</span>, <span class="number">165355182</span>, <span class="number">78293334339</span>, <span class="number">45001066520</span>, <span class="number">84638985033</span>, <span class="number">32566871344</span>, <span class="number">38421055041</span>, <span class="number">56145488218</span>, <span class="number">83396525174</span>, <span class="number">116762960131</span>, <span class="number">58381974438</span>, <span class="number">132249926372</span>, <span class="number">36091120717</span>, <span class="number">35213963219</span>, <span class="number">88756092150</span>, <span class="number">45288405267</span>, <span class="number">27461079382</span>, <span class="number">19589246113</span>, <span class="number">28308681656</span>, <span class="number">47161727545</span>, <span class="number">69898448282</span>, <span class="number">22959597168</span>, <span class="number">132569999975</span>, <span class="number">100557577568</span>, <span class="number">127037292334</span>, <span class="number">29708117311</span>, <span class="number">33229333831</span>, <span class="number">29311547868</span>, <span class="number">135347707719</span>, <span class="number">85435007922</span>, <span class="number">54540391811</span>, <span class="number">109544478077</span>, <span class="number">66841548339</span>, <span class="number">47159376439</span>, <span class="number">42574542524</span>, <span class="number">62176229940</span>, <span class="number">3138675000</span>, <span class="number">21267865120</span>, <span class="number">22618290315</span>, <span class="number">126018690563</span>, <span class="number">21590061225</span>, <span class="number">9799239940</span>, <span class="number">10617934652</span>, <span class="number">40956988582</span>, <span class="number">131053131140</span>, <span class="number">90043238501</span>, <span class="number">81283244185</span>, <span class="number">109338223936</span>, <span class="number">68311960398</span>, <span class="number">25088200986</span>, <span class="number">28895564195</span>, <span class="number">17646619057</span>, <span class="number">82775422880</span>, <span class="number">81522377214</span>, <span class="number">28334564831</span>, <span class="number">100791800926</span>, <span class="number">85872403124</span>, <span class="number">127915503356</span>, <span class="number">72496838376</span>, <span class="number">109007653011</span>, <span class="number">96263138881</span>, <span class="number">69693106974</span>, <span class="number">4718076407</span>, <span class="number">68334177311</span>, <span class="number">31708464646</span>, <span class="number">96111162918</span>, <span class="number">48965277868</span>, <span class="number">54931198292</span>, <span class="number">105535767797</span>, <span class="number">105680940066</span>, <span class="number">109968562576</span>, <span class="number">23573023928</span>, <span class="number">48569942163</span>, <span class="number">106967716286</span>, <span class="number">94835446653</span>, <span class="number">92803971955</span>, <span class="number">53791818332</span>, <span class="number">14453746086</span>, <span class="number">132101017989</span>, <span class="number">26361874022</span>, <span class="number">32122658200</span>, <span class="number">51724426274</span>, <span class="number">114997634813</span>, <span class="number">75838224666</span>, <span class="number">89848273104</span>, <span class="number">73619960674</span>, <span class="number">97795812498</span>, <span class="number">132466249292</span>, <span class="number">25997032367</span>, <span class="number">40732063573</span>, <span class="number">59142286405</span>, <span class="number">68524304985</span>, <span class="number">49545031400</span>, <span class="number">28044368864</span>, <span class="number">95700359624</span>, <span class="number">108201671504</span>, <span class="number">127043767055</span>, <span class="number">9384509797</span>, <span class="number">120972803416</span>, <span class="number">41782179648</span>, <span class="number">76653307257</span>, <span class="number">44056421640</span>, <span class="number">101631026937</span>, <span class="number">99078185959</span>, <span class="number">54885001820</span>, <span class="number">69316726710</span>, <span class="number">19710227322</span>, <span class="number">86035277688</span>, <span class="number">42289562955</span>, <span class="number">98051921147</span>, <span class="number">79098792488</span>, <span class="number">106490144808</span>, <span class="number">13834874</span>, <span class="number">69114014086</span>, <span class="number">4418515159</span>, <span class="number">109316722991</span>, <span class="number">92603496375</span>, <span class="number">68830244931</span>, <span class="number">111949257703</span>, <span class="number">102637560761</span>, <span class="number">5012149380</span>, <span class="number">43811237017</span>, <span class="number">4526712578</span>, <span class="number">102995188930</span>, <span class="number">9165821006</span>, <span class="number">63456393327</span>, <span class="number">68912422322</span>, <span class="number">104913358841</span>, <span class="number">108860651772</span>, <span class="number">52967416635</span>, <span class="number">84227988465</span>, <span class="number">101715630295</span>, <span class="number">26297443306</span>, <span class="number">110653579906</span>, <span class="number">91487440397</span>, <span class="number">116959430145</span>, <span class="number">83499469513</span>, <span class="number">48913630229</span>, <span class="number">76988993305</span>, <span class="number">41832173701</span>, <span class="number">13694488408</span>, <span class="number">135450931748</span>, <span class="number">39634435716</span>, <span class="number">41679152695</span>, <span class="number">126540504548</span>, <span class="number">91399825525</span>, <span class="number">99004649347</span>, <span class="number">19517357430</span>, <span class="number">8279948639</span>, <span class="number">133596449559</span>, <span class="number">1449103211</span>, <span class="number">50732184406</span>, <span class="number">52247676129</span>, <span class="number">74928416312</span>, <span class="number">64326525401</span>, <span class="number">124673786795</span>, <span class="number">92042480385</span>, <span class="number">24404916254</span>, <span class="number">99622146133</span>, <span class="number">51463314254</span>, <span class="number">36722967192</span>, <span class="number">4007778602</span>, <span class="number">39109534005</span>, <span class="number">120478575332</span>, <span class="number">99886542155</span>, <span class="number">5756463131</span>, <span class="number">91679854224</span>, <span class="number">3608646835</span>, <span class="number">35655876863</span>, <span class="number">121959477025</span>, <span class="number">20408412916</span>, <span class="number">36341277711</span>, <span class="number">43627610089</span>, <span class="number">24855949002</span>, <span class="number">128669830633</span>, <span class="number">70347508117</span>, <span class="number">9425085453</span>, <span class="number">2022963949</span>, <span class="number">5053312318</span>, <span class="number">63243834495</span>, <span class="number">21497715007</span>, <span class="number">5936366400</span>, <span class="number">44266914863</span>, <span class="number">119468825913</span>, <span class="number">91726986385</span>, <span class="number">126494307832</span>, <span class="number">93847533617</span>, <span class="number">22070910941</span>, <span class="number">20204251399</span>, <span class="number">42254244260</span>, <span class="number">60489335607</span>, <span class="number">40705184865</span>, <span class="number">80919639775</span>, <span class="number">73360223499</span>, <span class="number">132743946450</span>, <span class="number">88897376509</span>, <span class="number">103144368275</span>, <span class="number">9982808097</span>, <span class="number">131532980487</span>, <span class="number">91081435155</span>, <span class="number">78915930938</span>, <span class="number">72790758029</span>, <span class="number">120696671493</span>, <span class="number">78255313725</span>, <span class="number">13309583510</span>, <span class="number">23841020581</span>, <span class="number">116634908326</span>, <span class="number">73400462338</span>, <span class="number">57323203784</span>, <span class="number">46210923108</span>, <span class="number">41134724194</span>, <span class="number">43089395737</span>, <span class="number">118503520944</span>, <span class="number">111039189867</span>, <span class="number">99418263301</span>, <span class="number">59298127775</span>, <span class="number">45252940179</span>, <span class="number">40345195432</span>, <span class="number">16841439060</span>, <span class="number">100422187771</span>, <span class="number">65791698364</span>, <span class="number">61167532292</span>, <span class="number">30338914082</span>, <span class="number">14930863404</span>, <span class="number">4703203112</span>, <span class="number">124912009656</span>, <span class="number">9195518396</span>, <span class="number">18552364400</span>, <span class="number">7303227315</span>, <span class="number">105753747788</span>, <span class="number">3079040268</span>, <span class="number">116480022128</span>, <span class="number">1215344111</span>, <span class="number">9934249637</span>, <span class="number">76178148585</span>, <span class="number">20033461169</span>, <span class="number">87344780021</span>, <span class="number">72391242953</span>, <span class="number">129540048833</span>, <span class="number">15495213032</span>, <span class="number">49963621916</span>, <span class="number">84362224351</span>, <span class="number">97100635498</span>, <span class="number">105086571577</span>, <span class="number">51150506310</span>, <span class="number">118045067326</span>, <span class="number">65966867679</span>, <span class="number">7925108854</span>, <span class="number">131280748402</span>, <span class="number">66481282233</span>, <span class="number">107509392827</span>, <span class="number">78521145687</span>, <span class="number">35456851157</span>, <span class="number">97461157961</span>, <span class="number">30244093674</span>, <span class="number">24123083085</span>, <span class="number">27909475052</span>, <span class="number">69646113342</span>, <span class="number">131930611276</span>, <span class="number">97792139629</span>, <span class="number">135917828529</span>, <span class="number">32305782568</span>, <span class="number">59325645293</span>, <span class="number">84962280113</span>, <span class="number">74529748221</span>, <span class="number">22659244720</span>, <span class="number">54776660364</span>, <span class="number">66934871192</span>, <span class="number">14824496938</span>, <span class="number">37231294479</span>, <span class="number">102244198902</span>, <span class="number">31674646475</span>, <span class="number">128196911226</span>, <span class="number">90158594889</span>, <span class="number">121714346066</span>, <span class="number">64647669235</span>, <span class="number">105263204191</span>, <span class="number">127988380741</span>, <span class="number">130175056631</span>, <span class="number">114272442969</span>, <span class="number">135960937840</span>, <span class="number">62465712860</span>, <span class="number">32333037569</span>, <span class="number">137012433094</span>, <span class="number">92929672123</span>, <span class="number">86030288893</span>, <span class="number">73602847949</span>, <span class="number">58136148471</span>, <span class="number">118893337093</span>, <span class="number">97692245318</span>, <span class="number">99539974338</span>, <span class="number">116231441994</span>, <span class="number">32445182154</span>, <span class="number">115683286754</span>, <span class="number">114711297102</span>, <span class="number">102210385893</span>, <span class="number">7687212992</span>, <span class="number">73626254322</span>, <span class="number">242951419</span>, <span class="number">5952493527</span>, <span class="number">96817591608</span>, <span class="number">45197171621</span>, <span class="number">122928115217</span>, <span class="number">106192593180</span>, <span class="number">99889552302</span>, <span class="number">125596158762</span>, <span class="number">136959359712</span>, <span class="number">67291405558</span>, <span class="number">71974425715</span>, <span class="number">115789979144</span>, <span class="number">59321975202</span>, <span class="number">84748820897</span>, <span class="number">133266408556</span>, <span class="number">6800817333</span>, <span class="number">110678933813</span>, <span class="number">96832595879</span>, <span class="number">97681824039</span>, <span class="number">89341148630</span>, <span class="number">84626208563</span>, <span class="number">58523733456</span>, <span class="number">93000780873</span>, <span class="number">68444996084</span>, <span class="number">775177345</span>, <span class="number">17204124036</span>, <span class="number">129474447019</span>, <span class="number">73589942581</span>, <span class="number">65415043899</span>, <span class="number">131703332659</span>, <span class="number">101783987222</span>, <span class="number">61388598262</span>, <span class="number">103435807803</span>, <span class="number">104030629529</span>, <span class="number">19123072760</span>, <span class="number">63612557945</span>, <span class="number">38245223725</span>, <span class="number">54345357864</span>, <span class="number">62016904380</span>, <span class="number">34602169486</span>, <span class="number">51229280420</span>, <span class="number">66624757580</span>, <span class="number">68760378559</span>, <span class="number">131556923700</span>, <span class="number">21935621011</span>, <span class="number">36349470821</span>, <span class="number">10120892182</span>, <span class="number">25883848878</span>, <span class="number">71735922493</span>, <span class="number">62883391871</span>, <span class="number">90647098</span>, <span class="number">41388569318</span>, <span class="number">52175456448</span>, <span class="number">71822304690</span>, <span class="number">19251125978</span>, <span class="number">91308465291</span>, <span class="number">50110754397</span>, <span class="number">91050175581</span>, <span class="number">83697004380</span>, <span class="number">6165622900</span>, <span class="number">129188497722</span>, <span class="number">71424103672</span>, <span class="number">57569171583</span>, <span class="number">13220579058</span>, <span class="number">118266862549</span>, <span class="number">21791521844</span>, <span class="number">70064705221</span>, <span class="number">83120075317</span>, <span class="number">83316886784</span>, <span class="number">111745960042</span>, <span class="number">26241940218</span>, <span class="number">32402511427</span>, <span class="number">118604113535</span>, <span class="number">98847819357</span>, <span class="number">117058412964</span>, <span class="number">57680263912</span>, <span class="number">83166477192</span>], [<span class="number">508</span>, <span class="number">300</span>, <span class="number">327</span>, <span class="number">517</span>, <span class="number">431</span>, <span class="number">195</span>, <span class="number">41</span>, <span class="number">162</span>, <span class="number">110</span>, <span class="number">358</span>, <span class="number">433</span>, <span class="number">105</span>, <span class="number">40</span>, <span class="number">256</span>, <span class="number">172</span>, <span class="number">50</span>, <span class="number">474</span>, <span class="number">55</span>, <span class="number">67</span>, <span class="number">284</span>, <span class="number">215</span>, <span class="number">118</span>, <span class="number">513</span>, <span class="number">98</span>, <span class="number">120</span>, <span class="number">26</span>, <span class="number">155</span>, <span class="number">298</span>, <span class="number">4</span>, <span class="number">233</span>, <span class="number">243</span>, <span class="number">267</span>, <span class="number">428</span>, <span class="number">478</span>, <span class="number">494</span>, <span class="number">226</span>, <span class="number">146</span>, <span class="number">488</span>, <span class="number">20</span>, <span class="number">113</span>, <span class="number">143</span>, <span class="number">136</span>, <span class="number">49</span>, <span class="number">236</span>, <span class="number">128</span>, <span class="number">346</span>, <span class="number">501</span>, <span class="number">264</span>, <span class="number">498</span>, <span class="number">0</span>, <span class="number">413</span>, <span class="number">30</span>, <span class="number">410</span>, <span class="number">99</span>, <span class="number">1</span>, <span class="number">220</span>, <span class="number">443</span>, <span class="number">369</span>, <span class="number">290</span>, <span class="number">374</span>, <span class="number">119</span>, <span class="number">511</span>, <span class="number">483</span>, <span class="number">199</span>, <span class="number">248</span>, <span class="number">351</span>, <span class="number">388</span>, <span class="number">335</span>, <span class="number">131</span>, <span class="number">79</span>, <span class="number">496</span>, <span class="number">245</span>, <span class="number">414</span>, <span class="number">244</span>, <span class="number">158</span>, <span class="number">451</span>, <span class="number">255</span>, <span class="number">412</span>, <span class="number">47</span>, <span class="number">473</span>, <span class="number">254</span>, <span class="number">95</span>, <span class="number">299</span>, <span class="number">462</span>, <span class="number">169</span>, <span class="number">519</span>, <span class="number">493</span>, <span class="number">12</span>, <span class="number">257</span>, <span class="number">385</span>, <span class="number">432</span>, <span class="number">417</span>, <span class="number">59</span>, <span class="number">93</span>, <span class="number">455</span>, <span class="number">324</span>, <span class="number">52</span>, <span class="number">90</span>, <span class="number">407</span>, <span class="number">288</span>, <span class="number">112</span>, <span class="number">34</span>, <span class="number">528</span>, <span class="number">29</span>, <span class="number">192</span>, <span class="number">101</span>, <span class="number">419</span>, <span class="number">203</span>, <span class="number">123</span>, <span class="number">176</span>, <span class="number">177</span>, <span class="number">167</span>, <span class="number">204</span>, <span class="number">445</span>, <span class="number">416</span>, <span class="number">485</span>, <span class="number">196</span>, <span class="number">302</span>, <span class="number">424</span>, <span class="number">425</span>, <span class="number">6</span>, <span class="number">418</span>, <span class="number">258</span>, <span class="number">17</span>, <span class="number">370</span>, <span class="number">262</span>, <span class="number">227</span>, <span class="number">326</span>, <span class="number">387</span>, <span class="number">294</span>, <span class="number">295</span>, <span class="number">174</span>, <span class="number">25</span>, <span class="number">188</span>, <span class="number">81</span>, <span class="number">408</span>, <span class="number">469</span>, <span class="number">11</span>, <span class="number">472</span>, <span class="number">80</span>, <span class="number">400</span>, <span class="number">84</span>, <span class="number">382</span>, <span class="number">448</span>, <span class="number">201</span>, <span class="number">344</span>, <span class="number">7</span>, <span class="number">502</span>, <span class="number">163</span>, <span class="number">312</span>, <span class="number">484</span>, <span class="number">349</span>, <span class="number">239</span>, <span class="number">108</span>, <span class="number">411</span>, <span class="number">315</span>, <span class="number">303</span>, <span class="number">377</span>, <span class="number">36</span>, <span class="number">383</span>, <span class="number">78</span>, <span class="number">339</span>, <span class="number">491</span>, <span class="number">271</span>, <span class="number">216</span>, <span class="number">187</span>, <span class="number">322</span>, <span class="number">140</span>, <span class="number">405</span>, <span class="number">296</span>, <span class="number">402</span>, <span class="number">516</span>, <span class="number">450</span>, <span class="number">22</span>, <span class="number">482</span>, <span class="number">361</span>, <span class="number">371</span>, <span class="number">249</span>, <span class="number">453</span>, <span class="number">64</span>, <span class="number">152</span>, <span class="number">72</span>, <span class="number">194</span>, <span class="number">66</span>, <span class="number">345</span>, <span class="number">492</span>, <span class="number">447</span>, <span class="number">58</span>, <span class="number">486</span>, <span class="number">357</span>, <span class="number">149</span>, <span class="number">200</span>, <span class="number">83</span>, <span class="number">212</span>, <span class="number">219</span>, <span class="number">504</span>, <span class="number">333</span>, <span class="number">23</span>, <span class="number">439</span>, <span class="number">376</span>, <span class="number">457</span>, <span class="number">332</span>, <span class="number">153</span>, <span class="number">348</span>, <span class="number">210</span>, <span class="number">237</span>, <span class="number">173</span>, <span class="number">359</span>, <span class="number">129</span>, <span class="number">179</span>, <span class="number">426</span>, <span class="number">71</span>, <span class="number">19</span>, <span class="number">321</span>, <span class="number">338</span>, <span class="number">444</span>, <span class="number">139</span>, <span class="number">307</span>, <span class="number">515</span>, <span class="number">88</span>, <span class="number">266</span>, <span class="number">475</span>, <span class="number">182</span>, <span class="number">323</span>, <span class="number">336</span>, <span class="number">354</span>, <span class="number">272</span>, <span class="number">384</span>, <span class="number">330</span>, <span class="number">2</span>, <span class="number">211</span>, <span class="number">446</span>, <span class="number">238</span>, <span class="number">397</span>, <span class="number">230</span>, <span class="number">278</span>, <span class="number">141</span>, <span class="number">506</span>, <span class="number">181</span>, <span class="number">70</span>, <span class="number">316</span>, <span class="number">314</span>, <span class="number">459</span>, <span class="number">235</span>, <span class="number">121</span>, <span class="number">286</span>, <span class="number">76</span>, <span class="number">518</span>, <span class="number">280</span>, <span class="number">43</span>, <span class="number">111</span>, <span class="number">62</span>, <span class="number">487</span>, <span class="number">429</span>, <span class="number">524</span>, <span class="number">364</span>, <span class="number">86</span>, <span class="number">228</span>, <span class="number">353</span>, <span class="number">275</span>, <span class="number">104</span>, <span class="number">441</span>, <span class="number">268</span>, <span class="number">13</span>, <span class="number">500</span>, <span class="number">68</span>, <span class="number">87</span>, <span class="number">109</span>, <span class="number">403</span>, <span class="number">520</span>, <span class="number">231</span>, <span class="number">391</span>, <span class="number">42</span>, <span class="number">51</span>, <span class="number">328</span>, <span class="number">253</span>, <span class="number">436</span>, <span class="number">60</span>, <span class="number">497</span>, <span class="number">313</span>, <span class="number">481</span>, <span class="number">522</span>, <span class="number">53</span>, <span class="number">61</span>, <span class="number">420</span>, <span class="number">225</span>, <span class="number">189</span>, <span class="number">325</span>, <span class="number">183</span>, <span class="number">56</span>, <span class="number">100</span>, <span class="number">229</span>, <span class="number">27</span>, <span class="number">39</span>, <span class="number">3</span>, <span class="number">184</span>, <span class="number">291</span>, <span class="number">415</span>, <span class="number">454</span>, <span class="number">75</span>, <span class="number">28</span>, <span class="number">107</span>, <span class="number">347</span>, <span class="number">421</span>, <span class="number">166</span>, <span class="number">224</span>, <span class="number">279</span>, <span class="number">16</span>, <span class="number">342</span>, <span class="number">206</span>, <span class="number">207</span>, <span class="number">171</span>, <span class="number">368</span>, <span class="number">198</span>, <span class="number">456</span>, <span class="number">464</span>, <span class="number">406</span>, <span class="number">365</span>, <span class="number">151</span>, <span class="number">320</span>, <span class="number">161</span>, <span class="number">9</span>, <span class="number">89</span>, <span class="number">479</span>, <span class="number">142</span>, <span class="number">259</span>, <span class="number">401</span>, <span class="number">232</span>, <span class="number">523</span>, <span class="number">449</span>, <span class="number">150</span>, <span class="number">218</span>, <span class="number">15</span>, <span class="number">97</span>, <span class="number">287</span>, <span class="number">133</span>, <span class="number">458</span>, <span class="number">221</span>, <span class="number">63</span>, <span class="number">185</span>, <span class="number">350</span>, <span class="number">74</span>, <span class="number">135</span>, <span class="number">404</span>, <span class="number">466</span>, <span class="number">214</span>, <span class="number">116</span>, <span class="number">507</span>, <span class="number">355</span>, <span class="number">213</span>, <span class="number">178</span>, <span class="number">318</span>, <span class="number">423</span>, <span class="number">126</span>, <span class="number">395</span>, <span class="number">465</span>, <span class="number">440</span>, <span class="number">452</span>, <span class="number">157</span>, <span class="number">366</span>, <span class="number">190</span>, <span class="number">343</span>, <span class="number">467</span>, <span class="number">247</span>, <span class="number">509</span>, <span class="number">91</span>, <span class="number">205</span>, <span class="number">114</span>, <span class="number">193</span>, <span class="number">409</span>, <span class="number">375</span>, <span class="number">269</span>, <span class="number">373</span>, <span class="number">389</span>, <span class="number">148</span>, <span class="number">69</span>, <span class="number">396</span>, <span class="number">398</span>, <span class="number">317</span>, <span class="number">145</span>, <span class="number">122</span>, <span class="number">147</span>, <span class="number">512</span>, <span class="number">32</span>, <span class="number">130</span>, <span class="number">386</span>, <span class="number">94</span>, <span class="number">435</span>, <span class="number">310</span>, <span class="number">57</span>, <span class="number">422</span>, <span class="number">308</span>, <span class="number">305</span>, <span class="number">217</span>, <span class="number">8</span>, <span class="number">154</span>, <span class="number">156</span>, <span class="number">309</span>, <span class="number">223</span>, <span class="number">44</span>, <span class="number">24</span>, <span class="number">82</span>, <span class="number">160</span>, <span class="number">392</span>, <span class="number">477</span>, <span class="number">356</span>, <span class="number">134</span>, <span class="number">54</span>, <span class="number">138</span>, <span class="number">378</span>, <span class="number">331</span>, <span class="number">379</span>, <span class="number">250</span>, <span class="number">96</span>, <span class="number">489</span>, <span class="number">306</span>, <span class="number">399</span>, <span class="number">46</span>, <span class="number">18</span>, <span class="number">283</span>, <span class="number">470</span>, <span class="number">21</span>, <span class="number">360</span>, <span class="number">209</span>, <span class="number">168</span>, <span class="number">495</span>, <span class="number">180</span>, <span class="number">514</span>, <span class="number">191</span>, <span class="number">270</span>, <span class="number">510</span>, <span class="number">381</span>, <span class="number">186</span>, <span class="number">442</span>, <span class="number">31</span>, <span class="number">390</span>, <span class="number">5</span>, <span class="number">85</span>, <span class="number">92</span>, <span class="number">363</span>, <span class="number">33</span>, <span class="number">127</span>, <span class="number">197</span>, <span class="number">285</span>, <span class="number">380</span>, <span class="number">265</span>, <span class="number">48</span>, <span class="number">352</span>, <span class="number">505</span>, <span class="number">208</span>, <span class="number">438</span>, <span class="number">329</span>, <span class="number">468</span>, <span class="number">282</span>, <span class="number">45</span>, <span class="number">159</span>, <span class="number">301</span>, <span class="number">362</span>, <span class="number">341</span>, <span class="number">65</span>, <span class="number">263</span>, <span class="number">393</span>, <span class="number">222</span>, <span class="number">521</span>, <span class="number">175</span>, <span class="number">293</span>, <span class="number">37</span>, <span class="number">490</span>, <span class="number">35</span>], <span class="number">60</span>)</span><br><span class="line">enc = <span class="number">912396759652812740801869061695733452669218533249083289698313292427681899514848561025221753354562922565560034</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kbits = gift[0][1].bit_length()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inv_sbox</span>(<span class="params">s_box</span>):</span><br><span class="line">    inv = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">max</span>(s_box)):</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> s_box:</span><br><span class="line">            inv.append(s_box.index(i))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            inv.append(<span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> inv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dec_flag</span>(<span class="params">enc, key</span>):</span><br><span class="line">    key = bytes_to_long(md5(long_to_bytes(key)).digest())</span><br><span class="line">    dec = enc ^ key</span><br><span class="line">    <span class="keyword">return</span> long_to_bytes(dec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s_box = inv_sbox(gift[<span class="number">1</span>])</span><br><span class="line">data = gift[<span class="number">0</span>][(s_box[gift[<span class="number">2</span>] // <span class="number">2</span>])]</span><br><span class="line"></span><br><span class="line">key1 = (data &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">key = get_key(key1)</span><br><span class="line"><span class="built_in">print</span>(dec_flag(enc, key))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>原理不懂，但报错要了我几个小时来改，最后偶然发现运行 <code>python test.sage</code> 就出了，因为这是个在python不会报错的而在sage里却报错的错误</p>
<h3 id="哪位师傅知道这个是什么密码啊？"><a href="#哪位师傅知道这个是什么密码啊？" class="headerlink" title="哪位师傅知道这个是什么密码啊？"></a>哪位师傅知道这个是什么密码啊？</h3><p>题目描述：<strong>为什么我运行了加密不出结果啊？为什么啊？啊？</strong></p>
<p>题目作者：<strong>春哥</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">F = <span class="keyword">lambda</span> x: x * F(x-<span class="number">1</span>) <span class="keyword">if</span> x &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">1</span></span><br><span class="line">G = <span class="keyword">lambda</span> x, y: F(x) // (F(y) * F(x-y))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_keys</span>(<span class="params">n: <span class="built_in">int</span></span>):</span><br><span class="line">    p = getPrime(-<span class="number">11</span>+<span class="number">45</span>-<span class="number">14</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Please wait...&#x27;</span>)</span><br><span class="line">    s_list, t_list, u_list = [], [], []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;Progress: <span class="subst">&#123;i+<span class="number">1</span>&#125;</span> / <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            t, s = <span class="built_in">sorted</span>(getPrime(<span class="number">101</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="string">&#x27;NB&#x27;</span>)</span><br><span class="line">            u = (G(s, t) % p) &amp; <span class="number">0xFF</span></span><br><span class="line">            <span class="keyword">if</span> (u != <span class="number">0</span>):</span><br><span class="line">                s_list.append(s)</span><br><span class="line">                t_list.append(t)</span><br><span class="line">                u_list.append(u)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> (s_list, t_list, p), u_list </span><br><span class="line"></span><br><span class="line">FLAG = os.getenv(<span class="string">&#x27;FLAG&#x27;</span>, <span class="string">&#x27;ctfshow&#123;never_gonna_give_you_flag&#125;&#x27;</span>)</span><br><span class="line">pubkey, privkey = get_keys(<span class="built_in">len</span>(FLAG))</span><br><span class="line">ciphertext = <span class="built_in">bytes</span>(x ^ k <span class="keyword">for</span> x, k <span class="keyword">in</span> <span class="built_in">zip</span>(FLAG.encode(), privkey))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;pubkey = &#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;ciphertext.<span class="built_in">hex</span>() = &#125;</span>&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>大数阶乘 取模</p>
<p>官方exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pr</span>(<span class="params">x</span>):</span><br><span class="line">    sys.stdout.write(<span class="string">f&#x27;<span class="subst">&#123;x&#125;</span>\n&#x27;</span>)</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_factorial_list</span>(<span class="params">p</span>):</span><br><span class="line">    factorial_list = [<span class="number">1</span>] * p</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, p):</span><br><span class="line">        factorial_list[i] = factorial_list[i-<span class="number">1</span>] * i % p</span><br><span class="line">    <span class="keyword">return</span> factorial_list</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">G</span>(<span class="params">x, y, p, factorial_list</span>):</span><br><span class="line">    x1, x2 = x // p, x % p</span><br><span class="line">    y1, y2 = y // p, y % p</span><br><span class="line">    <span class="comment"># print(f&#x27;&#123;x = &#125;, &#123;y = &#125;&#x27;)</span></span><br><span class="line">    <span class="comment"># print(f&#x27;&#123;x2 = &#125;, &#123;y2 = &#125;&#x27;)</span></span><br><span class="line">    <span class="keyword">if</span> (x2 &lt; y2):</span><br><span class="line">        cur_G = <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cur_G = factorial_list[x2] * inverse(factorial_list[y2], p) * inverse(factorial_list[x2-y2], p) % p</span><br><span class="line">    <span class="comment"># print(f&#x27;&#123;cur_G = &#125;&#x27;)</span></span><br><span class="line">    <span class="keyword">if</span> (x1 == <span class="number">0</span>) <span class="keyword">and</span> (y1 == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> cur_G</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> G(x1, y1, p, factorial_list) * cur_G % p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s_list, t_list, p = ([<span class="number">2169473130821045784730790990467</span>, <span class="number">1449356852383878426566151663779</span>, <span class="number">2493349044744929793688627611149</span>, <span class="number">2134761062425015016604861755903</span>, <span class="number">2483034308427036483670406264923</span>, <span class="number">2245716791688272015151872944729</span>, <span class="number">2007785455169671161648798463391</span>, <span class="number">2240263858562962533407395118741</span>, <span class="number">2199653607884757419445443467171</span>, <span class="number">1892733395877536413087732462387</span>, <span class="number">2017642896410964696824916415717</span>, <span class="number">1525416837290524051585860586307</span>, <span class="number">1778082613236735124743572147159</span>, <span class="number">2197003827536615963771897307709</span>, <span class="number">2238244367849318469584746238461</span>, <span class="number">2106042304664372146486642002017</span>, <span class="number">2245855282910139891500464313371</span>, <span class="number">2233027706318121482574037143619</span>, <span class="number">2269115833481001638212461686719</span>, <span class="number">2219909401619999795891972723863</span>, <span class="number">1408053605297750247198874660711</span>, <span class="number">2095256802183309011076083152603</span>, <span class="number">2136456464566757431368235343093</span>, <span class="number">2285506903121970350143709058949</span>, <span class="number">1957061183493503498919325046029</span>, <span class="number">2457331225267459281319860495023</span>, <span class="number">1409022015193111891630813054243</span>, <span class="number">2525617774749763898371613130007</span>, <span class="number">1790539630767594144602088192383</span>, <span class="number">2225824951561730787349356744481</span>, <span class="number">1918712125318733455848759526753</span>, <span class="number">1925517758189720082278113664557</span>, <span class="number">2512298287727749709575301654483</span>, <span class="number">2065254062105719559515529127317</span>, <span class="number">1944904657236300566640138983597</span>, <span class="number">2509060767827661834029577492229</span>, <span class="number">1445911742376810920421245239871</span>, <span class="number">2252653104480183111484274663167</span>, <span class="number">2214359180192497909659970947937</span>, <span class="number">2392023156038690925569184542381</span>, <span class="number">2468194666587103535038927978747</span>, <span class="number">2137273008753025750754135256313</span>, <span class="number">1860423366614911344577702060289</span>, <span class="number">2192085257564223884505999975823</span>, <span class="number">1962530081404657743008348955163</span>], [<span class="number">1590348358505014988622312032471</span>, <span class="number">1440970986600794291092648756367</span>, <span class="number">1555690743078696585382674111791</span>, <span class="number">1537445328209593052665302637151</span>, <span class="number">1612317478758460736168277288763</span>, <span class="number">2231686860857034849432227304287</span>, <span class="number">1583532382383197709285641910899</span>, <span class="number">2169279313586858645434940846659</span>, <span class="number">1931402784910551900735634861873</span>, <span class="number">1797701334134291762058798189121</span>, <span class="number">1903539209949045965433500740807</span>, <span class="number">1473467664883654503284892664369</span>, <span class="number">1751331560725280431421676409603</span>, <span class="number">2089897955327690649757160502149</span>, <span class="number">1923971006077646365607243482739</span>, <span class="number">1863034106424449611722082348927</span>, <span class="number">1312544069279374606054075309357</span>, <span class="number">2131068231080921143368714825203</span>, <span class="number">2086463476093219386201552512567</span>, <span class="number">1560177070638112494896909188513</span>, <span class="number">1307420748743867422149455470609</span>, <span class="number">1807563713566775065879664230051</span>, <span class="number">2114263139857857969658887008017</span>, <span class="number">1609306244955096612039506486569</span>, <span class="number">1623094273653649066194646511171</span>, <span class="number">2400696233713561215916575142507</span>, <span class="number">1318059629541799023274296376661</span>, <span class="number">2414119023158594885888974289113</span>, <span class="number">1777507328244848462615948947837</span>, <span class="number">2065253720031548286854056878751</span>, <span class="number">1540469627569646718412541734861</span>, <span class="number">1776467933213165492416940154007</span>, <span class="number">1532302746066365760320339371763</span>, <span class="number">1290302629475805723721535581609</span>, <span class="number">1880300909305485379589295332029</span>, <span class="number">1584562156092887356432708356107</span>, <span class="number">1393195609906772235759082420501</span>, <span class="number">1713209896195348598916703481807</span>, <span class="number">1690549975167026745296280906779</span>, <span class="number">1620804254863211629908460175947</span>, <span class="number">2355042511124816525048523659633</span>, <span class="number">1976901781158698209614100227719</span>, <span class="number">1590804541546973741759893996729</span>, <span class="number">1848691390035222525567924855841</span>, <span class="number">1587908373391523000293352350193</span>], <span class="number">947407</span>)</span><br><span class="line">ciphertext = <span class="number">0x089882583bf628c0b0c089749a9f6573d6883045f2f13eb264ffdefa1d4e2817b3248ed92a4f47c106aba0dfd6</span></span><br><span class="line"></span><br><span class="line">factorial_list = get_factorial_list(p)</span><br><span class="line">u_list = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s_list)):</span><br><span class="line">    u = G(s_list[i], t_list[i], p, factorial_list) &amp; <span class="number">0xFF</span></span><br><span class="line">    u_list.append(u)</span><br><span class="line"></span><br><span class="line">ciphertext = <span class="built_in">list</span>(long_to_bytes(ciphertext))</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">bytes</span>(x ^ k <span class="keyword">for</span> x, k <span class="keyword">in</span> <span class="built_in">zip</span>(ciphertext, u_list))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># ctfshow&#123;5f4e0bfd-6449-4454-b516-b48aad89532e&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="Lucas-定理"><a href="#Lucas-定理" class="headerlink" title="Lucas 定理"></a>Lucas 定理</h4><p>Lucas 定理用于求解大组合数取模的问题，其中模数必须为素数。正常的组合数运算可以通过递推公式求解（详见 <span class="exturl" data-url="aHR0cHM6Ly9vaS13aWtpLm9yZy9tYXRoL2NvbWJpbmF0b3JpY3MvY29tYmluYXRpb24v">排列组合<i class="fa fa-external-link-alt"></i></span>），但当问题规模很大，而模数是一个不大的质数的时候，就不能简单地通过递推求解来得到答案，需要用到 Lucas 定理。</p>
<script type="math/tex; mode=display">
u = \frac{x!}{y!(x-y)!}\bmod p \mod 255</script><p><code>&amp; 255</code> 某种程度上相当于 <code>% 255</code> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pubkey = ([<span class="number">2169473130821045784730790990467</span>, <span class="number">1449356852383878426566151663779</span>, <span class="number">2493349044744929793688627611149</span>, <span class="number">2134761062425015016604861755903</span>, <span class="number">2483034308427036483670406264923</span>, <span class="number">2245716791688272015151872944729</span>, <span class="number">2007785455169671161648798463391</span>, <span class="number">2240263858562962533407395118741</span>, <span class="number">2199653607884757419445443467171</span>, <span class="number">1892733395877536413087732462387</span>, <span class="number">2017642896410964696824916415717</span>, <span class="number">1525416837290524051585860586307</span>, <span class="number">1778082613236735124743572147159</span>, <span class="number">2197003827536615963771897307709</span>, <span class="number">2238244367849318469584746238461</span>, <span class="number">2106042304664372146486642002017</span>, <span class="number">2245855282910139891500464313371</span>, <span class="number">2233027706318121482574037143619</span>, <span class="number">2269115833481001638212461686719</span>, <span class="number">2219909401619999795891972723863</span>, <span class="number">1408053605297750247198874660711</span>, <span class="number">2095256802183309011076083152603</span>, <span class="number">2136456464566757431368235343093</span>, <span class="number">2285506903121970350143709058949</span>, <span class="number">1957061183493503498919325046029</span>, <span class="number">2457331225267459281319860495023</span>, <span class="number">1409022015193111891630813054243</span>, <span class="number">2525617774749763898371613130007</span>, <span class="number">1790539630767594144602088192383</span>, <span class="number">2225824951561730787349356744481</span>, <span class="number">1918712125318733455848759526753</span>, <span class="number">1925517758189720082278113664557</span>, <span class="number">2512298287727749709575301654483</span>, <span class="number">2065254062105719559515529127317</span>, <span class="number">1944904657236300566640138983597</span>, <span class="number">2509060767827661834029577492229</span>, <span class="number">1445911742376810920421245239871</span>, <span class="number">2252653104480183111484274663167</span>, <span class="number">2214359180192497909659970947937</span>, <span class="number">2392023156038690925569184542381</span>, <span class="number">2468194666587103535038927978747</span>, <span class="number">2137273008753025750754135256313</span>, <span class="number">1860423366614911344577702060289</span>, <span class="number">2192085257564223884505999975823</span>, <span class="number">1962530081404657743008348955163</span>], [<span class="number">1590348358505014988622312032471</span>, <span class="number">1440970986600794291092648756367</span>, <span class="number">1555690743078696585382674111791</span>, <span class="number">1537445328209593052665302637151</span>, <span class="number">1612317478758460736168277288763</span>, <span class="number">2231686860857034849432227304287</span>, <span class="number">1583532382383197709285641910899</span>, <span class="number">2169279313586858645434940846659</span>, <span class="number">1931402784910551900735634861873</span>, <span class="number">1797701334134291762058798189121</span>, <span class="number">1903539209949045965433500740807</span>, <span class="number">1473467664883654503284892664369</span>, <span class="number">1751331560725280431421676409603</span>, <span class="number">2089897955327690649757160502149</span>, <span class="number">1923971006077646365607243482739</span>, <span class="number">1863034106424449611722082348927</span>, <span class="number">1312544069279374606054075309357</span>, <span class="number">2131068231080921143368714825203</span>, <span class="number">2086463476093219386201552512567</span>, <span class="number">1560177070638112494896909188513</span>, <span class="number">1307420748743867422149455470609</span>, <span class="number">1807563713566775065879664230051</span>, <span class="number">2114263139857857969658887008017</span>, <span class="number">1609306244955096612039506486569</span>, <span class="number">1623094273653649066194646511171</span>, <span class="number">2400696233713561215916575142507</span>, <span class="number">1318059629541799023274296376661</span>, <span class="number">2414119023158594885888974289113</span>, <span class="number">1777507328244848462615948947837</span>, <span class="number">2065253720031548286854056878751</span>, <span class="number">1540469627569646718412541734861</span>, <span class="number">1776467933213165492416940154007</span>, <span class="number">1532302746066365760320339371763</span>, <span class="number">1290302629475805723721535581609</span>, <span class="number">1880300909305485379589295332029</span>, <span class="number">1584562156092887356432708356107</span>, <span class="number">1393195609906772235759082420501</span>, <span class="number">1713209896195348598916703481807</span>, <span class="number">1690549975167026745296280906779</span>, <span class="number">1620804254863211629908460175947</span>, <span class="number">2355042511124816525048523659633</span>, <span class="number">1976901781158698209614100227719</span>, <span class="number">1590804541546973741759893996729</span>, <span class="number">1848691390035222525567924855841</span>, <span class="number">1587908373391523000293352350193</span>], <span class="number">947407</span>)</span><br><span class="line">(S_list, T_list, p) = pubkey</span><br><span class="line">ciphertext = <span class="string">&quot;089882583bf628c0b0c089749a9f6573d6883045f2f13eb264ffdefa1d4e2817b3248ed92a4f47c106aba0dfd6&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pow</span>(<span class="params">a, b, m</span>):  <span class="comment"># 快速幂</span></span><br><span class="line">    ans = <span class="number">1</span></span><br><span class="line">    a %= m</span><br><span class="line">    <span class="keyword">while</span> b:</span><br><span class="line">        <span class="keyword">if</span> b &amp; <span class="number">1</span>:</span><br><span class="line">            ans = (ans % m) * (a % m) % m</span><br><span class="line">        b //= <span class="number">2</span></span><br><span class="line">        a = (a % m) * (a % m) % m</span><br><span class="line">    ans %= m</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inv</span>(<span class="params">x, p</span>):  <span class="comment"># 快速求逆元</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(x, p - <span class="number">2</span>, p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">C</span>(<span class="params">n, m, p</span>):  <span class="comment"># 组合数</span></span><br><span class="line">    <span class="keyword">if</span> m &gt; n:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    up, down = <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - m + <span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        up = up * i % p</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">        down = down * i % p</span><br><span class="line">    <span class="keyword">return</span> up * inv(down, p) % p</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Lucas</span>(<span class="params">n, m, p</span>):</span><br><span class="line">    <span class="keyword">if</span> m == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> C(n % p, m % p, p) * Lucas(n // p, m // p, p) % p</span><br><span class="line"></span><br><span class="line">u_list = []</span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> s, t <span class="keyword">in</span> <span class="built_in">zip</span>(S_list, T_list):</span><br><span class="line">    tmp = Lucas(s, t, p)</span><br><span class="line">    u = tmp &amp; <span class="number">0xFF</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Round<span class="subst">&#123;i&#125;</span>:u = <span class="subst">&#123;u&#125;</span>&quot;</span>)</span><br><span class="line">    u_list.append(u)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">bytes</span>(x ^ k <span class="keyword">for</span> x, k <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="built_in">bytes</span>.fromhex(ciphertext), u_list))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># ctfshow&#123;5f4e0bfd-6449-4454-b516-b48aad89532e&#125;</span></span><br></pre></td></tr></table></figure>
<p><span class="exturl" data-url="aHR0cHM6Ly9vaS13aWtpLm9yZy9tYXRoL251bWJlci10aGVvcnkvbHVjYXMvIyVFOCVBRiU4MSVFNiU5OCU4RQ==">https://oi-wiki.org/math/number-theory/lucas/#%E8%AF%81%E6%98%8E<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Wp</tag>
      </tags>
  </entry>
  <entry>
    <title>第一届帕鲁杯-CTF挑战赛</title>
    <url>/Crypto/%E7%AC%AC%E4%B8%80%E5%B1%8A%E5%B8%95%E9%B2%81%E6%9D%AF-CTF%E6%8C%91%E6%88%98%E8%B5%9B/</url>
    <content><![CDATA[<p>草树知春不久归，百般红紫斗芳菲。</p>
<span id="more"></span>
<h2 id="玛卡巴卡能有什么坏心思呢"><a href="#玛卡巴卡能有什么坏心思呢" class="headerlink" title="玛卡巴卡能有什么坏心思呢"></a>玛卡巴卡能有什么坏心思呢</h2><blockquote>
<p>题目</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">玛卡巴卡玛卡巴卡轰达姆阿卡嗙轰阿巴雅卡阿巴雅卡阿巴雅卡轰达姆阿卡嗙轰哈姆达姆阿卡嗙哈姆达姆阿卡嗙哈姆达姆阿卡嗙轰玛卡巴卡轰达姆阿卡嗙轰阿巴雅卡阿巴雅卡轰咿呀呦轰达姆阿卡嗙轰</span><br></pre></td></tr></table></figure>
<blockquote>
<p>题解</p>
</blockquote>
<p>玛卡巴卡编码，找到字典就行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">encoding_rules = &#123;</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;玛卡巴卡轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;阿巴雅卡轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;伊卡阿卡噢轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;d&#x27;</span>: <span class="string">&#x27;哈姆达姆阿卡嗙轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;e&#x27;</span>: <span class="string">&#x27;咿呀呦轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;f&#x27;</span>: <span class="string">&#x27;玛卡雅卡轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;g&#x27;</span>: <span class="string">&#x27;伊卡阿卡轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;h&#x27;</span>: <span class="string">&#x27;咿呀巴卡轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;i&#x27;</span>: <span class="string">&#x27;达姆阿卡嗙轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;j&#x27;</span>: <span class="string">&#x27;玛卡巴卡玛卡巴卡轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;k&#x27;</span>: <span class="string">&#x27;玛卡巴卡玛卡巴卡玛卡巴卡轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;l&#x27;</span>: <span class="string">&#x27;玛卡巴卡玛卡巴卡玛卡巴卡玛卡巴卡轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;m&#x27;</span>: <span class="string">&#x27;阿巴雅卡阿巴雅卡轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;n&#x27;</span>: <span class="string">&#x27;阿巴雅卡阿巴雅卡阿巴雅卡轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;o&#x27;</span>: <span class="string">&#x27;阿巴雅卡阿巴雅卡阿巴雅卡阿巴雅卡轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;p&#x27;</span>: <span class="string">&#x27;伊卡阿卡噢伊卡阿卡噢轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;q&#x27;</span>: <span class="string">&#x27;伊卡阿卡噢伊卡阿卡噢伊卡阿卡噢轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;r&#x27;</span>: <span class="string">&#x27;伊卡阿卡噢伊卡阿卡噢伊卡阿卡噢伊卡阿卡噢轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;s&#x27;</span>: <span class="string">&#x27;哈姆达姆阿卡嗙哈姆达姆阿卡嗙轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;t&#x27;</span>: <span class="string">&#x27;哈姆达姆阿卡嗙哈姆达姆阿卡嗙哈姆达姆阿卡嗙轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;u&#x27;</span>: <span class="string">&#x27;哈姆达姆阿卡嗙哈姆达姆阿卡嗙哈姆达姆阿卡嗙哈姆达姆阿卡嗙轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;v&#x27;</span>: <span class="string">&#x27;咿呀呦咿呀呦轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;w&#x27;</span>: <span class="string">&#x27;咿呀呦咿呀呦咿呀呦轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;x&#x27;</span>: <span class="string">&#x27;咿呀呦咿呀呦咿呀呦咿呀呦轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;y&#x27;</span>: <span class="string">&#x27;咿呀呦咿呀呦咿呀呦咿呀呦咿呀呦轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;z&#x27;</span>: <span class="string">&#x27;玛卡雅卡玛卡雅卡轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;A&#x27;</span>: <span class="string">&#x27;玛卡雅卡玛卡雅卡玛卡雅卡轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;B&#x27;</span>: <span class="string">&#x27;玛卡雅卡玛卡雅卡玛卡雅卡玛卡雅卡轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;C&#x27;</span>: <span class="string">&#x27;伊卡阿卡伊卡阿卡轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;D&#x27;</span>: <span class="string">&#x27;伊卡阿卡伊卡阿卡伊卡阿卡轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;E&#x27;</span>: <span class="string">&#x27;伊卡阿卡伊卡阿卡伊卡阿卡伊卡阿卡轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;F&#x27;</span>: <span class="string">&#x27;咿呀巴卡咿呀巴卡轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;G&#x27;</span>: <span class="string">&#x27;咿呀巴卡咿呀巴卡咿呀巴卡轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;H&#x27;</span>: <span class="string">&#x27;咿呀巴卡咿呀巴卡咿呀巴卡咿呀巴卡轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;I&#x27;</span>: <span class="string">&#x27;咿呀巴卡咿呀巴卡咿呀巴卡咿呀巴卡咿呀巴卡轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;J&#x27;</span>: <span class="string">&#x27;达姆阿卡嗙达姆阿卡嗙轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;K&#x27;</span>: <span class="string">&#x27;达姆阿卡嗙达姆阿卡嗙达姆阿卡嗙轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;L&#x27;</span>: <span class="string">&#x27;达姆阿卡嗙达姆阿卡嗙达姆阿卡嗙达姆阿卡嗙轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;M&#x27;</span>: <span class="string">&#x27;达姆阿卡嗙达姆阿卡嗙达姆阿卡嗙达姆阿卡嗙达姆阿卡嗙轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;N&#x27;</span>: <span class="string">&#x27;巴卡巴卡轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;O&#x27;</span>: <span class="string">&#x27;巴卡巴卡巴卡巴卡轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;P&#x27;</span>: <span class="string">&#x27;巴卡巴卡巴卡巴卡巴卡巴卡轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Q&#x27;</span>: <span class="string">&#x27;巴卡巴卡巴卡巴卡巴卡巴卡巴卡巴卡轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;R&#x27;</span>: <span class="string">&#x27;巴卡巴卡巴卡巴卡巴卡巴卡巴卡巴卡巴卡巴卡轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;S&#x27;</span>: <span class="string">&#x27;呀呦轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;T&#x27;</span>: <span class="string">&#x27;呀呦呀呦轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;U&#x27;</span>: <span class="string">&#x27;呀呦呀呦呀呦轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;V&#x27;</span>: <span class="string">&#x27;呀呦呀呦呀呦呀呦轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;W&#x27;</span>: <span class="string">&#x27;呀呦呀呦呀呦呀呦呀呦轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;X&#x27;</span>: <span class="string">&#x27;达姆阿卡轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Y&#x27;</span>: <span class="string">&#x27;达姆阿卡达姆阿卡轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Z&#x27;</span>: <span class="string">&#x27;达姆阿卡达姆阿卡达姆阿卡轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;达姆阿卡达姆阿卡达姆阿卡达姆阿卡轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;达姆阿卡达姆阿卡达姆阿卡达姆阿卡达姆阿卡轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;玛巴轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;玛巴玛巴轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;4&#x27;</span>: <span class="string">&#x27;玛巴玛巴玛巴轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;5&#x27;</span>: <span class="string">&#x27;玛巴玛巴玛巴玛巴轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;6&#x27;</span>: <span class="string">&#x27;巴卡玛巴轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;7&#x27;</span>: <span class="string">&#x27;巴卡玛巴巴卡玛巴轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;8&#x27;</span>: <span class="string">&#x27;巴卡玛巴巴卡玛巴巴卡玛巴轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;9&#x27;</span>: <span class="string">&#x27;巴卡玛巴巴卡玛巴巴卡玛巴巴卡玛巴轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;=&#x27;</span>: <span class="string">&#x27;妈个巴子轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;/&#x27;</span>: <span class="string">&#x27;妈个巴卡轰&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;+&#x27;</span>: <span class="string">&#x27;妈个巴达轰&#x27;</span>,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(encoding_rules.values())</span></span><br><span class="line"><span class="comment"># print(encoding_rules.keys())</span></span><br><span class="line">values = [<span class="string">&#x27;玛卡巴卡轰&#x27;</span>, <span class="string">&#x27;阿巴雅卡轰&#x27;</span>, <span class="string">&#x27;伊卡阿卡噢轰&#x27;</span>, <span class="string">&#x27;哈姆达姆阿卡嗙轰&#x27;</span>, <span class="string">&#x27;咿呀呦轰&#x27;</span>, <span class="string">&#x27;玛卡雅卡轰&#x27;</span>, <span class="string">&#x27;伊卡阿卡轰&#x27;</span>, <span class="string">&#x27;咿呀巴卡轰&#x27;</span>, <span class="string">&#x27;达姆阿卡嗙轰&#x27;</span>, <span class="string">&#x27;玛卡巴卡玛卡巴卡轰&#x27;</span>, <span class="string">&#x27;玛卡巴卡玛卡巴卡玛卡巴卡轰&#x27;</span>, <span class="string">&#x27;玛卡巴卡玛卡巴卡玛卡巴卡玛卡巴卡轰&#x27;</span>, <span class="string">&#x27;阿巴雅卡阿巴雅卡轰&#x27;</span>, <span class="string">&#x27;阿巴雅卡阿巴雅卡阿巴雅卡轰&#x27;</span>, <span class="string">&#x27;阿巴雅卡阿巴雅卡阿巴雅卡阿巴雅卡轰&#x27;</span>, <span class="string">&#x27;伊卡阿卡噢伊卡阿卡噢轰&#x27;</span>, <span class="string">&#x27;伊卡阿卡噢伊卡阿卡噢伊卡阿卡噢轰&#x27;</span>, <span class="string">&#x27;伊卡阿卡噢伊卡阿卡噢伊卡阿卡噢伊卡阿卡噢轰&#x27;</span>, <span class="string">&#x27;哈姆达姆阿卡嗙哈姆达姆阿卡嗙轰&#x27;</span>, <span class="string">&#x27;哈姆达姆阿卡嗙哈姆达姆阿卡嗙哈姆达姆阿卡嗙轰&#x27;</span>, <span class="string">&#x27;哈姆达姆阿卡嗙哈姆达姆阿卡嗙哈姆达姆阿卡嗙哈姆达姆阿卡嗙轰&#x27;</span>, <span class="string">&#x27;咿呀呦咿呀呦轰&#x27;</span>, <span class="string">&#x27;咿呀呦咿呀呦咿呀呦轰&#x27;</span>, <span class="string">&#x27;咿呀呦咿呀呦咿呀呦咿呀呦轰&#x27;</span>, <span class="string">&#x27;咿呀呦咿呀呦咿呀呦咿呀呦咿呀呦轰&#x27;</span>, <span class="string">&#x27;玛卡雅卡玛卡雅卡轰&#x27;</span>, <span class="string">&#x27;玛卡雅卡玛卡雅卡玛卡雅卡轰&#x27;</span>, <span class="string">&#x27;玛卡雅卡玛卡雅卡玛卡雅卡玛卡雅卡轰&#x27;</span>, <span class="string">&#x27;伊卡阿卡伊卡阿卡轰&#x27;</span>, <span class="string">&#x27;伊卡阿卡伊卡阿卡伊卡阿卡轰&#x27;</span>, <span class="string">&#x27;伊卡阿卡伊卡阿卡伊卡阿卡伊卡阿卡轰&#x27;</span>, <span class="string">&#x27;咿呀巴卡咿呀巴卡轰&#x27;</span>, <span class="string">&#x27;咿呀巴卡咿呀巴卡咿呀巴卡轰&#x27;</span>, <span class="string">&#x27;咿呀巴卡咿呀巴卡咿呀巴卡咿呀巴卡轰&#x27;</span>, <span class="string">&#x27;咿呀巴卡咿呀巴卡咿呀巴卡咿呀巴卡咿呀巴卡轰&#x27;</span>, <span class="string">&#x27;达姆阿卡嗙达姆阿卡嗙轰&#x27;</span>, <span class="string">&#x27;达姆阿卡嗙达姆阿卡嗙达姆阿卡嗙轰&#x27;</span>, <span class="string">&#x27;达姆阿卡嗙达姆阿卡嗙达姆阿卡嗙达姆阿卡嗙轰&#x27;</span>, <span class="string">&#x27;达姆阿卡嗙达姆阿卡嗙达姆阿卡嗙达姆阿卡嗙达姆阿卡嗙轰&#x27;</span>, <span class="string">&#x27;巴卡巴卡轰&#x27;</span>, <span class="string">&#x27;巴卡巴卡巴卡巴卡轰&#x27;</span>, <span class="string">&#x27;巴卡巴卡巴卡巴卡巴卡巴卡轰&#x27;</span>, <span class="string">&#x27;巴卡巴卡巴卡巴卡巴卡巴卡巴卡巴卡轰&#x27;</span>, <span class="string">&#x27;巴卡巴卡巴卡巴卡巴卡巴卡巴卡巴卡巴卡巴卡轰&#x27;</span>, <span class="string">&#x27;呀呦轰&#x27;</span>, <span class="string">&#x27;呀呦呀呦轰&#x27;</span>, <span class="string">&#x27;呀呦呀呦呀呦轰&#x27;</span>, <span class="string">&#x27;呀呦呀呦呀呦呀呦轰&#x27;</span>, <span class="string">&#x27;呀呦呀呦呀呦呀呦呀呦轰&#x27;</span>, <span class="string">&#x27;达姆阿卡轰&#x27;</span>, <span class="string">&#x27;达姆阿卡达姆阿卡轰&#x27;</span>, <span class="string">&#x27;达姆阿卡达姆阿卡达姆阿卡轰&#x27;</span>, <span class="string">&#x27;达姆阿卡达姆阿卡达姆阿卡达姆阿卡轰&#x27;</span>, <span class="string">&#x27;达姆阿卡达姆阿卡达姆阿卡达姆阿卡达姆阿卡轰&#x27;</span>, <span class="string">&#x27;玛巴轰&#x27;</span>, <span class="string">&#x27;玛巴玛巴轰&#x27;</span>, <span class="string">&#x27;玛巴玛巴玛巴轰&#x27;</span>, <span class="string">&#x27;玛巴玛巴玛巴玛巴轰&#x27;</span>, <span class="string">&#x27;巴卡玛巴轰&#x27;</span>, <span class="string">&#x27;巴卡玛巴巴卡玛巴轰&#x27;</span>, <span class="string">&#x27;巴卡玛巴巴卡玛巴巴卡玛巴轰&#x27;</span>, <span class="string">&#x27;巴卡玛巴巴卡玛巴巴卡玛巴巴卡玛巴轰&#x27;</span>, <span class="string">&#x27;妈个巴子轰&#x27;</span>, <span class="string">&#x27;妈个巴卡轰&#x27;</span>, <span class="string">&#x27;妈个巴达轰&#x27;</span>]</span><br><span class="line">keys = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;+&#x27;</span>]</span><br><span class="line"></span><br><span class="line">c = <span class="string">&#x27;玛卡巴卡玛卡巴卡轰达姆阿卡嗙轰阿巴雅卡阿巴雅卡阿巴雅卡轰达姆阿卡嗙轰哈姆达姆阿卡嗙哈姆达姆阿卡嗙哈姆达姆阿卡嗙轰玛卡巴卡轰达姆阿卡嗙轰阿巴雅卡阿巴雅卡轰咿呀呦轰达姆阿卡嗙轰</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"></span><br><span class="line">c_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c.split(<span class="string">&#x27;轰&#x27;</span>):</span><br><span class="line">	c_list.append(i+<span class="string">&#x27;轰&#x27;</span>)</span><br><span class="line"></span><br><span class="line">m = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c_list[:-<span class="number">1</span>]:</span><br><span class="line">	<span class="keyword">if</span> i <span class="keyword">in</span> values:</span><br><span class="line">		index = values.index(i)</span><br><span class="line">		m+=keys[index]</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line">c = <span class="string">&#x27;玛巴轰达姆阿卡达姆阿卡达姆阿卡达姆阿卡轰玛巴轰玛巴玛巴玛巴轰达姆阿卡嗙轰哈姆达姆阿卡嗙哈姆达姆阿卡嗙轰伊卡阿卡噢伊卡阿卡噢轰玛卡巴卡轰哈姆达姆阿卡嗙哈姆达姆阿卡嗙轰哈姆达姆阿卡嗙哈姆达姆阿卡嗙轰咿呀呦咿呀呦咿呀呦轰阿巴雅卡阿巴雅卡阿巴雅卡阿巴雅卡轰伊卡阿卡噢伊卡阿卡噢伊卡阿卡噢伊卡阿卡噢轰哈姆达姆阿卡嗙轰&#x27;</span></span><br><span class="line"></span><br><span class="line">c_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c.split(<span class="string">&#x27;轰&#x27;</span>):</span><br><span class="line">	c_list.append(i+<span class="string">&#x27;轰&#x27;</span>)</span><br><span class="line"></span><br><span class="line">m = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> c_list[:-<span class="number">1</span>]:</span><br><span class="line">	<span class="keyword">if</span> i <span class="keyword">in</span> values:</span><br><span class="line">		index = values.index(i)</span><br><span class="line">		m+=keys[index]</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;jinitaimei&#125;</span></span><br><span class="line"><span class="comment"># 2024ispassword</span></span><br></pre></td></tr></table></figure>
<h2 id="01110"><a href="#01110" class="headerlink" title="01110"></a>01110</h2><blockquote>
<p>题目</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, getRandomRange, bytes_to_long</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * (q**<span class="number">2</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    z = randrange(<span class="number">1</span>, n)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">all</span>(<span class="built_in">pow</span>(z, (x - <span class="number">1</span>) // <span class="number">2</span>, x) == x - <span class="number">1</span> <span class="keyword">for</span> x <span class="keyword">in</span> (p, q)):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_bit</span>(<span class="params">m, n, z</span>):</span><br><span class="line">    secret = getRandomRange(<span class="number">1</span>, n - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">pow</span>(secret, <span class="number">2</span>, n) * <span class="built_in">pow</span>(z, m, n)) % n</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">int</span>(<span class="built_in">bin</span>(bytes_to_long(flag))[<span class="number">2</span>:])</span><br><span class="line">c = []</span><br><span class="line"><span class="keyword">while</span> m:</span><br><span class="line">    bit = m % <span class="number">10</span></span><br><span class="line">    c.append(encrypt_bit(bit, n, z))</span><br><span class="line">    m //= <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;gift1=&quot;</span>, <span class="built_in">pow</span>((p + q), e, n))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;gift2=&quot;</span>, <span class="built_in">pow</span>((p - q), e, n))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;z=&quot;</span>, z)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>, c)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>题解</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> m:</span><br><span class="line">    bit = m % <span class="number">10</span></span><br><span class="line">    c.append(encrypt_bit(bit, n, z))</span><br><span class="line">    m //= <span class="number">10</span></span><br></pre></td></tr></table></figure>
<p>就是取最后一位</p>
<p>一眼 <code>jacobi</code> ，可能读取密文时间还花的长些</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n= <span class="number">390643660915400759356028673149168279560687093035302974183909784119138903637101610150171466601442693220550718178154721365461636077209566533154335718201358899342358662848545345180263124134588375803369006010468316238614932369094974862842683683363587543473163915923045398254122306762084945489324575516415794686273949909352344088141474136179402651003388916093283318052977257982248730053350207666237541564674407802737159850168950514444047006592253696165165211262564161</span></span><br><span class="line"></span><br><span class="line">plaintext = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># with open(&#x27;output.txt&#x27;) as f:</span></span><br><span class="line"><span class="comment"># 	print(f.readline().replace(&#x27;,&#x27;,&#x27;\n&#x27;).strip())</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">	<span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">		cipher = <span class="built_in">int</span>(line)</span><br><span class="line">		<span class="keyword">if</span> gmpy2.jacobi(cipher,n) == -<span class="number">1</span>:</span><br><span class="line">			plaintext = <span class="string">&#x27;1&#x27;</span> +plaintext</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			plaintext = <span class="string">&#x27;0&#x27;</span>+plaintext</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(plaintext,<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># paluctf&#123;1_4m_th3_b0td_1n_t3st_1n_th3_r0w&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Crypto-签到"><a href="#Crypto-签到" class="headerlink" title="Crypto-签到"></a>Crypto-签到</h2><blockquote>
<p>题解</p>
</blockquote>
<p>n 拿去 <code>factordb</code> 看一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">c= <span class="number">45269461971515000289671772521188766694700728330128646249215013733085930489882068894332856604506536779801062614812326540395959294654223820007708665902047037358747925250870477703104363139985136565458136270800159390392019520313661164825471977721337242625432765885411745639743648296844838846507684596123618659487</span></span><br><span class="line">p= <span class="number">10946776553446440448007472617874712600557780823301066821996423559118196781424700584311983708005541979031881165443127688807109548778070835220727302118913733</span></span><br><span class="line">e= <span class="number">65537</span></span><br><span class="line">n= <span class="number">119831916911084729466317342717897978036542634518996731609377229053903313866116046924267456495022800951614061986741670058681616050263086729645721769942581237701087728947844081291145401821897421158626638131690590482798935123793612486710503488708248251831913677302987861470596167886864957248328925817207895995289</span></span><br><span class="line"></span><br><span class="line">d = libnum.invmod(e,(p-<span class="number">1</span>)*p)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">pow</span>(c,d,n)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;8ede5e35-dae8-43fd-a333-855e70c59a55&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="gcccd"><a href="#gcccd" class="headerlink" title="gcccd"></a>gcccd</h2><blockquote>
<p>题目</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getStrongPrime, GCD, bytes_to_long</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">long_to_bytes</span>(<span class="params">long_int, block_size=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Convert a long integer to bytes, optionally right-justified to a given block size.&quot;&quot;&quot;</span></span><br><span class="line">    bytes_data = long_int.to_bytes((long_int.bit_length() + <span class="number">7</span>) // <span class="number">8</span>, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> bytes_data <span class="keyword">if</span> <span class="keyword">not</span> block_size <span class="keyword">else</span> bytes_data.rjust(block_size, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_keys</span>(<span class="params">bits=<span class="number">512</span>, e=<span class="number">5331</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Generate RSA modulus n and public exponent e such that GCD((p-1)*(q-1), e) == 1.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        p, q = getStrongPrime(bits), getStrongPrime(bits)</span><br><span class="line">        n = p * q</span><br><span class="line">        <span class="keyword">if</span> GCD((p-<span class="number">1</span>) * (q-<span class="number">1</span>), e) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> n, e</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">m, n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Pad the message m for RSA encryption under modulus n using PKCS#1 type 1.&quot;&quot;&quot;</span></span><br><span class="line">    mb, nb = long_to_bytes(m), long_to_bytes(n)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(mb) &lt;= <span class="built_in">len</span>(nb) - <span class="number">11</span></span><br><span class="line">    padding = os.urandom(<span class="built_in">len</span>(nb) - <span class="built_in">len</span>(mb) - <span class="number">3</span>).replace(<span class="string">b&#x27;\x01&#x27;</span>, <span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> bytes_to_long(<span class="string">b&#x27;\x00\x01&#x27;</span> + padding + <span class="string">b&#x27;\x00&#x27;</span> + mb)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">m, e, n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Encrypt message m with RSA public key (e, n).&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line">n, e = gen_keys()</span><br><span class="line">m = pad(bytes_to_long(flag), n)</span><br><span class="line">c1, c2 = encrypt(m, e, n), encrypt(m // <span class="number">2</span>, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>\ne = <span class="subst">&#123;e&#125;</span>\nc1 = <span class="subst">&#123;c1&#125;</span>\nc2 = <span class="subst">&#123;c2&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># n = 128134155200900363557361770121648236747559663738591418041443861545561451885335858854359771414605640612993903005548718875328893717909535447866152704351924465716196738696788273375424835753379386427253243854791810104120869379525507986270383750499650286106684249027984675067236382543612917882024145261815608895379</span></span><br><span class="line"><span class="comment"># e = 5331</span></span><br><span class="line"><span class="comment"># c1 = 60668946079423190709851484247433853783238381043211713258950336572392573192737047470465310272448083514859509629066647300714425946282732774440406261265802652068183263460022257056016974572472905555413226634497579807277440653563498768557112618320828785438180460624890479311538368514262550081582173264168580537990</span></span><br><span class="line"><span class="comment"># c2 = 43064371535146610786202813736674368618250034274768737857627872777051745883780468417199551751374395264039179171708712686651485125338422911633961121202567788447108712022481564453759980969777219700870458940189456782517037780321026907310930696608923940135664565796997158295530735831680955376342697203313901005151</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>题解</p>
</blockquote>
<p>关键点在这</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c1, c2 = encrypt(m, e, n), encrypt(m // <span class="number">2</span>, e, n)</span><br></pre></td></tr></table></figure>
<p>通过题目名<code>gcccd</code>联想到 <code>Franklin-Reiter</code>或者<code>half gcd</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> c1 != (c2 * <span class="built_in">pow</span>(<span class="number">2</span>, e, n)) % n</span><br></pre></td></tr></table></figure>
<p>看这个数的奇偶性，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Franklin-Reiter</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">n = <span class="number">128134155200900363557361770121648236747559663738591418041443861545561451885335858854359771414605640612993903005548718875328893717909535447866152704351924465716196738696788273375424835753379386427253243854791810104120869379525507986270383750499650286106684249027984675067236382543612917882024145261815608895379</span></span><br><span class="line">e = <span class="number">5331</span></span><br><span class="line">c1 = <span class="number">60668946079423190709851484247433853783238381043211713258950336572392573192737047470465310272448083514859509629066647300714425946282732774440406261265802652068183263460022257056016974572472905555413226634497579807277440653563498768557112618320828785438180460624890479311538368514262550081582173264168580537990</span></span><br><span class="line">c2 = <span class="number">43064371535146610786202813736674368618250034274768737857627872777051745883780468417199551751374395264039179171708712686651485125338422911633961121202567788447108712022481564453759980969777219700870458940189456782517037780321026907310930696608923940135664565796997158295530735831680955376342697203313901005151</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> c1 != (c2 * <span class="built_in">pow</span>(<span class="number">2</span>, e, n)) % n</span><br><span class="line"></span><br><span class="line">inv = libnum.invmod(<span class="number">2</span>,n)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>():</span><br><span class="line">    PR.&lt;x&gt;=PolynomialRing(Zmod(n) )</span><br><span class="line">    g1 = (x) ^ e - c1</span><br><span class="line">    g2 = (inv*(x-<span class="number">1</span>)) ^ e - c2</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">g1, g2</span>):</span><br><span class="line">        <span class="keyword">while</span> g2:</span><br><span class="line">            g1, g2 = g2, g1 % g2</span><br><span class="line">        <span class="keyword">return</span> g1.monic()</span><br><span class="line">    <span class="keyword">return</span> -gcd(g1, g2)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">m = attack()</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;6a096839-3ccb-46b4-9eb0-841ca85c0f63&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="江枫渔火对愁眠"><a href="#江枫渔火对愁眠" class="headerlink" title="江枫渔火对愁眠"></a>江枫渔火对愁眠</h2><blockquote>
<p>题目</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">b&#x27;paluctf&#123;******************&#125;&#x27;</span></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line">leak1 = p &amp; q</span><br><span class="line">leak2 = p | q</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(leak1)</span><br><span class="line"><span class="built_in">print</span>(leak2)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment"># 116117067844956812459549519789301338092862193317140117457423221066709482979351921356314593636327834899992321545232613626111009441254302384449742843180876494341637589103640217194070886174972452908589438599697165869525189266606983974250478298162924187424655566019487631330678770727392051485223152309309085945253</span></span><br><span class="line"><span class="comment"># 8605081049583982438298440507920076587069196185463800658188799677857096281403951362058424551032224336538547998962815392172493849395335237855201439663804417</span></span><br><span class="line"><span class="comment"># 13407373154151815187508645556332614349998109820361387104317659096666170318961881115942116046384020162789239054091769561534320831478500568385569270082820389</span></span><br><span class="line"><span class="comment"># 77391898018025866504652357285886871686506090492775075964856060726697268476460193878086905273672532025686191143120456958000415501059102146339274402932542049355257662649758904431953601814453558068056853653214769669690930883469679763807974430229116956128100328073573783801082618261383412539474900566590518020658</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>题解</p>
</blockquote>
<p>又见到这题了</p>
<p>上次我甚至在某群的群文件里看见了这题 <code>p⊕q</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (pp &amp; qq) % (<span class="number">2</span> ** l) == leak1 % (<span class="number">2</span> ** l) <span class="keyword">and</span> pp * qq % (<span class="number">2</span> ** l) == N % (<span class="number">2</span> ** l) <span class="keyword">and</span> (pp | qq) % (<span class="number">2</span> ** l) == leak2 % (<span class="number">2</span> ** l) :</span><br></pre></td></tr></table></figure>
<p>改一下判断语句就好</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">sys.setrecursionlimit(<span class="number">3000</span>)</span><br><span class="line"></span><br><span class="line">leak1 = <span class="number">8605081049583982438298440507920076587069196185463800658188799677857096281403951362058424551032224336538547998962815392172493849395335237855201439663804417</span></span><br><span class="line">leak2 = <span class="number">13407373154151815187508645556332614349998109820361387104317659096666170318961881115942116046384020162789239054091769561534320831478500568385569270082820389</span></span><br><span class="line">N = <span class="number">116117067844956812459549519789301338092862193317140117457423221066709482979351921356314593636327834899992321545232613626111009441254302384449742843180876494341637589103640217194070886174972452908589438599697165869525189266606983974250478298162924187424655566019487631330678770727392051485223152309309085945253</span></span><br><span class="line">c = <span class="number">77391898018025866504652357285886871686506090492775075964856060726697268476460193878086905273672532025686191143120456958000415501059102146339274402932542049355257662649758904431953601814453558068056853653214769669690930883469679763807974430229116956128100328073573783801082618261383412539474900566590518020658</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">findp</span>(<span class="params">p, q</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(p) == <span class="number">1024</span>:</span><br><span class="line">        pp = <span class="built_in">int</span>(p, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> N % pp == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;p = &quot;</span>, pp)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;q = &quot;</span>, N // pp)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        l = <span class="built_in">len</span>(p)</span><br><span class="line">        pp = <span class="built_in">int</span>(p, <span class="number">2</span>)</span><br><span class="line">        qq = <span class="built_in">int</span>(q, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> (pp &amp; qq) % (<span class="number">2</span> ** l) == leak1 % (<span class="number">2</span> ** l) <span class="keyword">and</span> pp * qq % (<span class="number">2</span> ** l) == N % (<span class="number">2</span> ** l) <span class="keyword">and</span> (pp | qq) % (<span class="number">2</span> ** l) == leak2 % (<span class="number">2</span> ** l) :</span><br><span class="line">            findp(<span class="string">&#x27;1&#x27;</span> + p, <span class="string">&#x27;1&#x27;</span> + q)</span><br><span class="line">            findp(<span class="string">&#x27;1&#x27;</span> + p, <span class="string">&#x27;0&#x27;</span> + q)</span><br><span class="line">            findp(<span class="string">&#x27;0&#x27;</span> + p, <span class="string">&#x27;1&#x27;</span> + q)</span><br><span class="line">            findp(<span class="string">&#x27;0&#x27;</span> + p, <span class="string">&#x27;0&#x27;</span> + q)</span><br><span class="line"></span><br><span class="line">findp(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p =  <span class="number">8765698777357218895930455433534622474349736018036786722894513584283441223303812128653973162721831346202633677284766954990094900299096944074318482652846369</span></span><br><span class="line">q =  <span class="number">13246755426378578729876630630718068462717569987788401039611945190239825377062020349346567434694413153125153375769817998716719780574738862166452227093778437</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">d = libnum.invmod(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, N)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(m))</span><br><span class="line"></span><br><span class="line"><span class="comment"># paluctf&#123;&amp;&amp;&amp;|||&amp;&amp;&amp;|||&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;|||||||||&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="两元钱的铜匠"><a href="#两元钱的铜匠" class="headerlink" title="两元钱的铜匠"></a>两元钱的铜匠</h2><blockquote>
<p>题目</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">c = <span class="built_in">pow</span>(m, <span class="number">65537</span>, n)</span><br><span class="line">N = getPrime(<span class="number">1024</span>)</span><br><span class="line">leak = (<span class="built_in">pow</span>(<span class="number">9999</span>, <span class="number">66666</span>)*p + <span class="built_in">pow</span>(<span class="number">66666</span>, <span class="number">9999</span>)*q) % N</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n=<span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c=<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;N=<span class="subst">&#123;N&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;leak=<span class="subst">&#123;leak&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n=80916351132285136921336714166859402248518125673421944066690210363157948681543515675261790287954711843082802283188843248579293238274583917836325545166981149125711216316112644776403584036920878846575128588844980283888602402513345309524782526525838503856925567762860026353261868959895401646623045981393058164201</span></span><br><span class="line"><span class="string">c=22730301930220955810132397809406485504430998883284247476890744759811759301470013143686059878014087921084402703884898661685430889812034497050189574640139435761526983415169973791743915648508955725713703906140316772231235038110678219688469930378177132307304731532134005576976892978381999976676034083329527911241</span></span><br><span class="line"><span class="string">N=175887339574643371942360396913019735118423928391339797751049049816862344090324438786194807609356902331228801731590496587951642499325571035835790931895483345540104575533781585131558026624618308795381874809845454092562340943276838942273890971498308617974682097511232721650227206585474404895053411892392799799403</span></span><br><span class="line"><span class="string">leak=161177488484579680503127298320874823539858895081858980450427298120182550612626953405092823674668208591844284619026441298155371399651438065337570099147890081125477609238234662000811899869636390550619251741676887565983189442613760093303841954633720778312454175652907352477365434215186845209831284593041581382419</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>题解</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">leak = (<span class="built_in">pow</span>(<span class="number">9999</span>, <span class="number">66666</span>)*p + <span class="built_in">pow</span>(<span class="number">66666</span>, <span class="number">9999</span>)*q) % N</span><br></pre></td></tr></table></figure>
<p>两个未知数？不，两边乘以p，就是一个未知数了，模数下的一元二次方程，可解</p>
<p>$leak<em>p=9999^{66666}</em>p^2+66666^{9999}*n \bmod N$ </p>
<p><strong>exp:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">n=<span class="number">80916351132285136921336714166859402248518125673421944066690210363157948681543515675261790287954711843082802283188843248579293238274583917836325545166981149125711216316112644776403584036920878846575128588844980283888602402513345309524782526525838503856925567762860026353261868959895401646623045981393058164201</span></span><br><span class="line">c=<span class="number">22730301930220955810132397809406485504430998883284247476890744759811759301470013143686059878014087921084402703884898661685430889812034497050189574640139435761526983415169973791743915648508955725713703906140316772231235038110678219688469930378177132307304731532134005576976892978381999976676034083329527911241</span></span><br><span class="line">N=<span class="number">175887339574643371942360396913019735118423928391339797751049049816862344090324438786194807609356902331228801731590496587951642499325571035835790931895483345540104575533781585131558026624618308795381874809845454092562340943276838942273890971498308617974682097511232721650227206585474404895053411892392799799403</span></span><br><span class="line">leak=<span class="number">161177488484579680503127298320874823539858895081858980450427298120182550612626953405092823674668208591844284619026441298155371399651438065337570099147890081125477609238234662000811899869636390550619251741676887565983189442613760093303841954633720778312454175652907352477365434215186845209831284593041581382419</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">PR.&lt;p&gt; = PolynomialRing(Zmod(N))</span><br><span class="line">f = <span class="number">9999</span>^<span class="number">66666</span> *p^<span class="number">2</span> + <span class="number">66666</span>^<span class="number">9999</span> *n  - leak*p</span><br><span class="line"></span><br><span class="line">p = f.monic().roots()</span><br><span class="line">p = p[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">q = n//p</span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = libnum.invmod(e,<span class="built_in">int</span>(phi))</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># paluctf&#123;6699669966996699669966996699&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="peeeq"><a href="#peeeq" class="headerlink" title="peeeq"></a>peeeq</h2><blockquote>
<p>题目</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">m, p, q</span>):</span><br><span class="line">    <span class="keyword">if</span> m == <span class="number">0</span>: <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> m &gt;= p <span class="keyword">and</span> check(m-p, p, q) : <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> m &gt;= q <span class="keyword">and</span> check(m-q, p, q) : <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&quot;paluctf&#123;***********************&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">e = getPrime(<span class="number">17</span>)</span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">leak = <span class="number">20650913970072868759959272239604024297420806808659110564312051736808778949599012338389873196411652566474168134639876252857623310159737758732845898956842366935678501021994729279299799994075598575657211550223683499328614158165787416177094173112167115888930719187253398687736037116845083325669521670262760600243895871953940839864925909273175442587377607028910874730344252804963645659770898616148180806608083557249713184454706023876544328444568520666837841566163924062054001534893538655581481021600384148478571641075265311650046699619525464106135807483192890198614434965478741402348088647355476402189540171838712520668315</span></span><br><span class="line">pinv_e = gmpy2.invert(p, q)*e</span><br><span class="line">qinv_e = gmpy2.invert(q, p)*e</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(pinv_e)</span><br><span class="line"><span class="built_in">print</span>(qinv_e)</span><br><span class="line">m = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">assert</span> m &lt;= leak <span class="keyword">or</span> check(m, p, q)</span><br><span class="line">    m += <span class="number">1</span></span><br><span class="line"><span class="comment"># 14656499683788461319601710088831412892194505254418064899761498679297764485273476341077222358310031603834624959088854557947176472443021560072783573052603773463734827298069959304747376040480522193600487999140388188743055733577433643210327070027972481119823973316743393323273128561824747871183252082782459568278265418266528855123687868624734106855360408027492126167597948385055908257193701028960507382053300960017612431744000472268868103779169759349652561826935960615964589526055579319224213399173783902104833907847546751649110661705034653912439791460180154034041113546810232929706136321281991114377628823527206109309013</span></span><br><span class="line"><span class="comment"># 12474140378771043865022148848078136936465079800066130234618983104385642778672967864991495110508733111980066517889153671507701349679185396054215439179349403857665966245686661757089470553109534987101888628107055364941617805783362125836104920292552457095662777743387917809524955960583091720618281570118299619677634759</span></span><br><span class="line"><span class="comment"># 1647206449953560407401595632741127506095799998014240087894866808907042944168674423038307995055460808040825182837354682801054048594394389801771888111156812819183105159993880849157459496014737241461466870906700457127028184554416373467332704931423207098246831148428600375416541264997943693621557486559170922000282251</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>题解</p>
</blockquote>
<p>e的话，两数<code>gcd</code>然后<code>factordb</code>一下找到17 bit 的数就是</p>
<p>目光看到代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">m, p, q</span>):</span><br><span class="line">    <span class="keyword">if</span> m == <span class="number">0</span>: <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> m &gt;= p <span class="keyword">and</span> check(m-p, p, q) : <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> m &gt;= q <span class="keyword">and</span> check(m-q, p, q) : <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">m = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">assert</span> m &lt;= leak <span class="keyword">or</span> check(m, p, q)</span><br><span class="line">    m += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="经典Frobenius-coin-problem"><a href="#经典Frobenius-coin-problem" class="headerlink" title="经典Frobenius coin problem"></a>经典Frobenius coin problem</h3><p>已知 正整数 a,b 互素，存在非负整数 x，y，使得 <code>N = ax+by</code> ，则称 N 是可表示的，否则称 N 是不可表示的，结论有二：</p>
<p>1）不可表示的最大整数为 <code>ab-a-b</code> ;</p>
<p>2）不可表示的非负整数的个数为：$\frac{1}{2}(a-1)(b-1)$ ;</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuc29odS5jb20vYS8yMTQxODQxMzhfNjQ5NTc3">【群内问答】Frobenius Coin Problem &amp; Frobenius Number (sohu.com)<i class="fa fa-external-link-alt"></i></span></p>
<hr>
<p>此题中 <code>leak</code> 就为 不可表示的最大整数</p>
<p>所以 <code>phi = leak + 1</code> </p>
<p>知道这个题目就基本解决了</p>
<p>$pp^{-1} = 1 \bmod q$</p>
<p>$qq^{-1}= 1 \bmod p$</p>
<p>所以 $pp^{-1}-1 = k_1q$ ，$qq^{-1} -1 = k_2p$</p>
<p>相乘最后得到 $(p^{-1}q^{-1}-k_1k_2)n = pp^{-1}+qq^{-1}-1$</p>
<p>根据位数判断，$n = pp^{-1}+qq^{-1}-1$</p>
<p><strong>exp:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">leak = <span class="number">20650913970072868759959272239604024297420806808659110564312051736808778949599012338389873196411652566474168134639876252857623310159737758732845898956842366935678501021994729279299799994075598575657211550223683499328614158165787416177094173112167115888930719187253398687736037116845083325669521670262760600243895871953940839864925909273175442587377607028910874730344252804963645659770898616148180806608083557249713184454706023876544328444568520666837841566163924062054001534893538655581481021600384148478571641075265311650046699619525464106135807483192890198614434965478741402348088647355476402189540171838712520668315</span></span><br><span class="line">c = <span class="number">14656499683788461319601710088831412892194505254418064899761498679297764485273476341077222358310031603834624959088854557947176472443021560072783573052603773463734827298069959304747376040480522193600487999140388188743055733577433643210327070027972481119823973316743393323273128561824747871183252082782459568278265418266528855123687868624734106855360408027492126167597948385055908257193701028960507382053300960017612431744000472268868103779169759349652561826935960615964589526055579319224213399173783902104833907847546751649110661705034653912439791460180154034041113546810232929706136321281991114377628823527206109309013</span></span><br><span class="line">pinv_e = <span class="number">12474140378771043865022148848078136936465079800066130234618983104385642778672967864991495110508733111980066517889153671507701349679185396054215439179349403857665966245686661757089470553109534987101888628107055364941617805783362125836104920292552457095662777743387917809524955960583091720618281570118299619677634759</span></span><br><span class="line">qinv_e = <span class="number">1647206449953560407401595632741127506095799998014240087894866808907042944168674423038307995055460808040825182837354682801054048594394389801771888111156812819183105159993880849157459496014737241461466870906700457127028184554416373467332704931423207098246831148428600375416541264997943693621557486559170922000282251</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># e = libnum.gcd(pinv_e,qinv_e)  # 307689 = 3 * 102563   </span></span><br><span class="line">e = <span class="number">102563</span></span><br><span class="line">phi = leak + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">pinv = pinv_e // e</span><br><span class="line">qinv = qinv_e // e</span><br><span class="line"></span><br><span class="line"><span class="comment"># var(&quot;p q&quot;)</span></span><br><span class="line"><span class="comment"># f1 = p*pinv + q*qinv - 1 == p*q</span></span><br><span class="line"><span class="comment"># f2 = (p-1)*(q-1) == phi</span></span><br><span class="line"><span class="comment"># res = solve([f1,f2],[p,q])</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">151832619619952089992267716058068444251307600220706203871589765844990819175654042917774490787590849720202969240992246624166668570786235406779778934647681250166384828094778797880304323848041273713831052602978130708287523575488166230706021974231380611512371425017998262828486267505916086636495016213117818476079</span></span><br><span class="line">q = <span class="number">136011049679334940861511595857042329781653809853866436171389745534855895446196665892885140663304371230055953209984856118200410958041858815679721863717912611066674050454954534686280510303474769670492647228370259394337403855556056590338482704020086450814990436480639792318856245688841995452742464887239898730723</span></span><br><span class="line">n = p*q</span><br><span class="line">d = libnum.invmod(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># paluctf&#123;51b98a17-6843-4e3b-b06c-3cd956bc944c&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="lcccg"><a href="#lcccg" class="headerlink" title="lcccg"></a>lcccg</h2><blockquote>
<p>题目</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;paluctf&#123;***********&#125;&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LCG</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.x = secrets.randbits(<span class="number">64</span>)</span><br><span class="line">        self.a = <span class="number">2</span></span><br><span class="line">        self.m = secrets.randbits(<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> self.m % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            self.m = secrets.randbits(<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;m =&quot;</span>, self.m)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        self.x = (self.x * self.a) % self.m</span><br><span class="line">        <span class="keyword">return</span> self.x</span><br><span class="line"></span><br><span class="line">lcg = LCG()</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="string">b&quot;paluctf&quot;</span> <span class="keyword">in</span> flag</span><br><span class="line">f = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">l = f.bit_length()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;length =&quot;</span>, l)</span><br><span class="line"></span><br><span class="line">r = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l + <span class="number">50</span>):</span><br><span class="line">    r += (lcg.<span class="built_in">next</span>() &amp; <span class="number">1</span>) &lt;&lt; i</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;cipher =&quot;</span>, r ^ f)</span><br><span class="line"><span class="comment"># m = 7870528503754256659</span></span><br><span class="line"><span class="comment"># length = 311</span></span><br><span class="line"><span class="comment"># cipher = 3255815260238431584829132773479447408817850185229659648404208268001256903206776002292220185602856730646093869</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>题解</strong></p>
</blockquote>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Wp</tag>
      </tags>
  </entry>
  <entry>
    <title>第十七届ciscn初赛</title>
    <url>/Crypto/%E7%AC%AC%E5%8D%81%E4%B8%83%E5%B1%8Aciscn%E5%88%9D%E8%B5%9B/</url>
    <content><![CDATA[<p>弃捐勿复道，努力加餐饭。</p>
<span id="more"></span>
<h2 id="古典密码"><a href="#古典密码" class="headerlink" title="古典密码"></a>古典密码</h2><p>题目内容：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">AnU7NnR4NassOGp3BDJgAGonMaJayTwrBqZ3ODMoMWxgMnFdNqtdMTM9</span><br></pre></td></tr></table></figure>
<blockquote>
<p>题解</p>
</blockquote>
<p>初步尝试自己的想法无果后，就对着这边的古典密码一个一个对照，然后发现 <code>Atbash Cipher</code> 有惊喜</p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagesimage-20240520203038692.png" alt="image-20240520203038692"></p>
<p>找个能区分大小写的<code>Atbash</code>解密网站</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYm94ZW50cmlxLmNvbS9jb2RlLWJyZWFraW5nL2F0YmFzaC1jaXBoZXI=">Atbash Cipher (online tool) | Boxentriq<i class="fa fa-external-link-alt"></i></span></p>
<p>然后base64解，<code>fa&#123;2b838a-97ad-e9f743lgbb07-ce47-6e02804c&#125;</code></p>
<p>最后fence解密：<code>flag&#123;b2bb0873-8cae-4977-a6de-0e298f0744c3&#125;</code></p>
<h2 id="OvO"><a href="#OvO" class="headerlink" title="OvO"></a>OvO</h2><p>XYCTF 铜匠 ，类似，据此搜索</p>
<p>d高位攻击</p>
<p>根据题目加密要求稍改脚本 </p>
<p>Sage 里环中数大致相等可算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rr = kk + <span class="number">2</span></span><br><span class="line">e = <span class="number">65537</span> + kk * p + rr * ((p+<span class="number">1</span>) * (q+<span class="number">1</span>)) + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">kk = e//n - 2</script><p>把 kk 代入 e中的式子，再两边乘p，就剩一个未知数了，多项式可求</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e*p = ( <span class="number">65537</span>*p + kk * p*p + rr * (n*p+p*p+n+<span class="number">1</span>) + p)</span><br><span class="line"></span><br><span class="line">np+pp+n+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">f=e* p - ( <span class="number">65537</span>*p + kk * p*p + rr * (n*p+p*p+n+<span class="number">1</span>) + p)</span><br></pre></td></tr></table></figure>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_full_p</span>(<span class="params">p_high, n,d_high,bits</span>):</span><br><span class="line">    PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    f = x + p_high</span><br><span class="line">    f = f.monic()</span><br><span class="line">    roots = f.small_roots(X=<span class="number">2</span>^(bits + <span class="number">4</span>), beta=<span class="number">0.4</span>)</span><br><span class="line">    <span class="keyword">if</span> roots:</span><br><span class="line">        x0 = roots[<span class="number">0</span>]</span><br><span class="line">        p = gcd(x0 + p_high, n)</span><br><span class="line">        <span class="keyword">return</span> ZZ(p)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_p_high</span>(<span class="params">d_high, n,bits</span>):</span><br><span class="line">    kk = d_high//n - <span class="number">2</span></span><br><span class="line">    rr = kk+<span class="number">2</span></span><br><span class="line">    PR.&lt;p&gt; = PolynomialRing(RealField(<span class="number">1000</span>))</span><br><span class="line">    f=d_high * p - ( <span class="number">65537</span>*p + kk * p*p + rr * (n*p+p*p+n+<span class="number">1</span>)+ p)</span><br><span class="line">    results = f.roots()</span><br><span class="line">    <span class="keyword">if</span> results:</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> results:</span><br><span class="line">            p_high = <span class="built_in">int</span>(x[<span class="number">0</span>])</span><br><span class="line">            p = get_full_p(p_high, n,d_high,bits)</span><br><span class="line">            <span class="keyword">if</span> p <span class="keyword">and</span> p != <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">n = <span class="number">111922722351752356094117957341697336848130397712588425954225300832977768690114834703654895285440684751636198779555891692340301590396539921700125219784729325979197290342352480495970455903120265334661588516182848933843212275742914269686197484648288073599387074325226321407600351615258973610780463417788580083967</span></span><br><span class="line">e = <span class="number">37059679294843322451875129178470872595128216054082068877693632035071251762179299783152435312052608685562859680569924924133175684413544051218945466380415013172416093939670064185752780945383069447693745538721548393982857225386614608359109463927663728739248286686902750649766277564516226052064304547032760477638585302695605907950461140971727150383104</span></span><br><span class="line">c = <span class="number">14999622534973796113769052025256345914577762432817016713135991450161695032250733213228587506601968633155119211807176051329626895125610484405486794783282214597165875393081405999090879096563311452831794796859427268724737377560053552626220191435015101496941337770496898383092414492348672126813183368337602023823</span></span><br><span class="line"></span><br><span class="line">p = find_p_high(e, n,<span class="number">200</span>)</span><br><span class="line">q = n//p</span><br><span class="line"></span><br><span class="line">rr = e//((p+<span class="number">1</span>)*(q+<span class="number">1</span>))</span><br><span class="line">kk = rr-<span class="number">2</span></span><br><span class="line">e = <span class="number">65537</span> + kk * p + rr * ((p+<span class="number">1</span>) * (q+<span class="number">1</span>)) + <span class="number">1</span></span><br><span class="line">d = libnum.invmod(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;b5f771c6-18df-49a9-9d6d-ee7804f5416c&#125;</span></span><br></pre></td></tr></table></figure>
<hr>
<hr>
<p>忙，待补。。。</p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Wp</tag>
      </tags>
  </entry>
  <entry>
    <title>背包密码</title>
    <url>/Crypto/%E8%83%8C%E5%8C%85%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<p><strong>醉漾轻舟，信流引到花深处。</strong></p>
<span id="more"></span>
<h2 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h2><p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/images978279a04ee1a8a4ce588f6da353885.png" alt="978279a04ee1a8a4ce588f6da353885"></p>
<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>私钥为一个超递增序列  $\left { a<em>n \right } $，满足 $a_i&gt;\sum</em>{k=1}^{i-1}a_k $</p>
<p>模数 m，满足 $m&gt;\sum_{i=1}^{n}a_i$ </p>
<p>乘数w，满足<code>gcd(w,m)=1</code>，</p>
<p>公钥为  $ \left { b_i \right } $ ，满足 $b_i=wa_i \pmod m$ </p>
<h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><p>设明文为 $ \left {  v_i \right } ，v_i\in\left { 0,1 \right } $，</p>
<script type="math/tex; mode=display">
c\equiv\sum_{i=1}^{n}b_iv_i \pmod m</script><p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagesimage-20240322222051279.png" alt="image-这渲染，也是醉了"></p>
<h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><script type="math/tex; mode=display">
v=w^{-1}c=\sum_{i=1}^{n}v_ia_i \pmod m</script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v = c * inverse(w,m) % m</span><br><span class="line"><span class="comment"># a = [pow(3, i) for i in range(64)]</span></span><br><span class="line"></span><br><span class="line">m = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> reverse(a):</span><br><span class="line">	<span class="keyword">if</span> v &gt;= i:</span><br><span class="line">        m = <span class="string">&#x27;1&#x27;</span> + m</span><br><span class="line">        v -= i</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        m = <span class="string">&#x27;0&#x27;</span> + m</span><br></pre></td></tr></table></figure>
<h2 id="造格"><a href="#造格" class="headerlink" title="造格"></a>造格</h2><p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagesimage-20240322221045087.png" alt="image-20240322221045087"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">math.log2(b)</span><br></pre></td></tr></table></figure>
<h3 id="常规格："><a href="#常规格：" class="headerlink" title="常规格："></a>常规格：</h3><script type="math/tex; mode=display">
L=\begin{bmatrix}
 1 &  &  &  & b_1\\
  & 1 &  &  & b_2\\
  &  & \ddots &  &\vdots \\
  &  &  &  1&b_n \\
  &  &  &  &-c
\end{bmatrix}</script><p>因为$(v_1,v_2,\dots,v_n,1)L=(v_1,v_2,\dots,v_n,0)$，所以$v=(v_1,v_2,\dots,v_n,0)$是一个格点</p>
<h3 id="优化格："><a href="#优化格：" class="headerlink" title="优化格："></a>优化格：</h3><script type="math/tex; mode=display">
L=\begin{bmatrix}
2 & 0 & ... & 0 & b_1\\
0 & 2 & ... & 0 & b_2\\
\vdots & \vdots & \ddots & \vdots & \vdots \\
0 & 0 & ... & 2 & b_n\\
1 & 1 & ... & 1 & c
\end{bmatrix}</script><p>$(v_1,v_2,\dots,v_n,-1)L=(2v_1-1,2v_2-1,\dots,2v_n-1,0)$</p>
<hr>
<p>先浅浅记录，后续更新</p>
<hr>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="2023羊城杯-MCeorpkpleer"><a href="#2023羊城杯-MCeorpkpleer" class="headerlink" title="[2023羊城杯]MCeorpkpleer"></a>[2023羊城杯]MCeorpkpleer</h3><blockquote>
<p>题目描述：这数据都不全要怎么计算呢？</p>
<p>题目</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pubkey</span>(<span class="params"><span class="built_in">list</span>, m, w</span>):</span><br><span class="line">    pubkey_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(e_bin)):</span><br><span class="line">        pubkey_list.append(w * <span class="built_in">list</span>[i] % m)</span><br><span class="line">    <span class="keyword">return</span> pubkey_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">e_cry</span>(<span class="params">e, pubkey</span>):</span><br><span class="line">    pubkey_list = pubkey</span><br><span class="line">    encode = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(e)):</span><br><span class="line">        encode += pubkey_list[i] * <span class="built_in">int</span>(e[i]) % m</span><br><span class="line">    <span class="keyword">return</span> encode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">e = getPrime(<span class="number">64</span>)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line">e_bin = (<span class="built_in">bin</span>(e))[<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">list</span> = [<span class="built_in">pow</span>(<span class="number">3</span>, i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(e_bin))]</span><br><span class="line">m = getPrime(<span class="built_in">len</span>(<span class="built_in">bin</span>(<span class="built_in">sum</span>(<span class="built_in">list</span>))) - <span class="number">1</span>)</span><br><span class="line">w = getPrime(<span class="number">64</span>)</span><br><span class="line">pubkey = pubkey(<span class="built_in">list</span>, m, w)</span><br><span class="line">en_e = e_cry(e_bin, pubkey)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p = &#123;&#125;\n&#x27;</span></span><br><span class="line">      <span class="string">&#x27;n = &#123;&#125;\n&#x27;</span></span><br><span class="line">      <span class="string">&#x27;c = &#123;&#125;\n&#x27;</span></span><br><span class="line">      <span class="string">&#x27;pubkey = &#123;&#125;\n&#x27;</span></span><br><span class="line">      <span class="string">&#x27;en_e = &#123;&#125;&#x27;</span>.<span class="built_in">format</span>((p &gt;&gt; <span class="number">435</span>) &lt;&lt; <span class="number">435</span>, n, c, pubkey, en_e))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p = 139540788452365306201344680691061363403552933527922544113532931871057569249632300961012384092481349965600565669315386312075890938848151802133991344036696488204791984307057923179655351110456639347861739783538289295071556484465877192913103980697449775104351723521120185802327587352171892429135110880845830815744</span></span><br><span class="line"><span class="string">n = 22687275367292715121023165106670108853938361902298846206862771935407158965874027802803638281495587478289987884478175402963651345721058971675312390474130344896656045501040131613951749912121302307319667377206302623735461295814304029815569792081676250351680394603150988291840152045153821466137945680377288968814340125983972875343193067740301088120701811835603840224481300390881804176310419837493233326574694092344562954466888826931087463507145512465506577802975542167456635224555763956520133324723112741833090389521889638959417580386320644108693480886579608925996338215190459826993010122431767343984393826487197759618771</span></span><br><span class="line"><span class="string">c = 156879727064293983713540449709354153986555741467040286464656817265584766312996642691830194777204718013294370729900795379967954637233360644687807499775502507899321601376211142933572536311131955278039722631021587570212889988642265055045777870448827343999745781892044969377246509539272350727171791700388478710290244365826497917791913803035343900620641430005143841479362493138179077146820182826098057144121231954895739989984846588790277051812053349488382941698352320246217038444944941841831556417341663611407424355426767987304941762716818718024107781873815837487744195004393262412593608463400216124753724777502286239464</span></span><br><span class="line"><span class="string">pubkey = [18143710780782459577, 54431132342347378731, 163293397027042136193, 489880191081126408579, 1469640573243379225737, 4408921719730137677211, 13226765159190413031633, 39680295477571239094899, 119040886432713717284697, 357122659298141151854091, 1071367977894423455562273, 3214103933683270366686819, 9642311801049811100060457, 28926935403149433300181371, 86780806209448299900544113, 260342418628344899701632339, 781027255885034699104897017, 2343081767655104097314691051, 7029245302965312291944073153, 21087735908895936875832219459, 63263207726687810627496658377, 189789623180063431882489975131, 569368869540190295647469925393, 1708106608620570886942409776179, 601827224419797931380408071500, 1805481673259393794141224214500, 893952418336266652976851386463, 2681857255008799958930554159389, 3523079163584485147344841221130, 1524252287869625983140881149316, 50264262166963219975822190911, 150792786500889659927466572733, 452378359502668979782399718199, 1357135078508006939347199154597, 4071405235524020818041597463791, 3169230503688232995231149877299, 462706308180869526799807117823, 1388118924542608580399421353469, 4164356773627825741198264060407, 3448085117999647764701149667147, 1299270151115113835209806487367, 3897810453345341505629419462101, 2648446157152195057994615872229, 3422845870014670444537026359650, 1223552407160181874717436564876, 3670657221480545624152309694628, 1966986461557807413563286569810, 1378466783231507511243038452393, 4135400349694522533729115357179, 3361215846199738142293703557463, 1038662335715384967987468158315, 3115987007146154903962404474945, 302975818554635252993570910761, 908927455663905758980712732283, 2726782366991717276942138196849, 3657854499533237101379593333510, 1928578295715881845245137486456, 1263242285705730806288591202331, 3789726857117192418865773606993, 2324195368467747797703678306905, 2450093503961328663664213663678, 2827787910442071261545819733997, 3960871129884299055190637944954, 2837628186769067706678271320788]</span></span><br><span class="line"><span class="string">en_e = 31087054322877663244023458448558</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>超递增序列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="built_in">pow</span>(<span class="number">3</span>, i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(e_bin))]   <span class="comment"># len(e_bin) = 64</span></span><br></pre></td></tr></table></figure>
<p>背包密码，上面常规格构造</p>
<script type="math/tex; mode=display">
(e_1,e_2,\dots,e_n,1)\begin{bmatrix}
 1 &  &  &  & b_1\\
  & 1 &  &  & b_2\\
  &  & \ddots &  &\vdots \\
  &  &  &  1&b_n \\
  &  &  &  &-c
\end{bmatrix}=(e_1,e_2,\dots,e_n,0)</script><p>其中 $b_i，c$ 都是已知的，那直接就求得明文，也就是此处的<code>e</code>了</p>
<p>还有一步是常规的已知p高位攻击</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = [<span class="number">18143710780782459577</span>, <span class="number">54431132342347378731</span>, <span class="number">163293397027042136193</span>, <span class="number">489880191081126408579</span>, <span class="number">1469640573243379225737</span>, <span class="number">4408921719730137677211</span>, <span class="number">13226765159190413031633</span>, <span class="number">39680295477571239094899</span>, <span class="number">119040886432713717284697</span>, <span class="number">357122659298141151854091</span>, <span class="number">1071367977894423455562273</span>, <span class="number">3214103933683270366686819</span>, <span class="number">9642311801049811100060457</span>, <span class="number">28926935403149433300181371</span>, <span class="number">86780806209448299900544113</span>, <span class="number">260342418628344899701632339</span>, <span class="number">781027255885034699104897017</span>, <span class="number">2343081767655104097314691051</span>, <span class="number">7029245302965312291944073153</span>, <span class="number">21087735908895936875832219459</span>, <span class="number">63263207726687810627496658377</span>, <span class="number">189789623180063431882489975131</span>, <span class="number">569368869540190295647469925393</span>, <span class="number">1708106608620570886942409776179</span>, <span class="number">601827224419797931380408071500</span>, <span class="number">1805481673259393794141224214500</span>, <span class="number">893952418336266652976851386463</span>, <span class="number">2681857255008799958930554159389</span>, <span class="number">3523079163584485147344841221130</span>, <span class="number">1524252287869625983140881149316</span>, <span class="number">50264262166963219975822190911</span>, <span class="number">150792786500889659927466572733</span>, <span class="number">452378359502668979782399718199</span>, <span class="number">1357135078508006939347199154597</span>, <span class="number">4071405235524020818041597463791</span>, <span class="number">3169230503688232995231149877299</span>, <span class="number">462706308180869526799807117823</span>, <span class="number">1388118924542608580399421353469</span>, <span class="number">4164356773627825741198264060407</span>, <span class="number">3448085117999647764701149667147</span>, <span class="number">1299270151115113835209806487367</span>, <span class="number">3897810453345341505629419462101</span>, <span class="number">2648446157152195057994615872229</span>, <span class="number">3422845870014670444537026359650</span>, <span class="number">1223552407160181874717436564876</span>, <span class="number">3670657221480545624152309694628</span>, <span class="number">1966986461557807413563286569810</span>, <span class="number">1378466783231507511243038452393</span>, <span class="number">4135400349694522533729115357179</span>, <span class="number">3361215846199738142293703557463</span>, <span class="number">1038662335715384967987468158315</span>, <span class="number">3115987007146154903962404474945</span>, <span class="number">302975818554635252993570910761</span>, <span class="number">908927455663905758980712732283</span>, <span class="number">2726782366991717276942138196849</span>, <span class="number">3657854499533237101379593333510</span>, <span class="number">1928578295715881845245137486456</span>, <span class="number">1263242285705730806288591202331</span>, <span class="number">3789726857117192418865773606993</span>, <span class="number">2324195368467747797703678306905</span>, <span class="number">2450093503961328663664213663678</span>, <span class="number">2827787910442071261545819733997</span>, <span class="number">3960871129884299055190637944954</span>, <span class="number">2837628186769067706678271320788</span>]</span><br><span class="line">c = <span class="number">31087054322877663244023458448558</span></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">len</span>(b)</span><br><span class="line">L = Matrix(ZZ, n+<span class="number">1</span>, n+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    L[i,i] = <span class="number">1</span></span><br><span class="line">    L[i,-<span class="number">1</span>] = b[i]</span><br><span class="line">L[-<span class="number">1</span>,-<span class="number">1</span>] = -c</span><br><span class="line"></span><br><span class="line">res = L.LLL()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>):</span><br><span class="line">    M = res.row(i).<span class="built_in">list</span>()       <span class="comment"># 取矩阵的每一行，转换成列表</span></span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> M:</span><br><span class="line">        <span class="keyword">if</span> m != <span class="number">0</span> <span class="keyword">and</span> m != <span class="number">1</span>:   <span class="comment"># 背包密码的明文 v 不是 0 就是 1</span></span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        e = M</span><br><span class="line">       </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(e)):</span><br><span class="line">    e[i] = <span class="built_in">str</span>(e[i])</span><br><span class="line">e = <span class="string">&quot;&quot;</span>.join(e)[:-<span class="number">1</span>] 	<span class="comment"># 注意看上面构造格求出的结果，最后面多了一个0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">n = <span class="number">22687275367292715121023165106670108853938361902298846206862771935407158965874027802803638281495587478289987884478175402963651345721058971675312390474130344896656045501040131613951749912121302307319667377206302623735461295814304029815569792081676250351680394603150988291840152045153821466137945680377288968814340125983972875343193067740301088120701811835603840224481300390881804176310419837493233326574694092344562954466888826931087463507145512465506577802975542167456635224555763956520133324723112741833090389521889638959417580386320644108693480886579608925996338215190459826993010122431767343984393826487197759618771</span></span><br><span class="line">p0 = <span class="number">139540788452365306201344680691061363403552933527922544113532931871057569249632300961012384092481349965600565669315386312075890938848151802133991344036696488204791984307057923179655351110456639347861739783538289295071556484465877192913103980697449775104351723521120185802327587352171892429135110880845830815744</span></span><br><span class="line">c = <span class="number">156879727064293983713540449709354153986555741467040286464656817265584766312996642691830194777204718013294370729900795379967954637233360644687807499775502507899321601376211142933572536311131955278039722631021587570212889988642265055045777870448827343999745781892044969377246509539272350727171791700388478710290244365826497917791913803035343900620641430005143841479362493138179077146820182826098057144121231954895739989984846588790277051812053349488382941698352320246217038444944941841831556417341663611407424355426767987304941762716818718024107781873815837487744195004393262412593608463400216124753724777502286239464</span></span><br><span class="line"></span><br><span class="line">kbit = <span class="number">435</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = p0+x</span><br><span class="line">x = f.small_roots(X=<span class="number">2</span>^kbit, beta=<span class="number">0.4</span>)</span><br><span class="line">p = p0+<span class="built_in">int</span>(x[<span class="number">0</span>])</span><br><span class="line">q = n//p</span><br><span class="line">e = <span class="built_in">int</span>(e,<span class="number">2</span>)</span><br><span class="line">d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(<span class="built_in">pow</span>(c,d,n))))</span><br><span class="line"></span><br><span class="line"><span class="comment"># DASCTF&#123;T81I_tPPS_6r7g_xlPi_OO3M_6vyV_Rkba&#125;</span></span><br></pre></td></tr></table></figure>
<hr>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>利用超递增序列的性质求出<code>e</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = getPrime(<span class="built_in">len</span>(<span class="built_in">bin</span>(<span class="built_in">sum</span>(<span class="built_in">list</span>))) - <span class="number">1</span>)</span><br><span class="line"><span class="built_in">list</span> = [<span class="built_in">pow</span>(<span class="number">3</span>, i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(e_bin))]</span><br><span class="line">w = getPrime(<span class="number">64</span>)</span><br><span class="line">pubkey_list.append(w * <span class="built_in">list</span>[i] % m)</span><br></pre></td></tr></table></figure>
<p>test：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"></span><br><span class="line">e = getPrime(<span class="number">64</span>)</span><br><span class="line">e_bin = <span class="built_in">bin</span>(e)[<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">list</span> = [<span class="built_in">pow</span>(<span class="number">3</span>, i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(e_bin))]</span><br><span class="line">m = getPrime(<span class="built_in">len</span>(<span class="built_in">bin</span>(<span class="built_in">sum</span>(<span class="built_in">list</span>))) - <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="built_in">bin</span>(<span class="built_in">sum</span>(<span class="built_in">list</span>))) - <span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>模数<code>m</code>是比 超递增序列 <code>list</code> 的总和还要大的，本地测试可以发现 模数m是一个<code>102bit</code>的数，远比<code>64bit</code>的<code>w</code>大，所以可以直接求出 <code>w</code>为公钥的第一个数</p>
<p><code>m</code>就直接<code>两项gcd</code>得出， $km=w*list_i-pubkey_i $  </p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="number">31087054322877663244023458448558</span></span><br><span class="line">m = <span class="number">4522492601441914729446821257037</span></span><br><span class="line">w = <span class="number">18143710780782459577</span></span><br><span class="line"></span><br><span class="line">v = c * inverse(w, m) % m</span><br><span class="line">a = [<span class="built_in">pow</span>(<span class="number">3</span>, i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>)]</span><br><span class="line"></span><br><span class="line">m = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a[::-<span class="number">1</span>]:</span><br><span class="line">    <span class="keyword">if</span> v &gt;= i:</span><br><span class="line">        m = <span class="string">&#x27;1&#x27;</span> + m</span><br><span class="line">        v -= i</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        m = <span class="string">&#x27;0&#x27;</span> + m</span><br><span class="line"></span><br><span class="line">e = <span class="built_in">int</span>(m, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"><span class="comment"># 15960663600754919507</span></span><br></pre></td></tr></table></figure>
<p>后续步骤同上</p>
<h4 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h4><blockquote>
<p>2024-07-20</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="number">287687761937146187597379915545639385740275457170939564210821293233370716878150576</span></span><br><span class="line">key = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">87</span>, <span class="number">99</span>, <span class="number">190</span>, <span class="number">380</span>, <span class="number">760</span>, <span class="number">1702</span>, <span class="number">3350</span>, <span class="number">6712</span>, <span class="number">13302</span>, <span class="number">26669</span>, <span class="number">53257</span>, <span class="number">106512</span>, <span class="number">213212</span>, <span class="number">426262</span>, <span class="number">852583</span>, <span class="number">1705083</span>, <span class="number">3410164</span>, <span class="number">6820581</span>, <span class="number">13640909</span>, <span class="number">27281818</span>, <span class="number">54563749</span>, <span class="number">109127508</span>, <span class="number">218254958</span>, <span class="number">436509851</span>, <span class="number">873019897</span>, <span class="number">1746039768</span>, <span class="number">3492079367</span>, <span class="number">6984158992</span>, <span class="number">13968317822</span>, <span class="number">27936635563</span>, <span class="number">55873271257</span>, <span class="number">111746542368</span>, <span class="number">223493084736</span>, <span class="number">446986169472</span>, <span class="number">893972338944</span>, <span class="number">1787944677888</span>, <span class="number">3575889355776</span>, <span class="number">7151778711750</span>, <span class="number">14303557423366</span>, <span class="number">28607114846668</span>, <span class="number">57214229693336</span>, <span class="number">114428459386792</span>, <span class="number">228856918773559</span>, <span class="number">457713837547023</span>, <span class="number">915427675094046</span>, <span class="number">1830855350188252</span>, <span class="number">3661710700376344</span>, <span class="number">7323421400752912</span>, <span class="number">14646842801505675</span>, <span class="number">29293685603011275</span>, <span class="number">58587371206022773</span>, <span class="number">117174742412045483</span>, <span class="number">234349484824090806</span>, <span class="number">468698969648181659</span>, <span class="number">937397939296363271</span>, <span class="number">1874795878592726601</span>, <span class="number">3749591757185453143</span>, <span class="number">7499183514370906547</span>, <span class="number">14998367028741812852</span>, <span class="number">29996734057483625898</span>, <span class="number">59993468114967251756</span>, <span class="number">119986936229934503501</span>, <span class="number">239973872459869007099</span>, <span class="number">479947744919738013939</span>, <span class="number">959895489839476027878</span>, <span class="number">1919790979678952055983</span>, <span class="number">3839581959357904111739</span>, <span class="number">7679163918715808223719</span>, <span class="number">15358327837431616447319</span>, <span class="number">30716655674863232894717</span>, <span class="number">61433311349726465789458</span>, <span class="number">122866622699452931578804</span>, <span class="number">245733245398905863157495</span>, <span class="number">491466490797811726314990</span>, <span class="number">982932981595623452629980</span>, <span class="number">1965865963191246905260222</span>, <span class="number">3931731926382493810520182</span>, <span class="number">7863463852764987621040623</span>, <span class="number">15726927705529975242080987</span>, <span class="number">31453855411059950484161974</span>, <span class="number">62907710822119900968323970</span>, <span class="number">125815421644239801936647918</span>, <span class="number">251630843288479603873295836</span>, <span class="number">503261686576959207746591710</span>, <span class="number">1006523373153918415493183613</span>, <span class="number">2013046746307836830986367190</span>, <span class="number">4026093492615673661972734253</span>, <span class="number">8052186985231347323945468456</span>, <span class="number">16104373970462694647890936894</span>, <span class="number">32208747940925389295781874025</span>, <span class="number">64417495881850778591563748059</span>, <span class="number">128834991763701557183127495888</span>, <span class="number">257669983527403114366254991760</span>, <span class="number">515339967054806228732509983520</span>, <span class="number">1030679934109612457465019967093</span>, <span class="number">2061359868219224914930039934133</span>, <span class="number">4122719736438449829860079868450</span>, <span class="number">8245439472876899659720159736935</span>, <span class="number">16490878945753799319440319473651</span>, <span class="number">32981757891507598638880638947330</span>, <span class="number">65963515783015197277761277894728</span>, <span class="number">131927031566030394555522555789579</span>, <span class="number">263854063132060789111045111579109</span>, <span class="number">527708126264121578222090223158048</span>, <span class="number">1055416252528243156444180446316096</span>, <span class="number">2110832505056486312888360892632193</span>, <span class="number">4221665010112972625776721785264450</span>, <span class="number">8443330020225945251553443570528835</span>, <span class="number">16886660040451890503106887141057670</span>, <span class="number">33773320080903781006213774282115477</span>, <span class="number">67546640161807562012427548564230882</span>, <span class="number">135093280323615124024855097128461699</span>, <span class="number">270186560647230248049710194256923398</span>, <span class="number">540373121294460496099420388513846796</span>, <span class="number">1080746242588920992198840777027693592</span>, <span class="number">2161492485177841984397681554055387246</span>, <span class="number">4322984970355683968795363108110774528</span>, <span class="number">8645969940711367937590726216221549105</span>, <span class="number">17291939881422735875181452432443098117</span>, <span class="number">34583879762845471750362904864886196180</span>, <span class="number">69167759525690943500725809729772392360</span>, <span class="number">138335519051381887001451619459544784838</span>, <span class="number">276671038102763774002903238919089569616</span>, <span class="number">553342076205527548005806477838179139174</span>, <span class="number">1106684152411055096011612955676358278348</span>, <span class="number">2213368304822110192023225911352716556750</span>, <span class="number">4426736609644220384046451822705433113446</span>, <span class="number">8853473219288440768092903645410866226907</span>, <span class="number">17706946438576881536185807290821732453830</span>, <span class="number">35413892877153763072371614581643464907890</span>, <span class="number">70827785754307526144743229163286929815519</span>, <span class="number">141655571508615052289486458326573859631099</span>, <span class="number">283311143017230104578972916653147719262229</span>, <span class="number">566622286034460209157945833306295438524626</span>, <span class="number">1133244572068920418315891666612590877049074</span>, <span class="number">2266489144137840836631783333225181754098066</span>, <span class="number">4532978288275681673263566666450363508196132</span>, <span class="number">9065956576551363346527133332900727016392264</span>, <span class="number">18131913153102726693054266665801454032784553</span>, <span class="number">36263826306205453386108533331602908065569081</span>, <span class="number">72527652612410906772217066663205816131138180</span>, <span class="number">145055305224821813544434133326411632262276342</span>, <span class="number">290110610449643627088868266652823264524552684</span>, <span class="number">580221220899287254177736533305646529049105368</span>, <span class="number">1160442441798574508355473066611293058098210736</span>, <span class="number">2320884883597149016710946133222586116196421472</span>, <span class="number">4641769767194298033421892266445172232392842944</span>, <span class="number">9283539534388596066843784532890344464785686063</span>, <span class="number">18567079068777192133687569065780688929571371951</span>, <span class="number">37134158137554384267375138131561377859142743902</span>, <span class="number">74268316275108768534750276263122755718285487804</span>, <span class="number">148536632550217537069500552526245511436570975608</span>, <span class="number">297073265100435074139001105052491022873141951360</span>, <span class="number">594146530200870148278002210104982045746283902576</span>, <span class="number">1188293060401740296556004420209964091492567805360</span>, <span class="number">2376586120803480593112008840419928182985135610512</span>, <span class="number">4753172241606961186224017680839856365970271221024</span>, <span class="number">9506344483213922372448035361679712731940542442048</span>, <span class="number">19012688966427844744896070723359425463881084884096</span>, <span class="number">38025377932855689489792141446718850927762169768220</span>, <span class="number">76050755865711378979584282893437701855524339536412</span>, <span class="number">152101511731422757959168565786875403711048679072824</span>, <span class="number">304203023462845515918337131573750807422097358145648</span>, <span class="number">608406046925691031836674263147501614844194716291296</span>, <span class="number">1216812093851382063673348526295003229688389432582797</span>, <span class="number">2433624187702764127346697052590006459376778865165617</span>, <span class="number">4867248375405528254693394105180012918753557730331006</span>, <span class="number">9734496750811056509386788210360025837507115460662129</span>, <span class="number">19468993501622113018773576420720051675014230921324265</span>, <span class="number">38937987003244226037547152841440103350028461842648406</span>, <span class="number">77875974006488452075094305682880206700056923685296910</span>, <span class="number">155751948012976904150188611365760413400113847370593722</span>, <span class="number">311503896025953808300377222731520826800227694741187444</span>, <span class="number">623007792051907616600754445463041653600455389482374933</span>, <span class="number">1246015584103815233201508890926083307200910778964749821</span>, <span class="number">2492031168207630466403017781852166614401821557929499642</span>, <span class="number">4984062336415260932806035563704333228803643115858999284</span>, <span class="number">9968124672830521865612071127408666457607286231717998666</span>, <span class="number">19936249345661043731224142254817332915214572463435997301</span>, <span class="number">39872498691322087462448284509634665830429144926871994535</span>, <span class="number">79744997382644174924896569019269331660858289853743989190</span>, <span class="number">159489994765288349849793138038538663321716579707487978260</span>, <span class="number">318979989530576699699586276077077326643433159414975956596</span>, <span class="number">637959979061153399399172552154154653286866318829951913129</span>, <span class="number">1275919958122306798798345104308309306573732637659903826311</span>, <span class="number">2551839916244613597596690208616618613147465275319807652591</span>, <span class="number">5103679832489227195193380417233237226294930550639615305147</span>, <span class="number">10207359664978454390386760834466474452589861101279230610294</span>, <span class="number">20414719329956908780773521668932948905179722202558461220588</span>, <span class="number">40829438659913817561547043337865897810359444405116922441176</span>, <span class="number">81658877319827635123094086675731795620718888810233844882508</span>, <span class="number">163317754639655270246188173351463591241437777620467689764860</span>, <span class="number">326635509279310540492376346702927182482875555240935379529854</span>, <span class="number">653271018558621080984752693405854364965751110481870759059704</span>, <span class="number">1306542037117242161969505386811708729931502220963741518119363</span>, <span class="number">2613084074234484323939010773623417459863004441927483036238705</span>, <span class="number">5226168148468968647878021547246834919726008883854966072477346</span>, <span class="number">10452336296937937295756043094493669839452017767709932144954692</span>, <span class="number">20904672593875874591512086188987339678904035535419864289909384</span>, <span class="number">41809345187751749183024172377974679357808071070839728579818768</span>, <span class="number">83618690375503498366048344755949358715616142141679457159637536</span>, <span class="number">167237380751006996732096689511898717431232284283358914319275072</span>, <span class="number">334474761502013993464193379023797434862464568566717828638550144</span>, <span class="number">668949523004027986928386758047594869724929137133435657277100288</span>, <span class="number">1337899046008055973856773516095189739449858274266871314554200576</span>, <span class="number">2675798092016111947713547032190379478899716548533742629108401375</span>, <span class="number">5351596184032223895427094064380758957799433097067485258216802527</span>, <span class="number">10703192368064447790854188128761517915598866194134970516433605054</span>, <span class="number">21406384736128895581708376257523035831197732388269941032867210108</span>, <span class="number">42812769472257791163416752515046071662395464776539882065734420216</span>, <span class="number">85625538944515582326833505030092143324790929553079764131468840607</span>, <span class="number">171251077889031164653667010060184286649581859106159528262937681073</span>, <span class="number">342502155778062329307334020120368573299163718212319056525875362112</span>, <span class="number">685004311556124658614668040240737146598327436424638113051750724224</span>, <span class="number">1370008623112249317229336080481474293196654872849276226103501448448</span>, <span class="number">2740017246224498634458672160962948586393309745698552452207002896896</span>, <span class="number">5480034492448997268917344321925897172786619491397104904414005793914</span>, <span class="number">10960068984897994537834688643851794345573238982794209808828011587706</span>, <span class="number">21920137969795989075669377287703588691146477965588419617656023175412</span>, <span class="number">43840275939591978151338754575407177382292955931176839235312046350824</span>, <span class="number">87680551879183956302677509150814354764585911862353678470624092701691</span>, <span class="number">175361103758367912605355018301628709529171823724707356941248185403485</span>, <span class="number">350722207516735825210710036603257419058343647449414713882496370806824</span>, <span class="number">701444415033471650421420073206514838116687294898829427764992741613648</span>, <span class="number">1402888830066943300842840146413029676233374589797658855529985483227499</span>, <span class="number">2805777660133886601685680292826059352466749179595317711059970966454839</span>, <span class="number">5611555320267773203371360585652118704933498359190635422119941932909634</span>, <span class="number">11223110640535546406742721171304237409866996718381270844239883865819325</span>, <span class="number">22446221281071092813485442342608474819733993436762541688479767731638735</span>, <span class="number">44892442562142185626970884685216949639467986873525083376959535463277328</span>, <span class="number">89784885124284371253941769370433899278935973747050166753919070926554729</span>, <span class="number">179569770248568742507883538740867798557871947494100333507838141853109648</span>, <span class="number">359139540497137485015767077481735597115743894988200667015676283706219166</span>, <span class="number">718279080994274970031534154963471194231487789976401334031352567412438331</span>, <span class="number">1436558161988549940063068309926942388462975579952802668062705134824876530</span>, <span class="number">2873116323977099880126136619853884776925951159905605336125410269649753060</span>, <span class="number">5746232647954199760252273239707769553851902319811210672250820539299506381</span>, <span class="number">11492465295908399520504546479415539107703804639622421344501641078599012695</span>, <span class="number">22984930591816799041009092958831078215407609279244842689003282157198025444</span>, <span class="number">45969861183633598082018185917662156430815218558489685378006564314396050678</span>, <span class="number">91939722367267196164036371835324312861630437116979370756013128628792101318</span>, <span class="number">183879444734534392328072743670648625723260874233958741512026257257584202636</span>, <span class="number">367758889469068784656145487341297251446521748467917483024052514515168405272</span>, <span class="number">735517778938137569312290974682594502893043496935834966048105029030336810544</span>, <span class="number">1471035557876275138624581949365189005786086993871669932096210058060673621088</span>, <span class="number">2942071115752550277249163898730378011572173987743339864192420116121347242216</span>, <span class="number">5884142231505100554498327797460756023144347975486679728384840232242694484649</span>, <span class="number">11768284463010201108996655594921512046288695950973359456769680464485388969041</span>, <span class="number">23536568926020402217993311189843024092577391901946718913539360928970777938082</span>, <span class="number">47073137852040804435986622379686048185154783803893437827078721857941555876305</span>, <span class="number">94146275704081608871973244759372096370309567607786875654157443715883111752579</span>, <span class="number">188292551408163217743946489518744192740619135215573751308314887431766223505070</span>, <span class="number">376585102816326435487892979037488385481238270431147502616629774863532447010118</span>, <span class="number">753170205632652870975785958074976770962476540862295005233259549727064894020344</span>, <span class="number">1506340411265305741951571916149953541924953081724590010466519099454129788040580</span>, <span class="number">3012680822530611483903143832299907083849906163449180020933038198908259576081160</span>, <span class="number">6025361645061222967806287664599814167699812326898360041866076397816519152162452</span>, <span class="number">12050723290122445935612575329199628335399624653796720083732152795633038304324883</span>, <span class="number">24101446580244891871225150658399256670799249307593440167464305591266076608649853</span>, <span class="number">48202893160489783742450301316798513341598498615186880334928611182532153217299508</span>, <span class="number">96405786320979567484900602633597026683196997230373760669857222365064306434599262</span>, <span class="number">192811572641959134969801205267194053366393994460747521339714444730128612869198530</span>, <span class="number">385623145283918269939602410534388106732787988921495042679428889460257225738396863</span>]</span><br><span class="line"></span><br><span class="line">m = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> key[::-<span class="number">1</span>]:</span><br><span class="line">    <span class="keyword">if</span> c &gt;= i:</span><br><span class="line">        m = <span class="string">&#x27;1&#x27;</span> + m</span><br><span class="line">        c -= i</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        m = <span class="string">&#x27;0&#x27;</span> + m</span><br><span class="line"></span><br><span class="line">flag = long_to_bytes(<span class="built_in">int</span>(m[:-<span class="number">1</span>],<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># DASCTF&#123;you_kn0w_b@ckpack_Crypt0?&#125;</span></span><br><span class="line"></span><br><span class="line">m= [m[i:i + <span class="number">8</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(m), <span class="number">8</span>)]</span><br><span class="line">decoded_string = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, byte)), <span class="number">2</span>)) <span class="keyword">for</span> byte <span class="keyword">in</span> m)</span><br><span class="line"><span class="built_in">print</span>(decoded_string)</span><br></pre></td></tr></table></figure>
<p>flag 的长度 是 264 ，key 的长度是265，多了一位。。。</p>
<p>用厨子有奇效，就不用注意多出来的01了，也可以手动处理，如上</p>
<p>（int 似乎默认是从后面开始数八位来转换）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = long_to_bytes(<span class="built_in">int</span>(m+<span class="string">&#x27;0&#x27;</span>*<span class="number">7</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;DASCTF&#123;you_kn0w_b@ckpack_Crypt0?&#125;\x00&#x27;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>背包密码的密度为：</p>
<script type="math/tex; mode=display">
d = \frac{n}{\log_{2}{\max(a_i)}}</script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sanity check for application of low density attack</span></span><br><span class="line">d = n / log(<span class="built_in">max</span>(a), <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(CDF(d))</span><br><span class="line"><span class="keyword">assert</span> CDF(d) &lt; <span class="number">0.9408</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="Reference："><a href="#Reference：" class="headerlink" title="Reference："></a>Reference：</h2><p><span class="exturl" data-url="aHR0cHM6Ly9qYXl4di5naXRodWIuaW8vMjAyMC8wNi8wOC/lr4bnoIHlrablrabkuaDnrJTorrDkuYtrbmFwc2Fjay8=">密码学学习笔记 之 knapsack | Van1sh的小屋 (jayxv.github.io)<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXh0ZXJqaWUuZ2l0aHViLmlvLzIwMjMvMDgvMDIv6IOM5YyF5a+G56CBLyPog4zljIXpl67popjpgJrop6M=">背包密码 | DexterJie’Blog<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sYXp6emFyby5naXRodWIuaW8vMjAyMC8wNS8xMy9jcnlwdG8t5YW25LuW5Yqg5a+G566X5rOVL2luZGV4Lmh0bWw=">其他加密算法 | Lazzaro (lazzzaro.github.io)<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>背包密码</tag>
        <tag>Lattice</tag>
      </tags>
  </entry>
  <entry>
    <title>青少年CTF擂台挑战赛 2024</title>
    <url>/Crypto/%E9%9D%92%E5%B0%91%E5%B9%B4CTF%E6%93%82%E5%8F%B0%E6%8C%91%E6%88%98%E8%B5%9B-2024-Round-1/</url>
    <content><![CDATA[<p>裁红晕碧泪漫漫，南国春来正薄寒。</p>
<span id="more"></span>
<h2 id="解个方程"><a href="#解个方程" class="headerlink" title="解个方程"></a>解个方程</h2><blockquote>
<p>附件：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">欢迎来到青少年CTF，领取你的题目，进行解答吧！这是一道数学题！！</span><br><span class="line">    p = <span class="number">131796279826572362789198483887918844987</span></span><br><span class="line">    q = <span class="number">212813126433495999444769247147571745937</span></span><br><span class="line">    e = <span class="number">65537</span></span><br><span class="line">    d = ?</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">p = <span class="number">105590796031792069228296861088668613199</span></span><br><span class="line">q = <span class="number">309030249180133795728627253958431161707</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">n = p*q</span><br><span class="line">d = libnum.invmod(e,phi)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="comment"># qsnctf&#123;0c420fb0c4f9413bacfb330c3e38cd5a&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="ez-log"><a href="#ez-log" class="headerlink" title="ez_log"></a>ez_log</h2><blockquote>
<p>附件：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line">flag=<span class="string">b&#x27;key&#123;xxxxxxx&#125;&#x27;</span></span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">p=<span class="number">3006156660704242356836102321001016782090189571028526298055526061772989406357037170723984497344618257575827271367883545096587962708266010793826346841303043716776726799898939374985320242033037</span></span><br><span class="line">g=<span class="number">3</span></span><br><span class="line">c=<span class="built_in">pow</span>(g,m,p)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c=&#x27;</span>,c)</span><br><span class="line"></span><br><span class="line">    c=<span class="number">399955120568766714244494710147207394147483586697776185703375836686594812969411326117285206600646072864764643896544476201688184202967909942594201819382588967162872519648931634693021713835780</span></span><br></pre></td></tr></table></figure>
<p>dlp，<code>discrete_log</code> </p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">p=<span class="number">3006156660704242356836102321001016782090189571028526298055526061772989406357037170723984497344618257575827271367883545096587962708266010793826346841303043716776726799898939374985320242033037</span></span><br><span class="line">g=<span class="number">3</span></span><br><span class="line">c=<span class="number">392722191346630497785992331947956973102113900367558069299580913635053758988734145621237606300202469596708376566758151332401431920899557595868566982920454655811878888907259092537852470710477</span></span><br><span class="line">    </span><br><span class="line">x1 = discrete_log(mod(c,p),mod(g,p)) </span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(x1)))</span><br><span class="line"><span class="comment"># key&#123;q96d1C&#125;</span></span><br><span class="line"><span class="comment"># qsnctf&#123;4876f24a784e403fb3a731ef74e509e6&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="四重加密"><a href="#四重加密" class="headerlink" title="四重加密"></a>四重加密</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">OFZW4Y3UMY======</span><br><span class="line">base64得到密钥  qsnctf</span><br><span class="line"></span><br><span class="line">&amp;<span class="comment">#122;&amp;#99;&amp;#121;&amp;#101;&amp;#123;&amp;#109;&amp;#120;&amp;#109;&amp;#101;&amp;#109;&amp;#116;&amp;#120;&amp;#114;&amp;#122;&amp;#116;&amp;#95;&amp;#108;&amp;#122;&amp;#98;&amp;#104;&amp;#97;&amp;#95;&amp;#107;&amp;#119;&amp;#109;&amp;#113;&amp;#122;&amp;#101;&amp;#99;&amp;#125;&amp;#124;&amp;#107;&amp;#101;&amp;#121;&amp;#61;&amp;#104;&amp;#101;&amp;#108;&amp;#108;&amp;#111;</span></span><br><span class="line"></span><br><span class="line">扔到厨子里：zcye&#123;mxmemtxrzt_lzbha_kwmqzec&#125;|key=hello</span><br><span class="line">维吉尼亚解密：synt&#123;yqitbfqnoi_xsxwp_wpifoqv&#125;</span><br><span class="line">凯撒密码：flag&#123;ldvgosdabv_kfkjc_jcvsbdi&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ezrsa"><a href="#ezrsa" class="headerlink" title="ezrsa"></a>ezrsa</h2><blockquote>
<p>附件：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">flag = <span class="string">b&#x27;qsnctf&#123;xxx-xxxx-xxxx-xxxx-xxxxxxxxx&#125;&#x27;</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">r = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p * q * r</span><br><span class="line">leak = p * q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;leak = <span class="subst">&#123;leak&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># c = 173595148273920891298949441727054328036798235134009407863895058729356993814829340513336567479145746034781201823694596731886346933549577879568197521436900228804336056005940048086898794965549472641334237175801757569154295743915744875800647234151498117718087319013271748204766997008772782882813572814296213516343420236873651060868227487925491016675461540894535563805130406391144077296854410932791530755245514034242725719196949258860635915202993968073392778882692892</span></span><br><span class="line"><span class="comment"># n = 1396260492498511956349135417172451037537784979103780135274615061278987700332528182553755818089525730969834188061440258058608031560916760566772742776224528590152873339613356858551518007022519033843622680128062108378429621960808412913676262141139805667510615660359775475558729686515755127570976326233255349428771437052206564497930971797497510539724340471032433502724390526210100979700467607197448780324427953582222885828678441579349835574787605145514115368144031247</span></span><br><span class="line"><span class="comment"># leak = 152254254502019783796170793516692965417859793325424454902983763285830332059600151137162944897787532369961875766745853731769162511788354655291037150251085942093411304833287510644995339391240164033052417935316876168953838783742499485868268986832640692657031861629721225482114382472324320636566226653243762620647</span></span><br></pre></td></tr></table></figure>
<p>n 分解得到 r</p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = <span class="number">173595148273920891298949441727054328036798235134009407863895058729356993814829340513336567479145746034781201823694596731886346933549577879568197521436900228804336056005940048086898794965549472641334237175801757569154295743915744875800647234151498117718087319013271748204766997008772782882813572814296213516343420236873651060868227487925491016675461540894535563805130406391144077296854410932791530755245514034242725719196949258860635915202993968073392778882692892</span></span><br><span class="line">n = <span class="number">1396260492498511956349135417172451037537784979103780135274615061278987700332528182553755818089525730969834188061440258058608031560916760566772742776224528590152873339613356858551518007022519033843622680128062108378429621960808412913676262141139805667510615660359775475558729686515755127570976326233255349428771437052206564497930971797497510539724340471032433502724390526210100979700467607197448780324427953582222885828678441579349835574787605145514115368144031247</span></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">leak = <span class="number">152254254502019783796170793516692965417859793325424454902983763285830332059600151137162944897787532369961875766745853731769162511788354655291037150251085942093411304833287510644995339391240164033052417935316876168953838783742499485868268986832640692657031861629721225482114382472324320636566226653243762620647</span></span><br><span class="line">r = <span class="number">9170584408726584113673965972648240491689635118606416619099032606248549219208315227501144611402976054161705877934617690915635968224924300539749199425819801</span></span><br><span class="line"></span><br><span class="line">phi = r-<span class="number">1</span></span><br><span class="line">d = libnum.invmod(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,r)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(m))</span><br><span class="line"><span class="comment">#  qsnctf&#123;12ff81e0-7646-4a96-a7eb-6a509ec01c9e&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="factor1"><a href="#factor1" class="headerlink" title="factor1"></a>factor1</h2><blockquote>
<p>附件：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">d = getPrime(<span class="number">256</span>)</span><br><span class="line">e = gmpy2.invert(d, (p**<span class="number">2</span> - <span class="number">1</span>) * (q**<span class="number">2</span> - <span class="number">1</span>))</span><br><span class="line">flag = <span class="string">&quot;qsnctf&#123;&quot;</span> + hashlib.md5(<span class="built_in">str</span>(p + q).encode()).hexdigest() + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"><span class="built_in">print</span>(p * q)</span><br><span class="line"><span class="comment"># 4602579741478096718172697218991734057017874575484294836043557658035277770732473025335441717904100009903832353915404911860888652406859201203199117870443451616457858224082143505393843596092945634675849883286107358454466242110831071552006337406116884147391687266536283395576632885877802269157970812862013700574069981471342712011889330292259696760297157958521276388120468220050600419562910879539594831789625596079773163447643235584124521162320450208920533174722239029506505492660271016917768383199286913178821124229554263149007237679675898370759082438533535303763664408320263258144488534391712835778283152436277295861859</span></span><br><span class="line"><span class="comment"># 78665180675705390001452176028555030916759695827388719494705803822699938653475348982551790040292552032924503104351703419136483078949363470430486531014134503794074329285351511023863461560882297331218446027873891885693166833003633460113924956936552466354566559741886902240131031116897293107970411780310764816053</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>$e = d^{-1} \bmod{(p^2-1)(q^2-1) }$ </p>
<p>$(p^2-1)(q^2-1)=p^2q^2-p^2-q^2+1$ </p>
<p>因为 $p^2q^2$ 有2048bit了，$-p^2-q^2+1$ 可以抹掉</p>
<p>就可以用 维纳攻击 求出 d了，</p>
<p>最后一步就是 已知ed分解n了</p>
<p>原理：<span class="exturl" data-url="aHR0cHM6Ly93d3cuZGktbWd0LmNvbS5hdS9yc2FfZmFjdG9yaXplX24uaHRtbA==">RSA: how to factorize N given ed<i class="fa fa-external-link-alt"></i></span> </p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagesimage-20240302001229388.png" alt="image-20240302001229388"></p>
<p>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">continuedFra</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算连分数</span></span><br><span class="line"><span class="string">    :param x: 分子</span></span><br><span class="line"><span class="string">    :param y: 分母</span></span><br><span class="line"><span class="string">    :return: 连分数列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    cf = []</span><br><span class="line">    <span class="keyword">while</span> y:</span><br><span class="line">        cf.append(x // y)</span><br><span class="line">        x, y = y, x % y</span><br><span class="line">    <span class="keyword">return</span> cf</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gradualFra</span>(<span class="params">cf</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算传入列表最后的渐进分数</span></span><br><span class="line"><span class="string">    :param cf: 连分数列表</span></span><br><span class="line"><span class="string">    :return: 该列表最后的渐近分数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    numerator = <span class="number">0</span></span><br><span class="line">    denominator = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> cf[::-<span class="number">1</span>]:</span><br><span class="line">        <span class="comment"># 这里的渐进分数分子分母要分开</span></span><br><span class="line">        numerator, denominator = denominator, x * denominator + numerator</span><br><span class="line">    <span class="keyword">return</span> numerator, denominator</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve_pq</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;使用韦达定理解出pq，x^2−(p+q)∗x+pq=0</span></span><br><span class="line"><span class="string">    :param a:x^2的系数</span></span><br><span class="line"><span class="string">    :param b:x的系数</span></span><br><span class="line"><span class="string">    :param c:pq</span></span><br><span class="line"><span class="string">    :return:p，q</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    par = gmpy2.isqrt(b * b - <span class="number">4</span> * a * c)</span><br><span class="line">    <span class="keyword">return</span> (-b + par) // (<span class="number">2</span> * a), (-b - par) // (<span class="number">2</span> * a)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getGradualFra</span>(<span class="params">cf</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算列表所有的渐近分数</span></span><br><span class="line"><span class="string">    :param cf: 连分数列表</span></span><br><span class="line"><span class="string">    :return: 该列表所有的渐近分数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    gf = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(cf) + <span class="number">1</span>):</span><br><span class="line">        gf.append(gradualFra(cf[:i]))</span><br><span class="line">    <span class="keyword">return</span> gf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wienerAttack</span>(<span class="params">e, n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param e:</span></span><br><span class="line"><span class="string">    :param n:</span></span><br><span class="line"><span class="string">    :return: 私钥d</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    cf = continuedFra(e, n)</span><br><span class="line">    gf = getGradualFra(cf)</span><br><span class="line">    <span class="keyword">for</span> d, k <span class="keyword">in</span> gf:</span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">0</span>: <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> (e * d - <span class="number">1</span>) % k != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        phi = (e * d - <span class="number">1</span>) // k</span><br><span class="line">        p, q = solve_pq(<span class="number">1</span>, n - phi + <span class="number">1</span>, n)</span><br><span class="line">        <span class="keyword">if</span> p * q == n:</span><br><span class="line">            <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line">e = <span class="number">4602579741478096718172697218991734057017874575484294836043557658035277770732473025335441717904100009903832353915404911860888652406859201203199117870443451616457858224082143505393843596092945634675849883286107358454466242110831071552006337406116884147391687266536283395576632885877802269157970812862013700574069981471342712011889330292259696760297157958521276388120468220050600419562910879539594831789625596079773163447643235584124521162320450208920533174722239029506505492660271016917768383199286913178821124229554263149007237679675898370759082438533535303763664408320263258144488534391712835778283152436277295861859</span></span><br><span class="line">pq = <span class="number">78665180675705390001452176028555030916759695827388719494705803822699938653475348982551790040292552032924503104351703419136483078949363470430486531014134503794074329285351511023863461560882297331218446027873891885693166833003633460113924956936552466354566559741886902240131031116897293107970411780310764816053</span></span><br><span class="line"></span><br><span class="line">n = pq**<span class="number">2</span></span><br><span class="line">d=wienerAttack(e, n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factor_with_ed</span>(<span class="params">e,d,n</span>):</span><br><span class="line">    p=<span class="number">1</span></span><br><span class="line">    q=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> p==<span class="number">1</span> <span class="keyword">and</span> q==<span class="number">1</span>:</span><br><span class="line">        k = e*d -<span class="number">1</span></span><br><span class="line">        g = random.randint(<span class="number">1</span>,n)</span><br><span class="line">        <span class="keyword">while</span> k%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">            k //= <span class="number">2</span></span><br><span class="line">            x = <span class="built_in">pow</span>(g,k,n)</span><br><span class="line">            <span class="keyword">if</span> x&gt;<span class="number">1</span> <span class="keyword">and</span> libnum.gcd(x-<span class="number">1</span>,n)&gt;<span class="number">1</span>:</span><br><span class="line">                p = libnum.gcd(x-<span class="number">1</span>,n)</span><br><span class="line">                q = n//p</span><br><span class="line">    <span class="keyword">return</span> p,q</span><br><span class="line"></span><br><span class="line">n = <span class="number">78665180675705390001452176028555030916759695827388719494705803822699938653475348982551790040292552032924503104351703419136483078949363470430486531014134503794074329285351511023863461560882297331218446027873891885693166833003633460113924956936552466354566559741886902240131031116897293107970411780310764816053</span></span><br><span class="line">e = <span class="number">4602579741478096718172697218991734057017874575484294836043557658035277770732473025335441717904100009903832353915404911860888652406859201203199117870443451616457858224082143505393843596092945634675849883286107358454466242110831071552006337406116884147391687266536283395576632885877802269157970812862013700574069981471342712011889330292259696760297157958521276388120468220050600419562910879539594831789625596079773163447643235584124521162320450208920533174722239029506505492660271016917768383199286913178821124229554263149007237679675898370759082438533535303763664408320263258144488534391712835778283152436277295861859</span></span><br><span class="line"></span><br><span class="line">p,q = factor_with_ed(e,d,n)</span><br><span class="line">flag = <span class="string">&quot;qsnctf&#123;&quot;</span> + md5(<span class="built_in">str</span>(p + q).encode()).hexdigest() + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># qsnctf&#123;8072e8b2982bc729cc74ef58f1abc862&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Wp</tag>
      </tags>
  </entry>
  <entry>
    <title>国城杯2024</title>
    <url>/Crypto/%E5%9B%BD%E5%9F%8E%E6%9D%AF2024/</url>
    <content><![CDATA[<p>稍晚再补充一下其他师傅的思路</p>
<span id="more"></span>
<h1 id="EZ-sign"><a href="#EZ-sign" class="headerlink" title="EZ_sign"></a>EZ_sign</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">import</span> random,os</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;D0g3xGA&#123;***************&#125;&#x27;</span></span><br><span class="line">msg = <span class="string">b&#x27;e = ?&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">pub, pri, k</span>):</span><br><span class="line">    (p,q,g,y) = pub</span><br><span class="line">    x = pri</span><br><span class="line">    r = <span class="built_in">int</span>(powmod(g, k, p) % q)</span><br><span class="line">    H = bytes_to_long(sha1(os.urandom(<span class="number">20</span>)).digest())</span><br><span class="line">    s = <span class="built_in">int</span>((H + r * x) * invert(k, q) % q)</span><br><span class="line">    <span class="keyword">return</span> (H,r,s)</span><br><span class="line"></span><br><span class="line">k1 = getPrime(<span class="number">64</span>)</span><br><span class="line">k2 = k1 ** <span class="number">2</span></span><br><span class="line">pri = bytes_to_long(msg)</span><br><span class="line">a = <span class="number">149328490045436942604988875802116489621328828898285420947715311349436861817490291824444921097051302371708542907256342876547658101870212721747647670430302669064864905380294108258544172347364992433926644937979367545128905469215614628012983692577094048505556341118385280805187867314256525730071844236934151633203</span></span><br><span class="line">b = <span class="number">829396411171540475587755762866203184101195238207</span></span><br><span class="line">g = <span class="number">87036604306839610565326489540582721363203007549199721259441400754982765368067012246281187432501490614633302696667034188357108387643921907247964850741525797183732941221335215366182266284004953589251764575162228404140768536534167491117433689878845912406615227673100755350290475167413701005196853054828541680397</span></span><br><span class="line">y = <span class="number">97644672217092534422903769459190836176879315123054001151977789291649564201120414036287557280431608390741595834467632108397663276781265601024889217654490419259208919898180195586714790127650244788782155032615116944102113736041131315531765220891253274685646444667344472175149252120261958868249193192444916098238</span></span><br><span class="line"></span><br><span class="line">pub = (a, b, g, y)</span><br><span class="line"></span><br><span class="line">H1, r1, s1 = sign(pub, pri, k1)</span><br><span class="line"></span><br><span class="line">H2, r2, s2 = sign(pub, pri, k2)</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">128</span>)</span><br><span class="line">q = getPrime(<span class="number">128</span>)</span><br><span class="line">n = p * q</span><br><span class="line">c = powmod(bytes_to_long(flag), e, n)</span><br><span class="line"></span><br><span class="line">C = p**<span class="number">2</span> + q**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;(H1, r1, s1) = <span class="subst">&#123;H1&#125;</span>, <span class="subst">&#123;r1&#125;</span>, <span class="subst">&#123;s1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;(H2, r2, s2) = <span class="subst">&#123;H2&#125;</span>, <span class="subst">&#123;r2&#125;</span>, <span class="subst">&#123;s2&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(C)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(H1, r1, s1) = 659787401883545685817457221852854226644541324571, 334878452864978819061930997065061937449464345411, 282119793273156214497433603026823910474682900640</span></span><br><span class="line"><span class="string">(H2, r2, s2) = 156467414524100313878421798396433081456201599833, 584114556699509111695337565541829205336940360354, 827371522240921066790477048569787834877112159142</span></span><br><span class="line"><span class="string">c = 18947793008364154366082991046877977562448549186943043756326365751169362247521</span></span><br><span class="line"><span class="string">C = 179093209181929149953346613617854206675976823277412565868079070299728290913658</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>exp：</p>
<p>DSA线性 k，复数域分解</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">(H1, r1, s1) = <span class="number">659787401883545685817457221852854226644541324571</span>, <span class="number">334878452864978819061930997065061937449464345411</span>, <span class="number">282119793273156214497433603026823910474682900640</span></span><br><span class="line">(H2, r2, s2) = <span class="number">156467414524100313878421798396433081456201599833</span>, <span class="number">584114556699509111695337565541829205336940360354</span>, <span class="number">827371522240921066790477048569787834877112159142</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">149328490045436942604988875802116489621328828898285420947715311349436861817490291824444921097051302371708542907256342876547658101870212721747647670430302669064864905380294108258544172347364992433926644937979367545128905469215614628012983692577094048505556341118385280805187867314256525730071844236934151633203</span></span><br><span class="line">b = <span class="number">829396411171540475587755762866203184101195238207</span></span><br><span class="line">g = <span class="number">87036604306839610565326489540582721363203007549199721259441400754982765368067012246281187432501490614633302696667034188357108387643921907247964850741525797183732941221335215366182266284004953589251764575162228404140768536534167491117433689878845912406615227673100755350290475167413701005196853054828541680397</span></span><br><span class="line">y = <span class="number">97644672217092534422903769459190836176879315123054001151977789291649564201120414036287557280431608390741595834467632108397663276781265601024889217654490419259208919898180195586714790127650244788782155032615116944102113736041131315531765220891253274685646444667344472175149252120261958868249193192444916098238</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">R.&lt;k1&gt; = PolynomialRing(Zmod(b))</span><br><span class="line">f = k1^<span class="number">2</span>*r1*s2 - k1*r2*s1 - H2*r1 + H1*r2</span><br><span class="line"><span class="comment"># f=f.monic()</span></span><br><span class="line"></span><br><span class="line">roots=f.roots()</span><br><span class="line"><span class="built_in">print</span>(roots)</span><br><span class="line"></span><br><span class="line">k = roots[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">m = (s1*k-H1)*gmpy2.invert(r1,b) % b</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">N = <span class="number">179093209181929149953346613617854206675976823277412565868079070299728290913658</span></span><br><span class="line">zn = ZZ[i](N)</span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> divisors(ZZ[i](N)):</span><br><span class="line">    pp, qq = <span class="built_in">map</span>(<span class="built_in">int</span>, d)</span><br><span class="line">    <span class="keyword">if</span> is_prime(pp) <span class="keyword">and</span> is_prime(qq):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;yes&quot;</span>, pp, qq)</span><br><span class="line"></span><br><span class="line"><span class="comment"># yes 295488723650623654106370451762393175957 302951519846417861008714825074296492447</span></span><br><span class="line"><span class="comment"># yes 7247215681561944590028089613581484765881 7247215681561944590028089613581484765881</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">295488723650623654106370451762393175957</span></span><br><span class="line">q = <span class="number">302951519846417861008714825074296492447</span></span><br><span class="line">C = <span class="number">179093209181929149953346613617854206675976823277412565868079070299728290913658</span></span><br><span class="line"></span><br><span class="line">ccc = p**<span class="number">2</span>+q**<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(ccc==C)</span><br><span class="line"></span><br><span class="line">c = <span class="number">18947793008364154366082991046877977562448549186943043756326365751169362247521</span></span><br><span class="line">n = p*q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">e = <span class="number">44519</span></span><br><span class="line">d = inverse(e,phi)</span><br><span class="line"><span class="built_in">print</span>(libnum.gcd(e,phi))</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># D0g3xGC&#123;EZ_DSA_@nd_C0mplex_QAQ&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<p>复数域分解那边，稍稍有点问题，sage版本不同，输出结果也不尽相同，少一个判断条件就行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">N = <span class="number">179093209181929149953346613617854206675976823277412565868079070299728290913658</span></span><br><span class="line"></span><br><span class="line">Zn = ZZ[i](N)</span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> divisors(Zn):</span><br><span class="line">    p, q = <span class="built_in">map</span>(<span class="built_in">int</span>, d)</span><br><span class="line">    <span class="comment"># if is_prime(p) and is_prime(q) and d.norm() == N:</span></span><br><span class="line">    <span class="keyword">if</span> is_prime(q):</span><br><span class="line">        <span class="built_in">print</span>(p)</span><br><span class="line">        <span class="built_in">print</span>(q)</span><br><span class="line"></span><br><span class="line"><span class="comment"># -7247215681561944590028089613581484765881</span></span><br><span class="line"><span class="comment"># 7247215681561944590028089613581484765881</span></span><br><span class="line"><span class="comment"># -302951519846417861008714825074296492447</span></span><br><span class="line"><span class="comment"># 295488723650623654106370451762393175957</span></span><br><span class="line"><span class="comment"># -108</span></span><br><span class="line"><span class="comment"># 43</span></span><br><span class="line"><span class="comment"># 0</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 108</span></span><br><span class="line"><span class="comment"># 43</span></span><br><span class="line"><span class="comment"># 13513</span></span><br><span class="line"><span class="comment"># 13513</span></span><br><span class="line"><span class="comment"># 2196800710668294903</span></span><br><span class="line"><span class="comment"># 4459379860824713653</span></span><br><span class="line"><span class="comment"># 157606014243244438240601</span></span><br><span class="line"><span class="comment"># 157606014243244438240601</span></span><br></pre></td></tr></table></figure>
<p>附上官方解：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">C=<span class="number">179093209181929149953346613617854206675976823277412565868079070299728290913658</span></span><br><span class="line">f = ZZ[I](C)</span><br><span class="line">divisors_f = divisors(f)</span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> divisors_f:</span><br><span class="line">    a,b = d.real(), d.imag()</span><br><span class="line">    <span class="keyword">if</span> a**<span class="number">2</span> + b**<span class="number">2</span> == C:</span><br><span class="line">        p = <span class="built_in">abs</span>(<span class="built_in">int</span>(a))</span><br><span class="line">        q = <span class="built_in">abs</span>(<span class="built_in">int</span>(b))</span><br><span class="line">        <span class="keyword">if</span> is_prime(p) <span class="keyword">and</span> is_prime(q):</span><br><span class="line">            <span class="built_in">print</span>(p)</span><br><span class="line">            <span class="built_in">print</span>(q)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 302951519846417861008714825074296492447</span></span><br><span class="line"><span class="comment"># 295488723650623654106370451762393175957</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="babyRSA"><a href="#babyRSA" class="headerlink" title="babyRSA"></a>babyRSA</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;D0g3xGC&#123;****************&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_key</span>(<span class="params">p, q</span>):</span><br><span class="line">    public_key = p*p*q</span><br><span class="line">    e = public_key</span><br><span class="line">    n = p*q</span><br><span class="line">    phi_n = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    private_key = inverse(e,phi_n)</span><br><span class="line">    <span class="keyword">return</span> public_key,private_key,e</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">N,d,e = gen_key(p,q)</span><br><span class="line"></span><br><span class="line">c = gmpy2.powmod(bytes_to_long(flag),e,N)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(N)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 539403894871945779827202174061302970341082455928364137444962844359039924160163196863639732747261316352083923762760392277536591121706270680734175544093484423564223679628430671167864783270170316881238613070741410367403388936640139281272357761773388084534717028640788227350254140821128908338938211038299089224967666902522698905762169859839320277939509727532793553875254243396522340305880944219886874086251872580220405893975158782585205038779055706441633392356197489</span></span><br><span class="line"><span class="string">d = 58169755386408729394668831947856757060407423126014928705447058468355548861569452522734305188388017764321018770435192767746145932739423507387500606563617116764196418533748380893094448060562081543927295828007016873588530479985728135015510171217414380395169021607415979109815455365309760152218352878885075237009</span></span><br><span class="line"><span class="string">c = 82363935080688828403687816407414245190197520763274791336321809938555352729292372511750720874636733170318783864904860402219217916275532026726988967173244517058861515301795651235356589935260088896862597321759820481288634232602161279508285376396160040216717452399727353343286840178630019331762024227868572613111538565515895048015318352044475799556833174329418774012639769680007774968870455333386419199820213165698948819857171366903857477182306178673924861370469175</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>exp：</p>
<p>已知ed分解n（多运行几遍，输出结果p、q的对位不尽相同，可手动判断）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">factor_with_ed</span>(<span class="params">e,d,n</span>):</span><br><span class="line">    p=<span class="number">1</span></span><br><span class="line">    q=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> p==<span class="number">1</span> <span class="keyword">and</span> q==<span class="number">1</span>:</span><br><span class="line">        k = e*d -<span class="number">1</span></span><br><span class="line">        g = random.randint(<span class="number">1</span>,n)</span><br><span class="line">        <span class="keyword">while</span> k%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">            k //= <span class="number">2</span></span><br><span class="line">            x = <span class="built_in">pow</span>(g,k,n)</span><br><span class="line">            <span class="keyword">if</span> x&gt;<span class="number">1</span> <span class="keyword">and</span> libnum.gcd(x-<span class="number">1</span>,n)&gt;<span class="number">1</span>:</span><br><span class="line">                p = libnum.gcd(x-<span class="number">1</span>,n)</span><br><span class="line">                q = n//p</span><br><span class="line">    <span class="keyword">return</span> p,q</span><br><span class="line"></span><br><span class="line">n = <span class="number">539403894871945779827202174061302970341082455928364137444962844359039924160163196863639732747261316352083923762760392277536591121706270680734175544093484423564223679628430671167864783270170316881238613070741410367403388936640139281272357761773388084534717028640788227350254140821128908338938211038299089224967666902522698905762169859839320277939509727532793553875254243396522340305880944219886874086251872580220405893975158782585205038779055706441633392356197489</span></span><br><span class="line">d = <span class="number">58169755386408729394668831947856757060407423126014928705447058468355548861569452522734305188388017764321018770435192767746145932739423507387500606563617116764196418533748380893094448060562081543927295828007016873588530479985728135015510171217414380395169021607415979109815455365309760152218352878885075237009</span></span><br><span class="line">c = <span class="number">82363935080688828403687816407414245190197520763274791336321809938555352729292372511750720874636733170318783864904860402219217916275532026726988967173244517058861515301795651235356589935260088896862597321759820481288634232602161279508285376396160040216717452399727353343286840178630019331762024227868572613111538565515895048015318352044475799556833174329418774012639769680007774968870455333386419199820213165698948819857171366903857477182306178673924861370469175</span></span><br><span class="line">e = n</span><br><span class="line"></span><br><span class="line">q,p = factor_with_ed(e,d,n)</span><br><span class="line"><span class="comment"># p = libnum.nroot(p,2)</span></span><br><span class="line">m = <span class="built_in">pow</span>(c,d,p)</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(m))</span><br><span class="line"></span><br><span class="line"><span class="comment"># D0g3xGC&#123;W1sh_Y0u_Go0d_L@ucK-111&#125;</span></span><br></pre></td></tr></table></figure>
<hr>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXh0ZXJqaWUuZ2l0aHViLmlvLzIwMjMvMTEvMjkv6LWb6aKY5aSN546wLzIwMjNJU0NURi8/aGlnaGxpZ2h0PWUlM0RuI3NpZ25pbg==">2023ISCTF | DexterJie’Blog<i class="fa fa-external-link-alt"></i></span></p>
<p>考察<strong>Schmidt-Samoa密码系统</strong></p>
<p><img data-src="https://cdn.jsdelivr.net/gh/Wbuildings/hexoimage/imagesimage-20241207194115982.png" alt="image-20241207194115982"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">N = <span class="number">539403894871945779827202174061302970341082455928364137444962844359039924160163196863639732747261316352083923762760392277536591121706270680734175544093484423564223679628430671167864783270170316881238613070741410367403388936640139281272357761773388084534717028640788227350254140821128908338938211038299089224967666902522698905762169859839320277939509727532793553875254243396522340305880944219886874086251872580220405893975158782585205038779055706441633392356197489</span></span><br><span class="line">d = <span class="number">58169755386408729394668831947856757060407423126014928705447058468355548861569452522734305188388017764321018770435192767746145932739423507387500606563617116764196418533748380893094448060562081543927295828007016873588530479985728135015510171217414380395169021607415979109815455365309760152218352878885075237009</span></span><br><span class="line">c = <span class="number">82363935080688828403687816407414245190197520763274791336321809938555352729292372511750720874636733170318783864904860402219217916275532026726988967173244517058861515301795651235356589935260088896862597321759820481288634232602161279508285376396160040216717452399727353343286840178630019331762024227868572613111538565515895048015318352044475799556833174329418774012639769680007774968870455333386419199820213165698948819857171366903857477182306178673924861370469175</span></span><br><span class="line">e = N</span><br><span class="line">q = <span class="number">11682728569119442765104955520443100815157800894598441208197112854870727710574811372574729254669600080697371923918009290021699237499317800284984683861345681</span></span><br><span class="line">p = <span class="number">46171054277314433550502593578876802976126614469930960512504812790589501500634087385124270498497135178250381413608162419922589329573991058504482940549550990812496782396771932599800636901295867760056413478165542887208036189079832707301595316035118578227851919617106397634601546986746993172265255550456834105569</span></span><br><span class="line"></span><br><span class="line">tmp = <span class="built_in">pow</span>(<span class="number">2</span>,d*N,N) - <span class="number">2</span></span><br><span class="line">pq = gmpy2.gcd(tmp,N)</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c,d,pq)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"><span class="comment"># D0g3xGC&#123;W1sh_Y0u_Go0d_L@ucK-111&#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="Curve"><a href="#Curve" class="headerlink" title="Curve"></a>Curve</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#sagemath</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">P, Q</span>):</span><br><span class="line">    (x1, y1) = P</span><br><span class="line">    (x2, y2) = Q</span><br><span class="line"></span><br><span class="line">    x3 = (x1*y2 + y1*x2) * inverse(<span class="number">1</span> + d*x1*x2*y1*y2, p) % p</span><br><span class="line">    y3 = (y1*y2 - a*x1*x2) * inverse(<span class="number">1</span> - d*x1*x2*y1*y2, p) % p</span><br><span class="line">    <span class="keyword">return</span> (x3, y3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">x, P</span>):</span><br><span class="line">    Q = (<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> x &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            Q = add(Q, P)</span><br><span class="line">        P = add(P, P)</span><br><span class="line">        x = x &gt;&gt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> Q</span><br><span class="line"></span><br><span class="line">p = <span class="number">64141017538026690847507665744072764126523219720088055136531450296140542176327</span></span><br><span class="line">a = <span class="number">362</span></span><br><span class="line">d = <span class="number">7</span></span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">gx=bytes_to_long(<span class="string">b&#x27;D0g3xGC&#123;*****************&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">PR.&lt;y&gt;=PolynomialRing(Zmod(p))</span><br><span class="line">f=(d*gx^<span class="number">2</span>-<span class="number">1</span>)*y^<span class="number">2</span>+(<span class="number">1</span>-a*gx^<span class="number">2</span>)</span><br><span class="line">gy=<span class="built_in">int</span>(f.roots()[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> (a*gx^<span class="number">2</span>+gy^<span class="number">2</span>)%p==(<span class="number">1</span>+d*gx^<span class="number">2</span>*gy^<span class="number">2</span>)%p</span><br><span class="line"></span><br><span class="line">G=(gx,gy)</span><br><span class="line"></span><br><span class="line">eG = mul(e, G)</span><br><span class="line"><span class="built_in">print</span>(eG)</span><br><span class="line"></span><br><span class="line"><span class="comment">#eG = (34120664973166619886120801966861368419497948422807175421202190709822232354059, 11301243831592615312624457443883283529467532390028216735072818875052648928463)</span></span><br></pre></td></tr></table></figure>
<p>exp：</p>
<p>ECRSA ，<code>Twisted Edwards Curves--&gt;Montgomery curves--&gt;Weierstrass curves</code> </p>
<p>转成 Weierstrass curves，将 G求出来后再转回 <code>Twisted Edwards Curves</code> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> EllipticCurve</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = <span class="number">1</span></span><br><span class="line">eG = (<span class="number">34120664973166619886120801966861368419497948422807175421202190709822232354059</span>, <span class="number">11301243831592615312624457443883283529467532390028216735072818875052648928463</span>)</span><br><span class="line">p = <span class="number">64141017538026690847507665744072764126523219720088055136531450296140542176327</span></span><br><span class="line">a = <span class="number">362</span></span><br><span class="line">d = <span class="number">7</span></span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> (a * eG[<span class="number">0</span>] ** <span class="number">2</span> + eG[<span class="number">1</span>] ** <span class="number">2</span>) % p == c ** <span class="number">2</span> * (<span class="number">1</span> + d * eG[<span class="number">0</span>] ** <span class="number">2</span> * eG[<span class="number">1</span>] ** <span class="number">2</span>) % p</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;符合曲线方程 ax^2+y^2 = c^2(1+dx^2y^2)&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">TEdwards_to_TEdwards</span>(<span class="params">G, a, c, d</span>):</span><br><span class="line">    x, y = G</span><br><span class="line">    x1 = x * <span class="built_in">pow</span>(c, -<span class="number">1</span>, p)</span><br><span class="line">    y1 = y * <span class="built_in">pow</span>(c, -<span class="number">1</span>, p)</span><br><span class="line">    d = d * c ** <span class="number">4</span></span><br><span class="line">    G = (x1, y1)</span><br><span class="line">    <span class="keyword">return</span> (G, a, d)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">TEdwards_to_Montgomery</span>(<span class="params">G, a, d</span>):</span><br><span class="line">    x, y = G</span><br><span class="line">    A = <span class="number">2</span> * (a + d) * <span class="built_in">pow</span>(a - d, -<span class="number">1</span>, p)</span><br><span class="line">    B = <span class="number">4</span> * <span class="built_in">pow</span>(a - d, -<span class="number">1</span>, p)</span><br><span class="line">    u = (<span class="number">1</span> + y) * <span class="built_in">pow</span>(<span class="number">1</span> - y, -<span class="number">1</span>, p)</span><br><span class="line">    v = u * <span class="built_in">pow</span>(x, -<span class="number">1</span>, p)</span><br><span class="line">    G = (u, v)</span><br><span class="line">    <span class="keyword">return</span> (G, A, B)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Montgomery_to_Weierstrass</span>(<span class="params">G, A, B</span>):</span><br><span class="line">    x, y = G</span><br><span class="line">    u = x * <span class="built_in">pow</span>(B, -<span class="number">1</span>, p) + A * <span class="built_in">pow</span>(<span class="number">3</span> * B, -<span class="number">1</span>, p)</span><br><span class="line">    v = y * <span class="built_in">pow</span>(B, -<span class="number">1</span>, p)</span><br><span class="line">    a = (<span class="number">3</span> - A ** <span class="number">2</span>) * <span class="built_in">pow</span>(<span class="number">3</span> * B ** <span class="number">2</span>, -<span class="number">1</span>, p)</span><br><span class="line">    b = (<span class="number">2</span> * A ** <span class="number">3</span> - <span class="number">9</span> * A) * <span class="built_in">pow</span>(<span class="number">27</span> * B ** <span class="number">3</span>, -<span class="number">1</span>, p)</span><br><span class="line">    G = (u, v)</span><br><span class="line">    <span class="keyword">return</span> (G, a, b)</span><br><span class="line"></span><br><span class="line">S = eG</span><br><span class="line"></span><br><span class="line">S, a2, d2 = TEdwards_to_TEdwards(S, a, c, d)</span><br><span class="line">S, A2, B2 = TEdwards_to_Montgomery(S, a2, d2)</span><br><span class="line">S, a2, b2 = Montgomery_to_Weierstrass(S, A2, B2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> S[<span class="number">1</span>] ** <span class="number">2</span> % p == (S[<span class="number">0</span>] ** <span class="number">3</span> + a2 * S[<span class="number">0</span>] + b2) % p</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;符合曲线方程 y^2 = x^3+ax+b&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a2)</span><br><span class="line"><span class="comment"># -1224261044206399925356430010135296712635792417521135910885416781888600933905620865199856868360889789284943068368564365666276380479381907366960457257772903953976709302103704785389309480484333474620264496615838536762521933374939312718759</span></span><br><span class="line"></span><br><span class="line">E = EllipticCurve(GF(p), [a2, b2])</span><br><span class="line"></span><br><span class="line">S = E(S)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 曲线基点的阶</span></span><br><span class="line"><span class="comment"># n = E.order()</span></span><br><span class="line">order1 = E.order()</span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e,order1)</span><br><span class="line"></span><br><span class="line">mx,my = (<span class="built_in">int</span>(d) * S).xy()</span><br><span class="line"><span class="built_in">print</span>(mx)</span><br><span class="line"><span class="built_in">print</span>(my)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(mx)))</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(my)))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(A2)</span><br><span class="line"><span class="built_in">print</span>(B2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 符合曲线方程 ax^2+y^2 = c^2(1+dx^2y^2)</span></span><br><span class="line"><span class="comment"># 符合曲线方程 y^2 = x^3+ax+b</span></span><br><span class="line"><span class="comment"># -1224261044206399925356430010135296712635792417521135910885416781888600933905620865199856868360889789284943068368564365666276380479381907366960457257772903953976709302103704785389309480484333474620264496615838536762521933374939312718759</span></span><br><span class="line"><span class="comment"># 27187730508972340952968757317784016242701318562300937028671961847912353008932</span></span><br><span class="line"><span class="comment"># 28762061935048981479334030974369661189235127913239080624566845477265058969851</span></span><br><span class="line"><span class="comment"># b&#x27;&lt;\x1b\xb5\xccEhK2\xce\x94Q\xa8Ll3\xb6\x87\xd8\x85\xa0h\xe5\x01x\xd4\x96]\xbbI\\\x8d$&#x27;</span></span><br><span class="line"><span class="comment"># b&#x27;?\x96\xc0\n[\xff,u\xe2\xc8\xe9\xc0v\xf7X\x84\x8c\xc7\xddU\xa8E\xa1\xe2\x9c\x1b\xe2M\xb6\x9a8\xfb&#x27;</span></span><br><span class="line"><span class="comment"># 30268417194578758903998786511102912346647687061485835281133993640313353432764388</span></span><br><span class="line"><span class="comment"># 164056461759234465604329466184839633315163615509408321306959315123649612101704</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">x = <span class="number">27187730508972340952968757317784016242701318562300937028671961847912353008932</span></span><br><span class="line">y = <span class="number">28762061935048981479334030974369661189235127913239080624566845477265058969851</span></span><br><span class="line">p = <span class="number">64141017538026690847507665744072764126523219720088055136531450296140542176327</span></span><br><span class="line"></span><br><span class="line">GG = (x,y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Montgomery_to_Weierstrass_inv</span>(<span class="params">G, A, B</span>):</span><br><span class="line">    x, y = G</span><br><span class="line">    u = (x - A * <span class="built_in">pow</span>(<span class="number">3</span> * B, -<span class="number">1</span>, p))*B</span><br><span class="line">    v = y * B</span><br><span class="line">    G = (u, v)</span><br><span class="line">    <span class="keyword">return</span> (G)</span><br><span class="line"></span><br><span class="line">A2 = <span class="number">30268417194578758903998786511102912346647687061485835281133993640313353432764388</span></span><br><span class="line">B2 = <span class="number">164056461759234465604329466184839633315163615509408321306959315123649612101704</span></span><br><span class="line">GM = Montgomery_to_Weierstrass_inv(GG,A2,B2)</span><br><span class="line">Gx,Gy =(GM)</span><br><span class="line"></span><br><span class="line">x = libnum.invmod(Gy,p)*Gx % p    </span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(x.bit_length())</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(x))</span><br><span class="line"></span><br><span class="line"><span class="comment"># D0g3xGC&#123;SOlvE_The_Edcurv3&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>Wp</tag>
        <tag>DSA</tag>
        <tag>Schmidt-Samoa</tag>
        <tag>ECRSA</tag>
      </tags>
  </entry>
</search>
